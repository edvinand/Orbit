
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	40 1f 00 20 51 53 00 00 ed f0 00 00 09 53 00 00     @.. QS.......S..
  10:	09 53 00 00 09 53 00 00 09 53 00 00 00 00 00 00     .S...S...S......
	...
  2c:	c5 43 00 00 09 53 00 00 00 00 00 00 6d 43 00 00     .C...S......mC..
  3c:	09 53 00 00                                         .S..

00000040 <_irq_vector_table>:
  40:	a5 44 00 00 a5 44 00 00 a5 44 00 00 a5 44 00 00     .D...D...D...D..
  50:	a5 44 00 00 a5 44 00 00 a5 44 00 00 a5 44 00 00     .D...D...D...D..
  60:	a5 44 00 00 a5 44 00 00 a5 44 00 00 a5 44 00 00     .D...D...D...D..
  70:	a5 44 00 00 a5 44 00 00 a5 44 00 00 a5 44 00 00     .D...D...D...D..
  80:	a5 44 00 00 a5 44 00 00 a5 44 00 00 a5 44 00 00     .D...D...D...D..
  90:	a5 44 00 00 a5 44 00 00 a5 44 00 00 a5 44 00 00     .D...D...D...D..
  a0:	a5 44 00 00 a5 44 00 00 a5 44 00 00 a5 44 00 00     .D...D...D...D..
  b0:	a5 44 00 00 a5 44 00 00 a5 44 00 00 a5 44 00 00     .D...D...D...D..
  c0:	a5 44 00 00 a5 44 00 00 a5 44 00 00 a5 44 00 00     .D...D...D...D..
  d0:	a5 44 00 00 a5 44 00 00 a5 44 00 00 a5 44 00 00     .D...D...D...D..
  e0:	a5 44 00 00 a5 44 00 00 a5 44 00 00 a5 44 00 00     .D...D...D...D..
  f0:	a5 44 00 00 a5 44 00 00 a5 44 00 00 a5 44 00 00     .D...D...D...D..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f808 	bl	134 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <__udivmoddi4>:
     134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     138:	4607      	mov	r7, r0
     13a:	468c      	mov	ip, r1
     13c:	4608      	mov	r0, r1
     13e:	9e09      	ldr	r6, [sp, #36]	; 0x24
     140:	4615      	mov	r5, r2
     142:	463c      	mov	r4, r7
     144:	4619      	mov	r1, r3
     146:	2b00      	cmp	r3, #0
     148:	f040 80c6 	bne.w	2d8 <__data_size+0x14b>
     14c:	4282      	cmp	r2, r0
     14e:	fab2 f782 	clz	r7, r2
     152:	d946      	bls.n	1e2 <__data_size+0x55>
     154:	b14f      	cbz	r7, 16a <CONFIG_IDLE_STACK_SIZE+0x2a>
     156:	f1c7 0e20 	rsb	lr, r7, #32
     15a:	fa24 fe0e 	lsr.w	lr, r4, lr
     15e:	fa00 f307 	lsl.w	r3, r0, r7
     162:	40bd      	lsls	r5, r7
     164:	ea4e 0c03 	orr.w	ip, lr, r3
     168:	40bc      	lsls	r4, r7
     16a:	ea4f 4815 	mov.w	r8, r5, lsr #16
     16e:	fa1f fe85 	uxth.w	lr, r5
     172:	fbbc f9f8 	udiv	r9, ip, r8
     176:	0c22      	lsrs	r2, r4, #16
     178:	fb08 c319 	mls	r3, r8, r9, ip
     17c:	fb09 fa0e 	mul.w	sl, r9, lr
     180:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     184:	459a      	cmp	sl, r3
     186:	d928      	bls.n	1da <__data_size+0x4d>
     188:	18eb      	adds	r3, r5, r3
     18a:	f109 30ff 	add.w	r0, r9, #4294967295
     18e:	d204      	bcs.n	19a <__data_size+0xd>
     190:	459a      	cmp	sl, r3
     192:	d902      	bls.n	19a <__data_size+0xd>
     194:	f1a9 0002 	sub.w	r0, r9, #2
     198:	442b      	add	r3, r5
     19a:	eba3 030a 	sub.w	r3, r3, sl
     19e:	b2a4      	uxth	r4, r4
     1a0:	fbb3 f2f8 	udiv	r2, r3, r8
     1a4:	fb08 3312 	mls	r3, r8, r2, r3
     1a8:	fb02 fe0e 	mul.w	lr, r2, lr
     1ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1b0:	45a6      	cmp	lr, r4
     1b2:	d914      	bls.n	1de <__data_size+0x51>
     1b4:	192c      	adds	r4, r5, r4
     1b6:	f102 33ff 	add.w	r3, r2, #4294967295
     1ba:	d203      	bcs.n	1c4 <__data_size+0x37>
     1bc:	45a6      	cmp	lr, r4
     1be:	d901      	bls.n	1c4 <__data_size+0x37>
     1c0:	1e93      	subs	r3, r2, #2
     1c2:	442c      	add	r4, r5
     1c4:	eba4 040e 	sub.w	r4, r4, lr
     1c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     1cc:	b11e      	cbz	r6, 1d6 <__data_size+0x49>
     1ce:	40fc      	lsrs	r4, r7
     1d0:	2300      	movs	r3, #0
     1d2:	6034      	str	r4, [r6, #0]
     1d4:	6073      	str	r3, [r6, #4]
     1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     1da:	4648      	mov	r0, r9
     1dc:	e7dd      	b.n	19a <__data_size+0xd>
     1de:	4613      	mov	r3, r2
     1e0:	e7f0      	b.n	1c4 <__data_size+0x37>
     1e2:	b902      	cbnz	r2, 1e6 <__data_size+0x59>
     1e4:	deff      	udf	#255	; 0xff
     1e6:	bb87      	cbnz	r7, 24a <__data_size+0xbd>
     1e8:	1a83      	subs	r3, r0, r2
     1ea:	2101      	movs	r1, #1
     1ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1f0:	b2aa      	uxth	r2, r5
     1f2:	fbb3 fcfe 	udiv	ip, r3, lr
     1f6:	0c20      	lsrs	r0, r4, #16
     1f8:	fb0e 331c 	mls	r3, lr, ip, r3
     1fc:	fb0c f802 	mul.w	r8, ip, r2
     200:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     204:	4598      	cmp	r8, r3
     206:	d963      	bls.n	2d0 <__data_size+0x143>
     208:	18eb      	adds	r3, r5, r3
     20a:	f10c 30ff 	add.w	r0, ip, #4294967295
     20e:	d204      	bcs.n	21a <__data_size+0x8d>
     210:	4598      	cmp	r8, r3
     212:	d902      	bls.n	21a <__data_size+0x8d>
     214:	f1ac 0002 	sub.w	r0, ip, #2
     218:	442b      	add	r3, r5
     21a:	eba3 0308 	sub.w	r3, r3, r8
     21e:	b2a4      	uxth	r4, r4
     220:	fbb3 fcfe 	udiv	ip, r3, lr
     224:	fb0e 331c 	mls	r3, lr, ip, r3
     228:	fb0c f202 	mul.w	r2, ip, r2
     22c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     230:	42a2      	cmp	r2, r4
     232:	d94f      	bls.n	2d4 <__data_size+0x147>
     234:	192c      	adds	r4, r5, r4
     236:	f10c 33ff 	add.w	r3, ip, #4294967295
     23a:	d204      	bcs.n	246 <__data_size+0xb9>
     23c:	42a2      	cmp	r2, r4
     23e:	d902      	bls.n	246 <__data_size+0xb9>
     240:	f1ac 0302 	sub.w	r3, ip, #2
     244:	442c      	add	r4, r5
     246:	1aa4      	subs	r4, r4, r2
     248:	e7be      	b.n	1c8 <__data_size+0x3b>
     24a:	f1c7 0c20 	rsb	ip, r7, #32
     24e:	fa20 f80c 	lsr.w	r8, r0, ip
     252:	fa00 f307 	lsl.w	r3, r0, r7
     256:	fa24 fc0c 	lsr.w	ip, r4, ip
     25a:	40bd      	lsls	r5, r7
     25c:	ea4c 0203 	orr.w	r2, ip, r3
     260:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     264:	b2ab      	uxth	r3, r5
     266:	fbb8 fcfe 	udiv	ip, r8, lr
     26a:	0c11      	lsrs	r1, r2, #16
     26c:	fb0e 801c 	mls	r0, lr, ip, r8
     270:	fb0c f903 	mul.w	r9, ip, r3
     274:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     278:	4581      	cmp	r9, r0
     27a:	fa04 f407 	lsl.w	r4, r4, r7
     27e:	d923      	bls.n	2c8 <__data_size+0x13b>
     280:	1828      	adds	r0, r5, r0
     282:	f10c 31ff 	add.w	r1, ip, #4294967295
     286:	d204      	bcs.n	292 <__data_size+0x105>
     288:	4581      	cmp	r9, r0
     28a:	d902      	bls.n	292 <__data_size+0x105>
     28c:	f1ac 0102 	sub.w	r1, ip, #2
     290:	4428      	add	r0, r5
     292:	eba0 0009 	sub.w	r0, r0, r9
     296:	b292      	uxth	r2, r2
     298:	fbb0 fcfe 	udiv	ip, r0, lr
     29c:	fb0e 001c 	mls	r0, lr, ip, r0
     2a0:	fb0c f803 	mul.w	r8, ip, r3
     2a4:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     2a8:	4598      	cmp	r8, r3
     2aa:	d90f      	bls.n	2cc <__data_size+0x13f>
     2ac:	18eb      	adds	r3, r5, r3
     2ae:	f10c 32ff 	add.w	r2, ip, #4294967295
     2b2:	d204      	bcs.n	2be <__data_size+0x131>
     2b4:	4598      	cmp	r8, r3
     2b6:	d902      	bls.n	2be <__data_size+0x131>
     2b8:	f1ac 0202 	sub.w	r2, ip, #2
     2bc:	442b      	add	r3, r5
     2be:	eba3 0308 	sub.w	r3, r3, r8
     2c2:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     2c6:	e791      	b.n	1ec <__data_size+0x5f>
     2c8:	4661      	mov	r1, ip
     2ca:	e7e2      	b.n	292 <__data_size+0x105>
     2cc:	4662      	mov	r2, ip
     2ce:	e7f6      	b.n	2be <__data_size+0x131>
     2d0:	4660      	mov	r0, ip
     2d2:	e7a2      	b.n	21a <__data_size+0x8d>
     2d4:	4663      	mov	r3, ip
     2d6:	e7b6      	b.n	246 <__data_size+0xb9>
     2d8:	4283      	cmp	r3, r0
     2da:	d905      	bls.n	2e8 <__data_size+0x15b>
     2dc:	b10e      	cbz	r6, 2e2 <__data_size+0x155>
     2de:	e9c6 7000 	strd	r7, r0, [r6]
     2e2:	2100      	movs	r1, #0
     2e4:	4608      	mov	r0, r1
     2e6:	e776      	b.n	1d6 <__data_size+0x49>
     2e8:	fab3 f183 	clz	r1, r3
     2ec:	b981      	cbnz	r1, 310 <__data_size+0x183>
     2ee:	4283      	cmp	r3, r0
     2f0:	d301      	bcc.n	2f6 <__data_size+0x169>
     2f2:	42ba      	cmp	r2, r7
     2f4:	d80a      	bhi.n	30c <__data_size+0x17f>
     2f6:	1abc      	subs	r4, r7, r2
     2f8:	eb60 0303 	sbc.w	r3, r0, r3
     2fc:	2001      	movs	r0, #1
     2fe:	469c      	mov	ip, r3
     300:	2e00      	cmp	r6, #0
     302:	d068      	beq.n	3d6 <__data_size+0x249>
     304:	e9c6 4c00 	strd	r4, ip, [r6]
     308:	2100      	movs	r1, #0
     30a:	e764      	b.n	1d6 <__data_size+0x49>
     30c:	4608      	mov	r0, r1
     30e:	e7f7      	b.n	300 <__data_size+0x173>
     310:	f1c1 0c20 	rsb	ip, r1, #32
     314:	408b      	lsls	r3, r1
     316:	fa22 f40c 	lsr.w	r4, r2, ip
     31a:	431c      	orrs	r4, r3
     31c:	fa02 f501 	lsl.w	r5, r2, r1
     320:	fa00 f301 	lsl.w	r3, r0, r1
     324:	fa27 f20c 	lsr.w	r2, r7, ip
     328:	fa20 fb0c 	lsr.w	fp, r0, ip
     32c:	ea4f 4914 	mov.w	r9, r4, lsr #16
     330:	4313      	orrs	r3, r2
     332:	fbbb f8f9 	udiv	r8, fp, r9
     336:	fa1f fe84 	uxth.w	lr, r4
     33a:	fb09 bb18 	mls	fp, r9, r8, fp
     33e:	0c1a      	lsrs	r2, r3, #16
     340:	fb08 fa0e 	mul.w	sl, r8, lr
     344:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     348:	4592      	cmp	sl, r2
     34a:	fa07 f701 	lsl.w	r7, r7, r1
     34e:	d93e      	bls.n	3ce <__data_size+0x241>
     350:	18a2      	adds	r2, r4, r2
     352:	f108 30ff 	add.w	r0, r8, #4294967295
     356:	d204      	bcs.n	362 <__data_size+0x1d5>
     358:	4592      	cmp	sl, r2
     35a:	d902      	bls.n	362 <__data_size+0x1d5>
     35c:	f1a8 0002 	sub.w	r0, r8, #2
     360:	4422      	add	r2, r4
     362:	eba2 020a 	sub.w	r2, r2, sl
     366:	b29b      	uxth	r3, r3
     368:	fbb2 f8f9 	udiv	r8, r2, r9
     36c:	fb09 2218 	mls	r2, r9, r8, r2
     370:	fb08 fe0e 	mul.w	lr, r8, lr
     374:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     378:	4596      	cmp	lr, r2
     37a:	d92a      	bls.n	3d2 <__data_size+0x245>
     37c:	18a2      	adds	r2, r4, r2
     37e:	f108 33ff 	add.w	r3, r8, #4294967295
     382:	d204      	bcs.n	38e <__data_size+0x201>
     384:	4596      	cmp	lr, r2
     386:	d902      	bls.n	38e <__data_size+0x201>
     388:	f1a8 0302 	sub.w	r3, r8, #2
     38c:	4422      	add	r2, r4
     38e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     392:	fba0 9305 	umull	r9, r3, r0, r5
     396:	eba2 020e 	sub.w	r2, r2, lr
     39a:	429a      	cmp	r2, r3
     39c:	46ce      	mov	lr, r9
     39e:	4698      	mov	r8, r3
     3a0:	d302      	bcc.n	3a8 <__data_size+0x21b>
     3a2:	d106      	bne.n	3b2 <__data_size+0x225>
     3a4:	454f      	cmp	r7, r9
     3a6:	d204      	bcs.n	3b2 <__data_size+0x225>
     3a8:	ebb9 0e05 	subs.w	lr, r9, r5
     3ac:	eb63 0804 	sbc.w	r8, r3, r4
     3b0:	3801      	subs	r0, #1
     3b2:	b186      	cbz	r6, 3d6 <__data_size+0x249>
     3b4:	ebb7 030e 	subs.w	r3, r7, lr
     3b8:	eb62 0708 	sbc.w	r7, r2, r8
     3bc:	fa07 fc0c 	lsl.w	ip, r7, ip
     3c0:	40cb      	lsrs	r3, r1
     3c2:	ea4c 0303 	orr.w	r3, ip, r3
     3c6:	40cf      	lsrs	r7, r1
     3c8:	e9c6 3700 	strd	r3, r7, [r6]
     3cc:	e79c      	b.n	308 <__data_size+0x17b>
     3ce:	4640      	mov	r0, r8
     3d0:	e7c7      	b.n	362 <__data_size+0x1d5>
     3d2:	4643      	mov	r3, r8
     3d4:	e7db      	b.n	38e <__data_size+0x201>
     3d6:	4631      	mov	r1, r6
     3d8:	e6fd      	b.n	1d6 <__data_size+0x49>
	...

000003dc <button_handler>:

void button_handler(uint32_t button_state, uint32_t has_changed)
{
    // int err;
	int button_pressed = 0;
	if (has_changed & button_state)
     3dc:	4208      	tst	r0, r1
     3de:	d059      	beq.n	494 <CONFIG_FLASH_SIZE+0x94>
{
     3e0:	b5b0      	push	{r4, r5, r7, lr}
     3e2:	b082      	sub	sp, #8
     3e4:	af00      	add	r7, sp, #0
	{
		switch (has_changed)
     3e6:	3901      	subs	r1, #1
     3e8:	2907      	cmp	r1, #7
     3ea:	d805      	bhi.n	3f8 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x10>
     3ec:	e8df f001 	tbb	[pc, r1]
     3f0:	4a04433e 	.word	0x4a04433e
     3f4:	48040404 	.word	0x48040404
     3f8:	2000      	movs	r0, #0
				button_pressed = 4;
				break;
			default:
				break;
		}
        LOG_INF("Button %d pressed.", button_pressed);
     3fa:	466c      	mov	r4, sp
     3fc:	b088      	sub	sp, #32
     3fe:	466b      	mov	r3, sp
     400:	f113 0210 	adds.w	r2, r3, #16
     404:	d040      	beq.n	488 <CONFIG_FLASH_SIZE+0x88>
     406:	210c      	movs	r1, #12
     408:	b11a      	cbz	r2, 412 <CONFIG_FLASH_SIZE+0x12>
     40a:	2904      	cmp	r1, #4
     40c:	dd01      	ble.n	412 <CONFIG_FLASH_SIZE+0x12>
     40e:	4d22      	ldr	r5, [pc, #136]	; (498 <CONFIG_FLASH_SIZE+0x98>)
     410:	615d      	str	r5, [r3, #20]
     412:	b112      	cbz	r2, 41a <CONFIG_FLASH_SIZE+0x1a>
     414:	2908      	cmp	r1, #8
     416:	dd00      	ble.n	41a <CONFIG_FLASH_SIZE+0x1a>
     418:	6198      	str	r0, [r3, #24]
     41a:	290b      	cmp	r1, #11
     41c:	dd37      	ble.n	48e <CONFIG_FLASH_SIZE+0x8e>
     41e:	f04f 0c0c 	mov.w	ip, #12
     422:	b13a      	cbz	r2, 434 <CONFIG_FLASH_SIZE+0x34>
     424:	2103      	movs	r1, #3
     426:	7139      	strb	r1, [r7, #4]
     428:	2100      	movs	r1, #0
     42a:	7179      	strb	r1, [r7, #5]
     42c:	71b9      	strb	r1, [r7, #6]
     42e:	71f9      	strb	r1, [r7, #7]
     430:	6878      	ldr	r0, [r7, #4]
     432:	6118      	str	r0, [r3, #16]
     434:	2100      	movs	r1, #0
     436:	f36f 0100 	bfc	r1, #0, #1
     43a:	f36f 0141 	bfc	r1, #1, #1
     43e:	f36f 0182 	bfc	r1, #2, #1
     442:	f36f 01c5 	bfc	r1, #3, #3
     446:	2303      	movs	r3, #3
     448:	f363 1188 	bfi	r1, r3, #6, #3
     44c:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
     450:	f36c 2152 	bfi	r1, ip, #9, #10
     454:	f36f 41de 	bfc	r1, #19, #12
     458:	f36f 71df 	bfc	r1, #31, #1
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
     45c:	2300      	movs	r3, #0
     45e:	480f      	ldr	r0, [pc, #60]	; (49c <CONFIG_FLASH_SIZE+0x9c>)
     460:	f002 ffc4 	bl	33ec <z_impl_z_log_msg_static_create>
     464:	46a5      	mov	sp, r4
        // err = send_button_notification(current_conn, button_pressed);
        // if (err) {
        //     LOG_ERR("Couldn't send notification. Err %d", err);
        // }
    }
}
     466:	3708      	adds	r7, #8
     468:	46bd      	mov	sp, r7
     46a:	bdb0      	pop	{r4, r5, r7, pc}
                set_motor_angle(1);
     46c:	2001      	movs	r0, #1
     46e:	f000 fda3 	bl	fb8 <set_motor_angle>
				button_pressed = 1;
     472:	2001      	movs	r0, #1
				break;
     474:	e7c1      	b.n	3fa <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x12>
                set_motor_angle(2);
     476:	2002      	movs	r0, #2
     478:	f000 fd9e 	bl	fb8 <set_motor_angle>
				button_pressed = 2;
     47c:	2002      	movs	r0, #2
				break;
     47e:	e7bc      	b.n	3fa <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x12>
				button_pressed = 4;
     480:	2004      	movs	r0, #4
				break;
     482:	e7ba      	b.n	3fa <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x12>
				button_pressed = 3;
     484:	2003      	movs	r0, #3
     486:	e7b8      	b.n	3fa <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x12>
        LOG_INF("Button %d pressed.", button_pressed);
     488:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
     48c:	e7bc      	b.n	408 <CONFIG_FLASH_SIZE+0x8>
     48e:	f06f 0c1b 	mvn.w	ip, #27
     492:	e7c6      	b.n	422 <CONFIG_FLASH_SIZE+0x22>
     494:	4770      	bx	lr
     496:	bf00      	nop
     498:	000101f8 	.word	0x000101f8
     49c:	00010124 	.word	0x00010124

000004a0 <configure_dk_buttons_and_leds>:


/* Configurations */
static void configure_dk_buttons_and_leds(void)
{
     4a0:	b5b0      	push	{r4, r5, r7, lr}
     4a2:	b082      	sub	sp, #8
     4a4:	af00      	add	r7, sp, #0
    int err;
    err = dk_leds_init();
     4a6:	f007 ff87 	bl	83b8 <dk_leds_init>
    if (err) {
     4aa:	b3b0      	cbz	r0, 51a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x32>
     4ac:	4605      	mov	r5, r0
        LOG_ERR("Couldn't init LEDs (err %d)", err);
     4ae:	466c      	mov	r4, sp
     4b0:	b088      	sub	sp, #32
     4b2:	466b      	mov	r3, sp
     4b4:	f113 0210 	adds.w	r2, r3, #16
     4b8:	d06d      	beq.n	596 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xae>
     4ba:	210c      	movs	r1, #12
     4bc:	b11a      	cbz	r2, 4c6 <configure_dk_buttons_and_leds+0x26>
     4be:	2904      	cmp	r1, #4
     4c0:	dd01      	ble.n	4c6 <configure_dk_buttons_and_leds+0x26>
     4c2:	483b      	ldr	r0, [pc, #236]	; (5b0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc8>)
     4c4:	6158      	str	r0, [r3, #20]
     4c6:	b112      	cbz	r2, 4ce <configure_dk_buttons_and_leds+0x2e>
     4c8:	2908      	cmp	r1, #8
     4ca:	dd00      	ble.n	4ce <configure_dk_buttons_and_leds+0x2e>
     4cc:	619d      	str	r5, [r3, #24]
     4ce:	290b      	cmp	r1, #11
     4d0:	dd64      	ble.n	59c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb4>
     4d2:	f04f 0c0c 	mov.w	ip, #12
     4d6:	b13a      	cbz	r2, 4e8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE>
     4d8:	2103      	movs	r1, #3
     4da:	7139      	strb	r1, [r7, #4]
     4dc:	2100      	movs	r1, #0
     4de:	7179      	strb	r1, [r7, #5]
     4e0:	71b9      	strb	r1, [r7, #6]
     4e2:	71f9      	strb	r1, [r7, #7]
     4e4:	6878      	ldr	r0, [r7, #4]
     4e6:	6118      	str	r0, [r3, #16]
     4e8:	2100      	movs	r1, #0
     4ea:	f36f 0100 	bfc	r1, #0, #1
     4ee:	f36f 0141 	bfc	r1, #1, #1
     4f2:	f36f 0182 	bfc	r1, #2, #1
     4f6:	f36f 01c5 	bfc	r1, #3, #3
     4fa:	2301      	movs	r3, #1
     4fc:	f363 1188 	bfi	r1, r3, #6, #3
     500:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
     504:	f36c 2152 	bfi	r1, ip, #9, #10
     508:	f36f 41de 	bfc	r1, #19, #12
     50c:	f36f 71df 	bfc	r1, #31, #1
     510:	2300      	movs	r3, #0
     512:	4828      	ldr	r0, [pc, #160]	; (5b4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xcc>)
     514:	f002 ff6a 	bl	33ec <z_impl_z_log_msg_static_create>
     518:	46a5      	mov	sp, r4
    }
    err = dk_buttons_init(button_handler);
     51a:	4827      	ldr	r0, [pc, #156]	; (5b8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd0>)
     51c:	f007 fd78 	bl	8010 <dk_buttons_init>
    if (err) {
     520:	4605      	mov	r5, r0
     522:	b3a8      	cbz	r0, 590 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa8>
        LOG_ERR("Couldn't init buttons (err %d)", err);
     524:	466c      	mov	r4, sp
     526:	b088      	sub	sp, #32
     528:	466b      	mov	r3, sp
     52a:	f113 0210 	adds.w	r2, r3, #16
     52e:	d038      	beq.n	5a2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xba>
     530:	210c      	movs	r1, #12
     532:	b11a      	cbz	r2, 53c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x54>
     534:	2904      	cmp	r1, #4
     536:	dd01      	ble.n	53c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x54>
     538:	4820      	ldr	r0, [pc, #128]	; (5bc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd4>)
     53a:	6158      	str	r0, [r3, #20]
     53c:	b112      	cbz	r2, 544 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5c>
     53e:	2908      	cmp	r1, #8
     540:	dd00      	ble.n	544 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5c>
     542:	619d      	str	r5, [r3, #24]
     544:	290b      	cmp	r1, #11
     546:	dd2f      	ble.n	5a8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc0>
     548:	f04f 0c0c 	mov.w	ip, #12
     54c:	b13a      	cbz	r2, 55e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x76>
     54e:	2103      	movs	r1, #3
     550:	7139      	strb	r1, [r7, #4]
     552:	2100      	movs	r1, #0
     554:	7179      	strb	r1, [r7, #5]
     556:	71b9      	strb	r1, [r7, #6]
     558:	71f9      	strb	r1, [r7, #7]
     55a:	6878      	ldr	r0, [r7, #4]
     55c:	6118      	str	r0, [r3, #16]
     55e:	2100      	movs	r1, #0
     560:	f36f 0100 	bfc	r1, #0, #1
     564:	f36f 0141 	bfc	r1, #1, #1
     568:	f36f 0182 	bfc	r1, #2, #1
     56c:	f36f 01c5 	bfc	r1, #3, #3
     570:	2301      	movs	r3, #1
     572:	f363 1188 	bfi	r1, r3, #6, #3
     576:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
     57a:	f36c 2152 	bfi	r1, ip, #9, #10
     57e:	f36f 41de 	bfc	r1, #19, #12
     582:	f36f 71df 	bfc	r1, #31, #1
     586:	2300      	movs	r3, #0
     588:	480a      	ldr	r0, [pc, #40]	; (5b4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xcc>)
     58a:	f002 ff2f 	bl	33ec <z_impl_z_log_msg_static_create>
     58e:	46a5      	mov	sp, r4
    }
}
     590:	3708      	adds	r7, #8
     592:	46bd      	mov	sp, r7
     594:	bdb0      	pop	{r4, r5, r7, pc}
        LOG_ERR("Couldn't init LEDs (err %d)", err);
     596:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
     59a:	e78f      	b.n	4bc <configure_dk_buttons_and_leds+0x1c>
     59c:	f06f 0c1b 	mvn.w	ip, #27
     5a0:	e799      	b.n	4d6 <configure_dk_buttons_and_leds+0x36>
        LOG_ERR("Couldn't init buttons (err %d)", err);
     5a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
     5a6:	e7c4      	b.n	532 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4a>
     5a8:	f06f 0c1b 	mvn.w	ip, #27
     5ac:	e7ce      	b.n	54c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x64>
     5ae:	bf00      	nop
     5b0:	0001020c 	.word	0x0001020c
     5b4:	00010124 	.word	0x00010124
     5b8:	000003dd 	.word	0x000003dd
     5bc:	00010228 	.word	0x00010228

000005c0 <main>:

void main(void)
{
     5c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     5c4:	b08a      	sub	sp, #40	; 0x28
     5c6:	af00      	add	r7, sp, #0
    int err;
    int blink_status = 0;
	LOG_INF("Hello World! %s", CONFIG_BOARD);
     5c8:	2302      	movs	r3, #2
     5ca:	713b      	strb	r3, [r7, #4]
     5cc:	466c      	mov	r4, sp
     5ce:	b088      	sub	sp, #32
     5d0:	466b      	mov	r3, sp
     5d2:	f113 0210 	adds.w	r2, r3, #16
     5d6:	f000 80d6 	beq.w	786 <main+0x1c6>
     5da:	260d      	movs	r6, #13
     5dc:	b11a      	cbz	r2, 5e6 <main+0x26>
     5de:	2e04      	cmp	r6, #4
     5e0:	dd01      	ble.n	5e6 <main+0x26>
     5e2:	49a8      	ldr	r1, [pc, #672]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     5e4:	6159      	str	r1, [r3, #20]
     5e6:	2102      	movs	r1, #2
     5e8:	7039      	strb	r1, [r7, #0]
     5ea:	b11a      	cbz	r2, 5f4 <main+0x34>
     5ec:	2e08      	cmp	r6, #8
     5ee:	dd01      	ble.n	5f4 <main+0x34>
     5f0:	49a5      	ldr	r1, [pc, #660]	; (888 <CONFIG_ISR_STACK_SIZE+0x88>)
     5f2:	6199      	str	r1, [r3, #24]
     5f4:	b12a      	cbz	r2, 602 <main+0x42>
     5f6:	f103 011c 	add.w	r1, r3, #28
     5fa:	2000      	movs	r0, #0
     5fc:	2800      	cmp	r0, #0
     5fe:	f000 80c5 	beq.w	78c <main+0x1cc>
     602:	2e0c      	cmp	r6, #12
     604:	f340 80cb 	ble.w	79e <main+0x1de>
     608:	260d      	movs	r6, #13
     60a:	b142      	cbz	r2, 61e <main+0x5e>
     60c:	2103      	movs	r1, #3
     60e:	7139      	strb	r1, [r7, #4]
     610:	2100      	movs	r1, #0
     612:	7179      	strb	r1, [r7, #5]
     614:	71b9      	strb	r1, [r7, #6]
     616:	2101      	movs	r1, #1
     618:	71f9      	strb	r1, [r7, #7]
     61a:	6878      	ldr	r0, [r7, #4]
     61c:	6118      	str	r0, [r3, #16]
     61e:	2100      	movs	r1, #0
     620:	f36f 0100 	bfc	r1, #0, #1
     624:	f36f 0141 	bfc	r1, #1, #1
     628:	f36f 0182 	bfc	r1, #2, #1
     62c:	f36f 01c5 	bfc	r1, #3, #3
     630:	2303      	movs	r3, #3
     632:	f363 1188 	bfi	r1, r3, #6, #3
     636:	f3c6 0609 	ubfx	r6, r6, #0, #10
     63a:	f366 2152 	bfi	r1, r6, #9, #10
     63e:	f36f 41de 	bfc	r1, #19, #12
     642:	f36f 71df 	bfc	r1, #31, #1
     646:	2300      	movs	r3, #0
     648:	4890      	ldr	r0, [pc, #576]	; (88c <CONFIG_ISR_STACK_SIZE+0x8c>)
     64a:	f002 fecf 	bl	33ec <z_impl_z_log_msg_static_create>
     64e:	46a5      	mov	sp, r4
    accel_values_t accel_values;
    //gyro_values_t gyro_values;

    configure_dk_buttons_and_leds();
     650:	f7ff ff26 	bl	4a0 <configure_dk_buttons_and_leds>

    err = mpu_sensor_init();
     654:	f00e f9b3 	bl	e9be <mpu_sensor_init>
    if (err) {
     658:	4604      	mov	r4, r0
     65a:	b3b0      	cbz	r0, 6ca <main+0x10a>
        LOG_ERR("mpu_init() failed. (err %08x)", err);
     65c:	466e      	mov	r6, sp
     65e:	b088      	sub	sp, #32
     660:	466b      	mov	r3, sp
     662:	f113 0210 	adds.w	r2, r3, #16
     666:	f000 809d 	beq.w	7a4 <main+0x1e4>
     66a:	210c      	movs	r1, #12
     66c:	b11a      	cbz	r2, 676 <main+0xb6>
     66e:	2904      	cmp	r1, #4
     670:	dd01      	ble.n	676 <main+0xb6>
     672:	4887      	ldr	r0, [pc, #540]	; (890 <CONFIG_ISR_STACK_SIZE+0x90>)
     674:	6158      	str	r0, [r3, #20]
     676:	b112      	cbz	r2, 67e <main+0xbe>
     678:	2908      	cmp	r1, #8
     67a:	dd00      	ble.n	67e <main+0xbe>
     67c:	619c      	str	r4, [r3, #24]
     67e:	290b      	cmp	r1, #11
     680:	f340 8093 	ble.w	7aa <main+0x1ea>
     684:	240c      	movs	r4, #12
     686:	b13a      	cbz	r2, 698 <main+0xd8>
     688:	2103      	movs	r1, #3
     68a:	7139      	strb	r1, [r7, #4]
     68c:	2100      	movs	r1, #0
     68e:	7179      	strb	r1, [r7, #5]
     690:	71b9      	strb	r1, [r7, #6]
     692:	71f9      	strb	r1, [r7, #7]
     694:	6878      	ldr	r0, [r7, #4]
     696:	6118      	str	r0, [r3, #16]
     698:	2100      	movs	r1, #0
     69a:	f36f 0100 	bfc	r1, #0, #1
     69e:	f36f 0141 	bfc	r1, #1, #1
     6a2:	f36f 0182 	bfc	r1, #2, #1
     6a6:	f36f 01c5 	bfc	r1, #3, #3
     6aa:	2301      	movs	r3, #1
     6ac:	f363 1188 	bfi	r1, r3, #6, #3
     6b0:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
     6b4:	f363 2152 	bfi	r1, r3, #9, #10
     6b8:	f36f 41de 	bfc	r1, #19, #12
     6bc:	f36f 71df 	bfc	r1, #31, #1
     6c0:	2300      	movs	r3, #0
     6c2:	4872      	ldr	r0, [pc, #456]	; (88c <CONFIG_ISR_STACK_SIZE+0x8c>)
     6c4:	f002 fe92 	bl	33ec <z_impl_z_log_msg_static_create>
     6c8:	46b5      	mov	sp, r6
    }

    err = motor_init();
     6ca:	f000 fbe1 	bl	e90 <motor_init>
    if (err) {
     6ce:	4604      	mov	r4, r0
     6d0:	b3a0      	cbz	r0, 73c <main+0x17c>
        LOG_ERR("motor_init() failed. (err %d)", err);
     6d2:	466e      	mov	r6, sp
     6d4:	b088      	sub	sp, #32
     6d6:	466b      	mov	r3, sp
     6d8:	f113 0210 	adds.w	r2, r3, #16
     6dc:	d068      	beq.n	7b0 <main+0x1f0>
     6de:	210c      	movs	r1, #12
     6e0:	b11a      	cbz	r2, 6ea <main+0x12a>
     6e2:	2904      	cmp	r1, #4
     6e4:	dd01      	ble.n	6ea <main+0x12a>
     6e6:	486b      	ldr	r0, [pc, #428]	; (894 <CONFIG_ISR_STACK_SIZE+0x94>)
     6e8:	6158      	str	r0, [r3, #20]
     6ea:	b112      	cbz	r2, 6f2 <main+0x132>
     6ec:	2908      	cmp	r1, #8
     6ee:	dd00      	ble.n	6f2 <main+0x132>
     6f0:	619c      	str	r4, [r3, #24]
     6f2:	290b      	cmp	r1, #11
     6f4:	dd5f      	ble.n	7b6 <main+0x1f6>
     6f6:	240c      	movs	r4, #12
     6f8:	b13a      	cbz	r2, 70a <main+0x14a>
     6fa:	2103      	movs	r1, #3
     6fc:	7139      	strb	r1, [r7, #4]
     6fe:	2100      	movs	r1, #0
     700:	7179      	strb	r1, [r7, #5]
     702:	71b9      	strb	r1, [r7, #6]
     704:	71f9      	strb	r1, [r7, #7]
     706:	6878      	ldr	r0, [r7, #4]
     708:	6118      	str	r0, [r3, #16]
     70a:	2100      	movs	r1, #0
     70c:	f36f 0100 	bfc	r1, #0, #1
     710:	f36f 0141 	bfc	r1, #1, #1
     714:	f36f 0182 	bfc	r1, #2, #1
     718:	f36f 01c5 	bfc	r1, #3, #3
     71c:	2301      	movs	r3, #1
     71e:	f363 1188 	bfi	r1, r3, #6, #3
     722:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
     726:	f363 2152 	bfi	r1, r3, #9, #10
     72a:	f36f 41de 	bfc	r1, #19, #12
     72e:	f36f 71df 	bfc	r1, #31, #1
     732:	2300      	movs	r3, #0
     734:	4855      	ldr	r0, [pc, #340]	; (88c <CONFIG_ISR_STACK_SIZE+0x8c>)
     736:	f002 fe59 	bl	33ec <z_impl_z_log_msg_static_create>
     73a:	46b5      	mov	sp, r6
    // err = bluetooth_init(&bluetooth_callbacks, &remote_callbacks);
    // if (err) {
    //     LOG_ERR("Bluetooth_init() failed. (err %d)", err);
    // }

    LOG_INF("Running");
     73c:	4b56      	ldr	r3, [pc, #344]	; (898 <CONFIG_ISR_STACK_SIZE+0x98>)
     73e:	627b      	str	r3, [r7, #36]	; 0x24
     740:	2302      	movs	r3, #2
     742:	713b      	strb	r3, [r7, #4]
     744:	2400      	movs	r4, #0
     746:	717c      	strb	r4, [r7, #5]
     748:	71bc      	strb	r4, [r7, #6]
     74a:	71fc      	strb	r4, [r7, #7]
     74c:	687b      	ldr	r3, [r7, #4]
     74e:	623b      	str	r3, [r7, #32]
     750:	4621      	mov	r1, r4
     752:	f364 0100 	bfi	r1, r4, #0, #1
     756:	f364 0141 	bfi	r1, r4, #1, #1
     75a:	f364 0182 	bfi	r1, r4, #2, #1
     75e:	f364 01c5 	bfi	r1, r4, #3, #3
     762:	2303      	movs	r3, #3
     764:	f363 1188 	bfi	r1, r3, #6, #3
     768:	2308      	movs	r3, #8
     76a:	f363 2152 	bfi	r1, r3, #9, #10
     76e:	f364 41de 	bfi	r1, r4, #19, #12
     772:	f364 71df 	bfi	r1, r4, #31, #1
     776:	4623      	mov	r3, r4
     778:	f107 0220 	add.w	r2, r7, #32
     77c:	4843      	ldr	r0, [pc, #268]	; (88c <CONFIG_ISR_STACK_SIZE+0x8c>)
     77e:	f002 fe35 	bl	33ec <z_impl_z_log_msg_static_create>
    int blink_status = 0;
     782:	4621      	mov	r1, r4
     784:	e048      	b.n	818 <CONFIG_ISR_STACK_SIZE+0x18>
	LOG_INF("Hello World! %s", CONFIG_BOARD);
     786:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
     78a:	e727      	b.n	5dc <main+0x1c>
     78c:	f107 0c28 	add.w	ip, r7, #40	; 0x28
     790:	4484      	add	ip, r0
     792:	f81c cc28 	ldrb.w	ip, [ip, #-40]
     796:	f801 cb01 	strb.w	ip, [r1], #1
     79a:	3001      	adds	r0, #1
     79c:	e72e      	b.n	5fc <main+0x3c>
     79e:	f06f 061b 	mvn.w	r6, #27
     7a2:	e732      	b.n	60a <main+0x4a>
        LOG_ERR("mpu_init() failed. (err %08x)", err);
     7a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
     7a8:	e760      	b.n	66c <main+0xac>
     7aa:	f06f 041b 	mvn.w	r4, #27
     7ae:	e76a      	b.n	686 <main+0xc6>
        LOG_ERR("motor_init() failed. (err %d)", err);
     7b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
     7b4:	e794      	b.n	6e0 <main+0x120>
     7b6:	f06f 041b 	mvn.w	r4, #27
     7ba:	e79d      	b.n	6f8 <main+0x138>

    for (;;) {
        dk_set_led(RUN_STATUS_LED, (blink_status++)%2);
        if (read_accel_values(&accel_values) == 0) {
            LOG_INF("Accel: X: %08d, Y: %08d, Z: %08d", accel_values.x, accel_values.y, accel_values.z);
     7bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
     7c0:	e046      	b.n	850 <CONFIG_ISR_STACK_SIZE+0x50>
     7c2:	2913      	cmp	r1, #19
     7c4:	dd5b      	ble.n	87e <CONFIG_ISR_STACK_SIZE+0x7e>
     7c6:	2114      	movs	r1, #20
     7c8:	b13a      	cbz	r2, 7da <main+0x21a>
     7ca:	2005      	movs	r0, #5
     7cc:	7138      	strb	r0, [r7, #4]
     7ce:	2000      	movs	r0, #0
     7d0:	7178      	strb	r0, [r7, #5]
     7d2:	71b8      	strb	r0, [r7, #6]
     7d4:	71f8      	strb	r0, [r7, #7]
     7d6:	6878      	ldr	r0, [r7, #4]
     7d8:	6118      	str	r0, [r3, #16]
     7da:	f36f 0500 	bfc	r5, #0, #1
     7de:	f36f 0541 	bfc	r5, #1, #1
     7e2:	f36f 0582 	bfc	r5, #2, #1
     7e6:	f36f 05c5 	bfc	r5, #3, #3
     7ea:	2303      	movs	r3, #3
     7ec:	f363 1588 	bfi	r5, r3, #6, #3
     7f0:	f401 717d 	and.w	r1, r1, #1012	; 0x3f4
     7f4:	f361 2552 	bfi	r5, r1, #9, #10
     7f8:	f36f 45de 	bfc	r5, #19, #12
     7fc:	f36f 75df 	bfc	r5, #31, #1
     800:	2300      	movs	r3, #0
     802:	4629      	mov	r1, r5
     804:	4821      	ldr	r0, [pc, #132]	; (88c <CONFIG_ISR_STACK_SIZE+0x8c>)
     806:	f002 fdf1 	bl	33ec <z_impl_z_log_msg_static_create>
     80a:	46b5      	mov	sp, r6
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     80c:	f240 6067 	movw	r0, #1639	; 0x667
     810:	2100      	movs	r1, #0
     812:	f00d f84d 	bl	d8b0 <z_impl_k_sleep>
        dk_set_led(RUN_STATUS_LED, (blink_status++)%2);
     816:	4621      	mov	r1, r4
     818:	1c4c      	adds	r4, r1, #1
     81a:	2900      	cmp	r1, #0
     81c:	f001 0101 	and.w	r1, r1, #1
     820:	bfb8      	it	lt
     822:	4249      	neglt	r1, r1
     824:	2000      	movs	r0, #0
     826:	f007 fe0f 	bl	8448 <dk_set_led>
        if (read_accel_values(&accel_values) == 0) {
     82a:	f107 0008 	add.w	r0, r7, #8
     82e:	f000 facf 	bl	dd0 <read_accel_values>
     832:	2800      	cmp	r0, #0
     834:	d1ea      	bne.n	80c <CONFIG_ISR_STACK_SIZE+0xc>
            LOG_INF("Accel: X: %08d, Y: %08d, Z: %08d", accel_values.x, accel_values.y, accel_values.z);
     836:	f9b7 e00c 	ldrsh.w	lr, [r7, #12]
     83a:	f9b7 c00a 	ldrsh.w	ip, [r7, #10]
     83e:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
     842:	466e      	mov	r6, sp
     844:	b08a      	sub	sp, #40	; 0x28
     846:	466b      	mov	r3, sp
     848:	f113 0210 	adds.w	r2, r3, #16
     84c:	d0b6      	beq.n	7bc <main+0x1fc>
     84e:	2114      	movs	r1, #20
     850:	b12a      	cbz	r2, 85e <CONFIG_ISR_STACK_SIZE+0x5e>
     852:	2904      	cmp	r1, #4
     854:	dd03      	ble.n	85e <CONFIG_ISR_STACK_SIZE+0x5e>
     856:	f8df 8044 	ldr.w	r8, [pc, #68]	; 89c <CONFIG_ISR_STACK_SIZE+0x9c>
     85a:	f8c3 8014 	str.w	r8, [r3, #20]
     85e:	b11a      	cbz	r2, 868 <CONFIG_ISR_STACK_SIZE+0x68>
     860:	2908      	cmp	r1, #8
     862:	dd01      	ble.n	868 <CONFIG_ISR_STACK_SIZE+0x68>
     864:	f8c3 e018 	str.w	lr, [r3, #24]
     868:	b11a      	cbz	r2, 872 <CONFIG_ISR_STACK_SIZE+0x72>
     86a:	290c      	cmp	r1, #12
     86c:	dd01      	ble.n	872 <CONFIG_ISR_STACK_SIZE+0x72>
     86e:	f8c3 c01c 	str.w	ip, [r3, #28]
     872:	2a00      	cmp	r2, #0
     874:	d0a5      	beq.n	7c2 <main+0x202>
     876:	2910      	cmp	r1, #16
     878:	dda3      	ble.n	7c2 <main+0x202>
     87a:	6218      	str	r0, [r3, #32]
     87c:	e7a1      	b.n	7c2 <main+0x202>
     87e:	f06f 011b 	mvn.w	r1, #27
     882:	e7a1      	b.n	7c8 <main+0x208>
     884:	00010248 	.word	0x00010248
     888:	00010258 	.word	0x00010258
     88c:	00010124 	.word	0x00010124
     890:	0001026c 	.word	0x0001026c
     894:	0001028c 	.word	0x0001028c
     898:	000102ac 	.word	0x000102ac
     89c:	000102b4 	.word	0x000102b4

000008a0 <my_twim_handler>:

uint8_t twi_tx_buffer[MPU_TWI_BUFFER_SIZE];


void my_twim_handler(nrfx_twim_evt_t const * p_event, void * p_context)
{
     8a0:	b500      	push	{lr}
     8a2:	b0a1      	sub	sp, #132	; 0x84
    //LOG_INF("TWIM callback");
    switch(p_event->type)
     8a4:	7803      	ldrb	r3, [r0, #0]
     8a6:	2b04      	cmp	r3, #4
     8a8:	d866      	bhi.n	978 <my_twim_handler+0xd8>
     8aa:	e8df f003 	tbb	[pc, r3]
     8ae:	4003      	.short	0x4003
     8b0:	8e68      	.short	0x8e68
     8b2:	b4          	.byte	0xb4
     8b3:	00          	.byte	0x00
    {
        case NRFX_TWIM_EVT_DONE:
            switch (p_event->xfer_desc.type)
     8b4:	7903      	ldrb	r3, [r0, #4]
     8b6:	2b03      	cmp	r3, #3
     8b8:	d813      	bhi.n	8e2 <my_twim_handler+0x42>
     8ba:	e8df f003 	tbb	[pc, r3]
     8be:	0602      	.short	0x0602
     8c0:	0e0a      	.short	0x0e0a
            {
                case NRFX_TWIM_XFER_TX:
                    twi_tx_done = true;
     8c2:	4b68      	ldr	r3, [pc, #416]	; (a64 <my_twim_handler+0x1c4>)
     8c4:	2201      	movs	r2, #1
     8c6:	701a      	strb	r2, [r3, #0]
                    //LOG_INF("tx done");
                    break;
     8c8:	e056      	b.n	978 <my_twim_handler+0xd8>
                case NRFX_TWIM_XFER_RX:
                    twi_rx_done = true;
     8ca:	4b67      	ldr	r3, [pc, #412]	; (a68 <my_twim_handler+0x1c8>)
     8cc:	2201      	movs	r2, #1
     8ce:	701a      	strb	r2, [r3, #0]
                    //LOG_INF("rx done");
                    break;
     8d0:	e052      	b.n	978 <my_twim_handler+0xd8>
                case NRFX_TWIM_XFER_TXRX:
                    twi_rx_done = true;
     8d2:	4b65      	ldr	r3, [pc, #404]	; (a68 <my_twim_handler+0x1c8>)
     8d4:	2201      	movs	r2, #1
     8d6:	701a      	strb	r2, [r3, #0]
                    break;
     8d8:	e04e      	b.n	978 <my_twim_handler+0xd8>
                case NRFX_TWIM_XFER_TXTX:
                    twi_tx_done = true;
     8da:	4b62      	ldr	r3, [pc, #392]	; (a64 <my_twim_handler+0x1c4>)
     8dc:	2201      	movs	r2, #1
     8de:	701a      	strb	r2, [r3, #0]
                    break;
     8e0:	e04a      	b.n	978 <my_twim_handler+0xd8>
                default:
                    LOG_INF("default1");
     8e2:	4b62      	ldr	r3, [pc, #392]	; (a6c <my_twim_handler+0x1cc>)
     8e4:	931f      	str	r3, [sp, #124]	; 0x7c
     8e6:	2302      	movs	r3, #2
     8e8:	f88d 3004 	strb.w	r3, [sp, #4]
     8ec:	2300      	movs	r3, #0
     8ee:	f88d 3005 	strb.w	r3, [sp, #5]
     8f2:	f88d 3006 	strb.w	r3, [sp, #6]
     8f6:	f88d 3007 	strb.w	r3, [sp, #7]
     8fa:	9a01      	ldr	r2, [sp, #4]
     8fc:	921e      	str	r2, [sp, #120]	; 0x78
     8fe:	4619      	mov	r1, r3
     900:	f363 0100 	bfi	r1, r3, #0, #1
     904:	f363 0141 	bfi	r1, r3, #1, #1
     908:	f363 0182 	bfi	r1, r3, #2, #1
     90c:	f363 01c5 	bfi	r1, r3, #3, #3
     910:	2203      	movs	r2, #3
     912:	f362 1188 	bfi	r1, r2, #6, #3
     916:	2208      	movs	r2, #8
     918:	f362 2152 	bfi	r1, r2, #9, #10
     91c:	f363 41de 	bfi	r1, r3, #19, #12
     920:	f363 71df 	bfi	r1, r3, #31, #1
     924:	aa1e      	add	r2, sp, #120	; 0x78
     926:	4852      	ldr	r0, [pc, #328]	; (a70 <my_twim_handler+0x1d0>)
     928:	f002 fd60 	bl	33ec <z_impl_z_log_msg_static_create>
     92c:	e024      	b.n	978 <my_twim_handler+0xd8>
                    // Should never happen
                    break;
            }
            break;
        case NRFX_TWIM_EVT_ADDRESS_NACK:
            LOG_ERR("address nack");
     92e:	4b51      	ldr	r3, [pc, #324]	; (a74 <my_twim_handler+0x1d4>)
     930:	9319      	str	r3, [sp, #100]	; 0x64
     932:	2302      	movs	r3, #2
     934:	f88d 3004 	strb.w	r3, [sp, #4]
     938:	2300      	movs	r3, #0
     93a:	f88d 3005 	strb.w	r3, [sp, #5]
     93e:	f88d 3006 	strb.w	r3, [sp, #6]
     942:	f88d 3007 	strb.w	r3, [sp, #7]
     946:	9a01      	ldr	r2, [sp, #4]
     948:	9218      	str	r2, [sp, #96]	; 0x60
     94a:	4619      	mov	r1, r3
     94c:	f363 0100 	bfi	r1, r3, #0, #1
     950:	f363 0141 	bfi	r1, r3, #1, #1
     954:	f363 0182 	bfi	r1, r3, #2, #1
     958:	f363 01c5 	bfi	r1, r3, #3, #3
     95c:	2201      	movs	r2, #1
     95e:	f362 1188 	bfi	r1, r2, #6, #3
     962:	2208      	movs	r2, #8
     964:	f362 2152 	bfi	r1, r2, #9, #10
     968:	f363 41de 	bfi	r1, r3, #19, #12
     96c:	f363 71df 	bfi	r1, r3, #31, #1
     970:	aa18      	add	r2, sp, #96	; 0x60
     972:	483f      	ldr	r0, [pc, #252]	; (a70 <my_twim_handler+0x1d0>)
     974:	f002 fd3a 	bl	33ec <z_impl_z_log_msg_static_create>
            break;
        default:
            break;
    }
    
}
     978:	b021      	add	sp, #132	; 0x84
     97a:	f85d fb04 	ldr.w	pc, [sp], #4
            LOG_ERR("data nack");
     97e:	4b3e      	ldr	r3, [pc, #248]	; (a78 <my_twim_handler+0x1d8>)
     980:	9313      	str	r3, [sp, #76]	; 0x4c
     982:	2302      	movs	r3, #2
     984:	f88d 3004 	strb.w	r3, [sp, #4]
     988:	2300      	movs	r3, #0
     98a:	f88d 3005 	strb.w	r3, [sp, #5]
     98e:	f88d 3006 	strb.w	r3, [sp, #6]
     992:	f88d 3007 	strb.w	r3, [sp, #7]
     996:	9a01      	ldr	r2, [sp, #4]
     998:	9212      	str	r2, [sp, #72]	; 0x48
     99a:	4619      	mov	r1, r3
     99c:	f363 0100 	bfi	r1, r3, #0, #1
     9a0:	f363 0141 	bfi	r1, r3, #1, #1
     9a4:	f363 0182 	bfi	r1, r3, #2, #1
     9a8:	f363 01c5 	bfi	r1, r3, #3, #3
     9ac:	2201      	movs	r2, #1
     9ae:	f362 1188 	bfi	r1, r2, #6, #3
     9b2:	2208      	movs	r2, #8
     9b4:	f362 2152 	bfi	r1, r2, #9, #10
     9b8:	f363 41de 	bfi	r1, r3, #19, #12
     9bc:	f363 71df 	bfi	r1, r3, #31, #1
     9c0:	aa12      	add	r2, sp, #72	; 0x48
     9c2:	482b      	ldr	r0, [pc, #172]	; (a70 <my_twim_handler+0x1d0>)
     9c4:	f002 fd12 	bl	33ec <z_impl_z_log_msg_static_create>
     9c8:	e7d6      	b.n	978 <my_twim_handler+0xd8>
            LOG_ERR("overrun");
     9ca:	4b2c      	ldr	r3, [pc, #176]	; (a7c <my_twim_handler+0x1dc>)
     9cc:	930d      	str	r3, [sp, #52]	; 0x34
     9ce:	2302      	movs	r3, #2
     9d0:	f88d 3004 	strb.w	r3, [sp, #4]
     9d4:	2300      	movs	r3, #0
     9d6:	f88d 3005 	strb.w	r3, [sp, #5]
     9da:	f88d 3006 	strb.w	r3, [sp, #6]
     9de:	f88d 3007 	strb.w	r3, [sp, #7]
     9e2:	9a01      	ldr	r2, [sp, #4]
     9e4:	920c      	str	r2, [sp, #48]	; 0x30
     9e6:	4619      	mov	r1, r3
     9e8:	f363 0100 	bfi	r1, r3, #0, #1
     9ec:	f363 0141 	bfi	r1, r3, #1, #1
     9f0:	f363 0182 	bfi	r1, r3, #2, #1
     9f4:	f363 01c5 	bfi	r1, r3, #3, #3
     9f8:	2201      	movs	r2, #1
     9fa:	f362 1188 	bfi	r1, r2, #6, #3
     9fe:	2208      	movs	r2, #8
     a00:	f362 2152 	bfi	r1, r2, #9, #10
     a04:	f363 41de 	bfi	r1, r3, #19, #12
     a08:	f363 71df 	bfi	r1, r3, #31, #1
     a0c:	aa0c      	add	r2, sp, #48	; 0x30
     a0e:	4818      	ldr	r0, [pc, #96]	; (a70 <my_twim_handler+0x1d0>)
     a10:	f002 fcec 	bl	33ec <z_impl_z_log_msg_static_create>
     a14:	e7b0      	b.n	978 <my_twim_handler+0xd8>
            LOG_ERR("bus error");
     a16:	4b1a      	ldr	r3, [pc, #104]	; (a80 <my_twim_handler+0x1e0>)
     a18:	9307      	str	r3, [sp, #28]
     a1a:	2302      	movs	r3, #2
     a1c:	f88d 3004 	strb.w	r3, [sp, #4]
     a20:	2300      	movs	r3, #0
     a22:	f88d 3005 	strb.w	r3, [sp, #5]
     a26:	f88d 3006 	strb.w	r3, [sp, #6]
     a2a:	f88d 3007 	strb.w	r3, [sp, #7]
     a2e:	9a01      	ldr	r2, [sp, #4]
     a30:	9206      	str	r2, [sp, #24]
     a32:	4619      	mov	r1, r3
     a34:	f363 0100 	bfi	r1, r3, #0, #1
     a38:	f363 0141 	bfi	r1, r3, #1, #1
     a3c:	f363 0182 	bfi	r1, r3, #2, #1
     a40:	f363 01c5 	bfi	r1, r3, #3, #3
     a44:	2201      	movs	r2, #1
     a46:	f362 1188 	bfi	r1, r2, #6, #3
     a4a:	2208      	movs	r2, #8
     a4c:	f362 2152 	bfi	r1, r2, #9, #10
     a50:	f363 41de 	bfi	r1, r3, #19, #12
     a54:	f363 71df 	bfi	r1, r3, #31, #1
     a58:	aa06      	add	r2, sp, #24
     a5a:	4805      	ldr	r0, [pc, #20]	; (a70 <my_twim_handler+0x1d0>)
     a5c:	f002 fcc6 	bl	33ec <z_impl_z_log_msg_static_create>
}
     a60:	e78a      	b.n	978 <my_twim_handler+0xd8>
     a62:	bf00      	nop
     a64:	200012c9 	.word	0x200012c9
     a68:	200012c8 	.word	0x200012c8
     a6c:	000102dc 	.word	0x000102dc
     a70:	00010164 	.word	0x00010164
     a74:	000102e8 	.word	0x000102e8
     a78:	000102f8 	.word	0x000102f8
     a7c:	00010304 	.word	0x00010304
     a80:	0001030c 	.word	0x0001030c

00000a84 <app_mpu_tx>:
int app_mpu_tx(const nrfx_twim_t *  p_instance,
                uint8_t             address,
                uint8_t *           p_data,
                uint8_t             length,
                bool                no_stop)
{
     a84:	b510      	push	{r4, lr}
     a86:	b086      	sub	sp, #24
     a88:	4614      	mov	r4, r2
    int err;

    nrfx_twim_xfer_desc_t xfer = NRFX_TWIM_XFER_DESC_TX(address, p_data, length);
     a8a:	2200      	movs	r2, #0
     a8c:	f88d 2004 	strb.w	r2, [sp, #4]
     a90:	f88d 1005 	strb.w	r1, [sp, #5]
     a94:	9302      	str	r3, [sp, #8]
     a96:	9203      	str	r2, [sp, #12]
     a98:	9404      	str	r4, [sp, #16]
     a9a:	9205      	str	r2, [sp, #20]
    err = nrfx_twim_xfer(p_instance, &xfer, 0);
     a9c:	a901      	add	r1, sp, #4
     a9e:	f00a f823 	bl	aae8 <nrfx_twim_xfer>
    if (err != NRFX_SUCCESS) {
     aa2:	4b03      	ldr	r3, [pc, #12]	; (ab0 <app_mpu_tx+0x2c>)
     aa4:	4298      	cmp	r0, r3
     aa6:	d100      	bne.n	aaa <app_mpu_tx+0x26>
        return err;
    }

    return 0;
     aa8:	2000      	movs	r0, #0
}
     aaa:	b006      	add	sp, #24
     aac:	bd10      	pop	{r4, pc}
     aae:	bf00      	nop
     ab0:	0bad0000 	.word	0x0bad0000

00000ab4 <app_mpu_rx>:

int app_mpu_rx(const nrfx_twim_t *   p_instance,
               uint8_t               address,
               uint8_t *             p_data,
               uint8_t               length)
{
     ab4:	b500      	push	{lr}
     ab6:	b087      	sub	sp, #28
    int err;
    nrfx_twim_xfer_desc_t xfer = NRFX_TWIM_XFER_DESC_RX(address, p_data, length);
     ab8:	f04f 0c01 	mov.w	ip, #1
     abc:	f88d c004 	strb.w	ip, [sp, #4]
     ac0:	f88d 1005 	strb.w	r1, [sp, #5]
     ac4:	9302      	str	r3, [sp, #8]
     ac6:	2300      	movs	r3, #0
     ac8:	9303      	str	r3, [sp, #12]
     aca:	9204      	str	r2, [sp, #16]
     acc:	9305      	str	r3, [sp, #20]

    err = nrfx_twim_xfer(p_instance, &xfer, 0);
     ace:	461a      	mov	r2, r3
     ad0:	a901      	add	r1, sp, #4
     ad2:	f00a f809 	bl	aae8 <nrfx_twim_xfer>
    if (err != NRFX_SUCCESS) {
     ad6:	4b03      	ldr	r3, [pc, #12]	; (ae4 <app_mpu_rx+0x30>)
     ad8:	4298      	cmp	r0, r3
     ada:	d100      	bne.n	ade <app_mpu_rx+0x2a>
        return err;
    }
    return 0;
     adc:	2000      	movs	r0, #0
}
     ade:	b007      	add	sp, #28
     ae0:	f85d fb04 	ldr.w	pc, [sp], #4
     ae4:	0bad0000 	.word	0x0bad0000

00000ae8 <app_mpu_write_single_register>:

int app_mpu_write_single_register(uint8_t reg, uint8_t data)
{
     ae8:	b500      	push	{lr}
     aea:	b085      	sub	sp, #20
    int err;
    int timeout = MPU_TWI_TIMEOUT;

    uint8_t packet[2] = {reg, data};
     aec:	f88d 000c 	strb.w	r0, [sp, #12]
     af0:	f88d 100d 	strb.w	r1, [sp, #13]

    err = app_mpu_tx(&m_twim_instance, MPU_ADDRESS, packet, 2, false);
     af4:	2300      	movs	r3, #0
     af6:	9300      	str	r3, [sp, #0]
     af8:	2302      	movs	r3, #2
     afa:	aa03      	add	r2, sp, #12
     afc:	2168      	movs	r1, #104	; 0x68
     afe:	480a      	ldr	r0, [pc, #40]	; (b28 <app_mpu_write_single_register+0x40>)
     b00:	f7ff ffc0 	bl	a84 <app_mpu_tx>
    if (err) {
     b04:	b950      	cbnz	r0, b1c <app_mpu_write_single_register+0x34>
    int timeout = MPU_TWI_TIMEOUT;
     b06:	f242 7310 	movw	r3, #10000	; 0x2710
        return err;
    }
    
    while ((!twi_tx_done) && (--timeout))
     b0a:	4a08      	ldr	r2, [pc, #32]	; (b2c <app_mpu_write_single_register+0x44>)
     b0c:	7812      	ldrb	r2, [r2, #0]
     b0e:	b90a      	cbnz	r2, b14 <app_mpu_write_single_register+0x2c>
     b10:	3b01      	subs	r3, #1
     b12:	d1fa      	bne.n	b0a <app_mpu_write_single_register+0x22>
    {
        // Wait...
    }
    twi_tx_done = false; // reset for later use.
     b14:	4a05      	ldr	r2, [pc, #20]	; (b2c <app_mpu_write_single_register+0x44>)
     b16:	2100      	movs	r1, #0
     b18:	7011      	strb	r1, [r2, #0]
    if (timeout == 0)
     b1a:	b113      	cbz	r3, b22 <app_mpu_write_single_register+0x3a>
    {
        return NRFX_ERROR_TIMEOUT;
    }
    return 0;
}
     b1c:	b005      	add	sp, #20
     b1e:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_TIMEOUT;
     b22:	4803      	ldr	r0, [pc, #12]	; (b30 <app_mpu_write_single_register+0x48>)
     b24:	e7fa      	b.n	b1c <app_mpu_write_single_register+0x34>
     b26:	bf00      	nop
     b28:	000103a0 	.word	0x000103a0
     b2c:	200012c9 	.word	0x200012c9
     b30:	0bad0007 	.word	0x0bad0007

00000b34 <app_mpu_write_registers>:

int app_mpu_write_registers(uint8_t reg, uint8_t * p_data, uint8_t length)
{
     b34:	b530      	push	{r4, r5, lr}
     b36:	b087      	sub	sp, #28
     b38:	4614      	mov	r4, r2
    int err;
    int timeout = MPU_TWI_TIMEOUT;
    
    twi_tx_buffer[0] = reg;
     b3a:	4d15      	ldr	r5, [pc, #84]	; (b90 <app_mpu_write_registers+0x5c>)
     b3c:	462b      	mov	r3, r5
     b3e:	f803 0b01 	strb.w	r0, [r3], #1
    memcpy((twi_tx_buffer + 1), p_data, length);
     b42:	4618      	mov	r0, r3
     b44:	f00e fb5c 	bl	f200 <memcpy>

    nrfx_twim_xfer_desc_t xfer = {0};
     b48:	2200      	movs	r2, #0
     b4a:	9201      	str	r2, [sp, #4]
     b4c:	9202      	str	r2, [sp, #8]
     b4e:	9203      	str	r2, [sp, #12]
     b50:	9204      	str	r2, [sp, #16]
     b52:	9205      	str	r2, [sp, #20]
    xfer.address = MPU_ADDRESS;
     b54:	2368      	movs	r3, #104	; 0x68
     b56:	f88d 3005 	strb.w	r3, [sp, #5]
    xfer.type = NRFX_TWIM_XFER_TX;
    xfer.primary_length = length+1;
     b5a:	3401      	adds	r4, #1
     b5c:	9402      	str	r4, [sp, #8]
    xfer.p_primary_buf = twi_tx_buffer;
     b5e:	9504      	str	r5, [sp, #16]

    err = nrfx_twim_xfer(&m_twim_instance, &xfer,0);
     b60:	a901      	add	r1, sp, #4
     b62:	480c      	ldr	r0, [pc, #48]	; (b94 <app_mpu_write_registers+0x60>)
     b64:	f009 ffc0 	bl	aae8 <nrfx_twim_xfer>
    if (err != NRFX_SUCCESS) {
     b68:	4b0b      	ldr	r3, [pc, #44]	; (b98 <app_mpu_write_registers+0x64>)
     b6a:	4298      	cmp	r0, r3
     b6c:	d10b      	bne.n	b86 <app_mpu_write_registers+0x52>
    int timeout = MPU_TWI_TIMEOUT;
     b6e:	f242 7310 	movw	r3, #10000	; 0x2710
        return err;
    }

    while ((!twi_tx_done) && --timeout)
     b72:	4a0a      	ldr	r2, [pc, #40]	; (b9c <app_mpu_write_registers+0x68>)
     b74:	7812      	ldrb	r2, [r2, #0]
     b76:	b90a      	cbnz	r2, b7c <app_mpu_write_registers+0x48>
     b78:	3b01      	subs	r3, #1
     b7a:	d1fa      	bne.n	b72 <app_mpu_write_registers+0x3e>
    {
        // Wait...
    }
    twi_tx_done = false; // reset for later use.
     b7c:	4a07      	ldr	r2, [pc, #28]	; (b9c <app_mpu_write_registers+0x68>)
     b7e:	2100      	movs	r1, #0
     b80:	7011      	strb	r1, [r2, #0]
    if (timeout == 0)
     b82:	b113      	cbz	r3, b8a <app_mpu_write_registers+0x56>
    {
        return NRFX_ERROR_TIMEOUT;
    }

    return 0;
     b84:	4608      	mov	r0, r1
    
}
     b86:	b007      	add	sp, #28
     b88:	bd30      	pop	{r4, r5, pc}
        return NRFX_ERROR_TIMEOUT;
     b8a:	4805      	ldr	r0, [pc, #20]	; (ba0 <app_mpu_write_registers+0x6c>)
     b8c:	e7fb      	b.n	b86 <app_mpu_write_registers+0x52>
     b8e:	bf00      	nop
     b90:	20000978 	.word	0x20000978
     b94:	000103a0 	.word	0x000103a0
     b98:	0bad0000 	.word	0x0bad0000
     b9c:	200012c9 	.word	0x200012c9
     ba0:	0bad0007 	.word	0x0bad0007

00000ba4 <app_mpu_read_registers>:

int app_mpu_read_registers(uint8_t reg, uint8_t * p_data, uint8_t length)
{
     ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
     ba6:	b087      	sub	sp, #28
     ba8:	af02      	add	r7, sp, #8
     baa:	460c      	mov	r4, r1
     bac:	4615      	mov	r5, r2
     bae:	71f8      	strb	r0, [r7, #7]
    int err;
    int timeout = MPU_TWI_TIMEOUT;

    err = app_mpu_tx(&m_twim_instance, MPU_ADDRESS, &reg, 1, false);
     bb0:	2300      	movs	r3, #0
     bb2:	9300      	str	r3, [sp, #0]
     bb4:	2301      	movs	r3, #1
     bb6:	1dfa      	adds	r2, r7, #7
     bb8:	2168      	movs	r1, #104	; 0x68
     bba:	4834      	ldr	r0, [pc, #208]	; (c8c <app_mpu_read_registers+0xe8>)
     bbc:	f7ff ff62 	bl	a84 <app_mpu_tx>
    if (err) {
     bc0:	4606      	mov	r6, r0
     bc2:	2800      	cmp	r0, #0
     bc4:	d15e      	bne.n	c84 <app_mpu_read_registers+0xe0>
    int timeout = MPU_TWI_TIMEOUT;
     bc6:	f242 7010 	movw	r0, #10000	; 0x2710
        return err;
    }

    while ((!twi_tx_done) && --timeout) {
     bca:	4b31      	ldr	r3, [pc, #196]	; (c90 <app_mpu_read_registers+0xec>)
     bcc:	781b      	ldrb	r3, [r3, #0]
     bce:	b90b      	cbnz	r3, bd4 <app_mpu_read_registers+0x30>
     bd0:	3801      	subs	r0, #1
     bd2:	d1fa      	bne.n	bca <app_mpu_read_registers+0x26>
        // Wait...
    }
    twi_tx_done = false;
     bd4:	4b2e      	ldr	r3, [pc, #184]	; (c90 <app_mpu_read_registers+0xec>)
     bd6:	2200      	movs	r2, #0
     bd8:	701a      	strb	r2, [r3, #0]
    if (timeout == 0) {
     bda:	2800      	cmp	r0, #0
     bdc:	d051      	beq.n	c82 <app_mpu_read_registers+0xde>
        return NRFX_ERROR_TIMEOUT;
    }
    //LOG_INF("tx_complete, timeout %d", timeout);

    timeout = MPU_TWI_TIMEOUT; // reset after the previous xfer.
    err = app_mpu_rx(&m_twim_instance,MPU_ADDRESS, p_data, length);
     bde:	462b      	mov	r3, r5
     be0:	4622      	mov	r2, r4
     be2:	2168      	movs	r1, #104	; 0x68
     be4:	4829      	ldr	r0, [pc, #164]	; (c8c <app_mpu_read_registers+0xe8>)
     be6:	f7ff ff65 	bl	ab4 <app_mpu_rx>
    if (err) {
     bea:	4606      	mov	r6, r0
     bec:	b968      	cbnz	r0, c0a <app_mpu_read_registers+0x66>
    timeout = MPU_TWI_TIMEOUT; // reset after the previous xfer.
     bee:	f242 7310 	movw	r3, #10000	; 0x2710
        LOG_ERR("app_mpu_rx returned %08x", err);
        return err;
    }
    while ((!twi_rx_done) && --timeout) {
     bf2:	4a28      	ldr	r2, [pc, #160]	; (c94 <app_mpu_read_registers+0xf0>)
     bf4:	7812      	ldrb	r2, [r2, #0]
     bf6:	b90a      	cbnz	r2, bfc <app_mpu_read_registers+0x58>
     bf8:	3b01      	subs	r3, #1
     bfa:	d1fa      	bne.n	bf2 <app_mpu_read_registers+0x4e>
        // Wait...
    }
    twi_rx_done = false;
     bfc:	4a25      	ldr	r2, [pc, #148]	; (c94 <app_mpu_read_registers+0xf0>)
     bfe:	2100      	movs	r1, #0
     c00:	7011      	strb	r1, [r2, #0]
    if (timeout == 0) {
     c02:	2b00      	cmp	r3, #0
     c04:	d13e      	bne.n	c84 <app_mpu_read_registers+0xe0>
        return NRFX_ERROR_TIMEOUT;
     c06:	4e24      	ldr	r6, [pc, #144]	; (c98 <app_mpu_read_registers+0xf4>)
     c08:	e03c      	b.n	c84 <app_mpu_read_registers+0xe0>
        LOG_ERR("app_mpu_rx returned %08x", err);
     c0a:	466d      	mov	r5, sp
     c0c:	b088      	sub	sp, #32
     c0e:	ab02      	add	r3, sp, #8
     c10:	f113 0210 	adds.w	r2, r3, #16
     c14:	d02f      	beq.n	c76 <app_mpu_read_registers+0xd2>
     c16:	210c      	movs	r1, #12
     c18:	b11a      	cbz	r2, c22 <app_mpu_read_registers+0x7e>
     c1a:	2904      	cmp	r1, #4
     c1c:	dd01      	ble.n	c22 <app_mpu_read_registers+0x7e>
     c1e:	481f      	ldr	r0, [pc, #124]	; (c9c <app_mpu_read_registers+0xf8>)
     c20:	6158      	str	r0, [r3, #20]
     c22:	b112      	cbz	r2, c2a <app_mpu_read_registers+0x86>
     c24:	2908      	cmp	r1, #8
     c26:	dd00      	ble.n	c2a <app_mpu_read_registers+0x86>
     c28:	619e      	str	r6, [r3, #24]
     c2a:	290b      	cmp	r1, #11
     c2c:	dd26      	ble.n	c7c <app_mpu_read_registers+0xd8>
     c2e:	240c      	movs	r4, #12
     c30:	b13a      	cbz	r2, c42 <app_mpu_read_registers+0x9e>
     c32:	2103      	movs	r1, #3
     c34:	7339      	strb	r1, [r7, #12]
     c36:	2100      	movs	r1, #0
     c38:	7379      	strb	r1, [r7, #13]
     c3a:	73b9      	strb	r1, [r7, #14]
     c3c:	73f9      	strb	r1, [r7, #15]
     c3e:	68f8      	ldr	r0, [r7, #12]
     c40:	6118      	str	r0, [r3, #16]
     c42:	2100      	movs	r1, #0
     c44:	f36f 0100 	bfc	r1, #0, #1
     c48:	f36f 0141 	bfc	r1, #1, #1
     c4c:	f36f 0182 	bfc	r1, #2, #1
     c50:	f36f 01c5 	bfc	r1, #3, #3
     c54:	2301      	movs	r3, #1
     c56:	f363 1188 	bfi	r1, r3, #6, #3
     c5a:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
     c5e:	f364 2152 	bfi	r1, r4, #9, #10
     c62:	f36f 41de 	bfc	r1, #19, #12
     c66:	f36f 71df 	bfc	r1, #31, #1
     c6a:	2300      	movs	r3, #0
     c6c:	480c      	ldr	r0, [pc, #48]	; (ca0 <app_mpu_read_registers+0xfc>)
     c6e:	f002 fbbd 	bl	33ec <z_impl_z_log_msg_static_create>
     c72:	46ad      	mov	sp, r5
        return err;
     c74:	e006      	b.n	c84 <app_mpu_read_registers+0xe0>
        LOG_ERR("app_mpu_rx returned %08x", err);
     c76:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
     c7a:	e7cd      	b.n	c18 <app_mpu_read_registers+0x74>
     c7c:	f06f 041b 	mvn.w	r4, #27
     c80:	e7d6      	b.n	c30 <app_mpu_read_registers+0x8c>
        return NRFX_ERROR_TIMEOUT;
     c82:	4e05      	ldr	r6, [pc, #20]	; (c98 <app_mpu_read_registers+0xf4>)
    }
    //LOG_INF("rx_complete, timeout %d", timeout);

    return 0;
}
     c84:	4630      	mov	r0, r6
     c86:	3714      	adds	r7, #20
     c88:	46bd      	mov	sp, r7
     c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c8c:	000103a0 	.word	0x000103a0
     c90:	200012c9 	.word	0x200012c9
     c94:	200012c8 	.word	0x200012c8
     c98:	0bad0007 	.word	0x0bad0007
     c9c:	00010318 	.word	0x00010318
     ca0:	00010164 	.word	0x00010164

00000ca4 <twi_init>:

int twi_init(void)
{
     ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
     ca6:	b08d      	sub	sp, #52	; 0x34
     ca8:	af00      	add	r7, sp, #0
    // Setup peripheral interrupt:
    //IRQ_CONNECT(DT_IRQN(DT_NODELABEL(i2c0)),DT_IRQ(DT_NODELABEL(i2c0), priority), nrfx_isr, nrfx_twim_0_irq_handler,0);
    IRQ_CONNECT(DT_IRQN(DT_NODELABEL(i2c0)),5, nrfx_isr, nrfx_twim_0_irq_handler,0);
     caa:	2200      	movs	r2, #0
     cac:	2105      	movs	r1, #5
     cae:	2003      	movs	r0, #3
     cb0:	f003 faea 	bl	4288 <z_arm_irq_priority_set>
    irq_enable(DT_IRQN(DT_NODELABEL(i2c0)));
     cb4:	2003      	movs	r0, #3
     cb6:	f003 facb 	bl	4250 <arch_irq_enable>

    int err = 0;

    LOG_INF("Initializing MPU Sensor");
     cba:	4b3f      	ldr	r3, [pc, #252]	; (db8 <twi_init+0x114>)
     cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
     cbe:	2302      	movs	r3, #2
     cc0:	713b      	strb	r3, [r7, #4]
     cc2:	2400      	movs	r4, #0
     cc4:	717c      	strb	r4, [r7, #5]
     cc6:	71bc      	strb	r4, [r7, #6]
     cc8:	71fc      	strb	r4, [r7, #7]
     cca:	687b      	ldr	r3, [r7, #4]
     ccc:	62bb      	str	r3, [r7, #40]	; 0x28
     cce:	4621      	mov	r1, r4
     cd0:	f364 0100 	bfi	r1, r4, #0, #1
     cd4:	f364 0141 	bfi	r1, r4, #1, #1
     cd8:	f364 0182 	bfi	r1, r4, #2, #1
     cdc:	f364 01c5 	bfi	r1, r4, #3, #3
     ce0:	2503      	movs	r5, #3
     ce2:	f365 1188 	bfi	r1, r5, #6, #3
     ce6:	2308      	movs	r3, #8
     ce8:	f363 2152 	bfi	r1, r3, #9, #10
     cec:	f364 41de 	bfi	r1, r4, #19, #12
     cf0:	f364 71df 	bfi	r1, r4, #31, #1
     cf4:	4623      	mov	r3, r4
     cf6:	f107 0228 	add.w	r2, r7, #40	; 0x28
     cfa:	4830      	ldr	r0, [pc, #192]	; (dbc <twi_init+0x118>)
     cfc:	f002 fb76 	bl	33ec <z_impl_z_log_msg_static_create>

    
    const nrfx_twim_config_t twim_config    = NRFX_TWIM_DEFAULT_CONFIG(4,3);
     d00:	60bc      	str	r4, [r7, #8]
     d02:	60fc      	str	r4, [r7, #12]
     d04:	613c      	str	r4, [r7, #16]
     d06:	617c      	str	r4, [r7, #20]
     d08:	2304      	movs	r3, #4
     d0a:	60bb      	str	r3, [r7, #8]
     d0c:	60fd      	str	r5, [r7, #12]
     d0e:	f04f 73cc 	mov.w	r3, #26738688	; 0x1980000
     d12:	613b      	str	r3, [r7, #16]
     d14:	2307      	movs	r3, #7
     d16:	753b      	strb	r3, [r7, #20]
    err = nrfx_twim_init(&m_twim_instance,
     d18:	4623      	mov	r3, r4
     d1a:	4a29      	ldr	r2, [pc, #164]	; (dc0 <twi_init+0x11c>)
     d1c:	f107 0108 	add.w	r1, r7, #8
     d20:	4828      	ldr	r0, [pc, #160]	; (dc4 <twi_init+0x120>)
     d22:	f009 fe4f 	bl	a9c4 <nrfx_twim_init>
                          &twim_config,
                          my_twim_handler,
                          NULL);
                          
    if (err != NRFX_SUCCESS) {
     d26:	4b28      	ldr	r3, [pc, #160]	; (dc8 <twi_init+0x124>)
     d28:	4298      	cmp	r0, r3
     d2a:	d03f      	beq.n	dac <twi_init+0x108>
     d2c:	4604      	mov	r4, r0
        LOG_ERR("twim_init failed. (err %x)", err);
     d2e:	466e      	mov	r6, sp
     d30:	b088      	sub	sp, #32
     d32:	466b      	mov	r3, sp
     d34:	f113 0210 	adds.w	r2, r3, #16
     d38:	d032      	beq.n	da0 <twi_init+0xfc>
     d3a:	210c      	movs	r1, #12
     d3c:	b11a      	cbz	r2, d46 <twi_init+0xa2>
     d3e:	2904      	cmp	r1, #4
     d40:	dd01      	ble.n	d46 <twi_init+0xa2>
     d42:	4822      	ldr	r0, [pc, #136]	; (dcc <twi_init+0x128>)
     d44:	6158      	str	r0, [r3, #20]
     d46:	b112      	cbz	r2, d4e <twi_init+0xaa>
     d48:	2908      	cmp	r1, #8
     d4a:	dd00      	ble.n	d4e <twi_init+0xaa>
     d4c:	619c      	str	r4, [r3, #24]
     d4e:	290b      	cmp	r1, #11
     d50:	dd29      	ble.n	da6 <twi_init+0x102>
     d52:	250c      	movs	r5, #12
     d54:	b13a      	cbz	r2, d66 <twi_init+0xc2>
     d56:	2103      	movs	r1, #3
     d58:	7139      	strb	r1, [r7, #4]
     d5a:	2100      	movs	r1, #0
     d5c:	7179      	strb	r1, [r7, #5]
     d5e:	71b9      	strb	r1, [r7, #6]
     d60:	71f9      	strb	r1, [r7, #7]
     d62:	6878      	ldr	r0, [r7, #4]
     d64:	6118      	str	r0, [r3, #16]
     d66:	2100      	movs	r1, #0
     d68:	f36f 0100 	bfc	r1, #0, #1
     d6c:	f36f 0141 	bfc	r1, #1, #1
     d70:	f36f 0182 	bfc	r1, #2, #1
     d74:	f36f 01c5 	bfc	r1, #3, #3
     d78:	2301      	movs	r3, #1
     d7a:	f363 1188 	bfi	r1, r3, #6, #3
     d7e:	f405 757b 	and.w	r5, r5, #1004	; 0x3ec
     d82:	f365 2152 	bfi	r1, r5, #9, #10
     d86:	f36f 41de 	bfc	r1, #19, #12
     d8a:	f36f 71df 	bfc	r1, #31, #1
     d8e:	2300      	movs	r3, #0
     d90:	480a      	ldr	r0, [pc, #40]	; (dbc <twi_init+0x118>)
     d92:	f002 fb2b 	bl	33ec <z_impl_z_log_msg_static_create>
     d96:	46b5      	mov	sp, r6
    }

    nrfx_twim_enable(&m_twim_instance);
    
    return 0;
}
     d98:	4620      	mov	r0, r4
     d9a:	3734      	adds	r7, #52	; 0x34
     d9c:	46bd      	mov	sp, r7
     d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG_ERR("twim_init failed. (err %x)", err);
     da0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
     da4:	e7ca      	b.n	d3c <twi_init+0x98>
     da6:	f06f 051b 	mvn.w	r5, #27
     daa:	e7d3      	b.n	d54 <twi_init+0xb0>
    nrfx_twim_enable(&m_twim_instance);
     dac:	4805      	ldr	r0, [pc, #20]	; (dc4 <twi_init+0x120>)
     dae:	f009 fe6d 	bl	aa8c <nrfx_twim_enable>
    return 0;
     db2:	2400      	movs	r4, #0
     db4:	e7f0      	b.n	d98 <twi_init+0xf4>
     db6:	bf00      	nop
     db8:	00010334 	.word	0x00010334
     dbc:	00010164 	.word	0x00010164
     dc0:	000008a1 	.word	0x000008a1
     dc4:	000103a0 	.word	0x000103a0
     dc8:	0bad0000 	.word	0x0bad0000
     dcc:	0001034c 	.word	0x0001034c

00000dd0 <read_accel_values>:

    return err;
}

int read_accel_values(accel_values_t * p_accel_values)
{
     dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
     dd2:	b085      	sub	sp, #20
     dd4:	af00      	add	r7, sp, #0
     dd6:	4604      	mov	r4, r0
    int err;
    uint8_t raw_values[6];
    err = app_mpu_read_registers(MPU_REG_ACCEL_XOUT_H, raw_values, 6);
     dd8:	2206      	movs	r2, #6
     dda:	f107 0108 	add.w	r1, r7, #8
     dde:	203b      	movs	r0, #59	; 0x3b
     de0:	f7ff fee0 	bl	ba4 <app_mpu_read_registers>
    if (err) {
     de4:	4605      	mov	r5, r0
     de6:	b908      	cbnz	r0, dec <read_accel_values+0x1c>
        return err;
    }

    uint8_t *data;
    data = (uint8_t*)p_accel_values;
    for (uint8_t i=0; i<6; i++) {
     de8:	2300      	movs	r3, #0
     dea:	e046      	b.n	e7a <read_accel_values+0xaa>
        LOG_ERR("Could not read accellerometer data. err: %d", err);
     dec:	466e      	mov	r6, sp
     dee:	b088      	sub	sp, #32
     df0:	466b      	mov	r3, sp
     df2:	f113 0210 	adds.w	r2, r3, #16
     df6:	d02f      	beq.n	e58 <read_accel_values+0x88>
     df8:	210c      	movs	r1, #12
     dfa:	b11a      	cbz	r2, e04 <read_accel_values+0x34>
     dfc:	2904      	cmp	r1, #4
     dfe:	dd01      	ble.n	e04 <read_accel_values+0x34>
     e00:	4821      	ldr	r0, [pc, #132]	; (e88 <read_accel_values+0xb8>)
     e02:	6158      	str	r0, [r3, #20]
     e04:	b112      	cbz	r2, e0c <read_accel_values+0x3c>
     e06:	2908      	cmp	r1, #8
     e08:	dd00      	ble.n	e0c <read_accel_values+0x3c>
     e0a:	619d      	str	r5, [r3, #24]
     e0c:	290b      	cmp	r1, #11
     e0e:	dd26      	ble.n	e5e <read_accel_values+0x8e>
     e10:	240c      	movs	r4, #12
     e12:	b13a      	cbz	r2, e24 <read_accel_values+0x54>
     e14:	2103      	movs	r1, #3
     e16:	7139      	strb	r1, [r7, #4]
     e18:	2100      	movs	r1, #0
     e1a:	7179      	strb	r1, [r7, #5]
     e1c:	71b9      	strb	r1, [r7, #6]
     e1e:	71f9      	strb	r1, [r7, #7]
     e20:	6878      	ldr	r0, [r7, #4]
     e22:	6118      	str	r0, [r3, #16]
     e24:	2100      	movs	r1, #0
     e26:	f36f 0100 	bfc	r1, #0, #1
     e2a:	f36f 0141 	bfc	r1, #1, #1
     e2e:	f36f 0182 	bfc	r1, #2, #1
     e32:	f36f 01c5 	bfc	r1, #3, #3
     e36:	2301      	movs	r3, #1
     e38:	f363 1188 	bfi	r1, r3, #6, #3
     e3c:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
     e40:	f363 2152 	bfi	r1, r3, #9, #10
     e44:	f36f 41de 	bfc	r1, #19, #12
     e48:	f36f 71df 	bfc	r1, #31, #1
     e4c:	2300      	movs	r3, #0
     e4e:	480f      	ldr	r0, [pc, #60]	; (e8c <read_accel_values+0xbc>)
     e50:	f002 facc 	bl	33ec <z_impl_z_log_msg_static_create>
     e54:	46b5      	mov	sp, r6
        return err;
     e56:	e012      	b.n	e7e <read_accel_values+0xae>
        LOG_ERR("Could not read accellerometer data. err: %d", err);
     e58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
     e5c:	e7cd      	b.n	dfa <read_accel_values+0x2a>
     e5e:	f06f 041b 	mvn.w	r4, #27
     e62:	e7d6      	b.n	e12 <read_accel_values+0x42>
        *data = raw_values[5-i];
     e64:	f1c3 0205 	rsb	r2, r3, #5
     e68:	f107 0110 	add.w	r1, r7, #16
     e6c:	440a      	add	r2, r1
     e6e:	f812 2c08 	ldrb.w	r2, [r2, #-8]
     e72:	f804 2b01 	strb.w	r2, [r4], #1
    for (uint8_t i=0; i<6; i++) {
     e76:	3301      	adds	r3, #1
     e78:	b2db      	uxtb	r3, r3
     e7a:	2b05      	cmp	r3, #5
     e7c:	d9f2      	bls.n	e64 <read_accel_values+0x94>
        data++;
    }
    return 0;
}
     e7e:	4628      	mov	r0, r5
     e80:	3714      	adds	r7, #20
     e82:	46bd      	mov	sp, r7
     e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e86:	bf00      	nop
     e88:	00010368 	.word	0x00010368
     e8c:	00010164 	.word	0x00010164

00000e90 <motor_init>:
//    }
//
//}

int motor_init(void)
{
     e90:	b5b0      	push	{r4, r5, r7, lr}
     e92:	b08c      	sub	sp, #48	; 0x30
     e94:	af00      	add	r7, sp, #0
    LOG_INF("Initializing Motor Control");
     e96:	4b42      	ldr	r3, [pc, #264]	; (fa0 <motor_init+0x110>)
     e98:	62fb      	str	r3, [r7, #44]	; 0x2c
     e9a:	2502      	movs	r5, #2
     e9c:	713d      	strb	r5, [r7, #4]
     e9e:	2400      	movs	r4, #0
     ea0:	717c      	strb	r4, [r7, #5]
     ea2:	71bc      	strb	r4, [r7, #6]
     ea4:	71fc      	strb	r4, [r7, #7]
     ea6:	687b      	ldr	r3, [r7, #4]
     ea8:	62bb      	str	r3, [r7, #40]	; 0x28
     eaa:	4621      	mov	r1, r4
     eac:	f364 0100 	bfi	r1, r4, #0, #1
     eb0:	f364 0141 	bfi	r1, r4, #1, #1
     eb4:	f364 0182 	bfi	r1, r4, #2, #1
     eb8:	f364 01c5 	bfi	r1, r4, #3, #3
     ebc:	2303      	movs	r3, #3
     ebe:	f363 1188 	bfi	r1, r3, #6, #3
     ec2:	2308      	movs	r3, #8
     ec4:	f363 2152 	bfi	r1, r3, #9, #10
     ec8:	f364 41de 	bfi	r1, r4, #19, #12
     ecc:	f364 71df 	bfi	r1, r4, #31, #1
     ed0:	4623      	mov	r3, r4
     ed2:	f107 0228 	add.w	r2, r7, #40	; 0x28
     ed6:	4833      	ldr	r0, [pc, #204]	; (fa4 <motor_init+0x114>)
     ed8:	f002 fa88 	bl	33ec <z_impl_z_log_msg_static_create>

    //set_gpio_voltage();

    nrfx_err_t err;
    nrfx_pwm_config_t pwm_config    = NRFX_PWM_DEFAULT_CONFIG(SERVO_PIN, NRFX_PWM_PIN_NOT_USED, NRFX_PWM_PIN_NOT_USED, NRFX_PWM_PIN_NOT_USED);
     edc:	60bc      	str	r4, [r7, #8]
     ede:	60fc      	str	r4, [r7, #12]
     ee0:	613c      	str	r4, [r7, #16]
     ee2:	82bc      	strh	r4, [r7, #20]
     ee4:	f06f 03fc 	mvn.w	r3, #252	; 0xfc
     ee8:	60bb      	str	r3, [r7, #8]
     eea:	2307      	movs	r3, #7
     eec:	733b      	strb	r3, [r7, #12]
     eee:	2304      	movs	r3, #4
     ef0:	737b      	strb	r3, [r7, #13]
     ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     ef6:	823b      	strh	r3, [r7, #16]
    pwm_config.top_value            = PWM_PERIOD;
     ef8:	f644 6320 	movw	r3, #20000	; 0x4e20
     efc:	823b      	strh	r3, [r7, #16]
    pwm_config.load_mode            = NRF_PWM_LOAD_INDIVIDUAL;
     efe:	74bd      	strb	r5, [r7, #18]
    
    err = nrfx_pwm_init(&pwm, &pwm_config, NULL, NULL);
     f00:	4623      	mov	r3, r4
     f02:	4622      	mov	r2, r4
     f04:	f107 0108 	add.w	r1, r7, #8
     f08:	4827      	ldr	r0, [pc, #156]	; (fa8 <motor_init+0x118>)
     f0a:	f008 ff73 	bl	9df4 <nrfx_pwm_init>
    if (err != NRFX_SUCCESS) {  // NB: NRFX_SUCCESS != 0
     f0e:	4b27      	ldr	r3, [pc, #156]	; (fac <motor_init+0x11c>)
     f10:	4298      	cmp	r0, r3
     f12:	d034      	beq.n	f7e <motor_init+0xee>
        LOG_ERR("nrfx_pwm_init() failed, err %d", err);
     f14:	466d      	mov	r5, sp
     f16:	b088      	sub	sp, #32
     f18:	466b      	mov	r3, sp
     f1a:	f113 0210 	adds.w	r2, r3, #16
     f1e:	d038      	beq.n	f92 <motor_init+0x102>
     f20:	210c      	movs	r1, #12
     f22:	b11a      	cbz	r2, f2c <motor_init+0x9c>
     f24:	2904      	cmp	r1, #4
     f26:	dd01      	ble.n	f2c <motor_init+0x9c>
     f28:	4c21      	ldr	r4, [pc, #132]	; (fb0 <motor_init+0x120>)
     f2a:	615c      	str	r4, [r3, #20]
     f2c:	b112      	cbz	r2, f34 <motor_init+0xa4>
     f2e:	2908      	cmp	r1, #8
     f30:	dd00      	ble.n	f34 <motor_init+0xa4>
     f32:	6198      	str	r0, [r3, #24]
     f34:	290b      	cmp	r1, #11
     f36:	dd2f      	ble.n	f98 <motor_init+0x108>
     f38:	240c      	movs	r4, #12
     f3a:	b13a      	cbz	r2, f4c <motor_init+0xbc>
     f3c:	2103      	movs	r1, #3
     f3e:	7139      	strb	r1, [r7, #4]
     f40:	2100      	movs	r1, #0
     f42:	7179      	strb	r1, [r7, #5]
     f44:	71b9      	strb	r1, [r7, #6]
     f46:	71f9      	strb	r1, [r7, #7]
     f48:	6878      	ldr	r0, [r7, #4]
     f4a:	6118      	str	r0, [r3, #16]
     f4c:	2100      	movs	r1, #0
     f4e:	f36f 0100 	bfc	r1, #0, #1
     f52:	f36f 0141 	bfc	r1, #1, #1
     f56:	f36f 0182 	bfc	r1, #2, #1
     f5a:	f36f 01c5 	bfc	r1, #3, #3
     f5e:	2301      	movs	r3, #1
     f60:	f363 1188 	bfi	r1, r3, #6, #3
     f64:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
     f68:	f364 2152 	bfi	r1, r4, #9, #10
     f6c:	f36f 41de 	bfc	r1, #19, #12
     f70:	f36f 71df 	bfc	r1, #31, #1
     f74:	2300      	movs	r3, #0
     f76:	480b      	ldr	r0, [pc, #44]	; (fa4 <motor_init+0x114>)
     f78:	f002 fa38 	bl	33ec <z_impl_z_log_msg_static_create>
     f7c:	46ad      	mov	sp, r5
    }

    nrfx_pwm_simple_playback(&pwm, &position_1_sequence, 50, NRFX_PWM_FLAG_STOP);
     f7e:	2301      	movs	r3, #1
     f80:	2232      	movs	r2, #50	; 0x32
     f82:	490c      	ldr	r1, [pc, #48]	; (fb4 <motor_init+0x124>)
     f84:	4808      	ldr	r0, [pc, #32]	; (fa8 <motor_init+0x118>)
     f86:	f008 ffcb 	bl	9f20 <nrfx_pwm_simple_playback>

    return 0;
}
     f8a:	2000      	movs	r0, #0
     f8c:	3730      	adds	r7, #48	; 0x30
     f8e:	46bd      	mov	sp, r7
     f90:	bdb0      	pop	{r4, r5, r7, pc}
        LOG_ERR("nrfx_pwm_init() failed, err %d", err);
     f92:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
     f96:	e7c4      	b.n	f22 <motor_init+0x92>
     f98:	f06f 041b 	mvn.w	r4, #27
     f9c:	e7cd      	b.n	f3a <motor_init+0xaa>
     f9e:	bf00      	nop
     fa0:	000103a8 	.word	0x000103a8
     fa4:	00010154 	.word	0x00010154
     fa8:	20000030 	.word	0x20000030
     fac:	0bad0000 	.word	0x0bad0000
     fb0:	000103c4 	.word	0x000103c4
     fb4:	20000008 	.word	0x20000008

00000fb8 <set_motor_angle>:

void set_motor_angle(uint16_t angle)
{
     fb8:	b5b0      	push	{r4, r5, r7, lr}
     fba:	b082      	sub	sp, #8
     fbc:	af00      	add	r7, sp, #0
     fbe:	4604      	mov	r4, r0

    LOG_INF("setting angle %d", angle);
     fc0:	466d      	mov	r5, sp
     fc2:	b088      	sub	sp, #32
     fc4:	466b      	mov	r3, sp
     fc6:	f113 0210 	adds.w	r2, r3, #16
     fca:	d036      	beq.n	103a <CONFIG_FPROTECT_BLOCK_SIZE+0x3a>
     fcc:	210c      	movs	r1, #12
     fce:	b11a      	cbz	r2, fd8 <set_motor_angle+0x20>
     fd0:	2904      	cmp	r1, #4
     fd2:	dd01      	ble.n	fd8 <set_motor_angle+0x20>
     fd4:	4823      	ldr	r0, [pc, #140]	; (1064 <CONFIG_FPROTECT_BLOCK_SIZE+0x64>)
     fd6:	6158      	str	r0, [r3, #20]
     fd8:	b112      	cbz	r2, fe0 <set_motor_angle+0x28>
     fda:	2908      	cmp	r1, #8
     fdc:	dd00      	ble.n	fe0 <set_motor_angle+0x28>
     fde:	619c      	str	r4, [r3, #24]
     fe0:	290b      	cmp	r1, #11
     fe2:	dd2d      	ble.n	1040 <CONFIG_FPROTECT_BLOCK_SIZE+0x40>
     fe4:	f04f 0c0c 	mov.w	ip, #12
     fe8:	b13a      	cbz	r2, ffa <set_motor_angle+0x42>
     fea:	2103      	movs	r1, #3
     fec:	7139      	strb	r1, [r7, #4]
     fee:	2100      	movs	r1, #0
     ff0:	7179      	strb	r1, [r7, #5]
     ff2:	71b9      	strb	r1, [r7, #6]
     ff4:	71f9      	strb	r1, [r7, #7]
     ff6:	6878      	ldr	r0, [r7, #4]
     ff8:	6118      	str	r0, [r3, #16]
     ffa:	2100      	movs	r1, #0
     ffc:	f36f 0100 	bfc	r1, #0, #1
    1000:	f36f 0141 	bfc	r1, #1, #1
    1004:	f36f 0182 	bfc	r1, #2, #1
    1008:	f36f 01c5 	bfc	r1, #3, #3
    100c:	2303      	movs	r3, #3
    100e:	f363 1188 	bfi	r1, r3, #6, #3
    1012:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
    1016:	f36c 2152 	bfi	r1, ip, #9, #10
    101a:	f36f 41de 	bfc	r1, #19, #12
    101e:	f36f 71df 	bfc	r1, #31, #1
    1022:	2300      	movs	r3, #0
    1024:	4810      	ldr	r0, [pc, #64]	; (1068 <CONFIG_FPROTECT_BLOCK_SIZE+0x68>)
    1026:	f002 f9e1 	bl	33ec <z_impl_z_log_msg_static_create>
    102a:	46ad      	mov	sp, r5
    if (angle == 1) {
    102c:	2c01      	cmp	r4, #1
    102e:	d00a      	beq.n	1046 <CONFIG_FPROTECT_BLOCK_SIZE+0x46>
        nrfx_pwm_simple_playback(&pwm, &position_1_sequence, 100, NRFX_PWM_FLAG_STOP);
    }
    else if (angle == 2) {
    1030:	2c02      	cmp	r4, #2
    1032:	d00f      	beq.n	1054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>
        nrfx_pwm_simple_playback(&pwm, &position_2_sequence, 100, NRFX_PWM_FLAG_STOP);
    }

    1034:	3708      	adds	r7, #8
    1036:	46bd      	mov	sp, r7
    1038:	bdb0      	pop	{r4, r5, r7, pc}
    LOG_INF("setting angle %d", angle);
    103a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    103e:	e7c6      	b.n	fce <set_motor_angle+0x16>
    1040:	f06f 0c1b 	mvn.w	ip, #27
    1044:	e7d0      	b.n	fe8 <set_motor_angle+0x30>
        nrfx_pwm_simple_playback(&pwm, &position_1_sequence, 100, NRFX_PWM_FLAG_STOP);
    1046:	2301      	movs	r3, #1
    1048:	2264      	movs	r2, #100	; 0x64
    104a:	4908      	ldr	r1, [pc, #32]	; (106c <CONFIG_FPROTECT_BLOCK_SIZE+0x6c>)
    104c:	4808      	ldr	r0, [pc, #32]	; (1070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>)
    104e:	f008 ff67 	bl	9f20 <nrfx_pwm_simple_playback>
    1052:	e7ef      	b.n	1034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>
        nrfx_pwm_simple_playback(&pwm, &position_2_sequence, 100, NRFX_PWM_FLAG_STOP);
    1054:	2301      	movs	r3, #1
    1056:	2264      	movs	r2, #100	; 0x64
    1058:	4906      	ldr	r1, [pc, #24]	; (1074 <CONFIG_FPROTECT_BLOCK_SIZE+0x74>)
    105a:	4805      	ldr	r0, [pc, #20]	; (1070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>)
    105c:	f008 ff60 	bl	9f20 <nrfx_pwm_simple_playback>
    1060:	e7e8      	b.n	1034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>
    1062:	bf00      	nop
    1064:	000103e4 	.word	0x000103e4
    1068:	00010154 	.word	0x00010154
    106c:	20000008 	.word	0x20000008
    1070:	20000030 	.word	0x20000030
    1074:	20000020 	.word	0x20000020

00001078 <get_package_len>:
}

#endif

static size_t get_package_len(void *packaged)
{
    1078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__ASSERT_NO_MSG(packaged != NULL);
    107a:	4606      	mov	r6, r0
    107c:	b138      	cbz	r0, 108e <get_package_len+0x16>

	uint8_t *buf = packaged;
	uint8_t *start = buf;
	unsigned int args_size, s_nbr, ros_nbr;

	args_size = buf[0] * sizeof(int);
    107e:	7830      	ldrb	r0, [r6, #0]
	s_nbr     = buf[1];
    1080:	7875      	ldrb	r5, [r6, #1]
	ros_nbr   = buf[2];
    1082:	78b4      	ldrb	r4, [r6, #2]

	/* Move beyond args. */
	buf += args_size;

	/* Move beyond read-only string indexes array. */
	buf += ros_nbr;
    1084:	eb04 0480 	add.w	r4, r4, r0, lsl #2
    1088:	4434      	add	r4, r6

	/* Move beyond strings appended to the package. */
	for (int i = 0; i < s_nbr; i++) {
    108a:	2700      	movs	r7, #0
    108c:	e012      	b.n	10b4 <get_package_len+0x3c>
	__ASSERT_NO_MSG(packaged != NULL);
    108e:	4c0b      	ldr	r4, [pc, #44]	; (10bc <get_package_len+0x44>)
    1090:	23c4      	movs	r3, #196	; 0xc4
    1092:	4622      	mov	r2, r4
    1094:	490a      	ldr	r1, [pc, #40]	; (10c0 <get_package_len+0x48>)
    1096:	480b      	ldr	r0, [pc, #44]	; (10c4 <get_package_len+0x4c>)
    1098:	f00d fe8b 	bl	edb2 <assert_print>
    109c:	21c4      	movs	r1, #196	; 0xc4
    109e:	4620      	mov	r0, r4
    10a0:	f00d fe80 	bl	eda4 <assert_post_action>
    10a4:	e7eb      	b.n	107e <get_package_len+0x6>
		buf++;
    10a6:	3401      	adds	r4, #1
		buf += strlen((const char *)buf) + 1;
    10a8:	4620      	mov	r0, r4
    10aa:	f00e f896 	bl	f1da <strlen>
    10ae:	3001      	adds	r0, #1
    10b0:	4404      	add	r4, r0
	for (int i = 0; i < s_nbr; i++) {
    10b2:	3701      	adds	r7, #1
    10b4:	42af      	cmp	r7, r5
    10b6:	d3f6      	bcc.n	10a6 <get_package_len+0x2e>
	}

	return (size_t)(uintptr_t)(buf - start);
}
    10b8:	1ba0      	subs	r0, r4, r6
    10ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    10bc:	00010408 	.word	0x00010408
    10c0:	00010438 	.word	0x00010438
    10c4:	00010450 	.word	0x00010450

000010c8 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
    10c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    10cc:	b093      	sub	sp, #76	; 0x4c
    10ce:	9101      	str	r1, [sp, #4]
    10d0:	4693      	mov	fp, r2
    10d2:	9303      	str	r3, [sp, #12]
    10d4:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	__ASSERT_NO_MSG(in_packaged != NULL);
    10d6:	4606      	mov	r6, r0
    10d8:	b168      	cbz	r0, 10f6 <cbprintf_package_convert+0x2e>
	unsigned int args_size, ros_nbr, rws_nbr;
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
    10da:	9b01      	ldr	r3, [sp, #4]
    10dc:	b1cb      	cbz	r3, 1112 <cbprintf_package_convert+0x4a>

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
    10de:	f896 8002 	ldrb.w	r8, [r6, #2]
    10e2:	f8cd 8008 	str.w	r8, [sp, #8]
	ro_cpy = ros_nbr &&
    10e6:	f1b8 0f00 	cmp.w	r8, #0
    10ea:	d017      	beq.n	111c <cbprintf_package_convert+0x54>
    10ec:	f017 0f01 	tst.w	r7, #1
    10f0:	d11f      	bne.n	1132 <cbprintf_package_convert+0x6a>
    10f2:	2300      	movs	r3, #0
    10f4:	e013      	b.n	111e <cbprintf_package_convert+0x56>
	__ASSERT_NO_MSG(in_packaged != NULL);
    10f6:	4cac      	ldr	r4, [pc, #688]	; (13a8 <cbprintf_package_convert+0x2e0>)
    10f8:	f240 335f 	movw	r3, #863	; 0x35f
    10fc:	4622      	mov	r2, r4
    10fe:	49ab      	ldr	r1, [pc, #684]	; (13ac <cbprintf_package_convert+0x2e4>)
    1100:	48ab      	ldr	r0, [pc, #684]	; (13b0 <cbprintf_package_convert+0x2e8>)
    1102:	f00d fe56 	bl	edb2 <assert_print>
    1106:	f240 315f 	movw	r1, #863	; 0x35f
    110a:	4620      	mov	r0, r4
    110c:	f00d fe4a 	bl	eda4 <assert_post_action>
    1110:	e7e3      	b.n	10da <cbprintf_package_convert+0x12>
	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
    1112:	4630      	mov	r0, r6
    1114:	f7ff ffb0 	bl	1078 <get_package_len>
    1118:	9001      	str	r0, [sp, #4]
    111a:	e7e0      	b.n	10de <cbprintf_package_convert+0x16>
	ro_cpy = ros_nbr &&
    111c:	2300      	movs	r3, #0
		(flags & CBPRINTF_PACKAGE_COPY_RO_STR) == CBPRINTF_PACKAGE_COPY_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
    111e:	f896 a003 	ldrb.w	sl, [r6, #3]
	rw_cpy = rws_nbr > 0 &&
    1122:	f1ba 0f00 	cmp.w	sl, #0
    1126:	d006      	beq.n	1136 <cbprintf_package_convert+0x6e>
    1128:	f017 0f02 	tst.w	r7, #2
    112c:	d11d      	bne.n	116a <cbprintf_package_convert+0xa2>
    112e:	2200      	movs	r2, #0
    1130:	e002      	b.n	1138 <cbprintf_package_convert+0x70>
	ro_cpy = ros_nbr &&
    1132:	2301      	movs	r3, #1
    1134:	e7f3      	b.n	111e <cbprintf_package_convert+0x56>
	rw_cpy = rws_nbr > 0 &&
    1136:	2200      	movs	r2, #0

	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
    1138:	b902      	cbnz	r2, 113c <cbprintf_package_convert+0x74>
    113a:	b1c3      	cbz	r3, 116e <cbprintf_package_convert+0xa6>

	/* If we got here, it means that coping will be more complex and will be
	 * done with strings appending.
	 * Retrieve the size of the arg list.
	 */
	args_size = in_desc->len * sizeof(int);
    113c:	7835      	ldrb	r5, [r6, #0]
    113e:	00aa      	lsls	r2, r5, #2
    1140:	9204      	str	r2, [sp, #16]
	int out_len;

	/* Pointer to array with string locations. Array starts with read-only
	 * string locations.
	 */
	uint8_t *str_pos = &buf[args_size];
    1142:	eb06 0585 	add.w	r5, r6, r5, lsl #2
	size_t strl_cnt = 0;

	/* If null destination, just calculate output length. */
	if (cb == NULL) {
    1146:	f1bb 0f00 	cmp.w	fp, #0
    114a:	d01c      	beq.n	1186 <cbprintf_package_convert+0xbe>

	/* If read-only strings shall be appended to the output package copy
	 * their indexes to the local array, otherwise indicate that indexes
	 * shall remain in the output package.
	 */
	if (ro_cpy) {
    114c:	2b00      	cmp	r3, #0
    114e:	f040 8086 	bne.w	125e <cbprintf_package_convert+0x196>
		scpy_cnt = ros_nbr;
		keep_cnt = 0;
		dst = cpy_str_pos;
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
    1152:	9b02      	ldr	r3, [sp, #8]
    1154:	2b00      	cmp	r3, #0
    1156:	f000 8090 	beq.w	127a <cbprintf_package_convert+0x1b2>
    115a:	f017 0f04 	tst.w	r7, #4
    115e:	f040 8090 	bne.w	1282 <cbprintf_package_convert+0x1ba>
		keep_cnt = ros_nbr;
		dst = keep_str_pos;
	} else {
		scpy_cnt = 0;
		keep_cnt = 0;
		dst = NULL;
    1162:	2000      	movs	r0, #0
		keep_cnt = 0;
    1164:	4681      	mov	r9, r0
		scpy_cnt = 0;
    1166:	4680      	mov	r8, r0
    1168:	e07c      	b.n	1264 <cbprintf_package_convert+0x19c>
	rw_cpy = rws_nbr > 0 &&
    116a:	2201      	movs	r2, #1
    116c:	e7e4      	b.n	1138 <cbprintf_package_convert+0x70>
		if (cb) {
    116e:	f1bb 0f00 	cmp.w	fp, #0
    1172:	d003      	beq.n	117c <cbprintf_package_convert+0xb4>
			cb(in_packaged, in_len, ctx);
    1174:	9a03      	ldr	r2, [sp, #12]
    1176:	9901      	ldr	r1, [sp, #4]
    1178:	4630      	mov	r0, r6
    117a:	47d8      	blx	fp
		return in_len;
    117c:	9c01      	ldr	r4, [sp, #4]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
    117e:	4620      	mov	r0, r4
    1180:	b013      	add	sp, #76	; 0x4c
    1182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		out_len = (int)in_len;
    1186:	9c01      	ldr	r4, [sp, #4]
		if (ro_cpy) {
    1188:	bb03      	cbnz	r3, 11cc <cbprintf_package_convert+0x104>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
    118a:	9b02      	ldr	r3, [sp, #8]
    118c:	b3a3      	cbz	r3, 11f8 <cbprintf_package_convert+0x130>
    118e:	f017 0904 	ands.w	r9, r7, #4
    1192:	d028      	beq.n	11e6 <cbprintf_package_convert+0x11e>
				str_pos += ros_nbr;
    1194:	441d      	add	r5, r3
	size_t strl_cnt = 0;
    1196:	f04f 0900 	mov.w	r9, #0
    119a:	e024      	b.n	11e6 <cbprintf_package_convert+0x11e>
				out_len += len;
    119c:	4404      	add	r4, r0
				str_pos++;
    119e:	3501      	adds	r5, #1
			for (int i = 0; i < ros_nbr; i++) {
    11a0:	f108 0801 	add.w	r8, r8, #1
    11a4:	45d0      	cmp	r8, sl
    11a6:	d21b      	bcs.n	11e0 <cbprintf_package_convert+0x118>
				const char *str = *(const char **)&buf32[*str_pos];
    11a8:	782a      	ldrb	r2, [r5, #0]
				int len = append_string(cb, NULL, str, 0);
    11aa:	2300      	movs	r3, #0
    11ac:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
    11b0:	4619      	mov	r1, r3
    11b2:	4658      	mov	r0, fp
    11b4:	f00d fc27 	bl	ea06 <append_string>
				if (strl && strl_cnt < strl_len) {
    11b8:	2f00      	cmp	r7, #0
    11ba:	d0ef      	beq.n	119c <cbprintf_package_convert+0xd4>
    11bc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    11be:	4599      	cmp	r9, r3
    11c0:	d2ec      	bcs.n	119c <cbprintf_package_convert+0xd4>
					strl[strl_cnt++] = (uint16_t)len;
    11c2:	f827 0019 	strh.w	r0, [r7, r9, lsl #1]
    11c6:	f109 0901 	add.w	r9, r9, #1
    11ca:	e7e7      	b.n	119c <cbprintf_package_convert+0xd4>
			for (int i = 0; i < ros_nbr; i++) {
    11cc:	f04f 0800 	mov.w	r8, #0
	size_t strl_cnt = 0;
    11d0:	46c1      	mov	r9, r8
    11d2:	f8cd a004 	str.w	sl, [sp, #4]
    11d6:	f8dd a008 	ldr.w	sl, [sp, #8]
    11da:	971c      	str	r7, [sp, #112]	; 0x70
    11dc:	9f1d      	ldr	r7, [sp, #116]	; 0x74
    11de:	e7e1      	b.n	11a4 <cbprintf_package_convert+0xdc>
    11e0:	f8dd a004 	ldr.w	sl, [sp, #4]
    11e4:	9f1c      	ldr	r7, [sp, #112]	; 0x70
		bool drop_ro_str_pos = !(flags &
    11e6:	f007 0305 	and.w	r3, r7, #5
    11ea:	9301      	str	r3, [sp, #4]
		for (int i = 0; i < rws_nbr; i++) {
    11ec:	f04f 0800 	mov.w	r8, #0
    11f0:	f8cd b008 	str.w	fp, [sp, #8]
    11f4:	46b3      	mov	fp, r6
    11f6:	e023      	b.n	1240 <cbprintf_package_convert+0x178>
	size_t strl_cnt = 0;
    11f8:	f8dd 9008 	ldr.w	r9, [sp, #8]
    11fc:	e7f3      	b.n	11e6 <cbprintf_package_convert+0x11e>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    11fe:	2300      	movs	r3, #0
			if ((is_ro && flags & CBPRINTF_PACKAGE_COPY_RO_STR) ||
    1200:	461e      	mov	r6, r3
    1202:	b113      	cbz	r3, 120a <cbprintf_package_convert+0x142>
    1204:	f017 0f01 	tst.w	r7, #1
    1208:	d103      	bne.n	1212 <cbprintf_package_convert+0x14a>
    120a:	b996      	cbnz	r6, 1232 <cbprintf_package_convert+0x16a>
			    (!is_ro && flags & CBPRINTF_PACKAGE_COPY_RW_STR)) {
    120c:	f017 0f02 	tst.w	r7, #2
    1210:	d00f      	beq.n	1232 <cbprintf_package_convert+0x16a>
				int len = append_string(cb, NULL, str, 0);
    1212:	2300      	movs	r3, #0
    1214:	4619      	mov	r1, r3
    1216:	9802      	ldr	r0, [sp, #8]
    1218:	f00d fbf5 	bl	ea06 <append_string>
				if (strl && strl_cnt < strl_len) {
    121c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    121e:	b13b      	cbz	r3, 1230 <cbprintf_package_convert+0x168>
    1220:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1222:	4599      	cmp	r9, r3
    1224:	d204      	bcs.n	1230 <cbprintf_package_convert+0x168>
					strl[strl_cnt++] = (uint16_t)len;
    1226:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    1228:	f823 0019 	strh.w	r0, [r3, r9, lsl #1]
    122c:	f109 0901 	add.w	r9, r9, #1
				out_len += len;
    1230:	4404      	add	r4, r0
			if (is_ro && drop_ro_str_pos) {
    1232:	b116      	cbz	r6, 123a <cbprintf_package_convert+0x172>
    1234:	9b01      	ldr	r3, [sp, #4]
    1236:	b903      	cbnz	r3, 123a <cbprintf_package_convert+0x172>
				out_len--;
    1238:	3c01      	subs	r4, #1
			str_pos++;
    123a:	3501      	adds	r5, #1
		for (int i = 0; i < rws_nbr; i++) {
    123c:	f108 0801 	add.w	r8, r8, #1
    1240:	45d0      	cmp	r8, sl
    1242:	d29c      	bcs.n	117e <cbprintf_package_convert+0xb6>
			const char *str = *(const char **)&buf32[*str_pos];
    1244:	782b      	ldrb	r3, [r5, #0]
    1246:	f85b 2023 	ldr.w	r2, [fp, r3, lsl #2]
    124a:	4b5a      	ldr	r3, [pc, #360]	; (13b4 <cbprintf_package_convert+0x2ec>)
    124c:	429a      	cmp	r2, r3
    124e:	d3d6      	bcc.n	11fe <cbprintf_package_convert+0x136>
    1250:	4b59      	ldr	r3, [pc, #356]	; (13b8 <cbprintf_package_convert+0x2f0>)
    1252:	429a      	cmp	r2, r3
    1254:	d301      	bcc.n	125a <cbprintf_package_convert+0x192>
    1256:	2300      	movs	r3, #0
    1258:	e7d2      	b.n	1200 <cbprintf_package_convert+0x138>
    125a:	2301      	movs	r3, #1
    125c:	e7d0      	b.n	1200 <cbprintf_package_convert+0x138>
		dst = cpy_str_pos;
    125e:	a80d      	add	r0, sp, #52	; 0x34
		keep_cnt = 0;
    1260:	f04f 0900 	mov.w	r9, #0
	if (dst) {
    1264:	b118      	cbz	r0, 126e <cbprintf_package_convert+0x1a6>
		memcpy(dst, str_pos, ros_nbr);
    1266:	9a02      	ldr	r2, [sp, #8]
    1268:	4629      	mov	r1, r5
    126a:	f00d ffc9 	bl	f200 <memcpy>
	str_pos += ros_nbr;
    126e:	9b02      	ldr	r3, [sp, #8]
    1270:	441d      	add	r5, r3
	for (int i = 0; i < rws_nbr; i++) {
    1272:	2400      	movs	r4, #0
    1274:	f8cd b014 	str.w	fp, [sp, #20]
    1278:	e01c      	b.n	12b4 <cbprintf_package_convert+0x1ec>
		dst = NULL;
    127a:	2000      	movs	r0, #0
		keep_cnt = 0;
    127c:	4681      	mov	r9, r0
		scpy_cnt = 0;
    127e:	4680      	mov	r8, r0
    1280:	e7f0      	b.n	1264 <cbprintf_package_convert+0x19c>
		keep_cnt = ros_nbr;
    1282:	46c1      	mov	r9, r8
		dst = keep_str_pos;
    1284:	a809      	add	r0, sp, #36	; 0x24
		scpy_cnt = 0;
    1286:	f04f 0800 	mov.w	r8, #0
    128a:	e7eb      	b.n	1264 <cbprintf_package_convert+0x19c>
    128c:	2300      	movs	r3, #0
		if (is_ro) {
    128e:	2b00      	cmp	r3, #0
    1290:	d04e      	beq.n	1330 <cbprintf_package_convert+0x268>
			if (flags & CBPRINTF_PACKAGE_COPY_RO_STR) {
    1292:	f017 0f01 	tst.w	r7, #1
    1296:	d02c      	beq.n	12f2 <cbprintf_package_convert+0x22a>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
    1298:	f1b8 0f0f 	cmp.w	r8, #15
    129c:	d81a      	bhi.n	12d4 <cbprintf_package_convert+0x20c>
				cpy_str_pos[scpy_cnt++] = *str_pos;
    129e:	f108 0301 	add.w	r3, r8, #1
    12a2:	782a      	ldrb	r2, [r5, #0]
    12a4:	a912      	add	r1, sp, #72	; 0x48
    12a6:	4488      	add	r8, r1
    12a8:	f808 2c14 	strb.w	r2, [r8, #-20]
    12ac:	fa5f f883 	uxtb.w	r8, r3
		str_pos++;
    12b0:	3501      	adds	r5, #1
	for (int i = 0; i < rws_nbr; i++) {
    12b2:	3401      	adds	r4, #1
    12b4:	4554      	cmp	r4, sl
    12b6:	f080 8085 	bcs.w	13c4 <cbprintf_package_convert+0x2fc>
		const char *str = *(const char **)&buf32[*str_pos];
    12ba:	782b      	ldrb	r3, [r5, #0]
    12bc:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
    12c0:	4a3c      	ldr	r2, [pc, #240]	; (13b4 <cbprintf_package_convert+0x2ec>)
    12c2:	4293      	cmp	r3, r2
    12c4:	d3e2      	bcc.n	128c <cbprintf_package_convert+0x1c4>
    12c6:	4a3c      	ldr	r2, [pc, #240]	; (13b8 <cbprintf_package_convert+0x2f0>)
    12c8:	4293      	cmp	r3, r2
    12ca:	d301      	bcc.n	12d0 <cbprintf_package_convert+0x208>
    12cc:	2300      	movs	r3, #0
    12ce:	e7de      	b.n	128e <cbprintf_package_convert+0x1c6>
    12d0:	2301      	movs	r3, #1
    12d2:	e7dc      	b.n	128e <cbprintf_package_convert+0x1c6>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
    12d4:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 13a8 <cbprintf_package_convert+0x2e0>
    12d8:	f240 33f2 	movw	r3, #1010	; 0x3f2
    12dc:	465a      	mov	r2, fp
    12de:	4937      	ldr	r1, [pc, #220]	; (13bc <cbprintf_package_convert+0x2f4>)
    12e0:	4833      	ldr	r0, [pc, #204]	; (13b0 <cbprintf_package_convert+0x2e8>)
    12e2:	f00d fd66 	bl	edb2 <assert_print>
    12e6:	f240 31f2 	movw	r1, #1010	; 0x3f2
    12ea:	4658      	mov	r0, fp
    12ec:	f00d fd5a 	bl	eda4 <assert_post_action>
    12f0:	e7d5      	b.n	129e <cbprintf_package_convert+0x1d6>
			} else if (flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
    12f2:	f017 0f04 	tst.w	r7, #4
    12f6:	d0db      	beq.n	12b0 <cbprintf_package_convert+0x1e8>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
    12f8:	f1b9 0f0f 	cmp.w	r9, #15
    12fc:	d809      	bhi.n	1312 <cbprintf_package_convert+0x24a>
				keep_str_pos[keep_cnt++] = *str_pos;
    12fe:	f109 0301 	add.w	r3, r9, #1
    1302:	782a      	ldrb	r2, [r5, #0]
    1304:	a912      	add	r1, sp, #72	; 0x48
    1306:	4489      	add	r9, r1
    1308:	f809 2c24 	strb.w	r2, [r9, #-36]
    130c:	fa5f f983 	uxtb.w	r9, r3
    1310:	e7ce      	b.n	12b0 <cbprintf_package_convert+0x1e8>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
    1312:	f8df b094 	ldr.w	fp, [pc, #148]	; 13a8 <cbprintf_package_convert+0x2e0>
    1316:	f240 33f5 	movw	r3, #1013	; 0x3f5
    131a:	465a      	mov	r2, fp
    131c:	4928      	ldr	r1, [pc, #160]	; (13c0 <cbprintf_package_convert+0x2f8>)
    131e:	4824      	ldr	r0, [pc, #144]	; (13b0 <cbprintf_package_convert+0x2e8>)
    1320:	f00d fd47 	bl	edb2 <assert_print>
    1324:	f240 31f5 	movw	r1, #1013	; 0x3f5
    1328:	4658      	mov	r0, fp
    132a:	f00d fd3b 	bl	eda4 <assert_post_action>
    132e:	e7e6      	b.n	12fe <cbprintf_package_convert+0x236>
			if (flags & CBPRINTF_PACKAGE_COPY_RW_STR) {
    1330:	f017 0f02 	tst.w	r7, #2
    1334:	d01b      	beq.n	136e <cbprintf_package_convert+0x2a6>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
    1336:	f1b8 0f0f 	cmp.w	r8, #15
    133a:	d809      	bhi.n	1350 <cbprintf_package_convert+0x288>
				cpy_str_pos[scpy_cnt++] = *str_pos;
    133c:	f108 0301 	add.w	r3, r8, #1
    1340:	782a      	ldrb	r2, [r5, #0]
    1342:	a912      	add	r1, sp, #72	; 0x48
    1344:	4488      	add	r8, r1
    1346:	f808 2c14 	strb.w	r2, [r8, #-20]
    134a:	fa5f f883 	uxtb.w	r8, r3
    134e:	e7af      	b.n	12b0 <cbprintf_package_convert+0x1e8>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
    1350:	f8df b054 	ldr.w	fp, [pc, #84]	; 13a8 <cbprintf_package_convert+0x2e0>
    1354:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
    1358:	465a      	mov	r2, fp
    135a:	4918      	ldr	r1, [pc, #96]	; (13bc <cbprintf_package_convert+0x2f4>)
    135c:	4814      	ldr	r0, [pc, #80]	; (13b0 <cbprintf_package_convert+0x2e8>)
    135e:	f00d fd28 	bl	edb2 <assert_print>
    1362:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
    1366:	4658      	mov	r0, fp
    1368:	f00d fd1c 	bl	eda4 <assert_post_action>
    136c:	e7e6      	b.n	133c <cbprintf_package_convert+0x274>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
    136e:	f1b9 0f0f 	cmp.w	r9, #15
    1372:	d809      	bhi.n	1388 <cbprintf_package_convert+0x2c0>
				keep_str_pos[keep_cnt++] = *str_pos;
    1374:	f109 0301 	add.w	r3, r9, #1
    1378:	782a      	ldrb	r2, [r5, #0]
    137a:	a912      	add	r1, sp, #72	; 0x48
    137c:	4489      	add	r9, r1
    137e:	f809 2c24 	strb.w	r2, [r9, #-36]
    1382:	fa5f f983 	uxtb.w	r9, r3
    1386:	e793      	b.n	12b0 <cbprintf_package_convert+0x1e8>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
    1388:	f8df b01c 	ldr.w	fp, [pc, #28]	; 13a8 <cbprintf_package_convert+0x2e0>
    138c:	f240 33ff 	movw	r3, #1023	; 0x3ff
    1390:	465a      	mov	r2, fp
    1392:	490b      	ldr	r1, [pc, #44]	; (13c0 <cbprintf_package_convert+0x2f8>)
    1394:	4806      	ldr	r0, [pc, #24]	; (13b0 <cbprintf_package_convert+0x2e8>)
    1396:	f00d fd0c 	bl	edb2 <assert_print>
    139a:	f240 31ff 	movw	r1, #1023	; 0x3ff
    139e:	4658      	mov	r0, fp
    13a0:	f00d fd00 	bl	eda4 <assert_post_action>
    13a4:	e7e6      	b.n	1374 <cbprintf_package_convert+0x2ac>
    13a6:	bf00      	nop
    13a8:	00010408 	.word	0x00010408
    13ac:	00010470 	.word	0x00010470
    13b0:	00010450 	.word	0x00010450
    13b4:	0000fe80 	.word	0x0000fe80
    13b8:	00012aec 	.word	0x00012aec
    13bc:	0001048c 	.word	0x0001048c
    13c0:	000104ac 	.word	0x000104ac
	out_desc.len = in_desc->len;
    13c4:	f8dd b014 	ldr.w	fp, [sp, #20]
    13c8:	7833      	ldrb	r3, [r6, #0]
    13ca:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    13ce:	7873      	ldrb	r3, [r6, #1]
    13d0:	4443      	add	r3, r8
    13d2:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_COPY_RW_STR) ? 0 : keep_cnt;
    13d6:	f017 0f02 	tst.w	r7, #2
    13da:	d00a      	beq.n	13f2 <cbprintf_package_convert+0x32a>
    13dc:	2300      	movs	r3, #0
    13de:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_COPY_RO_STR) ? 0 :
    13e2:	f017 0f01 	tst.w	r7, #1
    13e6:	d106      	bne.n	13f6 <cbprintf_package_convert+0x32e>
    13e8:	f017 0f04 	tst.w	r7, #4
    13ec:	d132      	bne.n	1454 <cbprintf_package_convert+0x38c>
    13ee:	2300      	movs	r3, #0
    13f0:	e002      	b.n	13f8 <cbprintf_package_convert+0x330>
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_COPY_RW_STR) ? 0 : keep_cnt;
    13f2:	464b      	mov	r3, r9
    13f4:	e7f3      	b.n	13de <cbprintf_package_convert+0x316>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_COPY_RO_STR) ? 0 :
    13f6:	2300      	movs	r3, #0
    13f8:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
	struct cbprintf_package_desc in_desc_backup = *in_desc;
    13fc:	6830      	ldr	r0, [r6, #0]
    13fe:	9008      	str	r0, [sp, #32]
	*in_desc = out_desc;
    1400:	9811      	ldr	r0, [sp, #68]	; 0x44
    1402:	6030      	str	r0, [r6, #0]
	rv = cb(in_packaged, args_size, ctx);
    1404:	9f03      	ldr	r7, [sp, #12]
    1406:	463a      	mov	r2, r7
    1408:	9904      	ldr	r1, [sp, #16]
    140a:	4630      	mov	r0, r6
    140c:	47d8      	blx	fp
	if (rv < 0) {
    140e:	1e04      	subs	r4, r0, #0
    1410:	f6ff aeb5 	blt.w	117e <cbprintf_package_convert+0xb6>
	*in_desc = in_desc_backup;
    1414:	9808      	ldr	r0, [sp, #32]
    1416:	6030      	str	r0, [r6, #0]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    1418:	9703      	str	r7, [sp, #12]
    141a:	463a      	mov	r2, r7
    141c:	4649      	mov	r1, r9
    141e:	a809      	add	r0, sp, #36	; 0x24
    1420:	47d8      	blx	fp
	if (rv < 0) {
    1422:	2800      	cmp	r0, #0
    1424:	db43      	blt.n	14ae <cbprintf_package_convert+0x3e6>
	out_len += rv;
    1426:	1827      	adds	r7, r4, r0
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
    1428:	9802      	ldr	r0, [sp, #8]
    142a:	9b04      	ldr	r3, [sp, #16]
    142c:	4418      	add	r0, r3
    142e:	4601      	mov	r1, r0
    1430:	4451      	add	r1, sl
	rv = cb(str_pos, strs_len, ctx);
    1432:	f8dd 900c 	ldr.w	r9, [sp, #12]
    1436:	464a      	mov	r2, r9
    1438:	9b01      	ldr	r3, [sp, #4]
    143a:	1a59      	subs	r1, r3, r1
    143c:	4628      	mov	r0, r5
    143e:	47d8      	blx	fp
	if (rv < 0) {
    1440:	1e04      	subs	r4, r0, #0
    1442:	f6ff ae9c 	blt.w	117e <cbprintf_package_convert+0xb6>
	out_len += rv;
    1446:	193d      	adds	r5, r7, r4
	for (int i = 0; i < scpy_cnt; i++) {
    1448:	2700      	movs	r7, #0
    144a:	9601      	str	r6, [sp, #4]
    144c:	465e      	mov	r6, fp
    144e:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
    1452:	e015      	b.n	1480 <cbprintf_package_convert+0x3b8>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_COPY_RO_STR) ? 0 :
    1454:	464b      	mov	r3, r9
    1456:	e7cf      	b.n	13f8 <cbprintf_package_convert+0x330>
		uint16_t str_len = strl ? strl[i] : 0;
    1458:	f04f 0a00 	mov.w	sl, #0
		rv = cb(&loc, 1, ctx);
    145c:	464a      	mov	r2, r9
    145e:	2101      	movs	r1, #1
    1460:	f10d 001f 	add.w	r0, sp, #31
    1464:	47b0      	blx	r6
		if (rv < 0) {
    1466:	2800      	cmp	r0, #0
    1468:	db23      	blt.n	14b2 <cbprintf_package_convert+0x3ea>
		out_len += rv;
    146a:	4405      	add	r5, r0
		rv = append_string(cb, ctx, str, str_len);
    146c:	4653      	mov	r3, sl
    146e:	4622      	mov	r2, r4
    1470:	4649      	mov	r1, r9
    1472:	4630      	mov	r0, r6
    1474:	f00d fac7 	bl	ea06 <append_string>
		if (rv < 0) {
    1478:	2800      	cmp	r0, #0
    147a:	db1c      	blt.n	14b6 <cbprintf_package_convert+0x3ee>
		out_len += rv;
    147c:	4405      	add	r5, r0
	for (int i = 0; i < scpy_cnt; i++) {
    147e:	3701      	adds	r7, #1
    1480:	45b8      	cmp	r8, r7
    1482:	dd0e      	ble.n	14a2 <cbprintf_package_convert+0x3da>
		uint8_t loc = cpy_str_pos[i];
    1484:	ab12      	add	r3, sp, #72	; 0x48
    1486:	443b      	add	r3, r7
    1488:	f813 3c14 	ldrb.w	r3, [r3, #-20]
    148c:	f88d 301f 	strb.w	r3, [sp, #31]
		const char *str = *(const char **)&buf32[loc];
    1490:	9a01      	ldr	r2, [sp, #4]
    1492:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
    1496:	f1bb 0f00 	cmp.w	fp, #0
    149a:	d0dd      	beq.n	1458 <cbprintf_package_convert+0x390>
    149c:	f83b a017 	ldrh.w	sl, [fp, r7, lsl #1]
    14a0:	e7dc      	b.n	145c <cbprintf_package_convert+0x394>
	(void)cb(NULL, 0, ctx);
    14a2:	9a03      	ldr	r2, [sp, #12]
    14a4:	2100      	movs	r1, #0
    14a6:	4608      	mov	r0, r1
    14a8:	47b0      	blx	r6
	return out_len;
    14aa:	462c      	mov	r4, r5
    14ac:	e667      	b.n	117e <cbprintf_package_convert+0xb6>
		return rv;
    14ae:	4604      	mov	r4, r0
    14b0:	e665      	b.n	117e <cbprintf_package_convert+0xb6>
    14b2:	4604      	mov	r4, r0
    14b4:	e663      	b.n	117e <cbprintf_package_convert+0xb6>
    14b6:	4604      	mov	r4, r0
    14b8:	e661      	b.n	117e <cbprintf_package_convert+0xb6>
    14ba:	bf00      	nop

000014bc <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    14bc:	b538      	push	{r3, r4, r5, lr}
    14be:	4604      	mov	r4, r0
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    14c0:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
    14c2:	f003 0303 	and.w	r3, r3, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    14c6:	6081      	str	r1, [r0, #8]
	switch (method) {
    14c8:	2b02      	cmp	r3, #2
    14ca:	d903      	bls.n	14d4 <sys_notify_finalize+0x18>
    14cc:	2b03      	cmp	r3, #3
    14ce:	d102      	bne.n	14d6 <sys_notify_finalize+0x1a>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    14d0:	6800      	ldr	r0, [r0, #0]
		break;
    14d2:	e00e      	b.n	14f2 <sys_notify_finalize+0x36>
	switch (method) {
    14d4:	b963      	cbnz	r3, 14f0 <sys_notify_finalize+0x34>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
		break;
	default:
		__ASSERT_NO_MSG(false);
    14d6:	4d08      	ldr	r5, [pc, #32]	; (14f8 <sys_notify_finalize+0x3c>)
    14d8:	2345      	movs	r3, #69	; 0x45
    14da:	462a      	mov	r2, r5
    14dc:	4907      	ldr	r1, [pc, #28]	; (14fc <sys_notify_finalize+0x40>)
    14de:	4808      	ldr	r0, [pc, #32]	; (1500 <sys_notify_finalize+0x44>)
    14e0:	f00d fc67 	bl	edb2 <assert_print>
    14e4:	2145      	movs	r1, #69	; 0x45
    14e6:	4628      	mov	r0, r5
    14e8:	f00d fc5c 	bl	eda4 <assert_post_action>
	sys_notify_generic_callback rv = NULL;
    14ec:	2000      	movs	r0, #0
    14ee:	e000      	b.n	14f2 <sys_notify_finalize+0x36>
	switch (method) {
    14f0:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    14f2:	2300      	movs	r3, #0
    14f4:	6063      	str	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    14f6:	bd38      	pop	{r3, r4, r5, pc}
    14f8:	000104cc 	.word	0x000104cc
    14fc:	00011934 	.word	0x00011934
    1500:	00010450 	.word	0x00010450

00001504 <char_out>:

	return c;
}

static int char_out(int c, void *ctx_p)
{
    1504:	b508      	push	{r3, lr}
	(void) ctx_p;
	return _char_out(c);
    1506:	4b02      	ldr	r3, [pc, #8]	; (1510 <char_out+0xc>)
    1508:	681b      	ldr	r3, [r3, #0]
    150a:	4798      	blx	r3
}
    150c:	bd08      	pop	{r3, pc}
    150e:	bf00      	nop
    1510:	20000038 	.word	0x20000038

00001514 <__printk_hook_install>:
	_char_out = fn;
    1514:	4b01      	ldr	r3, [pc, #4]	; (151c <__printk_hook_install+0x8>)
    1516:	6018      	str	r0, [r3, #0]
}
    1518:	4770      	bx	lr
    151a:	bf00      	nop
    151c:	20000038 	.word	0x20000038

00001520 <vprintk>:

void vprintk(const char *fmt, va_list ap)
{
    1520:	b500      	push	{lr}
    1522:	b083      	sub	sp, #12
    1524:	4602      	mov	r2, r0
    1526:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    1528:	2100      	movs	r1, #0
    152a:	9100      	str	r1, [sp, #0]
    152c:	4802      	ldr	r0, [pc, #8]	; (1538 <vprintk+0x18>)
    152e:	f000 fcf9 	bl	1f24 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    1532:	b003      	add	sp, #12
    1534:	f85d fb04 	ldr.w	pc, [sp], #4
    1538:	00001505 	.word	0x00001505

0000153c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    153c:	b510      	push	{r4, lr}
    153e:	b086      	sub	sp, #24
    1540:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    1542:	9003      	str	r0, [sp, #12]
    1544:	9104      	str	r1, [sp, #16]
    1546:	2100      	movs	r1, #0
    1548:	9105      	str	r1, [sp, #20]
    154a:	9100      	str	r1, [sp, #0]
    154c:	a903      	add	r1, sp, #12
    154e:	4806      	ldr	r0, [pc, #24]	; (1568 <vsnprintk+0x2c>)
    1550:	f000 fce8 	bl	1f24 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    1554:	9b05      	ldr	r3, [sp, #20]
    1556:	9a04      	ldr	r2, [sp, #16]
    1558:	4293      	cmp	r3, r2
    155a:	da01      	bge.n	1560 <vsnprintk+0x24>
		str[ctx.count] = '\0';
    155c:	2200      	movs	r2, #0
    155e:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
    1560:	9805      	ldr	r0, [sp, #20]
    1562:	b006      	add	sp, #24
    1564:	bd10      	pop	{r4, pc}
    1566:	bf00      	nop
    1568:	0000eac5 	.word	0x0000eac5

0000156c <process_complete>:
 * from the manager to the output list for notification.
 */
static void process_complete(struct onoff_manager *mgr,
			     sys_slist_t *clients,
			     int res)
{
    156c:	b538      	push	{r3, r4, r5, lr}
    156e:	4604      	mov	r4, r0
    1570:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1572:	8b83      	ldrh	r3, [r0, #28]

	if (res < 0) {
    1574:	2a00      	cmp	r2, #0
    1576:	db14      	blt.n	15a2 <process_complete+0x36>
    1578:	f003 0307 	and.w	r3, r3, #7
		/* Enter ERROR state and notify all clients. */
		*clients = mgr->clients;
		sys_slist_init(&mgr->clients);
		set_state(mgr, ONOFF_STATE_ERROR);
	} else if ((state == ONOFF_STATE_TO_ON)
		   || (state == ONOFF_STATE_RESETTING)) {
    157c:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    157e:	2a01      	cmp	r2, #1
    1580:	d91b      	bls.n	15ba <process_complete+0x4e>
			set_state(mgr, ONOFF_STATE_OFF);
		}
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else if (state == ONOFF_STATE_TO_OFF) {
    1582:	2b04      	cmp	r3, #4
    1584:	d050      	beq.n	1628 <process_complete+0xbc>
		set_state(mgr, ONOFF_STATE_OFF);
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else {
		__ASSERT_NO_MSG(false);
    1586:	4c2f      	ldr	r4, [pc, #188]	; (1644 <process_complete+0xd8>)
    1588:	f240 131b 	movw	r3, #283	; 0x11b
    158c:	4622      	mov	r2, r4
    158e:	492e      	ldr	r1, [pc, #184]	; (1648 <process_complete+0xdc>)
    1590:	482e      	ldr	r0, [pc, #184]	; (164c <process_complete+0xe0>)
    1592:	f00d fc0e 	bl	edb2 <assert_print>
    1596:	f240 111b 	movw	r1, #283	; 0x11b
    159a:	4620      	mov	r0, r4
    159c:	f00d fc02 	bl	eda4 <assert_post_action>
	}
}
    15a0:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
    15a2:	e9d0 0100 	ldrd	r0, r1, [r0]
    15a6:	e88c 0003 	stmia.w	ip, {r0, r1}
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    15aa:	2300      	movs	r3, #0
    15ac:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    15ae:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    15b0:	2101      	movs	r1, #1
    15b2:	4620      	mov	r0, r4
    15b4:	f00d faba 	bl	eb2c <set_state>
    15b8:	e7f2      	b.n	15a0 <process_complete+0x34>
		*clients = mgr->clients;
    15ba:	e9d0 0100 	ldrd	r0, r1, [r0]
    15be:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    15c2:	2200      	movs	r2, #0
    15c4:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    15c6:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    15c8:	2b06      	cmp	r3, #6
    15ca:	d00f      	beq.n	15ec <process_complete+0x80>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
    15cc:	2b05      	cmp	r3, #5
    15ce:	d11d      	bne.n	160c <process_complete+0xa0>
			set_state(mgr, ONOFF_STATE_OFF);
    15d0:	2100      	movs	r1, #0
    15d2:	4620      	mov	r0, r4
    15d4:	f00d faaa 	bl	eb2c <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    15d8:	4620      	mov	r0, r4
    15da:	f00d face 	bl	eb7a <process_recheck>
    15de:	2800      	cmp	r0, #0
    15e0:	d0de      	beq.n	15a0 <process_complete+0x34>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    15e2:	8ba3      	ldrh	r3, [r4, #28]
    15e4:	f043 0320 	orr.w	r3, r3, #32
    15e8:	83a3      	strh	r3, [r4, #28]
    15ea:	e7d9      	b.n	15a0 <process_complete+0x34>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    15ec:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    15f0:	b13b      	cbz	r3, 1602 <process_complete+0x96>
				mgr->refs += 1U;
    15f2:	8be2      	ldrh	r2, [r4, #30]
    15f4:	3201      	adds	r2, #1
    15f6:	83e2      	strh	r2, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    15f8:	2b00      	cmp	r3, #0
    15fa:	d0f9      	beq.n	15f0 <process_complete+0x84>
	return node->next;
    15fc:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    15fe:	2b00      	cmp	r3, #0
    1600:	d1f6      	bne.n	15f0 <process_complete+0x84>
			set_state(mgr, ONOFF_STATE_ON);
    1602:	2102      	movs	r1, #2
    1604:	4620      	mov	r0, r4
    1606:	f00d fa91 	bl	eb2c <set_state>
    160a:	e7e5      	b.n	15d8 <process_complete+0x6c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
    160c:	4d0d      	ldr	r5, [pc, #52]	; (1644 <process_complete+0xd8>)
    160e:	f240 1309 	movw	r3, #265	; 0x109
    1612:	462a      	mov	r2, r5
    1614:	490e      	ldr	r1, [pc, #56]	; (1650 <process_complete+0xe4>)
    1616:	480d      	ldr	r0, [pc, #52]	; (164c <process_complete+0xe0>)
    1618:	f00d fbcb 	bl	edb2 <assert_print>
    161c:	f240 1109 	movw	r1, #265	; 0x109
    1620:	4628      	mov	r0, r5
    1622:	f00d fbbf 	bl	eda4 <assert_post_action>
    1626:	e7d3      	b.n	15d0 <process_complete+0x64>
		set_state(mgr, ONOFF_STATE_OFF);
    1628:	2100      	movs	r1, #0
    162a:	f00d fa7f 	bl	eb2c <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    162e:	4620      	mov	r0, r4
    1630:	f00d faa3 	bl	eb7a <process_recheck>
    1634:	2800      	cmp	r0, #0
    1636:	d0b3      	beq.n	15a0 <process_complete+0x34>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1638:	8ba3      	ldrh	r3, [r4, #28]
    163a:	f043 0320 	orr.w	r3, r3, #32
    163e:	83a3      	strh	r3, [r4, #28]
    1640:	e7ae      	b.n	15a0 <process_complete+0x34>
    1642:	bf00      	nop
    1644:	000104f0 	.word	0x000104f0
    1648:	00011934 	.word	0x00011934
    164c:	00010450 	.word	0x00010450
    1650:	00010514 	.word	0x00010514

00001654 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1658:	b083      	sub	sp, #12
    165a:	4604      	mov	r4, r0
    165c:	4616      	mov	r6, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    165e:	8b83      	ldrh	r3, [r0, #28]
    1660:	f003 0707 	and.w	r7, r3, #7
	int res = 0;
	bool processing = ((mgr->flags & ONOFF_FLAG_PROCESSING) != 0);
    1664:	f003 0808 	and.w	r8, r3, #8

	__ASSERT_NO_MSG(evt != EVT_NOP);
    1668:	460d      	mov	r5, r1
    166a:	b131      	cbz	r1, 167a <process_event+0x26>

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    166c:	f1b8 0f00 	cmp.w	r8, #0
    1670:	d112      	bne.n	1698 <process_event+0x44>
	list->head = NULL;
    1672:	2300      	movs	r3, #0
    1674:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
    1676:	9301      	str	r3, [sp, #4]
}
    1678:	e0aa      	b.n	17d0 <process_event+0x17c>
	__ASSERT_NO_MSG(evt != EVT_NOP);
    167a:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 195c <process_event+0x308>
    167e:	f240 1333 	movw	r3, #307	; 0x133
    1682:	464a      	mov	r2, r9
    1684:	49b6      	ldr	r1, [pc, #728]	; (1960 <process_event+0x30c>)
    1686:	48b7      	ldr	r0, [pc, #732]	; (1964 <process_event+0x310>)
    1688:	f00d fb93 	bl	edb2 <assert_print>
    168c:	f240 1133 	movw	r1, #307	; 0x133
    1690:	4648      	mov	r0, r9
    1692:	f00d fb87 	bl	eda4 <assert_post_action>
    1696:	e7e9      	b.n	166c <process_event+0x18>
		if (evt == EVT_COMPLETE) {
    1698:	2d01      	cmp	r5, #1
    169a:	d013      	beq.n	16c4 <process_event+0x70>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
    169c:	2d02      	cmp	r5, #2
    169e:	d116      	bne.n	16ce <process_event+0x7a>

			mgr->flags |= ONOFF_FLAG_RECHECK;
    16a0:	8ba3      	ldrh	r3, [r4, #28]
    16a2:	f043 0320 	orr.w	r3, r3, #32
    16a6:	83a3      	strh	r3, [r4, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    16a8:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    16aa:	4620      	mov	r0, r4
    16ac:	f009 fe4a 	bl	b344 <z_spin_unlock_valid>
    16b0:	2800      	cmp	r0, #0
    16b2:	f000 819c 	beq.w	19ee <process_event+0x39a>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    16b6:	f386 8811 	msr	BASEPRI, r6
    16ba:	f3bf 8f6f 	isb	sy
}
    16be:	b003      	add	sp, #12
    16c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    16c4:	8ba3      	ldrh	r3, [r4, #28]
    16c6:	f043 0310 	orr.w	r3, r3, #16
    16ca:	83a3      	strh	r3, [r4, #28]
    16cc:	e7ec      	b.n	16a8 <process_event+0x54>
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
    16ce:	4da3      	ldr	r5, [pc, #652]	; (195c <process_event+0x308>)
    16d0:	f44f 739e 	mov.w	r3, #316	; 0x13c
    16d4:	462a      	mov	r2, r5
    16d6:	49a4      	ldr	r1, [pc, #656]	; (1968 <process_event+0x314>)
    16d8:	48a2      	ldr	r0, [pc, #648]	; (1964 <process_event+0x310>)
    16da:	f00d fb6a 	bl	edb2 <assert_print>
    16de:	f44f 719e 	mov.w	r1, #316	; 0x13c
    16e2:	4628      	mov	r0, r5
    16e4:	f00d fb5e 	bl	eda4 <assert_post_action>
    16e8:	e7da      	b.n	16a0 <process_event+0x4c>
			evt = process_recheck(mgr);
    16ea:	4620      	mov	r0, r4
    16ec:	f00d fa45 	bl	eb7a <process_recheck>
    16f0:	4605      	mov	r5, r0
    16f2:	e06f      	b.n	17d4 <process_event+0x180>
			res = mgr->last_res;
    16f4:	f8d4 9018 	ldr.w	r9, [r4, #24]
			process_complete(mgr, &clients, res);
    16f8:	464a      	mov	r2, r9
    16fa:	4669      	mov	r1, sp
    16fc:	4620      	mov	r0, r4
    16fe:	f7ff ff35 	bl	156c <process_complete>
		onoff_transition_fn transit = NULL;
    1702:	2500      	movs	r5, #0
    1704:	e011      	b.n	172a <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    1706:	2f00      	cmp	r7, #0
    1708:	f040 8081 	bne.w	180e <process_event+0x1ba>
	return list->head;
    170c:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    170e:	2b00      	cmp	r3, #0
    1710:	f000 808b 	beq.w	182a <process_event+0x1d6>
			transit = mgr->transitions->start;
    1714:	6923      	ldr	r3, [r4, #16]
    1716:	681d      	ldr	r5, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    1718:	2d00      	cmp	r5, #0
    171a:	f000 8094 	beq.w	1846 <process_event+0x1f2>
			set_state(mgr, ONOFF_STATE_TO_ON);
    171e:	2106      	movs	r1, #6
    1720:	4620      	mov	r0, r4
    1722:	f00d fa03 	bl	eb2c <set_state>
		res = 0;
    1726:	f04f 0900 	mov.w	r9, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    172a:	8ba3      	ldrh	r3, [r4, #28]
    172c:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1730:	45b8      	cmp	r8, r7
    1732:	f000 810b 	beq.w	194c <process_event+0x2f8>
    1736:	68a2      	ldr	r2, [r4, #8]
    1738:	2a00      	cmp	r2, #0
    173a:	f000 8109 	beq.w	1950 <process_event+0x2fc>
    173e:	2201      	movs	r2, #1
		if (do_monitors
    1740:	4617      	mov	r7, r2
    1742:	b91a      	cbnz	r2, 174c <process_event+0xf8>
    1744:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
    1746:	2a00      	cmp	r2, #0
    1748:	f000 8104 	beq.w	1954 <process_event+0x300>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    174c:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    1750:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
    1752:	f104 0a14 	add.w	sl, r4, #20
    1756:	4650      	mov	r0, sl
    1758:	f009 fdf4 	bl	b344 <z_spin_unlock_valid>
    175c:	2800      	cmp	r0, #0
    175e:	f000 8115 	beq.w	198c <process_event+0x338>
    1762:	f386 8811 	msr	BASEPRI, r6
    1766:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    176a:	2f00      	cmp	r7, #0
    176c:	f040 811f 	bne.w	19ae <process_event+0x35a>
    1770:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
    1772:	b12b      	cbz	r3, 1780 <process_event+0x12c>
				notify_all(mgr, &clients, state, res);
    1774:	464b      	mov	r3, r9
    1776:	4642      	mov	r2, r8
    1778:	4669      	mov	r1, sp
    177a:	4620      	mov	r0, r4
    177c:	f00d fa3f 	bl	ebfe <notify_all>
			if (transit != NULL) {
    1780:	b115      	cbz	r5, 1788 <process_event+0x134>
				transit(mgr, transition_complete);
    1782:	497a      	ldr	r1, [pc, #488]	; (196c <process_event+0x318>)
    1784:	4620      	mov	r0, r4
    1786:	47a8      	blx	r5
	__asm__ volatile(
    1788:	f04f 0320 	mov.w	r3, #32
    178c:	f3ef 8611 	mrs	r6, BASEPRI
    1790:	f383 8812 	msr	BASEPRI_MAX, r3
    1794:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1798:	4650      	mov	r0, sl
    179a:	f009 fdc3 	bl	b324 <z_spin_lock_valid>
    179e:	2800      	cmp	r0, #0
    17a0:	f000 810b 	beq.w	19ba <process_event+0x366>
	z_spin_lock_set_owner(l);
    17a4:	4650      	mov	r0, sl
    17a6:	f009 fddd 	bl	b364 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    17aa:	8ba3      	ldrh	r3, [r4, #28]
    17ac:	f023 0308 	bic.w	r3, r3, #8
    17b0:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    17b2:	8ba3      	ldrh	r3, [r4, #28]
    17b4:	f013 0f10 	tst.w	r3, #16
    17b8:	f000 810f 	beq.w	19da <process_event+0x386>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    17bc:	f023 0310 	bic.w	r3, r3, #16
    17c0:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    17c2:	2501      	movs	r5, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    17c4:	8ba7      	ldrh	r7, [r4, #28]
    17c6:	f007 0707 	and.w	r7, r7, #7
	} while (evt != EVT_NOP);
    17ca:	2d00      	cmp	r5, #0
    17cc:	f43f af6c 	beq.w	16a8 <process_event+0x54>
		if (evt == EVT_RECHECK) {
    17d0:	2d02      	cmp	r5, #2
    17d2:	d08a      	beq.n	16ea <process_event+0x96>
		if (evt == EVT_NOP) {
    17d4:	2d00      	cmp	r5, #0
    17d6:	f43f af67 	beq.w	16a8 <process_event+0x54>
		if (evt == EVT_COMPLETE) {
    17da:	2d01      	cmp	r5, #1
    17dc:	d08a      	beq.n	16f4 <process_event+0xa0>
		} else if (evt == EVT_START) {
    17de:	2d03      	cmp	r5, #3
    17e0:	d091      	beq.n	1706 <process_event+0xb2>
		} else if (evt == EVT_STOP) {
    17e2:	2d04      	cmp	r5, #4
    17e4:	d03e      	beq.n	1864 <process_event+0x210>
		} else if (evt == EVT_RESET) {
    17e6:	2d05      	cmp	r5, #5
    17e8:	f040 80a0 	bne.w	192c <process_event+0x2d8>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    17ec:	2f01      	cmp	r7, #1
    17ee:	d172      	bne.n	18d6 <process_event+0x282>
    17f0:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    17f2:	2b00      	cmp	r3, #0
    17f4:	d07d      	beq.n	18f2 <process_event+0x29e>
			transit = mgr->transitions->reset;
    17f6:	6923      	ldr	r3, [r4, #16]
    17f8:	689d      	ldr	r5, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    17fa:	2d00      	cmp	r5, #0
    17fc:	f000 8087 	beq.w	190e <process_event+0x2ba>
			set_state(mgr, ONOFF_STATE_RESETTING);
    1800:	2105      	movs	r1, #5
    1802:	4620      	mov	r0, r4
    1804:	f00d f992 	bl	eb2c <set_state>
		res = 0;
    1808:	f04f 0900 	mov.w	r9, #0
    180c:	e78d      	b.n	172a <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    180e:	4d53      	ldr	r5, [pc, #332]	; (195c <process_event+0x308>)
    1810:	f44f 73ab 	mov.w	r3, #342	; 0x156
    1814:	462a      	mov	r2, r5
    1816:	4956      	ldr	r1, [pc, #344]	; (1970 <process_event+0x31c>)
    1818:	4852      	ldr	r0, [pc, #328]	; (1964 <process_event+0x310>)
    181a:	f00d faca 	bl	edb2 <assert_print>
    181e:	f44f 71ab 	mov.w	r1, #342	; 0x156
    1822:	4628      	mov	r0, r5
    1824:	f00d fabe 	bl	eda4 <assert_post_action>
    1828:	e770      	b.n	170c <process_event+0xb8>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    182a:	4d4c      	ldr	r5, [pc, #304]	; (195c <process_event+0x308>)
    182c:	f240 1357 	movw	r3, #343	; 0x157
    1830:	462a      	mov	r2, r5
    1832:	4950      	ldr	r1, [pc, #320]	; (1974 <process_event+0x320>)
    1834:	484b      	ldr	r0, [pc, #300]	; (1964 <process_event+0x310>)
    1836:	f00d fabc 	bl	edb2 <assert_print>
    183a:	f240 1157 	movw	r1, #343	; 0x157
    183e:	4628      	mov	r0, r5
    1840:	f00d fab0 	bl	eda4 <assert_post_action>
    1844:	e766      	b.n	1714 <process_event+0xc0>
			__ASSERT_NO_MSG(transit != NULL);
    1846:	f8df 8114 	ldr.w	r8, [pc, #276]	; 195c <process_event+0x308>
    184a:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    184e:	4642      	mov	r2, r8
    1850:	4949      	ldr	r1, [pc, #292]	; (1978 <process_event+0x324>)
    1852:	4844      	ldr	r0, [pc, #272]	; (1964 <process_event+0x310>)
    1854:	f00d faad 	bl	edb2 <assert_print>
    1858:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    185c:	4640      	mov	r0, r8
    185e:	f00d faa1 	bl	eda4 <assert_post_action>
    1862:	e75c      	b.n	171e <process_event+0xca>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    1864:	2f02      	cmp	r7, #2
    1866:	d10b      	bne.n	1880 <process_event+0x22c>
			__ASSERT_NO_MSG(mgr->refs == 0);
    1868:	8be3      	ldrh	r3, [r4, #30]
    186a:	b9bb      	cbnz	r3, 189c <process_event+0x248>
			transit = mgr->transitions->stop;
    186c:	6923      	ldr	r3, [r4, #16]
    186e:	685d      	ldr	r5, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    1870:	b315      	cbz	r5, 18b8 <process_event+0x264>
			set_state(mgr, ONOFF_STATE_TO_OFF);
    1872:	2104      	movs	r1, #4
    1874:	4620      	mov	r0, r4
    1876:	f00d f959 	bl	eb2c <set_state>
		res = 0;
    187a:	f04f 0900 	mov.w	r9, #0
    187e:	e754      	b.n	172a <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    1880:	4d36      	ldr	r5, [pc, #216]	; (195c <process_event+0x308>)
    1882:	f240 135d 	movw	r3, #349	; 0x15d
    1886:	462a      	mov	r2, r5
    1888:	493c      	ldr	r1, [pc, #240]	; (197c <process_event+0x328>)
    188a:	4836      	ldr	r0, [pc, #216]	; (1964 <process_event+0x310>)
    188c:	f00d fa91 	bl	edb2 <assert_print>
    1890:	f240 115d 	movw	r1, #349	; 0x15d
    1894:	4628      	mov	r0, r5
    1896:	f00d fa85 	bl	eda4 <assert_post_action>
    189a:	e7e5      	b.n	1868 <process_event+0x214>
			__ASSERT_NO_MSG(mgr->refs == 0);
    189c:	4d2f      	ldr	r5, [pc, #188]	; (195c <process_event+0x308>)
    189e:	f44f 73af 	mov.w	r3, #350	; 0x15e
    18a2:	462a      	mov	r2, r5
    18a4:	4936      	ldr	r1, [pc, #216]	; (1980 <process_event+0x32c>)
    18a6:	482f      	ldr	r0, [pc, #188]	; (1964 <process_event+0x310>)
    18a8:	f00d fa83 	bl	edb2 <assert_print>
    18ac:	f44f 71af 	mov.w	r1, #350	; 0x15e
    18b0:	4628      	mov	r0, r5
    18b2:	f00d fa77 	bl	eda4 <assert_post_action>
    18b6:	e7d9      	b.n	186c <process_event+0x218>
			__ASSERT_NO_MSG(transit != NULL);
    18b8:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 195c <process_event+0x308>
    18bc:	f240 1361 	movw	r3, #353	; 0x161
    18c0:	4642      	mov	r2, r8
    18c2:	492d      	ldr	r1, [pc, #180]	; (1978 <process_event+0x324>)
    18c4:	4827      	ldr	r0, [pc, #156]	; (1964 <process_event+0x310>)
    18c6:	f00d fa74 	bl	edb2 <assert_print>
    18ca:	f240 1161 	movw	r1, #353	; 0x161
    18ce:	4640      	mov	r0, r8
    18d0:	f00d fa68 	bl	eda4 <assert_post_action>
    18d4:	e7cd      	b.n	1872 <process_event+0x21e>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    18d6:	4d21      	ldr	r5, [pc, #132]	; (195c <process_event+0x308>)
    18d8:	f44f 73b2 	mov.w	r3, #356	; 0x164
    18dc:	462a      	mov	r2, r5
    18de:	4929      	ldr	r1, [pc, #164]	; (1984 <process_event+0x330>)
    18e0:	4820      	ldr	r0, [pc, #128]	; (1964 <process_event+0x310>)
    18e2:	f00d fa66 	bl	edb2 <assert_print>
    18e6:	f44f 71b2 	mov.w	r1, #356	; 0x164
    18ea:	4628      	mov	r0, r5
    18ec:	f00d fa5a 	bl	eda4 <assert_post_action>
    18f0:	e77e      	b.n	17f0 <process_event+0x19c>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    18f2:	4d1a      	ldr	r5, [pc, #104]	; (195c <process_event+0x308>)
    18f4:	f240 1365 	movw	r3, #357	; 0x165
    18f8:	462a      	mov	r2, r5
    18fa:	491e      	ldr	r1, [pc, #120]	; (1974 <process_event+0x320>)
    18fc:	4819      	ldr	r0, [pc, #100]	; (1964 <process_event+0x310>)
    18fe:	f00d fa58 	bl	edb2 <assert_print>
    1902:	f240 1165 	movw	r1, #357	; 0x165
    1906:	4628      	mov	r0, r5
    1908:	f00d fa4c 	bl	eda4 <assert_post_action>
    190c:	e773      	b.n	17f6 <process_event+0x1a2>
			__ASSERT_NO_MSG(transit != NULL);
    190e:	f8df 804c 	ldr.w	r8, [pc, #76]	; 195c <process_event+0x308>
    1912:	f44f 73b4 	mov.w	r3, #360	; 0x168
    1916:	4642      	mov	r2, r8
    1918:	4917      	ldr	r1, [pc, #92]	; (1978 <process_event+0x324>)
    191a:	4812      	ldr	r0, [pc, #72]	; (1964 <process_event+0x310>)
    191c:	f00d fa49 	bl	edb2 <assert_print>
    1920:	f44f 71b4 	mov.w	r1, #360	; 0x168
    1924:	4640      	mov	r0, r8
    1926:	f00d fa3d 	bl	eda4 <assert_post_action>
    192a:	e769      	b.n	1800 <process_event+0x1ac>
			__ASSERT_NO_MSG(false);
    192c:	4d0b      	ldr	r5, [pc, #44]	; (195c <process_event+0x308>)
    192e:	f240 136b 	movw	r3, #363	; 0x16b
    1932:	462a      	mov	r2, r5
    1934:	4914      	ldr	r1, [pc, #80]	; (1988 <process_event+0x334>)
    1936:	480b      	ldr	r0, [pc, #44]	; (1964 <process_event+0x310>)
    1938:	f00d fa3b 	bl	edb2 <assert_print>
    193c:	f240 116b 	movw	r1, #363	; 0x16b
    1940:	4628      	mov	r0, r5
    1942:	f00d fa2f 	bl	eda4 <assert_post_action>
		onoff_transition_fn transit = NULL;
    1946:	2500      	movs	r5, #0
		res = 0;
    1948:	46a9      	mov	r9, r5
    194a:	e6ee      	b.n	172a <process_event+0xd6>
				   && !sys_slist_is_empty(&mgr->monitors);
    194c:	2200      	movs	r2, #0
    194e:	e6f7      	b.n	1740 <process_event+0xec>
    1950:	2200      	movs	r2, #0
    1952:	e6f5      	b.n	1740 <process_event+0xec>
		    || (transit != NULL)) {
    1954:	2d00      	cmp	r5, #0
    1956:	f47f aef9 	bne.w	174c <process_event+0xf8>
    195a:	e72a      	b.n	17b2 <process_event+0x15e>
    195c:	000104f0 	.word	0x000104f0
    1960:	0001053c 	.word	0x0001053c
    1964:	00010450 	.word	0x00010450
    1968:	0001054c 	.word	0x0001054c
    196c:	00001a29 	.word	0x00001a29
    1970:	00010560 	.word	0x00010560
    1974:	0001056c 	.word	0x0001056c
    1978:	00010590 	.word	0x00010590
    197c:	000105a8 	.word	0x000105a8
    1980:	000105c0 	.word	0x000105c0
    1984:	000105d0 	.word	0x000105d0
    1988:	00011934 	.word	0x00011934
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    198c:	f8df b080 	ldr.w	fp, [pc, #128]	; 1a10 <process_event+0x3bc>
    1990:	23b9      	movs	r3, #185	; 0xb9
    1992:	465a      	mov	r2, fp
    1994:	491f      	ldr	r1, [pc, #124]	; (1a14 <process_event+0x3c0>)
    1996:	4820      	ldr	r0, [pc, #128]	; (1a18 <process_event+0x3c4>)
    1998:	f00d fa0b 	bl	edb2 <assert_print>
    199c:	4651      	mov	r1, sl
    199e:	481f      	ldr	r0, [pc, #124]	; (1a1c <process_event+0x3c8>)
    19a0:	f00d fa07 	bl	edb2 <assert_print>
    19a4:	21b9      	movs	r1, #185	; 0xb9
    19a6:	4658      	mov	r0, fp
    19a8:	f00d f9fc 	bl	eda4 <assert_post_action>
    19ac:	e6d9      	b.n	1762 <process_event+0x10e>
				notify_monitors(mgr, state, res);
    19ae:	464a      	mov	r2, r9
    19b0:	4641      	mov	r1, r8
    19b2:	4620      	mov	r0, r4
    19b4:	f00d f8c2 	bl	eb3c <notify_monitors>
    19b8:	e6da      	b.n	1770 <process_event+0x11c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    19ba:	4d15      	ldr	r5, [pc, #84]	; (1a10 <process_event+0x3bc>)
    19bc:	238e      	movs	r3, #142	; 0x8e
    19be:	462a      	mov	r2, r5
    19c0:	4917      	ldr	r1, [pc, #92]	; (1a20 <process_event+0x3cc>)
    19c2:	4815      	ldr	r0, [pc, #84]	; (1a18 <process_event+0x3c4>)
    19c4:	f00d f9f5 	bl	edb2 <assert_print>
    19c8:	4651      	mov	r1, sl
    19ca:	4816      	ldr	r0, [pc, #88]	; (1a24 <process_event+0x3d0>)
    19cc:	f00d f9f1 	bl	edb2 <assert_print>
    19d0:	218e      	movs	r1, #142	; 0x8e
    19d2:	4628      	mov	r0, r5
    19d4:	f00d f9e6 	bl	eda4 <assert_post_action>
    19d8:	e6e4      	b.n	17a4 <process_event+0x150>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    19da:	f013 0f20 	tst.w	r3, #32
    19de:	d004      	beq.n	19ea <process_event+0x396>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    19e0:	f023 0320 	bic.w	r3, r3, #32
    19e4:	83a3      	strh	r3, [r4, #28]
			evt = EVT_RECHECK;
    19e6:	2502      	movs	r5, #2
    19e8:	e6ec      	b.n	17c4 <process_event+0x170>
		evt = EVT_NOP;
    19ea:	2500      	movs	r5, #0
    19ec:	e6ea      	b.n	17c4 <process_event+0x170>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    19ee:	4d08      	ldr	r5, [pc, #32]	; (1a10 <process_event+0x3bc>)
    19f0:	23b9      	movs	r3, #185	; 0xb9
    19f2:	462a      	mov	r2, r5
    19f4:	4907      	ldr	r1, [pc, #28]	; (1a14 <process_event+0x3c0>)
    19f6:	4808      	ldr	r0, [pc, #32]	; (1a18 <process_event+0x3c4>)
    19f8:	f00d f9db 	bl	edb2 <assert_print>
    19fc:	4621      	mov	r1, r4
    19fe:	4807      	ldr	r0, [pc, #28]	; (1a1c <process_event+0x3c8>)
    1a00:	f00d f9d7 	bl	edb2 <assert_print>
    1a04:	21b9      	movs	r1, #185	; 0xb9
    1a06:	4628      	mov	r0, r5
    1a08:	f00d f9cc 	bl	eda4 <assert_post_action>
    1a0c:	e653      	b.n	16b6 <process_event+0x62>
    1a0e:	bf00      	nop
    1a10:	000105e8 	.word	0x000105e8
    1a14:	00010618 	.word	0x00010618
    1a18:	00010450 	.word	0x00010450
    1a1c:	00010630 	.word	0x00010630
    1a20:	00010648 	.word	0x00010648
    1a24:	00010660 	.word	0x00010660

00001a28 <transition_complete>:
{
    1a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1a2c:	4604      	mov	r4, r0
    1a2e:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    1a30:	f100 0614 	add.w	r6, r0, #20
    1a34:	f04f 0320 	mov.w	r3, #32
    1a38:	f3ef 8711 	mrs	r7, BASEPRI
    1a3c:	f383 8812 	msr	BASEPRI_MAX, r3
    1a40:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1a44:	4630      	mov	r0, r6
    1a46:	f009 fc6d 	bl	b324 <z_spin_lock_valid>
    1a4a:	b150      	cbz	r0, 1a62 <transition_complete+0x3a>
	z_spin_lock_set_owner(l);
    1a4c:	4630      	mov	r0, r6
    1a4e:	f009 fc89 	bl	b364 <z_spin_lock_set_owner>
	mgr->last_res = res;
    1a52:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    1a54:	463a      	mov	r2, r7
    1a56:	2101      	movs	r1, #1
    1a58:	4620      	mov	r0, r4
    1a5a:	f7ff fdfb 	bl	1654 <process_event>
}
    1a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1a62:	f8df 8020 	ldr.w	r8, [pc, #32]	; 1a84 <transition_complete+0x5c>
    1a66:	238e      	movs	r3, #142	; 0x8e
    1a68:	4642      	mov	r2, r8
    1a6a:	4907      	ldr	r1, [pc, #28]	; (1a88 <transition_complete+0x60>)
    1a6c:	4807      	ldr	r0, [pc, #28]	; (1a8c <transition_complete+0x64>)
    1a6e:	f00d f9a0 	bl	edb2 <assert_print>
    1a72:	4631      	mov	r1, r6
    1a74:	4806      	ldr	r0, [pc, #24]	; (1a90 <transition_complete+0x68>)
    1a76:	f00d f99c 	bl	edb2 <assert_print>
    1a7a:	218e      	movs	r1, #142	; 0x8e
    1a7c:	4640      	mov	r0, r8
    1a7e:	f00d f991 	bl	eda4 <assert_post_action>
    1a82:	e7e3      	b.n	1a4c <transition_complete+0x24>
    1a84:	000105e8 	.word	0x000105e8
    1a88:	00010648 	.word	0x00010648
    1a8c:	00010450 	.word	0x00010450
    1a90:	00010660 	.word	0x00010660

00001a94 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    1a94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1a98:	4604      	mov	r4, r0
    1a9a:	4688      	mov	r8, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    1a9c:	f00d f886 	bl	ebac <validate_args>

	if (rv < 0) {
    1aa0:	1e06      	subs	r6, r0, #0
    1aa2:	db58      	blt.n	1b56 <onoff_request+0xc2>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    1aa4:	f104 0714 	add.w	r7, r4, #20
    1aa8:	f04f 0320 	mov.w	r3, #32
    1aac:	f3ef 8911 	mrs	r9, BASEPRI
    1ab0:	f383 8812 	msr	BASEPRI_MAX, r3
    1ab4:	f3bf 8f6f 	isb	sy
    1ab8:	4638      	mov	r0, r7
    1aba:	f009 fc33 	bl	b324 <z_spin_lock_valid>
    1abe:	b1e8      	cbz	r0, 1afc <onoff_request+0x68>
	z_spin_lock_set_owner(l);
    1ac0:	4638      	mov	r0, r7
    1ac2:	f009 fc4f 	bl	b364 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1ac6:	8ba5      	ldrh	r5, [r4, #28]
    1ac8:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    1acc:	8be3      	ldrh	r3, [r4, #30]
    1ace:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1ad2:	4293      	cmp	r3, r2
    1ad4:	d056      	beq.n	1b84 <onoff_request+0xf0>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    1ad6:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
    1ad8:	2d02      	cmp	r5, #2
    1ada:	d01f      	beq.n	1b1c <onoff_request+0x88>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    1adc:	b32d      	cbz	r5, 1b2a <onoff_request+0x96>
		   || (state == ONOFF_STATE_TO_OFF)
    1ade:	2d04      	cmp	r5, #4
    1ae0:	d023      	beq.n	1b2a <onoff_request+0x96>
		   || (state == ONOFF_STATE_TO_ON)) {
    1ae2:	2d06      	cmp	r5, #6
    1ae4:	d021      	beq.n	1b2a <onoff_request+0x96>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
    1ae6:	2d05      	cmp	r5, #5
    1ae8:	d053      	beq.n	1b92 <onoff_request+0xfe>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    1aea:	2d01      	cmp	r5, #1
    1aec:	d136      	bne.n	1b5c <onoff_request+0xc8>
		rv = -EIO;
    1aee:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    1af2:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    1af6:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    1af8:	4652      	mov	r2, sl
    1afa:	e01c      	b.n	1b36 <onoff_request+0xa2>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1afc:	4d3c      	ldr	r5, [pc, #240]	; (1bf0 <onoff_request+0x15c>)
    1afe:	238e      	movs	r3, #142	; 0x8e
    1b00:	462a      	mov	r2, r5
    1b02:	493c      	ldr	r1, [pc, #240]	; (1bf4 <onoff_request+0x160>)
    1b04:	483c      	ldr	r0, [pc, #240]	; (1bf8 <onoff_request+0x164>)
    1b06:	f00d f954 	bl	edb2 <assert_print>
    1b0a:	4639      	mov	r1, r7
    1b0c:	483b      	ldr	r0, [pc, #236]	; (1bfc <onoff_request+0x168>)
    1b0e:	f00d f950 	bl	edb2 <assert_print>
    1b12:	218e      	movs	r1, #142	; 0x8e
    1b14:	4628      	mov	r0, r5
    1b16:	f00d f945 	bl	eda4 <assert_post_action>
    1b1a:	e7d1      	b.n	1ac0 <onoff_request+0x2c>
		mgr->refs += 1U;
    1b1c:	3301      	adds	r3, #1
    1b1e:	83e3      	strh	r3, [r4, #30]
		notify = true;
    1b20:	f04f 0a01 	mov.w	sl, #1
	bool start = false;             /* trigger a start transition */
    1b24:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
    1b26:	461a      	mov	r2, r3
    1b28:	e005      	b.n	1b36 <onoff_request+0xa2>
		start = (state == ONOFF_STATE_OFF);
    1b2a:	fab5 f385 	clz	r3, r5
    1b2e:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
    1b30:	f04f 0a00 	mov.w	sl, #0
		add_client = true;
    1b34:	2201      	movs	r2, #1
	}

out:
	if (add_client) {
    1b36:	b142      	cbz	r2, 1b4a <onoff_request+0xb6>
	parent->next = child;
    1b38:	2200      	movs	r2, #0
    1b3a:	f8c8 2000 	str.w	r2, [r8]
	return list->tail;
    1b3e:	6862      	ldr	r2, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    1b40:	b372      	cbz	r2, 1ba0 <onoff_request+0x10c>
	parent->next = child;
    1b42:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
    1b46:	f8c4 8004 	str.w	r8, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    1b4a:	b373      	cbz	r3, 1baa <onoff_request+0x116>
		process_event(mgr, EVT_RECHECK, key);
    1b4c:	464a      	mov	r2, r9
    1b4e:	2102      	movs	r1, #2
    1b50:	4620      	mov	r0, r4
    1b52:	f7ff fd7f 	bl	1654 <process_event>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    1b56:	4630      	mov	r0, r6
    1b58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    1b5c:	4e28      	ldr	r6, [pc, #160]	; (1c00 <onoff_request+0x16c>)
    1b5e:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
    1b62:	4632      	mov	r2, r6
    1b64:	4927      	ldr	r1, [pc, #156]	; (1c04 <onoff_request+0x170>)
    1b66:	4824      	ldr	r0, [pc, #144]	; (1bf8 <onoff_request+0x164>)
    1b68:	f00d f923 	bl	edb2 <assert_print>
    1b6c:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    1b70:	4630      	mov	r0, r6
    1b72:	f00d f917 	bl	eda4 <assert_post_action>
		rv = -EIO;
    1b76:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    1b7a:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    1b7e:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    1b80:	4652      	mov	r2, sl
    1b82:	e7d8      	b.n	1b36 <onoff_request+0xa2>
		rv = -EAGAIN;
    1b84:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
    1b88:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    1b8c:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    1b8e:	4652      	mov	r2, sl
    1b90:	e7d1      	b.n	1b36 <onoff_request+0xa2>
		rv = -ENOTSUP;
    1b92:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
    1b96:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    1b9a:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    1b9c:	4652      	mov	r2, sl
    1b9e:	e7ca      	b.n	1b36 <onoff_request+0xa2>
    1ba0:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
    1ba4:	f8c4 8000 	str.w	r8, [r4]
}
    1ba8:	e7cf      	b.n	1b4a <onoff_request+0xb6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1baa:	4638      	mov	r0, r7
    1bac:	f009 fbca 	bl	b344 <z_spin_unlock_valid>
    1bb0:	b168      	cbz	r0, 1bce <onoff_request+0x13a>
	__asm__ volatile(
    1bb2:	f389 8811 	msr	BASEPRI, r9
    1bb6:	f3bf 8f6f 	isb	sy
		if (notify) {
    1bba:	f1ba 0f00 	cmp.w	sl, #0
    1bbe:	d0ca      	beq.n	1b56 <onoff_request+0xc2>
			notify_one(mgr, cli, state, 0);
    1bc0:	2300      	movs	r3, #0
    1bc2:	462a      	mov	r2, r5
    1bc4:	4641      	mov	r1, r8
    1bc6:	4620      	mov	r0, r4
    1bc8:	f00d f806 	bl	ebd8 <notify_one>
    1bcc:	e7c3      	b.n	1b56 <onoff_request+0xc2>
    1bce:	f8df b020 	ldr.w	fp, [pc, #32]	; 1bf0 <onoff_request+0x15c>
    1bd2:	23b9      	movs	r3, #185	; 0xb9
    1bd4:	465a      	mov	r2, fp
    1bd6:	490c      	ldr	r1, [pc, #48]	; (1c08 <onoff_request+0x174>)
    1bd8:	4807      	ldr	r0, [pc, #28]	; (1bf8 <onoff_request+0x164>)
    1bda:	f00d f8ea 	bl	edb2 <assert_print>
    1bde:	4639      	mov	r1, r7
    1be0:	480a      	ldr	r0, [pc, #40]	; (1c0c <onoff_request+0x178>)
    1be2:	f00d f8e6 	bl	edb2 <assert_print>
    1be6:	21b9      	movs	r1, #185	; 0xb9
    1be8:	4658      	mov	r0, fp
    1bea:	f00d f8db 	bl	eda4 <assert_post_action>
    1bee:	e7e0      	b.n	1bb2 <onoff_request+0x11e>
    1bf0:	000105e8 	.word	0x000105e8
    1bf4:	00010648 	.word	0x00010648
    1bf8:	00010450 	.word	0x00010450
    1bfc:	00010660 	.word	0x00010660
    1c00:	000104f0 	.word	0x000104f0
    1c04:	000105d0 	.word	0x000105d0
    1c08:	00010618 	.word	0x00010618
    1c0c:	00010630 	.word	0x00010630

00001c10 <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
    1c10:	b570      	push	{r4, r5, r6, lr}
    1c12:	b082      	sub	sp, #8
    1c14:	4604      	mov	r4, r0
	*conv = (struct conversion) {
    1c16:	2300      	movs	r3, #0
    1c18:	6003      	str	r3, [r0, #0]
    1c1a:	6043      	str	r3, [r0, #4]
    1c1c:	6083      	str	r3, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
    1c1e:	784b      	ldrb	r3, [r1, #1]
    1c20:	2b25      	cmp	r3, #37	; 0x25
    1c22:	d002      	beq.n	1c2a <extract_conversion+0x1a>
    1c24:	1c4e      	adds	r6, r1, #1
	bool loop = true;
    1c26:	2501      	movs	r5, #1
    1c28:	e01f      	b.n	1c6a <extract_conversion+0x5a>
		conv->specifier = *sp++;
    1c2a:	1c88      	adds	r0, r1, #2
    1c2c:	70e3      	strb	r3, [r4, #3]
		return sp;
    1c2e:	e145      	b.n	1ebc <extract_conversion+0x2ac>
			conv->flag_dash = true;
    1c30:	7823      	ldrb	r3, [r4, #0]
    1c32:	f043 0304 	orr.w	r3, r3, #4
    1c36:	7023      	strb	r3, [r4, #0]
		if (loop) {
    1c38:	b1b5      	cbz	r5, 1c68 <extract_conversion+0x58>
			++sp;
    1c3a:	3601      	adds	r6, #1
    1c3c:	e014      	b.n	1c68 <extract_conversion+0x58>
			conv->flag_plus = true;
    1c3e:	7823      	ldrb	r3, [r4, #0]
    1c40:	f043 0308 	orr.w	r3, r3, #8
    1c44:	7023      	strb	r3, [r4, #0]
			break;
    1c46:	e7f7      	b.n	1c38 <extract_conversion+0x28>
			conv->flag_space = true;
    1c48:	7823      	ldrb	r3, [r4, #0]
    1c4a:	f043 0310 	orr.w	r3, r3, #16
    1c4e:	7023      	strb	r3, [r4, #0]
			break;
    1c50:	e7f2      	b.n	1c38 <extract_conversion+0x28>
			conv->flag_hash = true;
    1c52:	7823      	ldrb	r3, [r4, #0]
    1c54:	f043 0320 	orr.w	r3, r3, #32
    1c58:	7023      	strb	r3, [r4, #0]
			break;
    1c5a:	e7ed      	b.n	1c38 <extract_conversion+0x28>
			conv->flag_zero = true;
    1c5c:	7823      	ldrb	r3, [r4, #0]
    1c5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1c62:	7023      	strb	r3, [r4, #0]
			break;
    1c64:	e7e8      	b.n	1c38 <extract_conversion+0x28>
		switch (*sp) {
    1c66:	2500      	movs	r5, #0
	} while (loop);
    1c68:	b345      	cbz	r5, 1cbc <extract_conversion+0xac>
		switch (*sp) {
    1c6a:	7833      	ldrb	r3, [r6, #0]
    1c6c:	3b20      	subs	r3, #32
    1c6e:	2b10      	cmp	r3, #16
    1c70:	d8f9      	bhi.n	1c66 <extract_conversion+0x56>
    1c72:	a201      	add	r2, pc, #4	; (adr r2, 1c78 <extract_conversion+0x68>)
    1c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1c78:	00001c49 	.word	0x00001c49
    1c7c:	00001c67 	.word	0x00001c67
    1c80:	00001c67 	.word	0x00001c67
    1c84:	00001c53 	.word	0x00001c53
    1c88:	00001c67 	.word	0x00001c67
    1c8c:	00001c67 	.word	0x00001c67
    1c90:	00001c67 	.word	0x00001c67
    1c94:	00001c67 	.word	0x00001c67
    1c98:	00001c67 	.word	0x00001c67
    1c9c:	00001c67 	.word	0x00001c67
    1ca0:	00001c67 	.word	0x00001c67
    1ca4:	00001c3f 	.word	0x00001c3f
    1ca8:	00001c67 	.word	0x00001c67
    1cac:	00001c31 	.word	0x00001c31
    1cb0:	00001c67 	.word	0x00001c67
    1cb4:	00001c67 	.word	0x00001c67
    1cb8:	00001c5d 	.word	0x00001c5d
	if (conv->flag_zero && conv->flag_dash) {
    1cbc:	7823      	ldrb	r3, [r4, #0]
    1cbe:	f003 0344 	and.w	r3, r3, #68	; 0x44
    1cc2:	2b44      	cmp	r3, #68	; 0x44
    1cc4:	d05f      	beq.n	1d86 <extract_conversion+0x176>
	}

	sp = extract_flags(conv, sp);
	sp = extract_width(conv, sp);
    1cc6:	9601      	str	r6, [sp, #4]
	conv->width_present = true;
    1cc8:	7823      	ldrb	r3, [r4, #0]
    1cca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1cce:	7023      	strb	r3, [r4, #0]
	if (*sp == '*') {
    1cd0:	7833      	ldrb	r3, [r6, #0]
    1cd2:	2b2a      	cmp	r3, #42	; 0x2a
    1cd4:	d05c      	beq.n	1d90 <extract_conversion+0x180>
	size_t width = extract_decimal(&sp);
    1cd6:	a801      	add	r0, sp, #4
    1cd8:	f00c ffce 	bl	ec78 <extract_decimal>
	if (sp != wp) {
    1cdc:	9b01      	ldr	r3, [sp, #4]
    1cde:	429e      	cmp	r6, r3
    1ce0:	d00f      	beq.n	1d02 <extract_conversion+0xf2>
		conv->width_present = true;
    1ce2:	7823      	ldrb	r3, [r4, #0]
    1ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1ce8:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
    1cea:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
    1cec:	b2db      	uxtb	r3, r3
    1cee:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
    1cf2:	2800      	cmp	r0, #0
    1cf4:	db54      	blt.n	1da0 <extract_conversion+0x190>
    1cf6:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
    1cf8:	4313      	orrs	r3, r2
    1cfa:	7822      	ldrb	r2, [r4, #0]
    1cfc:	f363 0241 	bfi	r2, r3, #1, #1
    1d00:	7022      	strb	r2, [r4, #0]
	return sp;
    1d02:	9b01      	ldr	r3, [sp, #4]
	sp = extract_prec(conv, sp);
    1d04:	9301      	str	r3, [sp, #4]
	conv->prec_present = (*sp == '.');
    1d06:	781b      	ldrb	r3, [r3, #0]
    1d08:	2b2e      	cmp	r3, #46	; 0x2e
    1d0a:	bf14      	ite	ne
    1d0c:	2300      	movne	r3, #0
    1d0e:	2301      	moveq	r3, #1
    1d10:	7862      	ldrb	r2, [r4, #1]
    1d12:	f363 0241 	bfi	r2, r3, #1, #1
    1d16:	7062      	strb	r2, [r4, #1]
	if (!conv->prec_present) {
    1d18:	2b00      	cmp	r3, #0
    1d1a:	d043      	beq.n	1da4 <extract_conversion+0x194>
	++sp;
    1d1c:	9b01      	ldr	r3, [sp, #4]
    1d1e:	1c5a      	adds	r2, r3, #1
    1d20:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
    1d22:	785b      	ldrb	r3, [r3, #1]
    1d24:	2b2a      	cmp	r3, #42	; 0x2a
    1d26:	d03f      	beq.n	1da8 <extract_conversion+0x198>
	size_t prec = extract_decimal(&sp);
    1d28:	a801      	add	r0, sp, #4
    1d2a:	f00c ffa5 	bl	ec78 <extract_decimal>
	conv->prec_value = prec;
    1d2e:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
    1d30:	7823      	ldrb	r3, [r4, #0]
    1d32:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
    1d36:	2800      	cmp	r0, #0
    1d38:	db3e      	blt.n	1db8 <extract_conversion+0x1a8>
    1d3a:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
    1d3c:	4313      	orrs	r3, r2
    1d3e:	7822      	ldrb	r2, [r4, #0]
    1d40:	f363 0241 	bfi	r2, r3, #1, #1
    1d44:	7022      	strb	r2, [r4, #0]
	return sp;
    1d46:	9801      	ldr	r0, [sp, #4]
	switch (*sp) {
    1d48:	7803      	ldrb	r3, [r0, #0]
    1d4a:	3b4c      	subs	r3, #76	; 0x4c
    1d4c:	2b2e      	cmp	r3, #46	; 0x2e
    1d4e:	f200 809d 	bhi.w	1e8c <extract_conversion+0x27c>
    1d52:	e8df f003 	tbb	[pc, r3]
    1d56:	9b90      	.short	0x9b90
    1d58:	9b9b9b9b 	.word	0x9b9b9b9b
    1d5c:	9b9b9b9b 	.word	0x9b9b9b9b
    1d60:	9b9b9b9b 	.word	0x9b9b9b9b
    1d64:	9b9b9b9b 	.word	0x9b9b9b9b
    1d68:	9b9b9b9b 	.word	0x9b9b9b9b
    1d6c:	9b9b9b9b 	.word	0x9b9b9b9b
    1d70:	9b339b9b 	.word	0x9b339b9b
    1d74:	9b459b57 	.word	0x9b459b57
    1d78:	9b9b9b9b 	.word	0x9b9b9b9b
    1d7c:	9b899b9b 	.word	0x9b899b9b
    1d80:	9b9b9b9b 	.word	0x9b9b9b9b
    1d84:	82          	.byte	0x82
    1d85:	00          	.byte	0x00
		conv->flag_zero = false;
    1d86:	7823      	ldrb	r3, [r4, #0]
    1d88:	f36f 1386 	bfc	r3, #6, #1
    1d8c:	7023      	strb	r3, [r4, #0]
    1d8e:	e79a      	b.n	1cc6 <extract_conversion+0xb6>
		conv->width_star = true;
    1d90:	7863      	ldrb	r3, [r4, #1]
    1d92:	f043 0301 	orr.w	r3, r3, #1
    1d96:	7063      	strb	r3, [r4, #1]
		return ++sp;
    1d98:	4633      	mov	r3, r6
    1d9a:	3301      	adds	r3, #1
    1d9c:	9301      	str	r3, [sp, #4]
    1d9e:	e7b1      	b.n	1d04 <extract_conversion+0xf4>
				      || (width != (size_t)conv->width_value));
    1da0:	2201      	movs	r2, #1
    1da2:	e7a9      	b.n	1cf8 <extract_conversion+0xe8>
		return sp;
    1da4:	9801      	ldr	r0, [sp, #4]
    1da6:	e7cf      	b.n	1d48 <extract_conversion+0x138>
		conv->prec_star = true;
    1da8:	7863      	ldrb	r3, [r4, #1]
    1daa:	f043 0304 	orr.w	r3, r3, #4
    1dae:	7063      	strb	r3, [r4, #1]
		return ++sp;
    1db0:	4610      	mov	r0, r2
    1db2:	3001      	adds	r0, #1
    1db4:	9001      	str	r0, [sp, #4]
    1db6:	e7c7      	b.n	1d48 <extract_conversion+0x138>
			      || (prec != (size_t)conv->prec_value));
    1db8:	2201      	movs	r2, #1
    1dba:	e7bf      	b.n	1d3c <extract_conversion+0x12c>
		if (*++sp == 'h') {
    1dbc:	1c42      	adds	r2, r0, #1
    1dbe:	7843      	ldrb	r3, [r0, #1]
    1dc0:	2b68      	cmp	r3, #104	; 0x68
    1dc2:	d006      	beq.n	1dd2 <extract_conversion+0x1c2>
			conv->length_mod = LENGTH_H;
    1dc4:	7863      	ldrb	r3, [r4, #1]
    1dc6:	2102      	movs	r1, #2
    1dc8:	f361 03c6 	bfi	r3, r1, #3, #4
    1dcc:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'h') {
    1dce:	4610      	mov	r0, r2
    1dd0:	e01e      	b.n	1e10 <extract_conversion+0x200>
			conv->length_mod = LENGTH_HH;
    1dd2:	7863      	ldrb	r3, [r4, #1]
    1dd4:	2201      	movs	r2, #1
    1dd6:	f362 03c6 	bfi	r3, r2, #3, #4
    1dda:	7063      	strb	r3, [r4, #1]
			++sp;
    1ddc:	3002      	adds	r0, #2
    1dde:	e017      	b.n	1e10 <extract_conversion+0x200>
		if (*++sp == 'l') {
    1de0:	1c42      	adds	r2, r0, #1
    1de2:	7843      	ldrb	r3, [r0, #1]
    1de4:	2b6c      	cmp	r3, #108	; 0x6c
    1de6:	d006      	beq.n	1df6 <extract_conversion+0x1e6>
			conv->length_mod = LENGTH_L;
    1de8:	7863      	ldrb	r3, [r4, #1]
    1dea:	2103      	movs	r1, #3
    1dec:	f361 03c6 	bfi	r3, r1, #3, #4
    1df0:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'l') {
    1df2:	4610      	mov	r0, r2
    1df4:	e00c      	b.n	1e10 <extract_conversion+0x200>
			conv->length_mod = LENGTH_LL;
    1df6:	7863      	ldrb	r3, [r4, #1]
    1df8:	2204      	movs	r2, #4
    1dfa:	f362 03c6 	bfi	r3, r2, #3, #4
    1dfe:	7063      	strb	r3, [r4, #1]
			++sp;
    1e00:	3002      	adds	r0, #2
    1e02:	e005      	b.n	1e10 <extract_conversion+0x200>
		conv->length_mod = LENGTH_J;
    1e04:	7863      	ldrb	r3, [r4, #1]
    1e06:	2205      	movs	r2, #5
    1e08:	f362 03c6 	bfi	r3, r2, #3, #4
    1e0c:	7063      	strb	r3, [r4, #1]
		++sp;
    1e0e:	3001      	adds	r0, #1
	conv->specifier = *sp++;
    1e10:	f810 3b01 	ldrb.w	r3, [r0], #1
    1e14:	70e3      	strb	r3, [r4, #3]
	switch (conv->specifier) {
    1e16:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    1e1a:	2a37      	cmp	r2, #55	; 0x37
    1e1c:	d87d      	bhi.n	1f1a <extract_conversion+0x30a>
    1e1e:	e8df f002 	tbb	[pc, r2]
    1e22:	7c5e      	.short	0x7c5e
    1e24:	5e5e7c7c 	.word	0x5e5e7c7c
    1e28:	7c7c7c5e 	.word	0x7c7c7c5e
    1e2c:	7c7c7c7c 	.word	0x7c7c7c7c
    1e30:	7c7c7c7c 	.word	0x7c7c7c7c
    1e34:	7c7c7c7c 	.word	0x7c7c7c7c
    1e38:	7c7c4f7c 	.word	0x7c7c4f7c
    1e3c:	7c7c7c7c 	.word	0x7c7c7c7c
    1e40:	7c5e7c7c 	.word	0x7c5e7c7c
    1e44:	5e5e3a4f 	.word	0x5e5e3a4f
    1e48:	7c3a7c5e 	.word	0x7c3a7c5e
    1e4c:	657c7c7c 	.word	0x657c7c7c
    1e50:	7c7c714f 	.word	0x7c7c714f
    1e54:	7c4f7c71 	.word	0x7c4f7c71
    1e58:	4f7c      	.short	0x4f7c
		conv->length_mod = LENGTH_Z;
    1e5a:	7863      	ldrb	r3, [r4, #1]
    1e5c:	2206      	movs	r2, #6
    1e5e:	f362 03c6 	bfi	r3, r2, #3, #4
    1e62:	7063      	strb	r3, [r4, #1]
		++sp;
    1e64:	3001      	adds	r0, #1
		break;
    1e66:	e7d3      	b.n	1e10 <extract_conversion+0x200>
		conv->length_mod = LENGTH_T;
    1e68:	7863      	ldrb	r3, [r4, #1]
    1e6a:	2207      	movs	r2, #7
    1e6c:	f362 03c6 	bfi	r3, r2, #3, #4
    1e70:	7063      	strb	r3, [r4, #1]
		++sp;
    1e72:	3001      	adds	r0, #1
		break;
    1e74:	e7cc      	b.n	1e10 <extract_conversion+0x200>
		conv->length_mod = LENGTH_UPPER_L;
    1e76:	7863      	ldrb	r3, [r4, #1]
    1e78:	2208      	movs	r2, #8
    1e7a:	f362 03c6 	bfi	r3, r2, #3, #4
    1e7e:	7063      	strb	r3, [r4, #1]
		++sp;
    1e80:	3001      	adds	r0, #1
		conv->unsupported = true;
    1e82:	7823      	ldrb	r3, [r4, #0]
    1e84:	f043 0302 	orr.w	r3, r3, #2
    1e88:	7023      	strb	r3, [r4, #0]
		break;
    1e8a:	e7c1      	b.n	1e10 <extract_conversion+0x200>
		conv->length_mod = LENGTH_NONE;
    1e8c:	7863      	ldrb	r3, [r4, #1]
    1e8e:	f36f 03c6 	bfc	r3, #3, #4
    1e92:	7063      	strb	r3, [r4, #1]
		break;
    1e94:	e7bc      	b.n	1e10 <extract_conversion+0x200>
		conv->specifier_cat = SPECIFIER_SINT;
    1e96:	78a2      	ldrb	r2, [r4, #2]
    1e98:	2101      	movs	r1, #1
    1e9a:	f361 0202 	bfi	r2, r1, #0, #3
    1e9e:	70a2      	strb	r2, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    1ea0:	7862      	ldrb	r2, [r4, #1]
    1ea2:	f002 0278 	and.w	r2, r2, #120	; 0x78
    1ea6:	2a40      	cmp	r2, #64	; 0x40
    1ea8:	d010      	beq.n	1ecc <extract_conversion+0x2bc>
		if (conv->specifier == 'c') {
    1eaa:	2b63      	cmp	r3, #99	; 0x63
    1eac:	d013      	beq.n	1ed6 <extract_conversion+0x2c6>
	conv->unsupported |= unsupported;
    1eae:	7823      	ldrb	r3, [r4, #0]
    1eb0:	f3c3 0240 	ubfx	r2, r3, #1, #1
    1eb4:	4315      	orrs	r5, r2
    1eb6:	f365 0341 	bfi	r3, r5, #1, #1
    1eba:	7023      	strb	r3, [r4, #0]
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
    1ebc:	b002      	add	sp, #8
    1ebe:	bd70      	pop	{r4, r5, r6, pc}
		conv->specifier_cat = SPECIFIER_UINT;
    1ec0:	78a2      	ldrb	r2, [r4, #2]
    1ec2:	2102      	movs	r1, #2
    1ec4:	f361 0202 	bfi	r2, r1, #0, #3
    1ec8:	70a2      	strb	r2, [r4, #2]
    1eca:	e7e9      	b.n	1ea0 <extract_conversion+0x290>
			conv->invalid = true;
    1ecc:	7821      	ldrb	r1, [r4, #0]
    1ece:	f041 0101 	orr.w	r1, r1, #1
    1ed2:	7021      	strb	r1, [r4, #0]
    1ed4:	e7e9      	b.n	1eaa <extract_conversion+0x29a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    1ed6:	1e15      	subs	r5, r2, #0
    1ed8:	bf18      	it	ne
    1eda:	2501      	movne	r5, #1
    1edc:	e7e7      	b.n	1eae <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_FP;
    1ede:	78a3      	ldrb	r3, [r4, #2]
    1ee0:	2204      	movs	r2, #4
    1ee2:	f362 0302 	bfi	r3, r2, #0, #3
    1ee6:	70a3      	strb	r3, [r4, #2]
			unsupported = true;
    1ee8:	2501      	movs	r5, #1
			break;
    1eea:	e7e0      	b.n	1eae <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
    1eec:	78a3      	ldrb	r3, [r4, #2]
    1eee:	2203      	movs	r2, #3
    1ef0:	f362 0302 	bfi	r3, r2, #0, #3
    1ef4:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    1ef6:	7863      	ldrb	r3, [r4, #1]
    1ef8:	f003 0378 	and.w	r3, r3, #120	; 0x78
    1efc:	2b40      	cmp	r3, #64	; 0x40
    1efe:	d1d6      	bne.n	1eae <extract_conversion+0x29e>
			unsupported = true;
    1f00:	2501      	movs	r5, #1
    1f02:	e7d4      	b.n	1eae <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
    1f04:	78a3      	ldrb	r3, [r4, #2]
    1f06:	2203      	movs	r2, #3
    1f08:	f362 0302 	bfi	r3, r2, #0, #3
    1f0c:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod != LENGTH_NONE) {
    1f0e:	7863      	ldrb	r3, [r4, #1]
    1f10:	f013 0f78 	tst.w	r3, #120	; 0x78
    1f14:	d0cb      	beq.n	1eae <extract_conversion+0x29e>
			unsupported = true;
    1f16:	2501      	movs	r5, #1
    1f18:	e7c9      	b.n	1eae <extract_conversion+0x29e>
		conv->invalid = true;
    1f1a:	7823      	ldrb	r3, [r4, #0]
    1f1c:	f043 0301 	orr.w	r3, r3, #1
    1f20:	7023      	strb	r3, [r4, #0]
		break;
    1f22:	e7c4      	b.n	1eae <extract_conversion+0x29e>

00001f24 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    1f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1f28:	b091      	sub	sp, #68	; 0x44
    1f2a:	4606      	mov	r6, r0
    1f2c:	460d      	mov	r5, r1
    1f2e:	4691      	mov	r9, r2
    1f30:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    1f32:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    1f34:	f899 0000 	ldrb.w	r0, [r9]
    1f38:	2800      	cmp	r0, #0
    1f3a:	f000 82d5 	beq.w	24e8 <z_cbvprintf_impl+0x5c4>
		if (*fp != '%') {
    1f3e:	2825      	cmp	r0, #37	; 0x25
    1f40:	d008      	beq.n	1f54 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
    1f42:	f109 0901 	add.w	r9, r9, #1
    1f46:	4629      	mov	r1, r5
    1f48:	47b0      	blx	r6
    1f4a:	2800      	cmp	r0, #0
    1f4c:	f2c0 82cd 	blt.w	24ea <z_cbvprintf_impl+0x5c6>
    1f50:	3401      	adds	r4, #1
			continue;
    1f52:	e7ef      	b.n	1f34 <z_cbvprintf_impl+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    1f54:	2300      	movs	r3, #0
    1f56:	9304      	str	r3, [sp, #16]
    1f58:	9305      	str	r3, [sp, #20]
    1f5a:	9306      	str	r3, [sp, #24]
    1f5c:	9307      	str	r3, [sp, #28]
    1f5e:	9308      	str	r3, [sp, #32]
    1f60:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
    1f62:	4649      	mov	r1, r9
    1f64:	a806      	add	r0, sp, #24
    1f66:	f7ff fe53 	bl	1c10 <extract_conversion>
    1f6a:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
    1f6c:	f89d 3019 	ldrb.w	r3, [sp, #25]
    1f70:	f013 0f01 	tst.w	r3, #1
    1f74:	f000 8097 	beq.w	20a6 <z_cbvprintf_impl+0x182>
			width = va_arg(ap, int);
    1f78:	9b03      	ldr	r3, [sp, #12]
    1f7a:	1d1a      	adds	r2, r3, #4
    1f7c:	9203      	str	r2, [sp, #12]
    1f7e:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
    1f80:	2f00      	cmp	r7, #0
    1f82:	f2c0 8088 	blt.w	2096 <z_cbvprintf_impl+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    1f86:	f89d 3019 	ldrb.w	r3, [sp, #25]
    1f8a:	f013 0f04 	tst.w	r3, #4
    1f8e:	f000 809c 	beq.w	20ca <z_cbvprintf_impl+0x1a6>
			int arg = va_arg(ap, int);
    1f92:	9b03      	ldr	r3, [sp, #12]
    1f94:	1d1a      	adds	r2, r3, #4
    1f96:	9203      	str	r2, [sp, #12]
    1f98:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
    1f9c:	f1ba 0f00 	cmp.w	sl, #0
    1fa0:	f2c0 808a 	blt.w	20b8 <z_cbvprintf_impl+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
    1fa4:	2300      	movs	r3, #0
    1fa6:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
    1fa8:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
    1faa:	f89d 301a 	ldrb.w	r3, [sp, #26]
    1fae:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    1fb2:	f89d 1019 	ldrb.w	r1, [sp, #25]
    1fb6:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    1fba:	2b01      	cmp	r3, #1
    1fbc:	f000 808e 	beq.w	20dc <z_cbvprintf_impl+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (signed char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    1fc0:	2b02      	cmp	r3, #2
    1fc2:	f000 80d3 	beq.w	216c <z_cbvprintf_impl+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    1fc6:	2b04      	cmp	r3, #4
    1fc8:	f000 8124 	beq.w	2214 <z_cbvprintf_impl+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    1fcc:	2b03      	cmp	r3, #3
    1fce:	f000 813b 	beq.w	2248 <z_cbvprintf_impl+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    1fd2:	f89d 8018 	ldrb.w	r8, [sp, #24]
    1fd6:	f018 0b03 	ands.w	fp, r8, #3
    1fda:	f040 813b 	bne.w	2254 <z_cbvprintf_impl+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    1fde:	f89d 301b 	ldrb.w	r3, [sp, #27]
    1fe2:	3b25      	subs	r3, #37	; 0x25
    1fe4:	2b53      	cmp	r3, #83	; 0x53
    1fe6:	f200 81e6 	bhi.w	23b6 <z_cbvprintf_impl+0x492>
    1fea:	e8df f013 	tbh	[pc, r3, lsl #1]
    1fee:	0140      	.short	0x0140
    1ff0:	01e401e4 	.word	0x01e401e4
    1ff4:	01e401e4 	.word	0x01e401e4
    1ff8:	01e401e4 	.word	0x01e401e4
    1ffc:	01e401e4 	.word	0x01e401e4
    2000:	01e401e4 	.word	0x01e401e4
    2004:	01e401e4 	.word	0x01e401e4
    2008:	01e401e4 	.word	0x01e401e4
    200c:	01e401e4 	.word	0x01e401e4
    2010:	01e401e4 	.word	0x01e401e4
    2014:	01e401e4 	.word	0x01e401e4
    2018:	01e401e4 	.word	0x01e401e4
    201c:	01e401e4 	.word	0x01e401e4
    2020:	01e401e4 	.word	0x01e401e4
    2024:	01e401e4 	.word	0x01e401e4
    2028:	01e401e4 	.word	0x01e401e4
    202c:	01e401e4 	.word	0x01e401e4
    2030:	01e401e4 	.word	0x01e401e4
    2034:	01e401e4 	.word	0x01e401e4
    2038:	01e401e4 	.word	0x01e401e4
    203c:	01e401e4 	.word	0x01e401e4
    2040:	01e401e4 	.word	0x01e401e4
    2044:	01e401e4 	.word	0x01e401e4
    2048:	01e401e4 	.word	0x01e401e4
    204c:	01e401e4 	.word	0x01e401e4
    2050:	01e401e4 	.word	0x01e401e4
    2054:	01e40181 	.word	0x01e40181
    2058:	01e401e4 	.word	0x01e401e4
    205c:	01e401e4 	.word	0x01e401e4
    2060:	01e401e4 	.word	0x01e401e4
    2064:	01e401e4 	.word	0x01e401e4
    2068:	015e01e4 	.word	0x015e01e4
    206c:	01e40167 	.word	0x01e40167
    2070:	01e401e4 	.word	0x01e401e4
    2074:	016701e4 	.word	0x016701e4
    2078:	01e401e4 	.word	0x01e401e4
    207c:	01e401e4 	.word	0x01e401e4
    2080:	018101be 	.word	0x018101be
    2084:	01e401a2 	.word	0x01e401a2
    2088:	014d01e4 	.word	0x014d01e4
    208c:	018101e4 	.word	0x018101e4
    2090:	01e401e4 	.word	0x01e401e4
    2094:	0181      	.short	0x0181
				conv->flag_dash = true;
    2096:	f89d 3018 	ldrb.w	r3, [sp, #24]
    209a:	f043 0304 	orr.w	r3, r3, #4
    209e:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
    20a2:	427f      	negs	r7, r7
    20a4:	e76f      	b.n	1f86 <z_cbvprintf_impl+0x62>
		} else if (conv->width_present) {
    20a6:	f99d 3018 	ldrsb.w	r3, [sp, #24]
    20aa:	2b00      	cmp	r3, #0
    20ac:	db02      	blt.n	20b4 <z_cbvprintf_impl+0x190>
		int width = -1;
    20ae:	f04f 37ff 	mov.w	r7, #4294967295
    20b2:	e768      	b.n	1f86 <z_cbvprintf_impl+0x62>
			width = conv->width_value;
    20b4:	9f07      	ldr	r7, [sp, #28]
    20b6:	e766      	b.n	1f86 <z_cbvprintf_impl+0x62>
				conv->prec_present = false;
    20b8:	f89d 3019 	ldrb.w	r3, [sp, #25]
    20bc:	f36f 0341 	bfc	r3, #1, #1
    20c0:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
    20c4:	f04f 3aff 	mov.w	sl, #4294967295
    20c8:	e76c      	b.n	1fa4 <z_cbvprintf_impl+0x80>
		} else if (conv->prec_present) {
    20ca:	f013 0f02 	tst.w	r3, #2
    20ce:	d002      	beq.n	20d6 <z_cbvprintf_impl+0x1b2>
			precision = conv->prec_value;
    20d0:	f8dd a020 	ldr.w	sl, [sp, #32]
    20d4:	e766      	b.n	1fa4 <z_cbvprintf_impl+0x80>
		int precision = -1;
    20d6:	f04f 3aff 	mov.w	sl, #4294967295
    20da:	e763      	b.n	1fa4 <z_cbvprintf_impl+0x80>
			switch (length_mod) {
    20dc:	1ecb      	subs	r3, r1, #3
    20de:	2b04      	cmp	r3, #4
    20e0:	d804      	bhi.n	20ec <z_cbvprintf_impl+0x1c8>
    20e2:	e8df f003 	tbb	[pc, r3]
    20e6:	1d0b      	.short	0x1d0b
    20e8:	3529      	.short	0x3529
    20ea:	35          	.byte	0x35
    20eb:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    20ec:	9b03      	ldr	r3, [sp, #12]
    20ee:	1d1a      	adds	r2, r3, #4
    20f0:	9203      	str	r2, [sp, #12]
    20f2:	681b      	ldr	r3, [r3, #0]
    20f4:	17da      	asrs	r2, r3, #31
    20f6:	9304      	str	r3, [sp, #16]
    20f8:	9205      	str	r2, [sp, #20]
				break;
    20fa:	e006      	b.n	210a <z_cbvprintf_impl+0x1e6>
					value->sint = va_arg(ap, long);
    20fc:	9b03      	ldr	r3, [sp, #12]
    20fe:	1d1a      	adds	r2, r3, #4
    2100:	9203      	str	r2, [sp, #12]
    2102:	681b      	ldr	r3, [r3, #0]
    2104:	17da      	asrs	r2, r3, #31
    2106:	9304      	str	r3, [sp, #16]
    2108:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
    210a:	2901      	cmp	r1, #1
    210c:	d028      	beq.n	2160 <z_cbvprintf_impl+0x23c>
			} else if (length_mod == LENGTH_H) {
    210e:	2902      	cmp	r1, #2
    2110:	f47f af5f 	bne.w	1fd2 <z_cbvprintf_impl+0xae>
				value->sint = (short)value->sint;
    2114:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
    2118:	17da      	asrs	r2, r3, #31
    211a:	9304      	str	r3, [sp, #16]
    211c:	9205      	str	r2, [sp, #20]
    211e:	e758      	b.n	1fd2 <z_cbvprintf_impl+0xae>
					(sint_value_type)va_arg(ap, long long);
    2120:	9b03      	ldr	r3, [sp, #12]
    2122:	3307      	adds	r3, #7
    2124:	f023 0307 	bic.w	r3, r3, #7
    2128:	f103 0208 	add.w	r2, r3, #8
    212c:	9203      	str	r2, [sp, #12]
    212e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    2132:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    2136:	e7e8      	b.n	210a <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
    2138:	9b03      	ldr	r3, [sp, #12]
    213a:	3307      	adds	r3, #7
    213c:	f023 0307 	bic.w	r3, r3, #7
    2140:	f103 0208 	add.w	r2, r3, #8
    2144:	9203      	str	r2, [sp, #12]
    2146:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    214a:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    214e:	e7dc      	b.n	210a <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    2150:	9b03      	ldr	r3, [sp, #12]
    2152:	1d1a      	adds	r2, r3, #4
    2154:	9203      	str	r2, [sp, #12]
    2156:	681b      	ldr	r3, [r3, #0]
    2158:	17da      	asrs	r2, r3, #31
				value->sint =
    215a:	9304      	str	r3, [sp, #16]
    215c:	9205      	str	r2, [sp, #20]
				break;
    215e:	e7d4      	b.n	210a <z_cbvprintf_impl+0x1e6>
				value->sint = (signed char)value->sint;
    2160:	f99d 3010 	ldrsb.w	r3, [sp, #16]
    2164:	17da      	asrs	r2, r3, #31
    2166:	9304      	str	r3, [sp, #16]
    2168:	9205      	str	r2, [sp, #20]
    216a:	e732      	b.n	1fd2 <z_cbvprintf_impl+0xae>
			switch (length_mod) {
    216c:	1ecb      	subs	r3, r1, #3
    216e:	2b04      	cmp	r3, #4
    2170:	d804      	bhi.n	217c <z_cbvprintf_impl+0x258>
    2172:	e8df f003 	tbb	[pc, r3]
    2176:	1f0b      	.short	0x1f0b
    2178:	4135      	.short	0x4135
    217a:	41          	.byte	0x41
    217b:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    217c:	9b03      	ldr	r3, [sp, #12]
    217e:	1d1a      	adds	r2, r3, #4
    2180:	9203      	str	r2, [sp, #12]
    2182:	681b      	ldr	r3, [r3, #0]
    2184:	9304      	str	r3, [sp, #16]
    2186:	2300      	movs	r3, #0
    2188:	9305      	str	r3, [sp, #20]
				break;
    218a:	e01e      	b.n	21ca <z_cbvprintf_impl+0x2a6>
				    && (conv->specifier == 'c')) {
    218c:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
    2190:	2b63      	cmp	r3, #99	; 0x63
    2192:	d007      	beq.n	21a4 <z_cbvprintf_impl+0x280>
					value->uint = va_arg(ap, unsigned long);
    2194:	9b03      	ldr	r3, [sp, #12]
    2196:	1d1a      	adds	r2, r3, #4
    2198:	9203      	str	r2, [sp, #12]
    219a:	681b      	ldr	r3, [r3, #0]
    219c:	9304      	str	r3, [sp, #16]
    219e:	2300      	movs	r3, #0
    21a0:	9305      	str	r3, [sp, #20]
    21a2:	e012      	b.n	21ca <z_cbvprintf_impl+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
    21a4:	9b03      	ldr	r3, [sp, #12]
    21a6:	1d1a      	adds	r2, r3, #4
    21a8:	9203      	str	r2, [sp, #12]
    21aa:	681b      	ldr	r3, [r3, #0]
    21ac:	9304      	str	r3, [sp, #16]
    21ae:	2300      	movs	r3, #0
    21b0:	9305      	str	r3, [sp, #20]
    21b2:	e00a      	b.n	21ca <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap,
    21b4:	9b03      	ldr	r3, [sp, #12]
    21b6:	3307      	adds	r3, #7
    21b8:	f023 0307 	bic.w	r3, r3, #7
    21bc:	f103 0208 	add.w	r2, r3, #8
    21c0:	9203      	str	r2, [sp, #12]
    21c2:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    21c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
    21ca:	2901      	cmp	r1, #1
    21cc:	d01c      	beq.n	2208 <z_cbvprintf_impl+0x2e4>
			} else if (length_mod == LENGTH_H) {
    21ce:	2902      	cmp	r1, #2
    21d0:	f47f aeff 	bne.w	1fd2 <z_cbvprintf_impl+0xae>
				value->uint = (unsigned short)value->uint;
    21d4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    21d8:	9304      	str	r3, [sp, #16]
    21da:	2300      	movs	r3, #0
    21dc:	9305      	str	r3, [sp, #20]
    21de:	e6f8      	b.n	1fd2 <z_cbvprintf_impl+0xae>
					(uint_value_type)va_arg(ap,
    21e0:	9b03      	ldr	r3, [sp, #12]
    21e2:	3307      	adds	r3, #7
    21e4:	f023 0307 	bic.w	r3, r3, #7
    21e8:	f103 0208 	add.w	r2, r3, #8
    21ec:	9203      	str	r2, [sp, #12]
    21ee:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    21f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    21f6:	e7e8      	b.n	21ca <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
    21f8:	9b03      	ldr	r3, [sp, #12]
    21fa:	1d1a      	adds	r2, r3, #4
    21fc:	9203      	str	r2, [sp, #12]
    21fe:	681b      	ldr	r3, [r3, #0]
				value->uint =
    2200:	9304      	str	r3, [sp, #16]
    2202:	2300      	movs	r3, #0
    2204:	9305      	str	r3, [sp, #20]
				break;
    2206:	e7e0      	b.n	21ca <z_cbvprintf_impl+0x2a6>
				value->uint = (unsigned char)value->uint;
    2208:	f89d 3010 	ldrb.w	r3, [sp, #16]
    220c:	9304      	str	r3, [sp, #16]
    220e:	2300      	movs	r3, #0
    2210:	9305      	str	r3, [sp, #20]
    2212:	e6de      	b.n	1fd2 <z_cbvprintf_impl+0xae>
			if (length_mod == LENGTH_UPPER_L) {
    2214:	2908      	cmp	r1, #8
    2216:	d00b      	beq.n	2230 <z_cbvprintf_impl+0x30c>
				value->dbl = va_arg(ap, double);
    2218:	9b03      	ldr	r3, [sp, #12]
    221a:	3307      	adds	r3, #7
    221c:	f023 0307 	bic.w	r3, r3, #7
    2220:	f103 0208 	add.w	r2, r3, #8
    2224:	9203      	str	r2, [sp, #12]
    2226:	e9d3 2300 	ldrd	r2, r3, [r3]
    222a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    222e:	e6d0      	b.n	1fd2 <z_cbvprintf_impl+0xae>
				value->ldbl = va_arg(ap, long double);
    2230:	9b03      	ldr	r3, [sp, #12]
    2232:	3307      	adds	r3, #7
    2234:	f023 0307 	bic.w	r3, r3, #7
    2238:	f103 0208 	add.w	r2, r3, #8
    223c:	9203      	str	r2, [sp, #12]
    223e:	e9d3 2300 	ldrd	r2, r3, [r3]
    2242:	e9cd 2304 	strd	r2, r3, [sp, #16]
    2246:	e6c4      	b.n	1fd2 <z_cbvprintf_impl+0xae>
			value->ptr = va_arg(ap, void *);
    2248:	9b03      	ldr	r3, [sp, #12]
    224a:	1d1a      	adds	r2, r3, #4
    224c:	9203      	str	r2, [sp, #12]
    224e:	681b      	ldr	r3, [r3, #0]
    2250:	9304      	str	r3, [sp, #16]
    2252:	e6be      	b.n	1fd2 <z_cbvprintf_impl+0xae>
			OUTS(sp, fp);
    2254:	9f02      	ldr	r7, [sp, #8]
    2256:	463b      	mov	r3, r7
    2258:	464a      	mov	r2, r9
    225a:	4629      	mov	r1, r5
    225c:	4630      	mov	r0, r6
    225e:	f00c fd87 	bl	ed70 <outs>
    2262:	2800      	cmp	r0, #0
    2264:	f2c0 8141 	blt.w	24ea <z_cbvprintf_impl+0x5c6>
    2268:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    226a:	46b9      	mov	r9, r7
			continue;
    226c:	e662      	b.n	1f34 <z_cbvprintf_impl+0x10>
		case '%':
			OUTC('%');
    226e:	4629      	mov	r1, r5
    2270:	2025      	movs	r0, #37	; 0x25
    2272:	47b0      	blx	r6
    2274:	2800      	cmp	r0, #0
    2276:	f2c0 8138 	blt.w	24ea <z_cbvprintf_impl+0x5c6>
    227a:	3401      	adds	r4, #1
		char sign = 0;
    227c:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    227e:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    2282:	f04f 0900 	mov.w	r9, #0
			break;
    2286:	e09b      	b.n	23c0 <z_cbvprintf_impl+0x49c>
		case 's': {
			bps = (const char *)value->ptr;
    2288:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
    228c:	f1ba 0f00 	cmp.w	sl, #0
    2290:	db07      	blt.n	22a2 <z_cbvprintf_impl+0x37e>
				len = strnlen(bps, precision);
    2292:	4651      	mov	r1, sl
    2294:	4648      	mov	r0, r9
    2296:	f00c ffa9 	bl	f1ec <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
    229a:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
    229e:	46d8      	mov	r8, fp
			precision = -1;

			break;
    22a0:	e08e      	b.n	23c0 <z_cbvprintf_impl+0x49c>
				len = strlen(bps);
    22a2:	4648      	mov	r0, r9
    22a4:	f00c ff99 	bl	f1da <strlen>
    22a8:	e7f7      	b.n	229a <z_cbvprintf_impl+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    22aa:	9b04      	ldr	r3, [sp, #16]
    22ac:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
    22b0:	46d8      	mov	r8, fp
			bpe = buf + 1;
    22b2:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
    22b6:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
    22ba:	e081      	b.n	23c0 <z_cbvprintf_impl+0x49c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    22bc:	f018 0f08 	tst.w	r8, #8
    22c0:	d105      	bne.n	22ce <z_cbvprintf_impl+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
    22c2:	f018 0810 	ands.w	r8, r8, #16
    22c6:	d004      	beq.n	22d2 <z_cbvprintf_impl+0x3ae>
				sign = ' ';
    22c8:	f04f 0820 	mov.w	r8, #32
    22cc:	e001      	b.n	22d2 <z_cbvprintf_impl+0x3ae>
				sign = '+';
    22ce:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    22d2:	9a04      	ldr	r2, [sp, #16]
    22d4:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
    22d6:	2b00      	cmp	r3, #0
    22d8:	db02      	blt.n	22e0 <z_cbvprintf_impl+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    22da:	9204      	str	r2, [sp, #16]
    22dc:	9305      	str	r3, [sp, #20]
    22de:	e008      	b.n	22f2 <z_cbvprintf_impl+0x3ce>
				value->uint = (uint_value_type)-sint;
    22e0:	4252      	negs	r2, r2
    22e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    22e6:	9204      	str	r2, [sp, #16]
    22e8:	9305      	str	r3, [sp, #20]
				sign = '-';
    22ea:	f04f 082d 	mov.w	r8, #45	; 0x2d
    22ee:	e000      	b.n	22f2 <z_cbvprintf_impl+0x3ce>
		switch (conv->specifier) {
    22f0:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    22f2:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    22f6:	9300      	str	r3, [sp, #0]
    22f8:	ab0a      	add	r3, sp, #40	; 0x28
    22fa:	aa06      	add	r2, sp, #24
    22fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    2300:	f00c fccc 	bl	ec9c <encode_uint>
    2304:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    2306:	f1ba 0f00 	cmp.w	sl, #0
    230a:	f2c0 8088 	blt.w	241e <z_cbvprintf_impl+0x4fa>
				size_t len = bpe - bps;
    230e:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    2312:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    2316:	f89d 2018 	ldrb.w	r2, [sp, #24]
    231a:	f36f 1286 	bfc	r2, #6, #1
    231e:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    2322:	459a      	cmp	sl, r3
    2324:	d97e      	bls.n	2424 <z_cbvprintf_impl+0x500>
					conv->pad0_value = precision - (int)len;
    2326:	ebaa 0303 	sub.w	r3, sl, r3
    232a:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
    232c:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    2330:	e046      	b.n	23c0 <z_cbvprintf_impl+0x49c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    2332:	9804      	ldr	r0, [sp, #16]
    2334:	b928      	cbnz	r0, 2342 <z_cbvprintf_impl+0x41e>
		char sign = 0;
    2336:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    2338:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 24f0 <z_cbvprintf_impl+0x5cc>
			bps = "(nil)";
    233c:	f1aa 0905 	sub.w	r9, sl, #5
    2340:	e03e      	b.n	23c0 <z_cbvprintf_impl+0x49c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    2342:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    2346:	9300      	str	r3, [sp, #0]
    2348:	ab0a      	add	r3, sp, #40	; 0x28
    234a:	aa06      	add	r2, sp, #24
    234c:	2100      	movs	r1, #0
    234e:	f00c fca5 	bl	ec9c <encode_uint>
    2352:	4681      	mov	r9, r0
				conv->altform_0c = true;
    2354:	f89d 301a 	ldrb.w	r3, [sp, #26]
    2358:	f043 0310 	orr.w	r3, r3, #16
    235c:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
    2360:	2378      	movs	r3, #120	; 0x78
    2362:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
    2366:	46d8      	mov	r8, fp
				goto prec_int_pad0;
    2368:	e7cd      	b.n	2306 <z_cbvprintf_impl+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    236a:	9a04      	ldr	r2, [sp, #16]
	switch ((enum length_mod_enum)conv->length_mod) {
    236c:	f89d 3019 	ldrb.w	r3, [sp, #25]
    2370:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    2374:	2b07      	cmp	r3, #7
    2376:	d806      	bhi.n	2386 <z_cbvprintf_impl+0x462>
    2378:	e8df f003 	tbb	[pc, r3]
    237c:	0f0d0b04 	.word	0x0f0d0b04
    2380:	1b191511 	.word	0x1b191511
		*(int *)dp = count;
    2384:	6014      	str	r4, [r2, #0]
		char sign = 0;
    2386:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    2388:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    238c:	f04f 0900 	mov.w	r9, #0
}
    2390:	e016      	b.n	23c0 <z_cbvprintf_impl+0x49c>
		*(signed char *)dp = (signed char)count;
    2392:	7014      	strb	r4, [r2, #0]
		break;
    2394:	e7f7      	b.n	2386 <z_cbvprintf_impl+0x462>
		*(short *)dp = (short)count;
    2396:	8014      	strh	r4, [r2, #0]
		break;
    2398:	e7f5      	b.n	2386 <z_cbvprintf_impl+0x462>
		*(long *)dp = (long)count;
    239a:	6014      	str	r4, [r2, #0]
		break;
    239c:	e7f3      	b.n	2386 <z_cbvprintf_impl+0x462>
		*(long long *)dp = (long long)count;
    239e:	17e3      	asrs	r3, r4, #31
    23a0:	6014      	str	r4, [r2, #0]
    23a2:	6053      	str	r3, [r2, #4]
		break;
    23a4:	e7ef      	b.n	2386 <z_cbvprintf_impl+0x462>
		*(intmax_t *)dp = (intmax_t)count;
    23a6:	17e3      	asrs	r3, r4, #31
    23a8:	6014      	str	r4, [r2, #0]
    23aa:	6053      	str	r3, [r2, #4]
		break;
    23ac:	e7eb      	b.n	2386 <z_cbvprintf_impl+0x462>
		*(size_t *)dp = (size_t)count;
    23ae:	6014      	str	r4, [r2, #0]
		break;
    23b0:	e7e9      	b.n	2386 <z_cbvprintf_impl+0x462>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    23b2:	6014      	str	r4, [r2, #0]
		break;
    23b4:	e7e7      	b.n	2386 <z_cbvprintf_impl+0x462>
		switch (conv->specifier) {
    23b6:	46d8      	mov	r8, fp
    23b8:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    23bc:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    23c0:	f1b9 0f00 	cmp.w	r9, #0
    23c4:	f000 808d 	beq.w	24e2 <z_cbvprintf_impl+0x5be>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    23c8:	ebaa 0309 	sub.w	r3, sl, r9
		int pad_len = 0;

		if (sign != 0) {
    23cc:	f1b8 0f00 	cmp.w	r8, #0
    23d0:	d000      	beq.n	23d4 <z_cbvprintf_impl+0x4b0>
			nj_len += 1U;
    23d2:	3301      	adds	r3, #1
		}

		if (conv->altform_0c) {
    23d4:	f89d 201a 	ldrb.w	r2, [sp, #26]
    23d8:	f012 0f10 	tst.w	r2, #16
    23dc:	d025      	beq.n	242a <z_cbvprintf_impl+0x506>
			nj_len += 2U;
    23de:	3302      	adds	r3, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    23e0:	9907      	ldr	r1, [sp, #28]
    23e2:	440b      	add	r3, r1
		if (conv->pad_fp) {
    23e4:	f012 0f40 	tst.w	r2, #64	; 0x40
    23e8:	d001      	beq.n	23ee <z_cbvprintf_impl+0x4ca>
			nj_len += conv->pad0_pre_exp;
    23ea:	9a08      	ldr	r2, [sp, #32]
    23ec:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    23ee:	2f00      	cmp	r7, #0
    23f0:	dd31      	ble.n	2456 <z_cbvprintf_impl+0x532>
			width -= (int)nj_len;
    23f2:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    23f4:	f89d 3018 	ldrb.w	r3, [sp, #24]
    23f8:	f013 0f04 	tst.w	r3, #4
    23fc:	d12b      	bne.n	2456 <z_cbvprintf_impl+0x532>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    23fe:	f013 0f40 	tst.w	r3, #64	; 0x40
    2402:	d017      	beq.n	2434 <z_cbvprintf_impl+0x510>
					if (sign != 0) {
    2404:	f1b8 0f00 	cmp.w	r8, #0
    2408:	d017      	beq.n	243a <z_cbvprintf_impl+0x516>
						OUTC(sign);
    240a:	4629      	mov	r1, r5
    240c:	4640      	mov	r0, r8
    240e:	47b0      	blx	r6
    2410:	2800      	cmp	r0, #0
    2412:	db6a      	blt.n	24ea <z_cbvprintf_impl+0x5c6>
    2414:	3401      	adds	r4, #1
						sign = 0;
    2416:	46d8      	mov	r8, fp
					}
					pad = '0';
    2418:	f04f 0b30 	mov.w	fp, #48	; 0x30
    241c:	e00f      	b.n	243e <z_cbvprintf_impl+0x51a>
		const char *bpe = buf + sizeof(buf);
    241e:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    2422:	e7cd      	b.n	23c0 <z_cbvprintf_impl+0x49c>
    2424:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    2428:	e7ca      	b.n	23c0 <z_cbvprintf_impl+0x49c>
		} else if (conv->altform_0) {
    242a:	f012 0f08 	tst.w	r2, #8
    242e:	d0d7      	beq.n	23e0 <z_cbvprintf_impl+0x4bc>
			nj_len += 1U;
    2430:	3301      	adds	r3, #1
    2432:	e7d5      	b.n	23e0 <z_cbvprintf_impl+0x4bc>
				char pad = ' ';
    2434:	f04f 0b20 	mov.w	fp, #32
    2438:	e001      	b.n	243e <z_cbvprintf_impl+0x51a>
					pad = '0';
    243a:	f04f 0b30 	mov.w	fp, #48	; 0x30
    243e:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    2440:	1e5f      	subs	r7, r3, #1
    2442:	2b00      	cmp	r3, #0
    2444:	dd07      	ble.n	2456 <z_cbvprintf_impl+0x532>
					OUTC(pad);
    2446:	4629      	mov	r1, r5
    2448:	4658      	mov	r0, fp
    244a:	47b0      	blx	r6
    244c:	2800      	cmp	r0, #0
    244e:	db4c      	blt.n	24ea <z_cbvprintf_impl+0x5c6>
    2450:	3401      	adds	r4, #1
				while (width-- > 0) {
    2452:	463b      	mov	r3, r7
    2454:	e7f4      	b.n	2440 <z_cbvprintf_impl+0x51c>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    2456:	f1b8 0f00 	cmp.w	r8, #0
    245a:	d005      	beq.n	2468 <z_cbvprintf_impl+0x544>
			OUTC(sign);
    245c:	4629      	mov	r1, r5
    245e:	4640      	mov	r0, r8
    2460:	47b0      	blx	r6
    2462:	2800      	cmp	r0, #0
    2464:	db41      	blt.n	24ea <z_cbvprintf_impl+0x5c6>
    2466:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    2468:	f89d 301a 	ldrb.w	r3, [sp, #26]
    246c:	f3c3 1200 	ubfx	r2, r3, #4, #1
    2470:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    2474:	4313      	orrs	r3, r2
    2476:	d005      	beq.n	2484 <z_cbvprintf_impl+0x560>
				OUTC('0');
    2478:	4629      	mov	r1, r5
    247a:	2030      	movs	r0, #48	; 0x30
    247c:	47b0      	blx	r6
    247e:	2800      	cmp	r0, #0
    2480:	db33      	blt.n	24ea <z_cbvprintf_impl+0x5c6>
    2482:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    2484:	f89d 301a 	ldrb.w	r3, [sp, #26]
    2488:	f013 0f10 	tst.w	r3, #16
    248c:	d006      	beq.n	249c <z_cbvprintf_impl+0x578>
				OUTC(conv->specifier);
    248e:	4629      	mov	r1, r5
    2490:	f89d 001b 	ldrb.w	r0, [sp, #27]
    2494:	47b0      	blx	r6
    2496:	2800      	cmp	r0, #0
    2498:	db27      	blt.n	24ea <z_cbvprintf_impl+0x5c6>
    249a:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    249c:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
    249e:	f103 38ff 	add.w	r8, r3, #4294967295
    24a2:	2b00      	cmp	r3, #0
    24a4:	dd07      	ble.n	24b6 <z_cbvprintf_impl+0x592>
				OUTC('0');
    24a6:	4629      	mov	r1, r5
    24a8:	2030      	movs	r0, #48	; 0x30
    24aa:	47b0      	blx	r6
    24ac:	2800      	cmp	r0, #0
    24ae:	db1c      	blt.n	24ea <z_cbvprintf_impl+0x5c6>
    24b0:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    24b2:	4643      	mov	r3, r8
    24b4:	e7f3      	b.n	249e <z_cbvprintf_impl+0x57a>
			}

			OUTS(bps, bpe);
    24b6:	4653      	mov	r3, sl
    24b8:	464a      	mov	r2, r9
    24ba:	4629      	mov	r1, r5
    24bc:	4630      	mov	r0, r6
    24be:	f00c fc57 	bl	ed70 <outs>
    24c2:	2800      	cmp	r0, #0
    24c4:	db11      	blt.n	24ea <z_cbvprintf_impl+0x5c6>
    24c6:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    24c8:	2f00      	cmp	r7, #0
    24ca:	dd07      	ble.n	24dc <z_cbvprintf_impl+0x5b8>
			OUTC(' ');
    24cc:	4629      	mov	r1, r5
    24ce:	2020      	movs	r0, #32
    24d0:	47b0      	blx	r6
    24d2:	2800      	cmp	r0, #0
    24d4:	db09      	blt.n	24ea <z_cbvprintf_impl+0x5c6>
    24d6:	3401      	adds	r4, #1
			--width;
    24d8:	3f01      	subs	r7, #1
    24da:	e7f5      	b.n	24c8 <z_cbvprintf_impl+0x5a4>
		fp = extract_conversion(conv, sp);
    24dc:	f8dd 9008 	ldr.w	r9, [sp, #8]
    24e0:	e528      	b.n	1f34 <z_cbvprintf_impl+0x10>
    24e2:	f8dd 9008 	ldr.w	r9, [sp, #8]
    24e6:	e525      	b.n	1f34 <z_cbvprintf_impl+0x10>
		}
	}

	return count;
    24e8:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    24ea:	b011      	add	sp, #68	; 0x44
    24ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    24f0:	0001067d 	.word	0x0001067d

000024f4 <mpsc_pbuf_init>:
	}
}

void mpsc_pbuf_init(struct mpsc_pbuf_buffer *buffer,
		    const struct mpsc_pbuf_buffer_config *cfg)
{
    24f4:	b538      	push	{r3, r4, r5, lr}
    24f6:	4604      	mov	r4, r0
    24f8:	460d      	mov	r5, r1
	int err;

	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
    24fa:	2220      	movs	r2, #32
    24fc:	2100      	movs	r1, #0
    24fe:	f00c feae 	bl	f25e <memset>
	buffer->get_wlen = cfg->get_wlen;
    2502:	68eb      	ldr	r3, [r5, #12]
    2504:	61e3      	str	r3, [r4, #28]
	buffer->notify_drop = cfg->notify_drop;
    2506:	68ab      	ldr	r3, [r5, #8]
    2508:	61a3      	str	r3, [r4, #24]
	buffer->buf = cfg->buf;
    250a:	682b      	ldr	r3, [r5, #0]
    250c:	6223      	str	r3, [r4, #32]
	buffer->size = cfg->size;
    250e:	686b      	ldr	r3, [r5, #4]
    2510:	6263      	str	r3, [r4, #36]	; 0x24
	buffer->max_usage = 0;
    2512:	2200      	movs	r2, #0
    2514:	62a2      	str	r2, [r4, #40]	; 0x28
	buffer->flags = cfg->flags;
    2516:	692a      	ldr	r2, [r5, #16]
    2518:	6122      	str	r2, [r4, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
    251a:	b123      	cbz	r3, 2526 <mpsc_pbuf_init+0x32>
    251c:	1e59      	subs	r1, r3, #1
    251e:	420b      	tst	r3, r1
    2520:	d00e      	beq.n	2540 <mpsc_pbuf_init+0x4c>
    2522:	2300      	movs	r3, #0
    2524:	e000      	b.n	2528 <mpsc_pbuf_init+0x34>
    2526:	2300      	movs	r3, #0

	if (is_power_of_two(buffer->size)) {
    2528:	b113      	cbz	r3, 2530 <mpsc_pbuf_init+0x3c>
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
    252a:	f042 0201 	orr.w	r2, r2, #1
    252e:	6122      	str	r2, [r4, #16]
	}

	err = k_sem_init(&buffer->sem, 0, 1);
    2530:	f104 002c 	add.w	r0, r4, #44	; 0x2c
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
    2534:	2201      	movs	r2, #1
    2536:	2100      	movs	r1, #0
    2538:	f00d fc16 	bl	fd68 <z_impl_k_sem_init>
	__ASSERT_NO_MSG(err == 0);
    253c:	b910      	cbnz	r0, 2544 <mpsc_pbuf_init+0x50>
	ARG_UNUSED(err);
}
    253e:	bd38      	pop	{r3, r4, r5, pc}
    2540:	2301      	movs	r3, #1
    2542:	e7f1      	b.n	2528 <mpsc_pbuf_init+0x34>
	__ASSERT_NO_MSG(err == 0);
    2544:	4c05      	ldr	r4, [pc, #20]	; (255c <mpsc_pbuf_init+0x68>)
    2546:	232e      	movs	r3, #46	; 0x2e
    2548:	4622      	mov	r2, r4
    254a:	4905      	ldr	r1, [pc, #20]	; (2560 <mpsc_pbuf_init+0x6c>)
    254c:	4805      	ldr	r0, [pc, #20]	; (2564 <mpsc_pbuf_init+0x70>)
    254e:	f00c fc30 	bl	edb2 <assert_print>
    2552:	212e      	movs	r1, #46	; 0x2e
    2554:	4620      	mov	r0, r4
    2556:	f00c fc25 	bl	eda4 <assert_post_action>
}
    255a:	e7f0      	b.n	253e <mpsc_pbuf_init+0x4a>
    255c:	00010680 	.word	0x00010680
    2560:	000106a8 	.word	0x000106a8
    2564:	00010450 	.word	0x00010450

00002568 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
    2568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    256c:	b087      	sub	sp, #28
    256e:	9202      	str	r2, [sp, #8]
    2570:	9303      	str	r3, [sp, #12]
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
    2572:	6a43      	ldr	r3, [r0, #36]	; 0x24
    2574:	3b01      	subs	r3, #1
    2576:	428b      	cmp	r3, r1
    2578:	f0c0 80ee 	bcc.w	2758 <mpsc_pbuf_alloc+0x1f0>
    257c:	4604      	mov	r4, r0
    257e:	468a      	mov	sl, r1
	union mpsc_pbuf_generic *dropped_item = NULL;
    2580:	f04f 0b00 	mov.w	fp, #0
	union mpsc_pbuf_generic *item = NULL;
    2584:	f8cd b004 	str.w	fp, [sp, #4]
    2588:	e03a      	b.n	2600 <mpsc_pbuf_alloc+0x98>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    258a:	4d76      	ldr	r5, [pc, #472]	; (2764 <mpsc_pbuf_alloc+0x1fc>)
    258c:	238e      	movs	r3, #142	; 0x8e
    258e:	462a      	mov	r2, r5
    2590:	4975      	ldr	r1, [pc, #468]	; (2768 <mpsc_pbuf_alloc+0x200>)
    2592:	4876      	ldr	r0, [pc, #472]	; (276c <mpsc_pbuf_alloc+0x204>)
    2594:	f00c fc0d 	bl	edb2 <assert_print>
    2598:	4639      	mov	r1, r7
    259a:	4875      	ldr	r0, [pc, #468]	; (2770 <mpsc_pbuf_alloc+0x208>)
    259c:	f00c fc09 	bl	edb2 <assert_print>
    25a0:	218e      	movs	r1, #142	; 0x8e
    25a2:	4628      	mov	r0, r5
    25a4:	f00c fbfe 	bl	eda4 <assert_post_action>
    25a8:	e039      	b.n	261e <mpsc_pbuf_alloc+0xb6>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
    25aa:	1b5d      	subs	r5, r3, r5
    25ac:	3d01      	subs	r5, #1
		return false;
    25ae:	2600      	movs	r6, #0
    25b0:	e042      	b.n	2638 <mpsc_pbuf_alloc+0xd0>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
    25b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    25b4:	1b5d      	subs	r5, r3, r5
    25b6:	3d01      	subs	r5, #1
		return false;
    25b8:	2600      	movs	r6, #0
    25ba:	e03d      	b.n	2638 <mpsc_pbuf_alloc+0xd0>
		return i & (buffer->size - 1);
    25bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
    25be:	3a01      	subs	r2, #1
    25c0:	4013      	ands	r3, r2
		if (free_wlen >= wlen) {
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
			item->hdr.valid = 0;
			item->hdr.busy = 0;
			buffer->tmp_wr_idx = idx_inc(buffer,
    25c2:	6023      	str	r3, [r4, #0]
		cont = false;
    25c4:	2600      	movs	r6, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    25c6:	4638      	mov	r0, r7
    25c8:	f008 febc 	bl	b344 <z_spin_unlock_valid>
    25cc:	2800      	cmp	r0, #0
    25ce:	f000 80b0 	beq.w	2732 <mpsc_pbuf_alloc+0x1ca>
    25d2:	f388 8811 	msr	BASEPRI, r8
    25d6:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
    25da:	b176      	cbz	r6, 25fa <mpsc_pbuf_alloc+0x92>
    25dc:	f1bb 0f00 	cmp.w	fp, #0
    25e0:	d00b      	beq.n	25fa <mpsc_pbuf_alloc+0x92>
    25e2:	f89d 3017 	ldrb.w	r3, [sp, #23]
    25e6:	b143      	cbz	r3, 25fa <mpsc_pbuf_alloc+0x92>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
    25e8:	69a3      	ldr	r3, [r4, #24]
    25ea:	2b00      	cmp	r3, #0
    25ec:	f000 80b1 	beq.w	2752 <mpsc_pbuf_alloc+0x1ea>
				buffer->notify_drop(buffer, dropped_item);
    25f0:	4659      	mov	r1, fp
    25f2:	4620      	mov	r0, r4
    25f4:	4798      	blx	r3
			}
			dropped_item = NULL;
    25f6:	f04f 0b00 	mov.w	fp, #0
		}
	} while (cont);
    25fa:	2e00      	cmp	r6, #0
    25fc:	f000 80ae 	beq.w	275c <mpsc_pbuf_alloc+0x1f4>
		key = k_spin_lock(&buffer->lock);
    2600:	f104 0714 	add.w	r7, r4, #20
	__asm__ volatile(
    2604:	f04f 0320 	mov.w	r3, #32
    2608:	f3ef 8911 	mrs	r9, BASEPRI
    260c:	f383 8812 	msr	BASEPRI_MAX, r3
    2610:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2614:	4638      	mov	r0, r7
    2616:	f008 fe85 	bl	b324 <z_spin_lock_valid>
    261a:	2800      	cmp	r0, #0
    261c:	d0b5      	beq.n	258a <mpsc_pbuf_alloc+0x22>
	z_spin_lock_set_owner(l);
    261e:	4638      	mov	r0, r7
    2620:	f008 fea0 	bl	b364 <z_spin_lock_set_owner>
	return k;
    2624:	46c8      	mov	r8, r9
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
    2626:	68e3      	ldr	r3, [r4, #12]
    2628:	6825      	ldr	r5, [r4, #0]
    262a:	42ab      	cmp	r3, r5
    262c:	d8bd      	bhi.n	25aa <mpsc_pbuf_alloc+0x42>
	} else if (!buffer->rd_idx) {
    262e:	2b00      	cmp	r3, #0
    2630:	d0bf      	beq.n	25b2 <mpsc_pbuf_alloc+0x4a>
	*res = buffer->size - buffer->tmp_wr_idx;
    2632:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2634:	1b5d      	subs	r5, r3, r5
	return true;
    2636:	2601      	movs	r6, #1
		if (free_wlen >= wlen) {
    2638:	45aa      	cmp	sl, r5
    263a:	d81a      	bhi.n	2672 <mpsc_pbuf_alloc+0x10a>
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
    263c:	6a23      	ldr	r3, [r4, #32]
    263e:	6822      	ldr	r2, [r4, #0]
			item =
    2640:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    2644:	9101      	str	r1, [sp, #4]
			item->hdr.valid = 0;
    2646:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
    264a:	f36f 0100 	bfc	r1, #0, #1
    264e:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item->hdr.busy = 0;
    2652:	b2c9      	uxtb	r1, r1
    2654:	f36f 0141 	bfc	r1, #1, #1
    2658:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
    265c:	6823      	ldr	r3, [r4, #0]
	uint32_t i = idx + val;
    265e:	4453      	add	r3, sl
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    2660:	6922      	ldr	r2, [r4, #16]
    2662:	f012 0f01 	tst.w	r2, #1
    2666:	d1a9      	bne.n	25bc <mpsc_pbuf_alloc+0x54>
	return (i >= buffer->size) ? i - buffer->size : i;
    2668:	6a62      	ldr	r2, [r4, #36]	; 0x24
    266a:	4293      	cmp	r3, r2
    266c:	d3a9      	bcc.n	25c2 <mpsc_pbuf_alloc+0x5a>
    266e:	1a9b      	subs	r3, r3, r2
    2670:	e7a7      	b.n	25c2 <mpsc_pbuf_alloc+0x5a>
		} else if (wrap) {
    2672:	b9ae      	cbnz	r6, 26a0 <mpsc_pbuf_alloc+0x138>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    2674:	9b03      	ldr	r3, [sp, #12]
    2676:	9a02      	ldr	r2, [sp, #8]
    2678:	4313      	orrs	r3, r2
    267a:	d003      	beq.n	2684 <mpsc_pbuf_alloc+0x11c>
			   !k_is_in_isr()) {
    267c:	f00d fb3a 	bl	fcf4 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    2680:	4606      	mov	r6, r0
    2682:	b190      	cbz	r0, 26aa <mpsc_pbuf_alloc+0x142>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
    2684:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
    2686:	f10d 0317 	add.w	r3, sp, #23
    268a:	f3c2 0240 	ubfx	r2, r2, #1, #1
    268e:	4629      	mov	r1, r5
    2690:	4620      	mov	r0, r4
    2692:	f00c fbc5 	bl	ee20 <drop_item_locked>
			cont = dropped_item != NULL;
    2696:	4683      	mov	fp, r0
    2698:	1e06      	subs	r6, r0, #0
    269a:	bf18      	it	ne
    269c:	2601      	movne	r6, #1
    269e:	e792      	b.n	25c6 <mpsc_pbuf_alloc+0x5e>
			add_skip_item(buffer, free_wlen);
    26a0:	4629      	mov	r1, r5
    26a2:	4620      	mov	r0, r4
    26a4:	f00c fb93 	bl	edce <add_skip_item>
			cont = true;
    26a8:	e78d      	b.n	25c6 <mpsc_pbuf_alloc+0x5e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    26aa:	4638      	mov	r0, r7
    26ac:	f008 fe4a 	bl	b344 <z_spin_unlock_valid>
    26b0:	b1f0      	cbz	r0, 26f0 <mpsc_pbuf_alloc+0x188>
	__asm__ volatile(
    26b2:	f389 8811 	msr	BASEPRI, r9
    26b6:	f3bf 8f6f 	isb	sy
			err = k_sem_take(&buffer->sem, timeout);
    26ba:	f104 002c 	add.w	r0, r4, #44	; 0x2c
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    26be:	9a02      	ldr	r2, [sp, #8]
    26c0:	9b03      	ldr	r3, [sp, #12]
    26c2:	f009 fa73 	bl	bbac <z_impl_k_sem_take>
    26c6:	4605      	mov	r5, r0
	__asm__ volatile(
    26c8:	f04f 0320 	mov.w	r3, #32
    26cc:	f3ef 8811 	mrs	r8, BASEPRI
    26d0:	f383 8812 	msr	BASEPRI_MAX, r3
    26d4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    26d8:	4638      	mov	r0, r7
    26da:	f008 fe23 	bl	b324 <z_spin_lock_valid>
    26de:	b1b8      	cbz	r0, 2710 <mpsc_pbuf_alloc+0x1a8>
	z_spin_lock_set_owner(l);
    26e0:	4638      	mov	r0, r7
    26e2:	f008 fe3f 	bl	b364 <z_spin_lock_set_owner>
			if (err == 0) {
    26e6:	2d00      	cmp	r5, #0
    26e8:	f47f af6d 	bne.w	25c6 <mpsc_pbuf_alloc+0x5e>
				cont = true;
    26ec:	2601      	movs	r6, #1
    26ee:	e76a      	b.n	25c6 <mpsc_pbuf_alloc+0x5e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    26f0:	4d1c      	ldr	r5, [pc, #112]	; (2764 <mpsc_pbuf_alloc+0x1fc>)
    26f2:	23b9      	movs	r3, #185	; 0xb9
    26f4:	462a      	mov	r2, r5
    26f6:	491f      	ldr	r1, [pc, #124]	; (2774 <mpsc_pbuf_alloc+0x20c>)
    26f8:	481c      	ldr	r0, [pc, #112]	; (276c <mpsc_pbuf_alloc+0x204>)
    26fa:	f00c fb5a 	bl	edb2 <assert_print>
    26fe:	4639      	mov	r1, r7
    2700:	481d      	ldr	r0, [pc, #116]	; (2778 <mpsc_pbuf_alloc+0x210>)
    2702:	f00c fb56 	bl	edb2 <assert_print>
    2706:	21b9      	movs	r1, #185	; 0xb9
    2708:	4628      	mov	r0, r5
    270a:	f00c fb4b 	bl	eda4 <assert_post_action>
    270e:	e7d0      	b.n	26b2 <mpsc_pbuf_alloc+0x14a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2710:	f8df 9050 	ldr.w	r9, [pc, #80]	; 2764 <mpsc_pbuf_alloc+0x1fc>
    2714:	238e      	movs	r3, #142	; 0x8e
    2716:	464a      	mov	r2, r9
    2718:	4913      	ldr	r1, [pc, #76]	; (2768 <mpsc_pbuf_alloc+0x200>)
    271a:	4814      	ldr	r0, [pc, #80]	; (276c <mpsc_pbuf_alloc+0x204>)
    271c:	f00c fb49 	bl	edb2 <assert_print>
    2720:	4639      	mov	r1, r7
    2722:	4813      	ldr	r0, [pc, #76]	; (2770 <mpsc_pbuf_alloc+0x208>)
    2724:	f00c fb45 	bl	edb2 <assert_print>
    2728:	218e      	movs	r1, #142	; 0x8e
    272a:	4648      	mov	r0, r9
    272c:	f00c fb3a 	bl	eda4 <assert_post_action>
    2730:	e7d6      	b.n	26e0 <mpsc_pbuf_alloc+0x178>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2732:	4d0c      	ldr	r5, [pc, #48]	; (2764 <mpsc_pbuf_alloc+0x1fc>)
    2734:	23b9      	movs	r3, #185	; 0xb9
    2736:	462a      	mov	r2, r5
    2738:	490e      	ldr	r1, [pc, #56]	; (2774 <mpsc_pbuf_alloc+0x20c>)
    273a:	480c      	ldr	r0, [pc, #48]	; (276c <mpsc_pbuf_alloc+0x204>)
    273c:	f00c fb39 	bl	edb2 <assert_print>
    2740:	4639      	mov	r1, r7
    2742:	480d      	ldr	r0, [pc, #52]	; (2778 <mpsc_pbuf_alloc+0x210>)
    2744:	f00c fb35 	bl	edb2 <assert_print>
    2748:	21b9      	movs	r1, #185	; 0xb9
    274a:	4628      	mov	r0, r5
    274c:	f00c fb2a 	bl	eda4 <assert_post_action>
    2750:	e73f      	b.n	25d2 <mpsc_pbuf_alloc+0x6a>
			dropped_item = NULL;
    2752:	f04f 0b00 	mov.w	fp, #0
    2756:	e750      	b.n	25fa <mpsc_pbuf_alloc+0x92>
		return NULL;
    2758:	2300      	movs	r3, #0
    275a:	9301      	str	r3, [sp, #4]
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
    275c:	9801      	ldr	r0, [sp, #4]
    275e:	b007      	add	sp, #28
    2760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2764:	000105e8 	.word	0x000105e8
    2768:	00010648 	.word	0x00010648
    276c:	00010450 	.word	0x00010450
    2770:	00010660 	.word	0x00010660
    2774:	00010618 	.word	0x00010618
    2778:	00010630 	.word	0x00010630

0000277c <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
    277c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2780:	4604      	mov	r4, r0
    2782:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    2784:	69c3      	ldr	r3, [r0, #28]
    2786:	4608      	mov	r0, r1
    2788:	4798      	blx	r3
    278a:	4680      	mov	r8, r0

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
    278c:	f104 0614 	add.w	r6, r4, #20
    2790:	f04f 0320 	mov.w	r3, #32
    2794:	f3ef 8711 	mrs	r7, BASEPRI
    2798:	f383 8812 	msr	BASEPRI_MAX, r3
    279c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    27a0:	4630      	mov	r0, r6
    27a2:	f008 fdbf 	bl	b324 <z_spin_lock_valid>
    27a6:	b190      	cbz	r0, 27ce <mpsc_pbuf_commit+0x52>
	z_spin_lock_set_owner(l);
    27a8:	4630      	mov	r0, r6
    27aa:	f008 fddb 	bl	b364 <z_spin_lock_set_owner>

	item->hdr.valid = 1;
    27ae:	782b      	ldrb	r3, [r5, #0]
    27b0:	f043 0301 	orr.w	r3, r3, #1
    27b4:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    27b6:	6863      	ldr	r3, [r4, #4]
	uint32_t i = idx + val;
    27b8:	eb03 0008 	add.w	r0, r3, r8
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    27bc:	6923      	ldr	r3, [r4, #16]
    27be:	f013 0f01 	tst.w	r3, #1
    27c2:	d115      	bne.n	27f0 <mpsc_pbuf_commit+0x74>
	return (i >= buffer->size) ? i - buffer->size : i;
    27c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    27c6:	4298      	cmp	r0, r3
    27c8:	d315      	bcc.n	27f6 <mpsc_pbuf_commit+0x7a>
    27ca:	1ac0      	subs	r0, r0, r3
    27cc:	e013      	b.n	27f6 <mpsc_pbuf_commit+0x7a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    27ce:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 28a4 <mpsc_pbuf_commit+0x128>
    27d2:	238e      	movs	r3, #142	; 0x8e
    27d4:	464a      	mov	r2, r9
    27d6:	4934      	ldr	r1, [pc, #208]	; (28a8 <mpsc_pbuf_commit+0x12c>)
    27d8:	4834      	ldr	r0, [pc, #208]	; (28ac <mpsc_pbuf_commit+0x130>)
    27da:	f00c faea 	bl	edb2 <assert_print>
    27de:	4631      	mov	r1, r6
    27e0:	4833      	ldr	r0, [pc, #204]	; (28b0 <mpsc_pbuf_commit+0x134>)
    27e2:	f00c fae6 	bl	edb2 <assert_print>
    27e6:	218e      	movs	r1, #142	; 0x8e
    27e8:	4648      	mov	r0, r9
    27ea:	f00c fadb 	bl	eda4 <assert_post_action>
    27ee:	e7db      	b.n	27a8 <mpsc_pbuf_commit+0x2c>
		return i & (buffer->size - 1);
    27f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    27f2:	3b01      	subs	r3, #1
    27f4:	4018      	ands	r0, r3
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    27f6:	6060      	str	r0, [r4, #4]
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    27f8:	6923      	ldr	r3, [r4, #16]
    27fa:	f013 0f04 	tst.w	r3, #4
    27fe:	d10a      	bne.n	2816 <mpsc_pbuf_commit+0x9a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2800:	4630      	mov	r0, r6
    2802:	f008 fd9f 	bl	b344 <z_spin_unlock_valid>
    2806:	2800      	cmp	r0, #0
    2808:	d03c      	beq.n	2884 <mpsc_pbuf_commit+0x108>
	__asm__ volatile(
    280a:	f387 8811 	msr	BASEPRI, r7
    280e:	f3bf 8f6f 	isb	sy
	max_utilization_update(buffer);
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
    2812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
    2816:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
    2818:	68e3      	ldr	r3, [r4, #12]
    281a:	6820      	ldr	r0, [r4, #0]
    281c:	4283      	cmp	r3, r0
    281e:	d80f      	bhi.n	2840 <mpsc_pbuf_commit+0xc4>
	} else if (!buffer->rd_idx) {
    2820:	b193      	cbz	r3, 2848 <mpsc_pbuf_commit+0xcc>
	*res = buffer->size - buffer->tmp_wr_idx;
    2822:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2824:	1a1b      	subs	r3, r3, r0
	return true;
    2826:	2201      	movs	r2, #1
	if (free_space(buffer, &f)) {
    2828:	b112      	cbz	r2, 2830 <mpsc_pbuf_commit+0xb4>
		f += (buffer->rd_idx - 1);
    282a:	68e2      	ldr	r2, [r4, #12]
    282c:	4413      	add	r3, r2
    282e:	3b01      	subs	r3, #1
	return buffer->size - 1 - f;
    2830:	6a62      	ldr	r2, [r4, #36]	; 0x24
    2832:	1ad3      	subs	r3, r2, r3
    2834:	3b01      	subs	r3, #1
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
    2836:	4299      	cmp	r1, r3
    2838:	d90b      	bls.n	2852 <mpsc_pbuf_commit+0xd6>
    283a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    283c:	62a3      	str	r3, [r4, #40]	; 0x28
    283e:	e7df      	b.n	2800 <mpsc_pbuf_commit+0x84>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
    2840:	1a1b      	subs	r3, r3, r0
    2842:	3b01      	subs	r3, #1
		return false;
    2844:	2200      	movs	r2, #0
    2846:	e7ef      	b.n	2828 <mpsc_pbuf_commit+0xac>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
    2848:	6a62      	ldr	r2, [r4, #36]	; 0x24
    284a:	1a13      	subs	r3, r2, r0
    284c:	3b01      	subs	r3, #1
		return false;
    284e:	2200      	movs	r2, #0
    2850:	e7ea      	b.n	2828 <mpsc_pbuf_commit+0xac>
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
    2852:	68e2      	ldr	r2, [r4, #12]
    2854:	6820      	ldr	r0, [r4, #0]
    2856:	4282      	cmp	r2, r0
    2858:	d80b      	bhi.n	2872 <mpsc_pbuf_commit+0xf6>
	} else if (!buffer->rd_idx) {
    285a:	b172      	cbz	r2, 287a <mpsc_pbuf_commit+0xfe>
	*res = buffer->size - buffer->tmp_wr_idx;
    285c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    285e:	1a1a      	subs	r2, r3, r0
	return true;
    2860:	2301      	movs	r3, #1
	if (free_space(buffer, &f)) {
    2862:	b113      	cbz	r3, 286a <mpsc_pbuf_commit+0xee>
		f += (buffer->rd_idx - 1);
    2864:	68e3      	ldr	r3, [r4, #12]
    2866:	4413      	add	r3, r2
    2868:	1e5a      	subs	r2, r3, #1
	return buffer->size - 1 - f;
    286a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    286c:	1a9b      	subs	r3, r3, r2
    286e:	3b01      	subs	r3, #1
    2870:	e7e4      	b.n	283c <mpsc_pbuf_commit+0xc0>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
    2872:	1a12      	subs	r2, r2, r0
    2874:	3a01      	subs	r2, #1
		return false;
    2876:	2300      	movs	r3, #0
    2878:	e7f3      	b.n	2862 <mpsc_pbuf_commit+0xe6>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
    287a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    287c:	1a0a      	subs	r2, r1, r0
    287e:	3a01      	subs	r2, #1
		return false;
    2880:	2300      	movs	r3, #0
    2882:	e7ee      	b.n	2862 <mpsc_pbuf_commit+0xe6>
    2884:	4c07      	ldr	r4, [pc, #28]	; (28a4 <mpsc_pbuf_commit+0x128>)
    2886:	23b9      	movs	r3, #185	; 0xb9
    2888:	4622      	mov	r2, r4
    288a:	490a      	ldr	r1, [pc, #40]	; (28b4 <mpsc_pbuf_commit+0x138>)
    288c:	4807      	ldr	r0, [pc, #28]	; (28ac <mpsc_pbuf_commit+0x130>)
    288e:	f00c fa90 	bl	edb2 <assert_print>
    2892:	4631      	mov	r1, r6
    2894:	4808      	ldr	r0, [pc, #32]	; (28b8 <mpsc_pbuf_commit+0x13c>)
    2896:	f00c fa8c 	bl	edb2 <assert_print>
    289a:	21b9      	movs	r1, #185	; 0xb9
    289c:	4620      	mov	r0, r4
    289e:	f00c fa81 	bl	eda4 <assert_post_action>
    28a2:	e7b2      	b.n	280a <mpsc_pbuf_commit+0x8e>
    28a4:	000105e8 	.word	0x000105e8
    28a8:	00010648 	.word	0x00010648
    28ac:	00010450 	.word	0x00010450
    28b0:	00010660 	.word	0x00010660
    28b4:	00010618 	.word	0x00010618
    28b8:	00010630 	.word	0x00010630

000028bc <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
    28bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    28c0:	4604      	mov	r4, r0
    28c2:	e054      	b.n	296e <mpsc_pbuf_claim+0xb2>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    28c4:	4f52      	ldr	r7, [pc, #328]	; (2a10 <mpsc_pbuf_claim+0x154>)
    28c6:	238e      	movs	r3, #142	; 0x8e
    28c8:	463a      	mov	r2, r7
    28ca:	4952      	ldr	r1, [pc, #328]	; (2a14 <mpsc_pbuf_claim+0x158>)
    28cc:	4852      	ldr	r0, [pc, #328]	; (2a18 <mpsc_pbuf_claim+0x15c>)
    28ce:	f00c fa70 	bl	edb2 <assert_print>
    28d2:	4629      	mov	r1, r5
    28d4:	4851      	ldr	r0, [pc, #324]	; (2a1c <mpsc_pbuf_claim+0x160>)
    28d6:	f00c fa6c 	bl	edb2 <assert_print>
    28da:	218e      	movs	r1, #142	; 0x8e
    28dc:	4638      	mov	r0, r7
    28de:	f00c fa61 	bl	eda4 <assert_post_action>
    28e2:	e053      	b.n	298c <mpsc_pbuf_claim+0xd0>
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    28e4:	1a9b      	subs	r3, r3, r2
		return false;
    28e6:	e05a      	b.n	299e <mpsc_pbuf_claim+0xe2>
		return item->skip.len;
    28e8:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
		if (!a || is_invalid(item)) {
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
    28ec:	0880      	lsrs	r0, r0, #2
    28ee:	d168      	bne.n	29c2 <mpsc_pbuf_claim+0x106>
    28f0:	e062      	b.n	29b8 <mpsc_pbuf_claim+0xfc>
		return i & (buffer->size - 1);
    28f2:	6a61      	ldr	r1, [r4, #36]	; 0x24
    28f4:	3901      	subs	r1, #1
    28f6:	400b      	ands	r3, r1
				uint32_t inc =
					skip ? skip : buffer->get_wlen(item);

				buffer->tmp_rd_idx =
    28f8:	60a3      	str	r3, [r4, #8]
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
				buffer->rd_idx =
					idx_inc(buffer, buffer->rd_idx, inc);
    28fa:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
    28fc:	4418      	add	r0, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    28fe:	b922      	cbnz	r2, 290a <mpsc_pbuf_claim+0x4e>
	return (i >= buffer->size) ? i - buffer->size : i;
    2900:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2902:	4298      	cmp	r0, r3
    2904:	d304      	bcc.n	2910 <mpsc_pbuf_claim+0x54>
    2906:	1ac0      	subs	r0, r0, r3
    2908:	e002      	b.n	2910 <mpsc_pbuf_claim+0x54>
		return i & (buffer->size - 1);
    290a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    290c:	3b01      	subs	r3, #1
    290e:	4018      	ands	r0, r3
				buffer->rd_idx =
    2910:	60e0      	str	r0, [r4, #12]
				cont = true;
    2912:	f04f 0801 	mov.w	r8, #1
			if (skip || !is_valid(item)) {
    2916:	e01e      	b.n	2956 <mpsc_pbuf_claim+0x9a>
			} else {
				item->hdr.busy = 1;
    2918:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
    291c:	f043 0302 	orr.w	r3, r3, #2
    2920:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
    2924:	f8d4 8008 	ldr.w	r8, [r4, #8]
						buffer->get_wlen(item));
    2928:	69e3      	ldr	r3, [r4, #28]
					idx_inc(buffer, buffer->tmp_rd_idx,
    292a:	4638      	mov	r0, r7
    292c:	4798      	blx	r3
	uint32_t i = idx + val;
    292e:	4440      	add	r0, r8
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    2930:	6923      	ldr	r3, [r4, #16]
    2932:	f013 0f01 	tst.w	r3, #1
    2936:	d104      	bne.n	2942 <mpsc_pbuf_claim+0x86>
	return (i >= buffer->size) ? i - buffer->size : i;
    2938:	6a63      	ldr	r3, [r4, #36]	; 0x24
    293a:	4298      	cmp	r0, r3
    293c:	d304      	bcc.n	2948 <mpsc_pbuf_claim+0x8c>
    293e:	1ac0      	subs	r0, r0, r3
    2940:	e002      	b.n	2948 <mpsc_pbuf_claim+0x8c>
		return i & (buffer->size - 1);
    2942:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2944:	3b01      	subs	r3, #1
    2946:	4018      	ands	r0, r3
				buffer->tmp_rd_idx =
    2948:	60a0      	str	r0, [r4, #8]
		cont = false;
    294a:	f04f 0800 	mov.w	r8, #0
    294e:	e002      	b.n	2956 <mpsc_pbuf_claim+0x9a>
    2950:	f04f 0800 	mov.w	r8, #0
			item = NULL;
    2954:	4647      	mov	r7, r8
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2956:	4628      	mov	r0, r5
    2958:	f008 fcf4 	bl	b344 <z_spin_unlock_valid>
    295c:	2800      	cmp	r0, #0
    295e:	d043      	beq.n	29e8 <mpsc_pbuf_claim+0x12c>
    2960:	f386 8811 	msr	BASEPRI, r6
    2964:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
    2968:	f1b8 0f00 	cmp.w	r8, #0
    296c:	d04d      	beq.n	2a0a <mpsc_pbuf_claim+0x14e>
		key = k_spin_lock(&buffer->lock);
    296e:	f104 0514 	add.w	r5, r4, #20
	__asm__ volatile(
    2972:	f04f 0320 	mov.w	r3, #32
    2976:	f3ef 8611 	mrs	r6, BASEPRI
    297a:	f383 8812 	msr	BASEPRI_MAX, r3
    297e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2982:	4628      	mov	r0, r5
    2984:	f008 fcce 	bl	b324 <z_spin_lock_valid>
    2988:	2800      	cmp	r0, #0
    298a:	d09b      	beq.n	28c4 <mpsc_pbuf_claim+0x8>
	z_spin_lock_set_owner(l);
    298c:	4628      	mov	r0, r5
    298e:	f008 fce9 	bl	b364 <z_spin_lock_set_owner>
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    2992:	68a2      	ldr	r2, [r4, #8]
    2994:	6863      	ldr	r3, [r4, #4]
    2996:	429a      	cmp	r2, r3
    2998:	d9a4      	bls.n	28e4 <mpsc_pbuf_claim+0x28>
	*res = buffer->size - buffer->tmp_rd_idx;
    299a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    299c:	1a9b      	subs	r3, r3, r2
			&buffer->buf[buffer->tmp_rd_idx];
    299e:	6a21      	ldr	r1, [r4, #32]
		item = (union mpsc_pbuf_generic *)
    29a0:	eb01 0782 	add.w	r7, r1, r2, lsl #2
		if (!a || is_invalid(item)) {
    29a4:	2b00      	cmp	r3, #0
    29a6:	d0d3      	beq.n	2950 <mpsc_pbuf_claim+0x94>
	return !item->hdr.valid && !item->hdr.busy;
    29a8:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
		if (!a || is_invalid(item)) {
    29ac:	f013 0303 	ands.w	r3, r3, #3
    29b0:	d016      	beq.n	29e0 <mpsc_pbuf_claim+0x124>
	if (item->hdr.busy && !item->hdr.valid) {
    29b2:	2b02      	cmp	r3, #2
    29b4:	d098      	beq.n	28e8 <mpsc_pbuf_claim+0x2c>
	return 0;
    29b6:	2000      	movs	r0, #0
	return item->hdr.valid;
    29b8:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
			if (skip || !is_valid(item)) {
    29bc:	f013 0f01 	tst.w	r3, #1
    29c0:	d1aa      	bne.n	2918 <mpsc_pbuf_claim+0x5c>
					skip ? skip : buffer->get_wlen(item);
    29c2:	b910      	cbnz	r0, 29ca <mpsc_pbuf_claim+0x10e>
    29c4:	69e3      	ldr	r3, [r4, #28]
    29c6:	4638      	mov	r0, r7
    29c8:	4798      	blx	r3
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
    29ca:	68a3      	ldr	r3, [r4, #8]
	uint32_t i = idx + val;
    29cc:	4403      	add	r3, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    29ce:	6922      	ldr	r2, [r4, #16]
    29d0:	f012 0201 	ands.w	r2, r2, #1
    29d4:	d18d      	bne.n	28f2 <mpsc_pbuf_claim+0x36>
	return (i >= buffer->size) ? i - buffer->size : i;
    29d6:	6a61      	ldr	r1, [r4, #36]	; 0x24
    29d8:	428b      	cmp	r3, r1
    29da:	d38d      	bcc.n	28f8 <mpsc_pbuf_claim+0x3c>
    29dc:	1a5b      	subs	r3, r3, r1
    29de:	e78b      	b.n	28f8 <mpsc_pbuf_claim+0x3c>
		cont = false;
    29e0:	f04f 0800 	mov.w	r8, #0
			item = NULL;
    29e4:	4647      	mov	r7, r8
    29e6:	e7b6      	b.n	2956 <mpsc_pbuf_claim+0x9a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    29e8:	f8df 9024 	ldr.w	r9, [pc, #36]	; 2a10 <mpsc_pbuf_claim+0x154>
    29ec:	23b9      	movs	r3, #185	; 0xb9
    29ee:	464a      	mov	r2, r9
    29f0:	490b      	ldr	r1, [pc, #44]	; (2a20 <mpsc_pbuf_claim+0x164>)
    29f2:	4809      	ldr	r0, [pc, #36]	; (2a18 <mpsc_pbuf_claim+0x15c>)
    29f4:	f00c f9dd 	bl	edb2 <assert_print>
    29f8:	4629      	mov	r1, r5
    29fa:	480a      	ldr	r0, [pc, #40]	; (2a24 <mpsc_pbuf_claim+0x168>)
    29fc:	f00c f9d9 	bl	edb2 <assert_print>
    2a00:	21b9      	movs	r1, #185	; 0xb9
    2a02:	4648      	mov	r0, r9
    2a04:	f00c f9ce 	bl	eda4 <assert_post_action>
    2a08:	e7aa      	b.n	2960 <mpsc_pbuf_claim+0xa4>

	return item;
}
    2a0a:	4638      	mov	r0, r7
    2a0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2a10:	000105e8 	.word	0x000105e8
    2a14:	00010648 	.word	0x00010648
    2a18:	00010450 	.word	0x00010450
    2a1c:	00010660 	.word	0x00010660
    2a20:	00010618 	.word	0x00010618
    2a24:	00010630 	.word	0x00010630

00002a28 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
    2a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2a2c:	4604      	mov	r4, r0
    2a2e:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    2a30:	69c3      	ldr	r3, [r0, #28]
    2a32:	4608      	mov	r0, r1
    2a34:	4798      	blx	r3
    2a36:	4607      	mov	r7, r0
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
    2a38:	f104 0614 	add.w	r6, r4, #20
    2a3c:	f04f 0320 	mov.w	r3, #32
    2a40:	f3ef 8811 	mrs	r8, BASEPRI
    2a44:	f383 8812 	msr	BASEPRI_MAX, r3
    2a48:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2a4c:	4630      	mov	r0, r6
    2a4e:	f008 fc69 	bl	b324 <z_spin_lock_valid>
    2a52:	b1a8      	cbz	r0, 2a80 <mpsc_pbuf_free+0x58>
	z_spin_lock_set_owner(l);
    2a54:	4630      	mov	r0, r6
    2a56:	f008 fc85 	bl	b364 <z_spin_lock_set_owner>
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
    2a5a:	782b      	ldrb	r3, [r5, #0]
    2a5c:	f36f 0300 	bfc	r3, #0, #1
    2a60:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    2a62:	6923      	ldr	r3, [r4, #16]
    2a64:	f013 0f02 	tst.w	r3, #2
    2a68:	d01b      	beq.n	2aa2 <mpsc_pbuf_free+0x7a>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
    2a6a:	6a23      	ldr	r3, [r4, #32]
    2a6c:	68e2      	ldr	r2, [r4, #12]
    2a6e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    2a72:	42ab      	cmp	r3, r5
    2a74:	d015      	beq.n	2aa2 <mpsc_pbuf_free+0x7a>
		witem->hdr.busy = 0;
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
	} else {
		witem->skip.len = wlen;
    2a76:	682b      	ldr	r3, [r5, #0]
    2a78:	f367 039f 	bfi	r3, r7, #2, #30
    2a7c:	602b      	str	r3, [r5, #0]
    2a7e:	e023      	b.n	2ac8 <mpsc_pbuf_free+0xa0>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2a80:	f8df 9080 	ldr.w	r9, [pc, #128]	; 2b04 <mpsc_pbuf_free+0xdc>
    2a84:	238e      	movs	r3, #142	; 0x8e
    2a86:	464a      	mov	r2, r9
    2a88:	491f      	ldr	r1, [pc, #124]	; (2b08 <mpsc_pbuf_free+0xe0>)
    2a8a:	4820      	ldr	r0, [pc, #128]	; (2b0c <mpsc_pbuf_free+0xe4>)
    2a8c:	f00c f991 	bl	edb2 <assert_print>
    2a90:	4631      	mov	r1, r6
    2a92:	481f      	ldr	r0, [pc, #124]	; (2b10 <mpsc_pbuf_free+0xe8>)
    2a94:	f00c f98d 	bl	edb2 <assert_print>
    2a98:	218e      	movs	r1, #142	; 0x8e
    2a9a:	4648      	mov	r0, r9
    2a9c:	f00c f982 	bl	eda4 <assert_post_action>
    2aa0:	e7d8      	b.n	2a54 <mpsc_pbuf_free+0x2c>
		witem->hdr.busy = 0;
    2aa2:	782b      	ldrb	r3, [r5, #0]
    2aa4:	f36f 0341 	bfc	r3, #1, #1
    2aa8:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    2aaa:	68e0      	ldr	r0, [r4, #12]
	uint32_t i = idx + val;
    2aac:	4407      	add	r7, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    2aae:	6923      	ldr	r3, [r4, #16]
    2ab0:	f013 0f01 	tst.w	r3, #1
    2ab4:	d104      	bne.n	2ac0 <mpsc_pbuf_free+0x98>
	return (i >= buffer->size) ? i - buffer->size : i;
    2ab6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2ab8:	429f      	cmp	r7, r3
    2aba:	d304      	bcc.n	2ac6 <mpsc_pbuf_free+0x9e>
    2abc:	1aff      	subs	r7, r7, r3
    2abe:	e002      	b.n	2ac6 <mpsc_pbuf_free+0x9e>
		return i & (buffer->size - 1);
    2ac0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2ac2:	3b01      	subs	r3, #1
    2ac4:	401f      	ands	r7, r3
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    2ac6:	60e7      	str	r7, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2ac8:	4630      	mov	r0, r6
    2aca:	f008 fc3b 	bl	b344 <z_spin_unlock_valid>
    2ace:	b148      	cbz	r0, 2ae4 <mpsc_pbuf_free+0xbc>
	__asm__ volatile(
    2ad0:	f388 8811 	msr	BASEPRI, r8
    2ad4:	f3bf 8f6f 	isb	sy
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
    2ad8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    2adc:	f009 f822 	bl	bb24 <z_impl_k_sem_give>
}
    2ae0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2ae4:	4d07      	ldr	r5, [pc, #28]	; (2b04 <mpsc_pbuf_free+0xdc>)
    2ae6:	23b9      	movs	r3, #185	; 0xb9
    2ae8:	462a      	mov	r2, r5
    2aea:	490a      	ldr	r1, [pc, #40]	; (2b14 <mpsc_pbuf_free+0xec>)
    2aec:	4807      	ldr	r0, [pc, #28]	; (2b0c <mpsc_pbuf_free+0xe4>)
    2aee:	f00c f960 	bl	edb2 <assert_print>
    2af2:	4631      	mov	r1, r6
    2af4:	4808      	ldr	r0, [pc, #32]	; (2b18 <mpsc_pbuf_free+0xf0>)
    2af6:	f00c f95c 	bl	edb2 <assert_print>
    2afa:	21b9      	movs	r1, #185	; 0xb9
    2afc:	4628      	mov	r0, r5
    2afe:	f00c f951 	bl	eda4 <assert_post_action>
    2b02:	e7e5      	b.n	2ad0 <mpsc_pbuf_free+0xa8>
    2b04:	000105e8 	.word	0x000105e8
    2b08:	00010648 	.word	0x00010648
    2b0c:	00010450 	.word	0x00010450
    2b10:	00010660 	.word	0x00010660
    2b14:	00010618 	.word	0x00010618
    2b18:	00010630 	.word	0x00010630

00002b1c <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    2b1c:	b508      	push	{r3, lr}
	__asm__ volatile(
    2b1e:	f04f 0220 	mov.w	r2, #32
    2b22:	f3ef 8311 	mrs	r3, BASEPRI
    2b26:	f382 8812 	msr	BASEPRI_MAX, r2
    2b2a:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    2b2e:	f002 fe8b 	bl	5848 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    2b32:	4803      	ldr	r0, [pc, #12]	; (2b40 <sys_reboot+0x24>)
    2b34:	f00b ffde 	bl	eaf4 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    2b38:	f001 fa50 	bl	3fdc <arch_cpu_idle>
    2b3c:	e7fc      	b.n	2b38 <sys_reboot+0x1c>
    2b3e:	bf00      	nop
    2b40:	000106b4 	.word	0x000106b4

00002b44 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    2b44:	f005 bd88 	b.w	8658 <SystemInit>

00002b48 <log_backend_notify_all>:
	return mpsc_pbuf_get_max_utilization(&log_buffer, max);
}

static void log_backend_notify_all(enum log_backend_evt event,
				   union log_backend_evt_arg *arg)
{
    2b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2b4c:	4607      	mov	r7, r0
    2b4e:	460e      	mov	r6, r1
	for (int i = 0; i < log_backend_count_get(); i++) {
    2b50:	2400      	movs	r4, #0
    2b52:	e00f      	b.n	2b74 <log_backend_notify_all+0x2c>
 */
static inline void log_backend_notify(const struct log_backend *const backend,
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);
    2b54:	f8df a04c 	ldr.w	sl, [pc, #76]	; 2ba4 <log_backend_notify_all+0x5c>
    2b58:	f240 1359 	movw	r3, #345	; 0x159
    2b5c:	4652      	mov	r2, sl
    2b5e:	4912      	ldr	r1, [pc, #72]	; (2ba8 <log_backend_notify_all+0x60>)
    2b60:	4812      	ldr	r0, [pc, #72]	; (2bac <log_backend_notify_all+0x64>)
    2b62:	f00c f926 	bl	edb2 <assert_print>
    2b66:	f240 1159 	movw	r1, #345	; 0x159
    2b6a:	4650      	mov	r0, sl
    2b6c:	f00c f91a 	bl	eda4 <assert_post_action>
    2b70:	e00c      	b.n	2b8c <log_backend_notify_all+0x44>
    2b72:	3401      	adds	r4, #1
    2b74:	4b0e      	ldr	r3, [pc, #56]	; (2bb0 <log_backend_notify_all+0x68>)
    2b76:	4d0f      	ldr	r5, [pc, #60]	; (2bb4 <log_backend_notify_all+0x6c>)
    2b78:	1b5b      	subs	r3, r3, r5
    2b7a:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    2b7e:	da0f      	bge.n	2ba0 <log_backend_notify_all+0x58>
	return &__log_backends_start[idx];
    2b80:	ea4f 1804 	mov.w	r8, r4, lsl #4
    2b84:	4d0b      	ldr	r5, [pc, #44]	; (2bb4 <log_backend_notify_all+0x6c>)
	__ASSERT_NO_MSG(backend != NULL);
    2b86:	eb15 1904 	adds.w	r9, r5, r4, lsl #4
    2b8a:	d0e3      	beq.n	2b54 <log_backend_notify_all+0xc>

	if (backend->api->notify) {
    2b8c:	f858 3005 	ldr.w	r3, [r8, r5]
    2b90:	699b      	ldr	r3, [r3, #24]
    2b92:	2b00      	cmp	r3, #0
    2b94:	d0ed      	beq.n	2b72 <log_backend_notify_all+0x2a>
		backend->api->notify(backend, event, arg);
    2b96:	4632      	mov	r2, r6
    2b98:	4639      	mov	r1, r7
    2b9a:	4648      	mov	r0, r9
    2b9c:	4798      	blx	r3
    2b9e:	e7e8      	b.n	2b72 <log_backend_notify_all+0x2a>
		const struct log_backend *backend = log_backend_get(i);

		log_backend_notify(backend, event, arg);
	}
}
    2ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2ba4:	000106e0 	.word	0x000106e0
    2ba8:	00010718 	.word	0x00010718
    2bac:	00010450 	.word	0x00010450
    2bb0:	000101a4 	.word	0x000101a4
    2bb4:	00010194 	.word	0x00010194

00002bb8 <thread_set>:
{
    2bb8:	b508      	push	{r3, lr}
	proc_tid = process_tid;
    2bba:	4b06      	ldr	r3, [pc, #24]	; (2bd4 <thread_set+0x1c>)
    2bbc:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    2bbe:	b118      	cbz	r0, 2bc8 <thread_set+0x10>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    2bc0:	4b05      	ldr	r3, [pc, #20]	; (2bd8 <thread_set+0x20>)
    2bc2:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
    2bc4:	2b09      	cmp	r3, #9
    2bc6:	dc00      	bgt.n	2bca <thread_set+0x12>
}
    2bc8:	bd08      	pop	{r3, pc}
    2bca:	4804      	ldr	r0, [pc, #16]	; (2bdc <thread_set+0x24>)
    2bcc:	f008 ffaa 	bl	bb24 <z_impl_k_sem_give>
}
    2bd0:	e7fa      	b.n	2bc8 <thread_set+0x10>
    2bd2:	bf00      	nop
    2bd4:	200009d0 	.word	0x200009d0
    2bd8:	20000988 	.word	0x20000988
    2bdc:	200001f8 	.word	0x200001f8

00002be0 <log_process_thread_timer_expiry_fn>:

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
    2be0:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
    2be2:	4802      	ldr	r0, [pc, #8]	; (2bec <log_process_thread_timer_expiry_fn+0xc>)
    2be4:	f008 ff9e 	bl	bb24 <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
    2be8:	bd08      	pop	{r3, pc}
    2bea:	bf00      	nop
    2bec:	200001f8 	.word	0x200001f8

00002bf0 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    2bf0:	b530      	push	{r4, r5, lr}
    2bf2:	b089      	sub	sp, #36	; 0x24
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    2bf4:	2200      	movs	r2, #0
    2bf6:	490f      	ldr	r1, [pc, #60]	; (2c34 <enable_logger+0x44>)
    2bf8:	480f      	ldr	r0, [pc, #60]	; (2c38 <enable_logger+0x48>)
    2bfa:	f00d f915 	bl	fe28 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    2bfe:	4d0f      	ldr	r5, [pc, #60]	; (2c3c <enable_logger+0x4c>)
    2c00:	2200      	movs	r2, #0
    2c02:	2300      	movs	r3, #0
    2c04:	e9cd 2306 	strd	r2, r3, [sp, #24]
    2c08:	2400      	movs	r4, #0
    2c0a:	9404      	str	r4, [sp, #16]
    2c0c:	230e      	movs	r3, #14
    2c0e:	9303      	str	r3, [sp, #12]
    2c10:	9402      	str	r4, [sp, #8]
    2c12:	9401      	str	r4, [sp, #4]
    2c14:	9400      	str	r4, [sp, #0]
    2c16:	4b0a      	ldr	r3, [pc, #40]	; (2c40 <enable_logger+0x50>)
    2c18:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2c1c:	4909      	ldr	r1, [pc, #36]	; (2c44 <enable_logger+0x54>)
    2c1e:	4628      	mov	r0, r5
    2c20:	f008 fcc8 	bl	b5b4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    2c24:	4908      	ldr	r1, [pc, #32]	; (2c48 <enable_logger+0x58>)
    2c26:	4628      	mov	r0, r5
    2c28:	f008 fb5c 	bl	b2e4 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
    2c2c:	4620      	mov	r0, r4
    2c2e:	b009      	add	sp, #36	; 0x24
    2c30:	bd30      	pop	{r4, r5, pc}
    2c32:	bf00      	nop
    2c34:	00002be1 	.word	0x00002be1
    2c38:	20000608 	.word	0x20000608
    2c3c:	20000640 	.word	0x20000640
    2c40:	000032b5 	.word	0x000032b5
    2c44:	20001300 	.word	0x20001300
    2c48:	00010730 	.word	0x00010730

00002c4c <activate_foreach_backend>:
{
    2c4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2c50:	4681      	mov	r9, r0
	uint32_t mask_cpy = mask;
    2c52:	4604      	mov	r4, r0
	while (mask_cpy) {
    2c54:	e00e      	b.n	2c74 <activate_foreach_backend+0x28>
	__ASSERT_NO_MSG(backend != NULL);
    2c56:	f8df b074 	ldr.w	fp, [pc, #116]	; 2ccc <activate_foreach_backend+0x80>
    2c5a:	239d      	movs	r3, #157	; 0x9d
    2c5c:	465a      	mov	r2, fp
    2c5e:	491c      	ldr	r1, [pc, #112]	; (2cd0 <activate_foreach_backend+0x84>)
    2c60:	481c      	ldr	r0, [pc, #112]	; (2cd4 <activate_foreach_backend+0x88>)
    2c62:	f00c f8a6 	bl	edb2 <assert_print>
    2c66:	219d      	movs	r1, #157	; 0x9d
    2c68:	4658      	mov	r0, fp
    2c6a:	f00c f89b 	bl	eda4 <assert_post_action>
    2c6e:	e016      	b.n	2c9e <activate_foreach_backend+0x52>
	return 0;
    2c70:	2000      	movs	r0, #0
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    2c72:	b1e0      	cbz	r0, 2cae <activate_foreach_backend+0x62>
	while (mask_cpy) {
    2c74:	b33c      	cbz	r4, 2cc6 <activate_foreach_backend+0x7a>
		uint32_t i = __builtin_ctz(mask_cpy);
    2c76:	fa94 f5a4 	rbit	r5, r4
    2c7a:	fab5 f585 	clz	r5, r5
	return &__log_backends_start[idx];
    2c7e:	ea4f 1805 	mov.w	r8, r5, lsl #4
    2c82:	4f15      	ldr	r7, [pc, #84]	; (2cd8 <activate_foreach_backend+0x8c>)
    2c84:	eb07 1605 	add.w	r6, r7, r5, lsl #4
		mask_cpy &= ~BIT(i);
    2c88:	2301      	movs	r3, #1
    2c8a:	40ab      	lsls	r3, r5
    2c8c:	ea6f 0a03 	mvn.w	sl, r3
    2c90:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    2c94:	7b33      	ldrb	r3, [r6, #12]
    2c96:	2b00      	cmp	r3, #0
    2c98:	d0ec      	beq.n	2c74 <activate_foreach_backend+0x28>
	__ASSERT_NO_MSG(backend != NULL);
    2c9a:	2e00      	cmp	r6, #0
    2c9c:	d0db      	beq.n	2c56 <activate_foreach_backend+0xa>
	if (backend->api->is_ready != NULL) {
    2c9e:	f858 3007 	ldr.w	r3, [r8, r7]
    2ca2:	691b      	ldr	r3, [r3, #16]
    2ca4:	2b00      	cmp	r3, #0
    2ca6:	d0e3      	beq.n	2c70 <activate_foreach_backend+0x24>
		return backend->api->is_ready(backend);
    2ca8:	4630      	mov	r0, r6
    2caa:	4798      	blx	r3
    2cac:	e7e1      	b.n	2c72 <activate_foreach_backend+0x26>
			mask &= ~BIT(i);
    2cae:	ea09 090a 	and.w	r9, r9, sl
					   backend->cb->ctx,
    2cb2:	4b09      	ldr	r3, [pc, #36]	; (2cd8 <activate_foreach_backend+0x8c>)
    2cb4:	eb03 1505 	add.w	r5, r3, r5, lsl #4
    2cb8:	686b      	ldr	r3, [r5, #4]
			log_backend_enable(backend,
    2cba:	2204      	movs	r2, #4
    2cbc:	6819      	ldr	r1, [r3, #0]
    2cbe:	4630      	mov	r0, r6
    2cc0:	f000 fb5e 	bl	3380 <log_backend_enable>
    2cc4:	e7d6      	b.n	2c74 <activate_foreach_backend+0x28>
}
    2cc6:	4648      	mov	r0, r9
    2cc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2ccc:	000106e0 	.word	0x000106e0
    2cd0:	00010718 	.word	0x00010718
    2cd4:	00010450 	.word	0x00010450
    2cd8:	00010194 	.word	0x00010194

00002cdc <z_log_init>:
{
    2cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2ce0:	b083      	sub	sp, #12
    2ce2:	9001      	str	r0, [sp, #4]
    2ce4:	468b      	mov	fp, r1
	return __log_backends_end - __log_backends_start;
    2ce6:	4b41      	ldr	r3, [pc, #260]	; (2dec <z_log_init+0x110>)
    2ce8:	4a41      	ldr	r2, [pc, #260]	; (2df0 <z_log_init+0x114>)
    2cea:	1a9b      	subs	r3, r3, r2
    2cec:	ea4f 1923 	mov.w	r9, r3, asr #4
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    2cf0:	2b90      	cmp	r3, #144	; 0x90
    2cf2:	d80f      	bhi.n	2d14 <z_log_init+0x38>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    2cf4:	4b3f      	ldr	r3, [pc, #252]	; (2df4 <z_log_init+0x118>)
    2cf6:	f3bf 8f5b 	dmb	ish
    2cfa:	e853 5f00 	ldrex	r5, [r3]
    2cfe:	1c6a      	adds	r2, r5, #1
    2d00:	e843 2100 	strex	r1, r2, [r3]
    2d04:	2900      	cmp	r1, #0
    2d06:	d1f8      	bne.n	2cfa <z_log_init+0x1e>
    2d08:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    2d0c:	2d00      	cmp	r5, #0
    2d0e:	d167      	bne.n	2de0 <z_log_init+0x104>
	for (i = 0; i < log_backend_count_get(); i++) {
    2d10:	2400      	movs	r4, #0
    2d12:	e02d      	b.n	2d70 <z_log_init+0x94>
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    2d14:	4c38      	ldr	r4, [pc, #224]	; (2df8 <z_log_init+0x11c>)
    2d16:	f44f 7384 	mov.w	r3, #264	; 0x108
    2d1a:	4622      	mov	r2, r4
    2d1c:	4937      	ldr	r1, [pc, #220]	; (2dfc <z_log_init+0x120>)
    2d1e:	4838      	ldr	r0, [pc, #224]	; (2e00 <z_log_init+0x124>)
    2d20:	f00c f847 	bl	edb2 <assert_print>
    2d24:	f44f 7184 	mov.w	r1, #264	; 0x108
    2d28:	4620      	mov	r0, r4
    2d2a:	f00c f83b 	bl	eda4 <assert_post_action>
    2d2e:	e7e1      	b.n	2cf4 <z_log_init+0x18>
	__ASSERT_NO_MSG(backend != NULL);
    2d30:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 2e04 <z_log_init+0x128>
    2d34:	238a      	movs	r3, #138	; 0x8a
    2d36:	4652      	mov	r2, sl
    2d38:	4933      	ldr	r1, [pc, #204]	; (2e08 <z_log_init+0x12c>)
    2d3a:	4831      	ldr	r0, [pc, #196]	; (2e00 <z_log_init+0x124>)
    2d3c:	f00c f839 	bl	edb2 <assert_print>
    2d40:	218a      	movs	r1, #138	; 0x8a
    2d42:	4650      	mov	r0, sl
    2d44:	f00c f82e 	bl	eda4 <assert_post_action>
    2d48:	e01f      	b.n	2d8a <z_log_init+0xae>
	__ASSERT_NO_MSG(backend != NULL);
    2d4a:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 2e04 <z_log_init+0x128>
    2d4e:	239d      	movs	r3, #157	; 0x9d
    2d50:	4652      	mov	r2, sl
    2d52:	492d      	ldr	r1, [pc, #180]	; (2e08 <z_log_init+0x12c>)
    2d54:	482a      	ldr	r0, [pc, #168]	; (2e00 <z_log_init+0x124>)
    2d56:	f00c f82c 	bl	edb2 <assert_print>
    2d5a:	219d      	movs	r1, #157	; 0x9d
    2d5c:	4650      	mov	r0, sl
    2d5e:	f00c f821 	bl	eda4 <assert_post_action>
    2d62:	e01a      	b.n	2d9a <z_log_init+0xbe>
	return 0;
    2d64:	2000      	movs	r0, #0
			if (log_backend_is_ready(backend) == 0) {
    2d66:	b300      	cbz	r0, 2daa <z_log_init+0xce>
				mask |= BIT(i);
    2d68:	2301      	movs	r3, #1
    2d6a:	40a3      	lsls	r3, r4
    2d6c:	431d      	orrs	r5, r3
	for (i = 0; i < log_backend_count_get(); i++) {
    2d6e:	3401      	adds	r4, #1
    2d70:	454c      	cmp	r4, r9
    2d72:	da25      	bge.n	2dc0 <z_log_init+0xe4>
		const struct log_backend *backend = log_backend_get(i);
    2d74:	9400      	str	r4, [sp, #0]
	return &__log_backends_start[idx];
    2d76:	ea4f 1804 	mov.w	r8, r4, lsl #4
    2d7a:	4f1d      	ldr	r7, [pc, #116]	; (2df0 <z_log_init+0x114>)
    2d7c:	eb07 1604 	add.w	r6, r7, r4, lsl #4
		if (backend->autostart) {
    2d80:	7b33      	ldrb	r3, [r6, #12]
    2d82:	2b00      	cmp	r3, #0
    2d84:	d0f3      	beq.n	2d6e <z_log_init+0x92>
	__ASSERT_NO_MSG(backend != NULL);
    2d86:	2e00      	cmp	r6, #0
    2d88:	d0d2      	beq.n	2d30 <z_log_init+0x54>
	if (backend->api->init) {
    2d8a:	f858 3007 	ldr.w	r3, [r8, r7]
    2d8e:	68db      	ldr	r3, [r3, #12]
    2d90:	b10b      	cbz	r3, 2d96 <z_log_init+0xba>
		backend->api->init(backend);
    2d92:	4630      	mov	r0, r6
    2d94:	4798      	blx	r3
	__ASSERT_NO_MSG(backend != NULL);
    2d96:	2e00      	cmp	r6, #0
    2d98:	d0d7      	beq.n	2d4a <z_log_init+0x6e>
	if (backend->api->is_ready != NULL) {
    2d9a:	f858 3007 	ldr.w	r3, [r8, r7]
    2d9e:	691b      	ldr	r3, [r3, #16]
    2da0:	2b00      	cmp	r3, #0
    2da2:	d0df      	beq.n	2d64 <z_log_init+0x88>
		return backend->api->is_ready(backend);
    2da4:	4630      	mov	r0, r6
    2da6:	4798      	blx	r3
    2da8:	e7dd      	b.n	2d66 <z_log_init+0x8a>
						   backend->cb->ctx,
    2daa:	4b11      	ldr	r3, [pc, #68]	; (2df0 <z_log_init+0x114>)
    2dac:	9a00      	ldr	r2, [sp, #0]
    2dae:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    2db2:	685b      	ldr	r3, [r3, #4]
				log_backend_enable(backend,
    2db4:	2204      	movs	r2, #4
    2db6:	6819      	ldr	r1, [r3, #0]
    2db8:	4630      	mov	r0, r6
    2dba:	f000 fae1 	bl	3380 <log_backend_enable>
    2dbe:	e7d6      	b.n	2d6e <z_log_init+0x92>
	if (blocking) {
    2dc0:	9b01      	ldr	r3, [sp, #4]
    2dc2:	b173      	cbz	r3, 2de2 <z_log_init+0x106>
    2dc4:	465c      	mov	r4, fp
		while (mask) {
    2dc6:	b165      	cbz	r5, 2de2 <z_log_init+0x106>
			mask = activate_foreach_backend(mask);
    2dc8:	4628      	mov	r0, r5
    2dca:	f7ff ff3f 	bl	2c4c <activate_foreach_backend>
    2dce:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    2dd0:	2c00      	cmp	r4, #0
    2dd2:	d0f8      	beq.n	2dc6 <z_log_init+0xea>
	return z_impl_k_sleep(timeout);
    2dd4:	f44f 70a4 	mov.w	r0, #328	; 0x148
    2dd8:	2100      	movs	r1, #0
    2dda:	f00a fd69 	bl	d8b0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2dde:	e7f2      	b.n	2dc6 <z_log_init+0xea>
		return 0;
    2de0:	2500      	movs	r5, #0
}
    2de2:	4628      	mov	r0, r5
    2de4:	b003      	add	sp, #12
    2de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2dea:	bf00      	nop
    2dec:	000101a4 	.word	0x000101a4
    2df0:	00010194 	.word	0x00010194
    2df4:	20000990 	.word	0x20000990
    2df8:	00010738 	.word	0x00010738
    2dfc:	00010768 	.word	0x00010768
    2e00:	00010450 	.word	0x00010450
    2e04:	000106e0 	.word	0x000106e0
    2e08:	00010718 	.word	0x00010718

00002e0c <msg_process>:
{
    2e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2e10:	4607      	mov	r7, r0
	for (int i = 0; i < log_backend_count_get(); i++) {
    2e12:	2400      	movs	r4, #0
    2e14:	e022      	b.n	2e5c <msg_process+0x50>
	__ASSERT_NO_MSG(backend != NULL);
    2e16:	f8df 9098 	ldr.w	r9, [pc, #152]	; 2eb0 <msg_process+0xa4>
    2e1a:	f44f 7395 	mov.w	r3, #298	; 0x12a
    2e1e:	464a      	mov	r2, r9
    2e20:	4924      	ldr	r1, [pc, #144]	; (2eb4 <msg_process+0xa8>)
    2e22:	4825      	ldr	r0, [pc, #148]	; (2eb8 <msg_process+0xac>)
    2e24:	f00b ffc5 	bl	edb2 <assert_print>
    2e28:	f44f 7195 	mov.w	r1, #298	; 0x12a
    2e2c:	4648      	mov	r0, r9
    2e2e:	f00b ffb9 	bl	eda4 <assert_post_action>
    2e32:	e01f      	b.n	2e74 <msg_process+0x68>
	__ASSERT_NO_MSG(backend != NULL);
    2e34:	f8df 9078 	ldr.w	r9, [pc, #120]	; 2eb0 <msg_process+0xa4>
    2e38:	23b1      	movs	r3, #177	; 0xb1
    2e3a:	464a      	mov	r2, r9
    2e3c:	491d      	ldr	r1, [pc, #116]	; (2eb4 <msg_process+0xa8>)
    2e3e:	481e      	ldr	r0, [pc, #120]	; (2eb8 <msg_process+0xac>)
    2e40:	f00b ffb7 	bl	edb2 <assert_print>
    2e44:	21b1      	movs	r1, #177	; 0xb1
    2e46:	4648      	mov	r0, r9
    2e48:	f00b ffac 	bl	eda4 <assert_post_action>
    2e4c:	e01e      	b.n	2e8c <msg_process+0x80>
	backend->api->process(backend, msg);
    2e4e:	f858 3005 	ldr.w	r3, [r8, r5]
    2e52:	681b      	ldr	r3, [r3, #0]
    2e54:	4639      	mov	r1, r7
    2e56:	4630      	mov	r0, r6
    2e58:	4798      	blx	r3
    2e5a:	3401      	adds	r4, #1
    2e5c:	4b17      	ldr	r3, [pc, #92]	; (2ebc <msg_process+0xb0>)
    2e5e:	4a18      	ldr	r2, [pc, #96]	; (2ec0 <msg_process+0xb4>)
    2e60:	1a9b      	subs	r3, r3, r2
    2e62:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    2e66:	da20      	bge.n	2eaa <msg_process+0x9e>
	return &__log_backends_start[idx];
    2e68:	ea4f 1804 	mov.w	r8, r4, lsl #4
    2e6c:	4d14      	ldr	r5, [pc, #80]	; (2ec0 <msg_process+0xb4>)
	__ASSERT_NO_MSG(backend != NULL);
    2e6e:	eb15 1604 	adds.w	r6, r5, r4, lsl #4
    2e72:	d0d0      	beq.n	2e16 <msg_process+0xa>
	return backend->cb->active;
    2e74:	6873      	ldr	r3, [r6, #4]
    2e76:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend) &&
    2e78:	2b00      	cmp	r3, #0
    2e7a:	d0ee      	beq.n	2e5a <msg_process+0x4e>
		    msg_filter_check(backend, msg)) {
    2e7c:	4639      	mov	r1, r7
    2e7e:	4630      	mov	r0, r6
    2e80:	f00c f877 	bl	ef72 <msg_filter_check>
		if (log_backend_is_active(backend) &&
    2e84:	2800      	cmp	r0, #0
    2e86:	d0e8      	beq.n	2e5a <msg_process+0x4e>
	__ASSERT_NO_MSG(backend != NULL);
    2e88:	2e00      	cmp	r6, #0
    2e8a:	d0d3      	beq.n	2e34 <msg_process+0x28>
	__ASSERT_NO_MSG(msg != NULL);
    2e8c:	2f00      	cmp	r7, #0
    2e8e:	d1de      	bne.n	2e4e <msg_process+0x42>
    2e90:	f8df 901c 	ldr.w	r9, [pc, #28]	; 2eb0 <msg_process+0xa4>
    2e94:	23b2      	movs	r3, #178	; 0xb2
    2e96:	464a      	mov	r2, r9
    2e98:	490a      	ldr	r1, [pc, #40]	; (2ec4 <msg_process+0xb8>)
    2e9a:	4807      	ldr	r0, [pc, #28]	; (2eb8 <msg_process+0xac>)
    2e9c:	f00b ff89 	bl	edb2 <assert_print>
    2ea0:	21b2      	movs	r1, #178	; 0xb2
    2ea2:	4648      	mov	r0, r9
    2ea4:	f00b ff7e 	bl	eda4 <assert_post_action>
    2ea8:	e7d1      	b.n	2e4e <msg_process+0x42>
}
    2eaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2eae:	bf00      	nop
    2eb0:	000106e0 	.word	0x000106e0
    2eb4:	00010718 	.word	0x00010718
    2eb8:	00010450 	.word	0x00010450
    2ebc:	000101a4 	.word	0x000101a4
    2ec0:	00010194 	.word	0x00010194
    2ec4:	0001078c 	.word	0x0001078c

00002ec8 <log_format_func_t_get>:
}
    2ec8:	4b01      	ldr	r3, [pc, #4]	; (2ed0 <log_format_func_t_get+0x8>)
    2eca:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    2ece:	4770      	bx	lr
    2ed0:	000107c0 	.word	0x000107c0

00002ed4 <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
    2ed4:	b138      	cbz	r0, 2ee6 <log_set_timestamp_func+0x12>
{
    2ed6:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
    2ed8:	4a04      	ldr	r2, [pc, #16]	; (2eec <log_set_timestamp_func+0x18>)
    2eda:	6010      	str	r0, [r2, #0]
		log_output_timestamp_freq_set(freq);
    2edc:	4608      	mov	r0, r1
    2ede:	f000 fd2b 	bl	3938 <log_output_timestamp_freq_set>
	return 0;
    2ee2:	2000      	movs	r0, #0
}
    2ee4:	bd08      	pop	{r3, pc}
		return -EINVAL;
    2ee6:	f06f 0015 	mvn.w	r0, #21
}
    2eea:	4770      	bx	lr
    2eec:	2000003c 	.word	0x2000003c

00002ef0 <z_log_notify_backend_enabled>:
{
    2ef0:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    2ef2:	4b05      	ldr	r3, [pc, #20]	; (2f08 <z_log_notify_backend_enabled+0x18>)
    2ef4:	781b      	ldrb	r3, [r3, #0]
    2ef6:	b11b      	cbz	r3, 2f00 <z_log_notify_backend_enabled+0x10>
	backend_attached = true;
    2ef8:	4b03      	ldr	r3, [pc, #12]	; (2f08 <z_log_notify_backend_enabled+0x18>)
    2efa:	2201      	movs	r2, #1
    2efc:	701a      	strb	r2, [r3, #0]
}
    2efe:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
    2f00:	4802      	ldr	r0, [pc, #8]	; (2f0c <z_log_notify_backend_enabled+0x1c>)
    2f02:	f008 fe0f 	bl	bb24 <z_impl_k_sem_give>
}
    2f06:	e7f7      	b.n	2ef8 <z_log_notify_backend_enabled+0x8>
    2f08:	200012ca 	.word	0x200012ca
    2f0c:	200001f8 	.word	0x200001f8

00002f10 <z_log_dropped>:
    2f10:	4b0d      	ldr	r3, [pc, #52]	; (2f48 <z_log_dropped+0x38>)
    2f12:	f3bf 8f5b 	dmb	ish
    2f16:	e853 2f00 	ldrex	r2, [r3]
    2f1a:	3201      	adds	r2, #1
    2f1c:	e843 2100 	strex	r1, r2, [r3]
    2f20:	2900      	cmp	r1, #0
    2f22:	d1f8      	bne.n	2f16 <z_log_dropped+0x6>
    2f24:	f3bf 8f5b 	dmb	ish
	if (buffered) {
    2f28:	b900      	cbnz	r0, 2f2c <z_log_dropped+0x1c>
}
    2f2a:	4770      	bx	lr
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    2f2c:	4b07      	ldr	r3, [pc, #28]	; (2f4c <z_log_dropped+0x3c>)
    2f2e:	f3bf 8f5b 	dmb	ish
    2f32:	e853 2f00 	ldrex	r2, [r3]
    2f36:	3a01      	subs	r2, #1
    2f38:	e843 2100 	strex	r1, r2, [r3]
    2f3c:	2900      	cmp	r1, #0
    2f3e:	d1f8      	bne.n	2f32 <z_log_dropped+0x22>
    2f40:	f3bf 8f5b 	dmb	ish
    2f44:	e7f1      	b.n	2f2a <z_log_dropped+0x1a>
    2f46:	bf00      	nop
    2f48:	2000098c 	.word	0x2000098c
    2f4c:	20000988 	.word	0x20000988

00002f50 <z_log_dropped_read_and_clear>:
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2f50:	4b06      	ldr	r3, [pc, #24]	; (2f6c <z_log_dropped_read_and_clear+0x1c>)
}
    2f52:	2000      	movs	r0, #0
    2f54:	4602      	mov	r2, r0
    2f56:	f3bf 8f5b 	dmb	ish
    2f5a:	e853 0f00 	ldrex	r0, [r3]
    2f5e:	e843 2100 	strex	r1, r2, [r3]
    2f62:	2900      	cmp	r1, #0
    2f64:	d1f9      	bne.n	2f5a <z_log_dropped_read_and_clear+0xa>
    2f66:	f3bf 8f5b 	dmb	ish
    2f6a:	4770      	bx	lr
    2f6c:	2000098c 	.word	0x2000098c

00002f70 <dropped_notify>:
{
    2f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    2f74:	f7ff ffec 	bl	2f50 <z_log_dropped_read_and_clear>
    2f78:	4607      	mov	r7, r0
	for (int i = 0; i < log_backend_count_get(); i++) {
    2f7a:	2400      	movs	r4, #0
    2f7c:	e01f      	b.n	2fbe <dropped_notify+0x4e>
	__ASSERT_NO_MSG(backend != NULL);
    2f7e:	f8df 9074 	ldr.w	r9, [pc, #116]	; 2ff4 <dropped_notify+0x84>
    2f82:	f44f 7395 	mov.w	r3, #298	; 0x12a
    2f86:	464a      	mov	r2, r9
    2f88:	491b      	ldr	r1, [pc, #108]	; (2ff8 <dropped_notify+0x88>)
    2f8a:	481c      	ldr	r0, [pc, #112]	; (2ffc <dropped_notify+0x8c>)
    2f8c:	f00b ff11 	bl	edb2 <assert_print>
    2f90:	f44f 7195 	mov.w	r1, #298	; 0x12a
    2f94:	4648      	mov	r0, r9
    2f96:	f00b ff05 	bl	eda4 <assert_post_action>
    2f9a:	e01c      	b.n	2fd6 <dropped_notify+0x66>
	__ASSERT_NO_MSG(backend != NULL);
    2f9c:	f8df 9054 	ldr.w	r9, [pc, #84]	; 2ff4 <dropped_notify+0x84>
    2fa0:	23c1      	movs	r3, #193	; 0xc1
    2fa2:	464a      	mov	r2, r9
    2fa4:	4914      	ldr	r1, [pc, #80]	; (2ff8 <dropped_notify+0x88>)
    2fa6:	4815      	ldr	r0, [pc, #84]	; (2ffc <dropped_notify+0x8c>)
    2fa8:	f00b ff03 	bl	edb2 <assert_print>
    2fac:	21c1      	movs	r1, #193	; 0xc1
    2fae:	4648      	mov	r0, r9
    2fb0:	f00b fef8 	bl	eda4 <assert_post_action>
    2fb4:	e015      	b.n	2fe2 <dropped_notify+0x72>
		backend->api->dropped(backend, cnt);
    2fb6:	4639      	mov	r1, r7
    2fb8:	4630      	mov	r0, r6
    2fba:	4798      	blx	r3
    2fbc:	3401      	adds	r4, #1
    2fbe:	4b10      	ldr	r3, [pc, #64]	; (3000 <dropped_notify+0x90>)
    2fc0:	4a10      	ldr	r2, [pc, #64]	; (3004 <dropped_notify+0x94>)
    2fc2:	1a9b      	subs	r3, r3, r2
    2fc4:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    2fc8:	da11      	bge.n	2fee <dropped_notify+0x7e>
	return &__log_backends_start[idx];
    2fca:	ea4f 1804 	mov.w	r8, r4, lsl #4
    2fce:	4d0d      	ldr	r5, [pc, #52]	; (3004 <dropped_notify+0x94>)
	__ASSERT_NO_MSG(backend != NULL);
    2fd0:	eb15 1604 	adds.w	r6, r5, r4, lsl #4
    2fd4:	d0d3      	beq.n	2f7e <dropped_notify+0xe>
	return backend->cb->active;
    2fd6:	6873      	ldr	r3, [r6, #4]
    2fd8:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    2fda:	2b00      	cmp	r3, #0
    2fdc:	d0ee      	beq.n	2fbc <dropped_notify+0x4c>
	__ASSERT_NO_MSG(backend != NULL);
    2fde:	2e00      	cmp	r6, #0
    2fe0:	d0dc      	beq.n	2f9c <dropped_notify+0x2c>
	if (backend->api->dropped != NULL) {
    2fe2:	f858 3005 	ldr.w	r3, [r8, r5]
    2fe6:	685b      	ldr	r3, [r3, #4]
    2fe8:	2b00      	cmp	r3, #0
    2fea:	d1e4      	bne.n	2fb6 <dropped_notify+0x46>
    2fec:	e7e6      	b.n	2fbc <dropped_notify+0x4c>
}
    2fee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2ff2:	bf00      	nop
    2ff4:	000106e0 	.word	0x000106e0
    2ff8:	00010718 	.word	0x00010718
    2ffc:	00010450 	.word	0x00010450
    3000:	000101a4 	.word	0x000101a4
    3004:	00010194 	.word	0x00010194

00003008 <z_log_dropped_pending>:
	return dropped_cnt > 0;
    3008:	4b03      	ldr	r3, [pc, #12]	; (3018 <z_log_dropped_pending+0x10>)
    300a:	6818      	ldr	r0, [r3, #0]
}
    300c:	2800      	cmp	r0, #0
    300e:	bfd4      	ite	le
    3010:	2000      	movle	r0, #0
    3012:	2001      	movgt	r0, #1
    3014:	4770      	bx	lr
    3016:	bf00      	nop
    3018:	2000098c 	.word	0x2000098c

0000301c <z_log_msg_init>:
{
    301c:	b508      	push	{r3, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    301e:	4902      	ldr	r1, [pc, #8]	; (3028 <z_log_msg_init+0xc>)
    3020:	4802      	ldr	r0, [pc, #8]	; (302c <z_log_msg_init+0x10>)
    3022:	f7ff fa67 	bl	24f4 <mpsc_pbuf_init>
}
    3026:	bd08      	pop	{r3, pc}
    3028:	000107cc 	.word	0x000107cc
    302c:	20000994 	.word	0x20000994

00003030 <log_core_init>:
{
    3030:	b508      	push	{r3, lr}
	panic_mode = false;
    3032:	2300      	movs	r3, #0
    3034:	4a05      	ldr	r2, [pc, #20]	; (304c <log_core_init+0x1c>)
    3036:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    3038:	4a05      	ldr	r2, [pc, #20]	; (3050 <log_core_init+0x20>)
    303a:	6013      	str	r3, [r2, #0]
	log_set_timestamp_func(_timestamp_func, freq);
    303c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    3040:	4804      	ldr	r0, [pc, #16]	; (3054 <log_core_init+0x24>)
    3042:	f7ff ff47 	bl	2ed4 <log_set_timestamp_func>
		z_log_msg_init();
    3046:	f7ff ffe9 	bl	301c <z_log_msg_init>
}
    304a:	bd08      	pop	{r3, pc}
    304c:	200012cb 	.word	0x200012cb
    3050:	2000098c 	.word	0x2000098c
    3054:	0000ef77 	.word	0x0000ef77

00003058 <z_log_msg_alloc>:
{
    3058:	b508      	push	{r3, lr}
    305a:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(&log_buffer, wlen,
    305c:	2200      	movs	r2, #0
    305e:	2300      	movs	r3, #0
    3060:	4801      	ldr	r0, [pc, #4]	; (3068 <z_log_msg_alloc+0x10>)
    3062:	f7ff fa81 	bl	2568 <mpsc_pbuf_alloc>
}
    3066:	bd08      	pop	{r3, pc}
    3068:	20000994 	.word	0x20000994

0000306c <z_log_msg_claim>:
{
    306c:	b508      	push	{r3, lr}
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
    306e:	4802      	ldr	r0, [pc, #8]	; (3078 <z_log_msg_claim+0xc>)
    3070:	f7ff fc24 	bl	28bc <mpsc_pbuf_claim>
}
    3074:	bd08      	pop	{r3, pc}
    3076:	bf00      	nop
    3078:	20000994 	.word	0x20000994

0000307c <z_log_msg_free>:
{
    307c:	b508      	push	{r3, lr}
    307e:	4601      	mov	r1, r0
	mpsc_pbuf_free(&log_buffer, (union mpsc_pbuf_generic *)msg);
    3080:	4801      	ldr	r0, [pc, #4]	; (3088 <z_log_msg_free+0xc>)
    3082:	f7ff fcd1 	bl	2a28 <mpsc_pbuf_free>
}
    3086:	bd08      	pop	{r3, pc}
    3088:	20000994 	.word	0x20000994

0000308c <z_log_msg_pending>:
{
    308c:	b508      	push	{r3, lr}
	return mpsc_pbuf_is_pending(&log_buffer);
    308e:	4802      	ldr	r0, [pc, #8]	; (3098 <z_log_msg_pending+0xc>)
    3090:	f00b ff4f 	bl	ef32 <mpsc_pbuf_is_pending>
}
    3094:	bd08      	pop	{r3, pc}
    3096:	bf00      	nop
    3098:	20000994 	.word	0x20000994

0000309c <z_impl_log_process>:
	if (!backend_attached) {
    309c:	4b11      	ldr	r3, [pc, #68]	; (30e4 <z_impl_log_process+0x48>)
    309e:	7818      	ldrb	r0, [r3, #0]
    30a0:	b900      	cbnz	r0, 30a4 <z_impl_log_process+0x8>
}
    30a2:	4770      	bx	lr
{
    30a4:	b510      	push	{r4, lr}
	msg = z_log_msg_claim();
    30a6:	f7ff ffe1 	bl	306c <z_log_msg_claim>
	if (msg) {
    30aa:	4604      	mov	r4, r0
    30ac:	b188      	cbz	r0, 30d2 <z_impl_log_process+0x36>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    30ae:	4b0e      	ldr	r3, [pc, #56]	; (30e8 <z_impl_log_process+0x4c>)
    30b0:	f3bf 8f5b 	dmb	ish
    30b4:	e853 2f00 	ldrex	r2, [r3]
    30b8:	3a01      	subs	r2, #1
    30ba:	e843 2100 	strex	r1, r2, [r3]
    30be:	2900      	cmp	r1, #0
    30c0:	d1f8      	bne.n	30b4 <z_impl_log_process+0x18>
    30c2:	f3bf 8f5b 	dmb	ish
		msg_process(msg);
    30c6:	4620      	mov	r0, r4
    30c8:	f7ff fea0 	bl	2e0c <msg_process>
		z_log_msg_free(msg);
    30cc:	4620      	mov	r0, r4
    30ce:	f7ff ffd5 	bl	307c <z_log_msg_free>
	if (z_log_dropped_pending()) {
    30d2:	f7ff ff99 	bl	3008 <z_log_dropped_pending>
    30d6:	b910      	cbnz	r0, 30de <z_impl_log_process+0x42>
	return z_log_msg_pending();
    30d8:	f7ff ffd8 	bl	308c <z_log_msg_pending>
}
    30dc:	bd10      	pop	{r4, pc}
		dropped_notify();
    30de:	f7ff ff47 	bl	2f70 <dropped_notify>
    30e2:	e7f9      	b.n	30d8 <z_impl_log_process+0x3c>
    30e4:	200012ca 	.word	0x200012ca
    30e8:	20000988 	.word	0x20000988

000030ec <z_impl_log_panic>:
	if (panic_mode) {
    30ec:	4b23      	ldr	r3, [pc, #140]	; (317c <z_impl_log_panic+0x90>)
    30ee:	781b      	ldrb	r3, [r3, #0]
    30f0:	b103      	cbz	r3, 30f4 <z_impl_log_panic+0x8>
    30f2:	4770      	bx	lr
{
    30f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)z_log_init(true, false);
    30f8:	2100      	movs	r1, #0
    30fa:	2001      	movs	r0, #1
    30fc:	f7ff fdee 	bl	2cdc <z_log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
    3100:	2400      	movs	r4, #0
    3102:	e013      	b.n	312c <z_impl_log_panic+0x40>
	__ASSERT_NO_MSG(backend != NULL);
    3104:	f8df 8078 	ldr.w	r8, [pc, #120]	; 3180 <z_impl_log_panic+0x94>
    3108:	f44f 7395 	mov.w	r3, #298	; 0x12a
    310c:	4642      	mov	r2, r8
    310e:	491d      	ldr	r1, [pc, #116]	; (3184 <z_impl_log_panic+0x98>)
    3110:	481d      	ldr	r0, [pc, #116]	; (3188 <z_impl_log_panic+0x9c>)
    3112:	f00b fe4e 	bl	edb2 <assert_print>
    3116:	f44f 7195 	mov.w	r1, #298	; 0x12a
    311a:	4640      	mov	r0, r8
    311c:	f00b fe42 	bl	eda4 <assert_post_action>
    3120:	e00f      	b.n	3142 <z_impl_log_panic+0x56>
	backend->api->panic(backend);
    3122:	597b      	ldr	r3, [r7, r5]
    3124:	689b      	ldr	r3, [r3, #8]
    3126:	4630      	mov	r0, r6
    3128:	4798      	blx	r3
    312a:	3401      	adds	r4, #1
    312c:	4b17      	ldr	r3, [pc, #92]	; (318c <z_impl_log_panic+0xa0>)
    312e:	4a18      	ldr	r2, [pc, #96]	; (3190 <z_impl_log_panic+0xa4>)
    3130:	1a9b      	subs	r3, r3, r2
    3132:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    3136:	da17      	bge.n	3168 <z_impl_log_panic+0x7c>
	return &__log_backends_start[idx];
    3138:	0127      	lsls	r7, r4, #4
    313a:	4d15      	ldr	r5, [pc, #84]	; (3190 <z_impl_log_panic+0xa4>)
	__ASSERT_NO_MSG(backend != NULL);
    313c:	eb15 1604 	adds.w	r6, r5, r4, lsl #4
    3140:	d0e0      	beq.n	3104 <z_impl_log_panic+0x18>
	return backend->cb->active;
    3142:	6873      	ldr	r3, [r6, #4]
    3144:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    3146:	2b00      	cmp	r3, #0
    3148:	d0ef      	beq.n	312a <z_impl_log_panic+0x3e>
	__ASSERT_NO_MSG(backend != NULL);
    314a:	2e00      	cmp	r6, #0
    314c:	d1e9      	bne.n	3122 <z_impl_log_panic+0x36>
    314e:	f8df 8030 	ldr.w	r8, [pc, #48]	; 3180 <z_impl_log_panic+0x94>
    3152:	23cf      	movs	r3, #207	; 0xcf
    3154:	4642      	mov	r2, r8
    3156:	490b      	ldr	r1, [pc, #44]	; (3184 <z_impl_log_panic+0x98>)
    3158:	480b      	ldr	r0, [pc, #44]	; (3188 <z_impl_log_panic+0x9c>)
    315a:	f00b fe2a 	bl	edb2 <assert_print>
    315e:	21cf      	movs	r1, #207	; 0xcf
    3160:	4640      	mov	r0, r8
    3162:	f00b fe1f 	bl	eda4 <assert_post_action>
    3166:	e7dc      	b.n	3122 <z_impl_log_panic+0x36>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
    3168:	f7ff ff98 	bl	309c <z_impl_log_process>
		while (log_process() == true) {
    316c:	2800      	cmp	r0, #0
    316e:	d1fb      	bne.n	3168 <z_impl_log_panic+0x7c>
	panic_mode = true;
    3170:	4b02      	ldr	r3, [pc, #8]	; (317c <z_impl_log_panic+0x90>)
    3172:	2201      	movs	r2, #1
    3174:	701a      	strb	r2, [r3, #0]
}
    3176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    317a:	bf00      	nop
    317c:	200012cb 	.word	0x200012cb
    3180:	000106e0 	.word	0x000106e0
    3184:	00010718 	.word	0x00010718
    3188:	00010450 	.word	0x00010450
    318c:	000101a4 	.word	0x000101a4
    3190:	00010194 	.word	0x00010194

00003194 <z_log_msg_post_finalize>:
{
    3194:	b530      	push	{r4, r5, lr}
    3196:	b083      	sub	sp, #12
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    3198:	4b31      	ldr	r3, [pc, #196]	; (3260 <z_log_msg_post_finalize+0xcc>)
    319a:	f3bf 8f5b 	dmb	ish
    319e:	e853 2f00 	ldrex	r2, [r3]
    31a2:	1c51      	adds	r1, r2, #1
    31a4:	e843 1000 	strex	r0, r1, [r3]
    31a8:	2800      	cmp	r0, #0
    31aa:	d1f8      	bne.n	319e <z_log_msg_post_finalize+0xa>
    31ac:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    31b0:	4b2c      	ldr	r3, [pc, #176]	; (3264 <z_log_msg_post_finalize+0xd0>)
    31b2:	781b      	ldrb	r3, [r3, #0]
    31b4:	b96b      	cbnz	r3, 31d2 <z_log_msg_post_finalize+0x3e>
	} else if (proc_tid != NULL) {
    31b6:	4b2c      	ldr	r3, [pc, #176]	; (3268 <z_log_msg_post_finalize+0xd4>)
    31b8:	681b      	ldr	r3, [r3, #0]
    31ba:	b323      	cbz	r3, 3206 <z_log_msg_post_finalize+0x72>
		if (cnt == 0) {
    31bc:	2a00      	cmp	r2, #0
    31be:	d044      	beq.n	324a <z_log_msg_post_finalize+0xb6>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    31c0:	2a0a      	cmp	r2, #10
    31c2:	d120      	bne.n	3206 <z_log_msg_post_finalize+0x72>
	z_impl_k_timer_stop(timer);
    31c4:	4829      	ldr	r0, [pc, #164]	; (326c <z_log_msg_post_finalize+0xd8>)
    31c6:	f00c fe3b 	bl	fe40 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    31ca:	4829      	ldr	r0, [pc, #164]	; (3270 <z_log_msg_post_finalize+0xdc>)
    31cc:	f008 fcaa 	bl	bb24 <z_impl_k_sem_give>
}
    31d0:	e019      	b.n	3206 <z_log_msg_post_finalize+0x72>
    31d2:	f04f 0320 	mov.w	r3, #32
    31d6:	f3ef 8511 	mrs	r5, BASEPRI
    31da:	f383 8812 	msr	BASEPRI_MAX, r3
    31de:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    31e2:	4824      	ldr	r0, [pc, #144]	; (3274 <z_log_msg_post_finalize+0xe0>)
    31e4:	f008 f89e 	bl	b324 <z_spin_lock_valid>
    31e8:	b178      	cbz	r0, 320a <z_log_msg_post_finalize+0x76>
	z_spin_lock_set_owner(l);
    31ea:	4c22      	ldr	r4, [pc, #136]	; (3274 <z_log_msg_post_finalize+0xe0>)
    31ec:	4620      	mov	r0, r4
    31ee:	f008 f8b9 	bl	b364 <z_spin_lock_set_owner>
    31f2:	f7ff ff53 	bl	309c <z_impl_log_process>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    31f6:	4620      	mov	r0, r4
    31f8:	f008 f8a4 	bl	b344 <z_spin_unlock_valid>
    31fc:	b1a8      	cbz	r0, 322a <z_log_msg_post_finalize+0x96>
	__asm__ volatile(
    31fe:	f385 8811 	msr	BASEPRI, r5
    3202:	f3bf 8f6f 	isb	sy
    3206:	b003      	add	sp, #12
    3208:	bd30      	pop	{r4, r5, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    320a:	4c1b      	ldr	r4, [pc, #108]	; (3278 <z_log_msg_post_finalize+0xe4>)
    320c:	238e      	movs	r3, #142	; 0x8e
    320e:	4622      	mov	r2, r4
    3210:	491a      	ldr	r1, [pc, #104]	; (327c <z_log_msg_post_finalize+0xe8>)
    3212:	481b      	ldr	r0, [pc, #108]	; (3280 <z_log_msg_post_finalize+0xec>)
    3214:	f00b fdcd 	bl	edb2 <assert_print>
    3218:	4916      	ldr	r1, [pc, #88]	; (3274 <z_log_msg_post_finalize+0xe0>)
    321a:	481a      	ldr	r0, [pc, #104]	; (3284 <z_log_msg_post_finalize+0xf0>)
    321c:	f00b fdc9 	bl	edb2 <assert_print>
    3220:	218e      	movs	r1, #142	; 0x8e
    3222:	4620      	mov	r0, r4
    3224:	f00b fdbe 	bl	eda4 <assert_post_action>
    3228:	e7df      	b.n	31ea <z_log_msg_post_finalize+0x56>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    322a:	4c13      	ldr	r4, [pc, #76]	; (3278 <z_log_msg_post_finalize+0xe4>)
    322c:	23b9      	movs	r3, #185	; 0xb9
    322e:	4622      	mov	r2, r4
    3230:	4915      	ldr	r1, [pc, #84]	; (3288 <z_log_msg_post_finalize+0xf4>)
    3232:	4813      	ldr	r0, [pc, #76]	; (3280 <z_log_msg_post_finalize+0xec>)
    3234:	f00b fdbd 	bl	edb2 <assert_print>
    3238:	490e      	ldr	r1, [pc, #56]	; (3274 <z_log_msg_post_finalize+0xe0>)
    323a:	4814      	ldr	r0, [pc, #80]	; (328c <z_log_msg_post_finalize+0xf8>)
    323c:	f00b fdb9 	bl	edb2 <assert_print>
    3240:	21b9      	movs	r1, #185	; 0xb9
    3242:	4620      	mov	r0, r4
    3244:	f00b fdae 	bl	eda4 <assert_post_action>
    3248:	e7d9      	b.n	31fe <z_log_msg_post_finalize+0x6a>
	z_impl_k_timer_start(timer, duration, period);
    324a:	2200      	movs	r2, #0
    324c:	2300      	movs	r3, #0
    324e:	e9cd 2300 	strd	r2, r3, [sp]
    3252:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    3256:	2300      	movs	r3, #0
    3258:	4804      	ldr	r0, [pc, #16]	; (326c <z_log_msg_post_finalize+0xd8>)
    325a:	f00b f943 	bl	e4e4 <z_impl_k_timer_start>
    325e:	e7d2      	b.n	3206 <z_log_msg_post_finalize+0x72>
    3260:	20000988 	.word	0x20000988
    3264:	200012cb 	.word	0x200012cb
    3268:	200009d0 	.word	0x200009d0
    326c:	20000608 	.word	0x20000608
    3270:	200001f8 	.word	0x200001f8
    3274:	200009d4 	.word	0x200009d4
    3278:	000105e8 	.word	0x000105e8
    327c:	00010648 	.word	0x00010648
    3280:	00010450 	.word	0x00010450
    3284:	00010660 	.word	0x00010660
    3288:	00010618 	.word	0x00010618
    328c:	00010630 	.word	0x00010630

00003290 <z_log_msg_commit>:
{
    3290:	b510      	push	{r4, lr}
    3292:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    3294:	4b05      	ldr	r3, [pc, #20]	; (32ac <z_log_msg_commit+0x1c>)
    3296:	681b      	ldr	r3, [r3, #0]
    3298:	4798      	blx	r3
    329a:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(&log_buffer, &m->buf);
    329c:	4621      	mov	r1, r4
    329e:	4804      	ldr	r0, [pc, #16]	; (32b0 <z_log_msg_commit+0x20>)
    32a0:	f7ff fa6c 	bl	277c <mpsc_pbuf_commit>
	z_log_msg_post_finalize();
    32a4:	f7ff ff76 	bl	3194 <z_log_msg_post_finalize>
}
    32a8:	bd10      	pop	{r4, pc}
    32aa:	bf00      	nop
    32ac:	2000003c 	.word	0x2000003c
    32b0:	20000994 	.word	0x20000994

000032b4 <log_process_thread_func>:
{
    32b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __log_backends_end - __log_backends_start;
    32b8:	4b23      	ldr	r3, [pc, #140]	; (3348 <log_process_thread_func+0x94>)
    32ba:	4a24      	ldr	r2, [pc, #144]	; (334c <log_process_thread_func+0x98>)
    32bc:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
    32be:	2b00      	cmp	r3, #0
    32c0:	dd0e      	ble.n	32e0 <log_process_thread_func+0x2c>
	uint32_t activate_mask = z_log_init(false, false);
    32c2:	2100      	movs	r1, #0
    32c4:	4608      	mov	r0, r1
    32c6:	f7ff fd09 	bl	2cdc <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    32ca:	4680      	mov	r8, r0
    32cc:	b1b0      	cbz	r0, 32fc <log_process_thread_func+0x48>
    32ce:	f240 6667 	movw	r6, #1639	; 0x667
    32d2:	2700      	movs	r7, #0
	return z_impl_z_current_get();
    32d4:	f00a fb38 	bl	d948 <z_impl_z_current_get>
	thread_set(k_current_get());
    32d8:	f7ff fc6e 	bl	2bb8 <thread_set>
	bool processed_any = false;
    32dc:	2500      	movs	r5, #0
    32de:	e023      	b.n	3328 <log_process_thread_func+0x74>
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
    32e0:	4c1b      	ldr	r4, [pc, #108]	; (3350 <log_process_thread_func+0x9c>)
    32e2:	f240 238a 	movw	r3, #650	; 0x28a
    32e6:	4622      	mov	r2, r4
    32e8:	491a      	ldr	r1, [pc, #104]	; (3354 <log_process_thread_func+0xa0>)
    32ea:	481b      	ldr	r0, [pc, #108]	; (3358 <log_process_thread_func+0xa4>)
    32ec:	f00b fd61 	bl	edb2 <assert_print>
    32f0:	f240 218a 	movw	r1, #650	; 0x28a
    32f4:	4620      	mov	r0, r4
    32f6:	f00b fd55 	bl	eda4 <assert_post_action>
    32fa:	e7e2      	b.n	32c2 <log_process_thread_func+0xe>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    32fc:	f04f 36ff 	mov.w	r6, #4294967295
    3300:	f04f 37ff 	mov.w	r7, #4294967295
    3304:	e7e6      	b.n	32d4 <log_process_thread_func+0x20>
			activate_mask = activate_foreach_backend(activate_mask);
    3306:	4640      	mov	r0, r8
    3308:	f7ff fca0 	bl	2c4c <activate_foreach_backend>
			if (!activate_mask) {
    330c:	4680      	mov	r8, r0
    330e:	b970      	cbnz	r0, 332e <log_process_thread_func+0x7a>
				timeout = K_FOREVER;
    3310:	f04f 36ff 	mov.w	r6, #4294967295
    3314:	f04f 37ff 	mov.w	r7, #4294967295
    3318:	e009      	b.n	332e <log_process_thread_func+0x7a>
    331a:	462c      	mov	r4, r5
	return z_impl_k_sem_take(sem, timeout);
    331c:	4632      	mov	r2, r6
    331e:	463b      	mov	r3, r7
    3320:	480e      	ldr	r0, [pc, #56]	; (335c <log_process_thread_func+0xa8>)
    3322:	f008 fc43 	bl	bbac <z_impl_k_sem_take>
{
    3326:	4625      	mov	r5, r4
		if (activate_mask) {
    3328:	f1b8 0f00 	cmp.w	r8, #0
    332c:	d1eb      	bne.n	3306 <log_process_thread_func+0x52>
    332e:	f7ff feb5 	bl	309c <z_impl_log_process>
		if (log_process() == false) {
    3332:	4604      	mov	r4, r0
    3334:	2800      	cmp	r0, #0
    3336:	d1f6      	bne.n	3326 <log_process_thread_func+0x72>
			if (processed_any) {
    3338:	2d00      	cmp	r5, #0
    333a:	d0ee      	beq.n	331a <log_process_thread_func+0x66>
				log_backend_notify_all(LOG_BACKEND_EVT_PROCESS_THREAD_DONE, NULL);
    333c:	2100      	movs	r1, #0
    333e:	4608      	mov	r0, r1
    3340:	f7ff fc02 	bl	2b48 <log_backend_notify_all>
    3344:	e7ea      	b.n	331c <log_process_thread_func+0x68>
    3346:	bf00      	nop
    3348:	000101a4 	.word	0x000101a4
    334c:	00010194 	.word	0x00010194
    3350:	00010738 	.word	0x00010738
    3354:	000107a0 	.word	0x000107a0
    3358:	00010450 	.word	0x00010450
    335c:	200001f8 	.word	0x200001f8

00003360 <log_source_name_get>:
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    3360:	4b05      	ldr	r3, [pc, #20]	; (3378 <log_source_name_get+0x18>)
    3362:	4a06      	ldr	r2, [pc, #24]	; (337c <log_source_name_get+0x1c>)
    3364:	1a9b      	subs	r3, r3, r2
    3366:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
    336a:	d202      	bcs.n	3372 <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
    336c:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
    3370:	4770      	bx	lr
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    3372:	2000      	movs	r0, #0
}
    3374:	4770      	bx	lr
    3376:	bf00      	nop
    3378:	00010194 	.word	0x00010194
    337c:	00010124 	.word	0x00010124

00003380 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    3380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3382:	4605      	mov	r5, r0
    3384:	460e      	mov	r6, r1
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    3386:	4c15      	ldr	r4, [pc, #84]	; (33dc <log_backend_enable+0x5c>)
    3388:	1b04      	subs	r4, r0, r4
    338a:	1124      	asrs	r4, r4, #4
    338c:	3401      	adds	r4, #1

	log_backend_id_set(backend, id);
    338e:	b2e4      	uxtb	r4, r4
	__ASSERT_NO_MSG(backend != NULL);
    3390:	b150      	cbz	r0, 33a8 <log_backend_enable+0x28>
	backend->cb->id = id;
    3392:	686b      	ldr	r3, [r5, #4]
    3394:	711c      	strb	r4, [r3, #4]
	__ASSERT_NO_MSG(backend != NULL);
    3396:	b19d      	cbz	r5, 33c0 <log_backend_enable+0x40>
	backend->cb->ctx = ctx;
    3398:	686b      	ldr	r3, [r5, #4]
    339a:	601e      	str	r6, [r3, #0]
	backend->cb->active = true;
    339c:	686b      	ldr	r3, [r5, #4]
    339e:	2201      	movs	r2, #1
    33a0:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    33a2:	f7ff fda5 	bl	2ef0 <z_log_notify_backend_enabled>
}
    33a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT_NO_MSG(backend != NULL);
    33a8:	4f0d      	ldr	r7, [pc, #52]	; (33e0 <log_backend_enable+0x60>)
    33aa:	23de      	movs	r3, #222	; 0xde
    33ac:	463a      	mov	r2, r7
    33ae:	490d      	ldr	r1, [pc, #52]	; (33e4 <log_backend_enable+0x64>)
    33b0:	480d      	ldr	r0, [pc, #52]	; (33e8 <log_backend_enable+0x68>)
    33b2:	f00b fcfe 	bl	edb2 <assert_print>
    33b6:	21de      	movs	r1, #222	; 0xde
    33b8:	4638      	mov	r0, r7
    33ba:	f00b fcf3 	bl	eda4 <assert_post_action>
    33be:	e7e8      	b.n	3392 <log_backend_enable+0x12>
	__ASSERT_NO_MSG(backend != NULL);
    33c0:	4c07      	ldr	r4, [pc, #28]	; (33e0 <log_backend_enable+0x60>)
    33c2:	f240 130f 	movw	r3, #271	; 0x10f
    33c6:	4622      	mov	r2, r4
    33c8:	4906      	ldr	r1, [pc, #24]	; (33e4 <log_backend_enable+0x64>)
    33ca:	4807      	ldr	r0, [pc, #28]	; (33e8 <log_backend_enable+0x68>)
    33cc:	f00b fcf1 	bl	edb2 <assert_print>
    33d0:	f240 110f 	movw	r1, #271	; 0x10f
    33d4:	4620      	mov	r0, r4
    33d6:	f00b fce5 	bl	eda4 <assert_post_action>
    33da:	e7dd      	b.n	3398 <log_backend_enable+0x18>
    33dc:	00010194 	.word	0x00010194
    33e0:	000106e0 	.word	0x000106e0
    33e4:	00010718 	.word	0x00010718
    33e8:	00010450 	.word	0x00010450

000033ec <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
    33ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    33f0:	b08a      	sub	sp, #40	; 0x28
    33f2:	4605      	mov	r5, r0
    33f4:	461e      	mov	r6, r3

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
    33f6:	460f      	mov	r7, r1
	int inlen = desc.package_len;
    33f8:	f3c1 2449 	ubfx	r4, r1, #9, #10
	struct log_msg *msg;

	if (inlen > 0) {
    33fc:	2c00      	cmp	r4, #0
    33fe:	d042      	beq.n	3486 <z_impl_z_log_msg_static_create+0x9a>
    3400:	4690      	mov	r8, r2
	struct z_cbprintf_buf_desc buf_desc = {
    3402:	2200      	movs	r2, #0
    3404:	9207      	str	r2, [sp, #28]
    3406:	9208      	str	r2, [sp, #32]
    3408:	9209      	str	r2, [sp, #36]	; 0x24
	return cbprintf_package_convert(in_packaged, in_len,
    340a:	2304      	movs	r3, #4
    340c:	9302      	str	r3, [sp, #8]
    340e:	ab05      	add	r3, sp, #20
    3410:	9301      	str	r3, [sp, #4]
    3412:	2302      	movs	r3, #2
    3414:	9300      	str	r3, [sp, #0]
    3416:	ab07      	add	r3, sp, #28
    3418:	4621      	mov	r1, r4
    341a:	4640      	mov	r0, r8
    341c:	f7fd fe54 	bl	10c8 <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
    3420:	f3c0 0909 	ubfx	r9, r0, #0, #10
    3424:	f369 2752 	bfi	r7, r9, #9, #10
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    3428:	f3c7 40cb 	ubfx	r0, r7, #19, #12
    342c:	4448      	add	r0, r9
    342e:	3017      	adds	r0, #23
    3430:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    3434:	0880      	lsrs	r0, r0, #2
    3436:	f7ff fe0f 	bl	3058 <z_log_msg_alloc>
		if (msg) {
    343a:	4682      	mov	sl, r0
    343c:	b368      	cbz	r0, 349a <z_impl_z_log_msg_static_create+0xae>
			len = cbprintf_package_copy(package, inlen,
						    msg->data, out_desc.package_len,
    343e:	f100 0310 	add.w	r3, r0, #16
	struct z_cbprintf_buf_desc buf_desc = {
    3442:	9307      	str	r3, [sp, #28]
    3444:	f8cd 9020 	str.w	r9, [sp, #32]
    3448:	2200      	movs	r2, #0
    344a:	9209      	str	r2, [sp, #36]	; 0x24
	return cbprintf_package_convert(in_packaged, in_len,
    344c:	b1cb      	cbz	r3, 3482 <z_impl_z_log_msg_static_create+0x96>
    344e:	4a17      	ldr	r2, [pc, #92]	; (34ac <z_impl_z_log_msg_static_create+0xc0>)
    3450:	2304      	movs	r3, #4
    3452:	9302      	str	r3, [sp, #8]
    3454:	ab05      	add	r3, sp, #20
    3456:	9301      	str	r3, [sp, #4]
    3458:	2302      	movs	r3, #2
    345a:	9300      	str	r3, [sp, #0]
    345c:	ab07      	add	r3, sp, #28
    345e:	4621      	mov	r1, r4
    3460:	4640      	mov	r0, r8
    3462:	f7fd fe31 	bl	10c8 <cbprintf_package_convert>
						    flags, strl, ARRAY_SIZE(strl));
			__ASSERT_NO_MSG(len >= 0);
    3466:	2800      	cmp	r0, #0
    3468:	da17      	bge.n	349a <z_impl_z_log_msg_static_create+0xae>
    346a:	4c11      	ldr	r4, [pc, #68]	; (34b0 <z_impl_z_log_msg_static_create+0xc4>)
    346c:	2348      	movs	r3, #72	; 0x48
    346e:	4622      	mov	r2, r4
    3470:	4910      	ldr	r1, [pc, #64]	; (34b4 <z_impl_z_log_msg_static_create+0xc8>)
    3472:	4811      	ldr	r0, [pc, #68]	; (34b8 <z_impl_z_log_msg_static_create+0xcc>)
    3474:	f00b fc9d 	bl	edb2 <assert_print>
    3478:	2148      	movs	r1, #72	; 0x48
    347a:	4620      	mov	r0, r4
    347c:	f00b fc92 	bl	eda4 <assert_post_action>
    3480:	e00b      	b.n	349a <z_impl_z_log_msg_static_create+0xae>
    3482:	2200      	movs	r2, #0
    3484:	e7e4      	b.n	3450 <z_impl_z_log_msg_static_create+0x64>
    3486:	f3c1 41cb 	ubfx	r1, r1, #19, #12
    348a:	440c      	add	r4, r1
    348c:	3417      	adds	r4, #23
    348e:	f024 0407 	bic.w	r4, r4, #7
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    3492:	08a0      	lsrs	r0, r4, #2
    3494:	f7ff fde0 	bl	3058 <z_log_msg_alloc>
    3498:	4682      	mov	sl, r0
	}

	z_log_msg_finalize(msg, source, out_desc, data);
    349a:	4633      	mov	r3, r6
    349c:	463a      	mov	r2, r7
    349e:	4629      	mov	r1, r5
    34a0:	4650      	mov	r0, sl
    34a2:	f00b fd89 	bl	efb8 <z_log_msg_finalize>
}
    34a6:	b00a      	add	sp, #40	; 0x28
    34a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    34ac:	0000ef8d 	.word	0x0000ef8d
    34b0:	0001083c 	.word	0x0001083c
    34b4:	00010868 	.word	0x00010868
    34b8:	00010450 	.word	0x00010450

000034bc <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    34bc:	b40e      	push	{r1, r2, r3}
    34be:	b500      	push	{lr}
    34c0:	b084      	sub	sp, #16
    34c2:	4601      	mov	r1, r0
    34c4:	ab05      	add	r3, sp, #20
    34c6:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
    34ca:	9303      	str	r3, [sp, #12]
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    34cc:	2000      	movs	r0, #0
    34ce:	9000      	str	r0, [sp, #0]
    34d0:	4803      	ldr	r0, [pc, #12]	; (34e0 <print_formatted+0x24>)
    34d2:	f7fe fd27 	bl	1f24 <z_cbvprintf_impl>
	length = cbvprintf(out_func, (void *)output, fmt, args);
	va_end(args);

	return length;
}
    34d6:	b004      	add	sp, #16
    34d8:	f85d eb04 	ldr.w	lr, [sp], #4
    34dc:	b003      	add	sp, #12
    34de:	4770      	bx	lr
    34e0:	00003769 	.word	0x00003769

000034e4 <timestamp_print>:
	output_date->day += seconds / SECONDS_IN_DAY;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, log_timestamp_t timestamp)
{
    34e4:	b530      	push	{r4, r5, lr}
    34e6:	b085      	sub	sp, #20
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) |
		IS_ENABLED(CONFIG_LOG_OUTPUT_FORMAT_LINUX_TIMESTAMP);


	if (!format) {
    34e8:	f011 0f44 	tst.w	r1, #68	; 0x44
    34ec:	d005      	beq.n	34fa <timestamp_print+0x16>
#ifndef CONFIG_LOG_TIMESTAMP_64BIT
		length = print_formatted(output, "[%08lu] ", timestamp);
#else
		length = print_formatted(output, "[%016llu] ", timestamp);
#endif
	} else if (freq != 0U) {
    34ee:	4b1a      	ldr	r3, [pc, #104]	; (3558 <timestamp_print+0x74>)
    34f0:	681c      	ldr	r4, [r3, #0]
    34f2:	b934      	cbnz	r4, 3502 <timestamp_print+0x1e>
							"[%02u:%02u:%02u.%03u,%03u] ",
							hours, mins, seconds, ms, us);
			}
		}
	} else {
		length = 0;
    34f4:	2000      	movs	r0, #0
	}

	return length;
}
    34f6:	b005      	add	sp, #20
    34f8:	bd30      	pop	{r4, r5, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
    34fa:	4918      	ldr	r1, [pc, #96]	; (355c <timestamp_print+0x78>)
    34fc:	f7ff ffde 	bl	34bc <print_formatted>
    3500:	e7f9      	b.n	34f6 <timestamp_print+0x12>
		timestamp /= timestamp_div;
    3502:	4b17      	ldr	r3, [pc, #92]	; (3560 <timestamp_print+0x7c>)
    3504:	6819      	ldr	r1, [r3, #0]
    3506:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
    350a:	fbb1 fcf4 	udiv	ip, r1, r4
		hours = seconds / 3600U;
    350e:	4a15      	ldr	r2, [pc, #84]	; (3564 <timestamp_print+0x80>)
    3510:	fba2 320c 	umull	r3, r2, r2, ip
    3514:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
    3516:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    351a:	fb0e ce12 	mls	lr, lr, r2, ip
		mins = seconds / 60U;
    351e:	4b12      	ldr	r3, [pc, #72]	; (3568 <timestamp_print+0x84>)
    3520:	fba3 530e 	umull	r5, r3, r3, lr
    3524:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
    3526:	fb04 111c 	mls	r1, r4, ip, r1
		ms = (remainder * 1000U) / freq;
    352a:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    352e:	fb0c f101 	mul.w	r1, ip, r1
    3532:	fbb1 f5f4 	udiv	r5, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    3536:	fb05 1114 	mls	r1, r5, r4, r1
    353a:	fb0c f101 	mul.w	r1, ip, r1
    353e:	fbb1 f1f4 	udiv	r1, r1, r4
				length = print_formatted(output,
    3542:	9102      	str	r1, [sp, #8]
    3544:	9501      	str	r5, [sp, #4]
    3546:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
    354a:	ebae 0181 	sub.w	r1, lr, r1, lsl #2
    354e:	9100      	str	r1, [sp, #0]
    3550:	4906      	ldr	r1, [pc, #24]	; (356c <timestamp_print+0x88>)
    3552:	f7ff ffb3 	bl	34bc <print_formatted>
    3556:	e7ce      	b.n	34f6 <timestamp_print+0x12>
    3558:	200009d8 	.word	0x200009d8
    355c:	00010874 	.word	0x00010874
    3560:	200009dc 	.word	0x200009dc
    3564:	91a2b3c5 	.word	0x91a2b3c5
    3568:	88888889 	.word	0x88888889
    356c:	00010880 	.word	0x00010880

00003570 <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
    3570:	b161      	cbz	r1, 358c <color_print+0x1c>
{
    3572:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    3574:	b12a      	cbz	r2, 3582 <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
    3576:	4a06      	ldr	r2, [pc, #24]	; (3590 <color_print+0x20>)
    3578:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    357c:	b912      	cbnz	r2, 3584 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    357e:	4a05      	ldr	r2, [pc, #20]	; (3594 <color_print+0x24>)
    3580:	e000      	b.n	3584 <color_print+0x14>
    3582:	4a04      	ldr	r2, [pc, #16]	; (3594 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
    3584:	4904      	ldr	r1, [pc, #16]	; (3598 <color_print+0x28>)
    3586:	f7ff ff99 	bl	34bc <print_formatted>
	}
}
    358a:	bd08      	pop	{r3, pc}
    358c:	4770      	bx	lr
    358e:	bf00      	nop
    3590:	00010964 	.word	0x00010964
    3594:	0001089c 	.word	0x0001089c
    3598:	000108a4 	.word	0x000108a4

0000359c <ids_print>:
		     bool level_on,
		     bool func_on,
		     const char *domain,
		     const char *source,
		     uint32_t level)
{
    359c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    35a0:	4605      	mov	r5, r0
    35a2:	4617      	mov	r7, r2
    35a4:	461e      	mov	r6, r3
    35a6:	f8dd 8018 	ldr.w	r8, [sp, #24]
	int total = 0;

	if (level_on) {
    35aa:	b999      	cbnz	r1, 35d4 <ids_print+0x38>
	int total = 0;
    35ac:	2400      	movs	r4, #0
		total += print_formatted(output, "<%s> ", severity[level]);
	}

	if (domain) {
    35ae:	b12e      	cbz	r6, 35bc <ids_print+0x20>
		total += print_formatted(output, "%s/", domain);
    35b0:	4632      	mov	r2, r6
    35b2:	4912      	ldr	r1, [pc, #72]	; (35fc <ids_print+0x60>)
    35b4:	4628      	mov	r0, r5
    35b6:	f7ff ff81 	bl	34bc <print_formatted>
    35ba:	4404      	add	r4, r0
	}

	if (source) {
    35bc:	f1b8 0f00 	cmp.w	r8, #0
    35c0:	d017      	beq.n	35f2 <ids_print+0x56>
		total += print_formatted(output,
    35c2:	b187      	cbz	r7, 35e6 <ids_print+0x4a>
				(func_on &&
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    35c4:	2301      	movs	r3, #1
    35c6:	9a07      	ldr	r2, [sp, #28]
    35c8:	4093      	lsls	r3, r2
				(func_on &&
    35ca:	f013 0f10 	tst.w	r3, #16
    35ce:	d113      	bne.n	35f8 <ids_print+0x5c>
		total += print_formatted(output,
    35d0:	490b      	ldr	r1, [pc, #44]	; (3600 <ids_print+0x64>)
    35d2:	e009      	b.n	35e8 <ids_print+0x4c>
		total += print_formatted(output, "<%s> ", severity[level]);
    35d4:	4b0b      	ldr	r3, [pc, #44]	; (3604 <ids_print+0x68>)
    35d6:	9a07      	ldr	r2, [sp, #28]
    35d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    35dc:	490a      	ldr	r1, [pc, #40]	; (3608 <ids_print+0x6c>)
    35de:	f7ff ff6d 	bl	34bc <print_formatted>
    35e2:	4604      	mov	r4, r0
    35e4:	e7e3      	b.n	35ae <ids_print+0x12>
		total += print_formatted(output,
    35e6:	4906      	ldr	r1, [pc, #24]	; (3600 <ids_print+0x64>)
    35e8:	4642      	mov	r2, r8
    35ea:	4628      	mov	r0, r5
    35ec:	f7ff ff66 	bl	34bc <print_formatted>
    35f0:	4404      	add	r4, r0
				"%s." : "%s: ",
				source);
	}

	return total;
}
    35f2:	4620      	mov	r0, r4
    35f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
    35f8:	4904      	ldr	r1, [pc, #16]	; (360c <ids_print+0x70>)
    35fa:	e7f5      	b.n	35e8 <ids_print+0x4c>
    35fc:	000108bc 	.word	0x000108bc
    3600:	000108a8 	.word	0x000108a8
    3604:	000109a0 	.word	0x000109a0
    3608:	000108b4 	.word	0x000108b4
    360c:	000108b0 	.word	0x000108b0

00003610 <prefix_print>:
			     bool func_on,
			     log_timestamp_t timestamp,
			     const char *domain,
			     const char *source,
			     uint8_t level)
{
    3610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3614:	b085      	sub	sp, #20
    3616:	4605      	mov	r5, r0
    3618:	460c      	mov	r4, r1
    361a:	4616      	mov	r6, r2
    361c:	9303      	str	r3, [sp, #12]
    361e:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    3622:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    3626:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    362a:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = z_log_get_tag();
    362e:	f00b fcab 	bl	ef88 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    3632:	b1d8      	cbz	r0, 366c <prefix_print+0x5c>
    3634:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
    3636:	4912      	ldr	r1, [pc, #72]	; (3680 <prefix_print+0x70>)
    3638:	4628      	mov	r0, r5
    363a:	f7ff ff3f 	bl	34bc <print_formatted>
    363e:	4607      	mov	r7, r0
	}

	if (stamp) {
    3640:	f1bb 0f00 	cmp.w	fp, #0
    3644:	d114      	bne.n	3670 <prefix_print+0x60>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
    3646:	4642      	mov	r2, r8
    3648:	4651      	mov	r1, sl
    364a:	4628      	mov	r0, r5
    364c:	f00b fce2 	bl	f014 <color_prefix>
	}

	length += ids_print(output, level_on, func_on, domain, source, level);
    3650:	f8cd 8004 	str.w	r8, [sp, #4]
    3654:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3656:	9300      	str	r3, [sp, #0]
    3658:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    365a:	4632      	mov	r2, r6
    365c:	4649      	mov	r1, r9
    365e:	4628      	mov	r0, r5
    3660:	f7ff ff9c 	bl	359c <ids_print>

	return length;
}
    3664:	4438      	add	r0, r7
    3666:	b005      	add	sp, #20
    3668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    366c:	2700      	movs	r7, #0
    366e:	e7e7      	b.n	3640 <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
    3670:	9a03      	ldr	r2, [sp, #12]
    3672:	4621      	mov	r1, r4
    3674:	4628      	mov	r0, r5
    3676:	f7ff ff35 	bl	34e4 <timestamp_print>
    367a:	4407      	add	r7, r0
    367c:	e7e3      	b.n	3646 <prefix_print+0x36>
    367e:	bf00      	nop
    3680:	000108c0 	.word	0x000108c0

00003684 <newline_print>:
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    3684:	f011 0f10 	tst.w	r1, #16
    3688:	d10b      	bne.n	36a2 <newline_print+0x1e>
{
    368a:	b508      	push	{r3, lr}
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    368c:	f011 0f20 	tst.w	r1, #32
    3690:	d003      	beq.n	369a <newline_print+0x16>
		print_formatted(ctx, "\n");
    3692:	4904      	ldr	r1, [pc, #16]	; (36a4 <newline_print+0x20>)
    3694:	f7ff ff12 	bl	34bc <print_formatted>
}
    3698:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
    369a:	4903      	ldr	r1, [pc, #12]	; (36a8 <newline_print+0x24>)
    369c:	f7ff ff0e 	bl	34bc <print_formatted>
    36a0:	e7fa      	b.n	3698 <newline_print+0x14>
    36a2:	4770      	bx	lr
    36a4:	000110cc 	.word	0x000110cc
    36a8:	00012ac8 	.word	0x00012ac8

000036ac <hexdump_line_print>:
{
    36ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    36b0:	4605      	mov	r5, r0
    36b2:	460f      	mov	r7, r1
    36b4:	4616      	mov	r6, r2
    36b6:	4698      	mov	r8, r3
	newline_print(output, flags);
    36b8:	9906      	ldr	r1, [sp, #24]
    36ba:	f7ff ffe3 	bl	3684 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    36be:	2400      	movs	r4, #0
    36c0:	4544      	cmp	r4, r8
    36c2:	da05      	bge.n	36d0 <hexdump_line_print+0x24>
		print_formatted(output, " ");
    36c4:	4923      	ldr	r1, [pc, #140]	; (3754 <hexdump_line_print+0xa8>)
    36c6:	4628      	mov	r0, r5
    36c8:	f7ff fef8 	bl	34bc <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    36cc:	3401      	adds	r4, #1
    36ce:	e7f7      	b.n	36c0 <hexdump_line_print+0x14>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    36d0:	2400      	movs	r4, #0
    36d2:	e009      	b.n	36e8 <hexdump_line_print+0x3c>
			print_formatted(output, " ");
    36d4:	491f      	ldr	r1, [pc, #124]	; (3754 <hexdump_line_print+0xa8>)
    36d6:	4628      	mov	r0, r5
    36d8:	f7ff fef0 	bl	34bc <print_formatted>
    36dc:	e00b      	b.n	36f6 <hexdump_line_print+0x4a>
			print_formatted(output, "   ");
    36de:	491e      	ldr	r1, [pc, #120]	; (3758 <hexdump_line_print+0xac>)
    36e0:	4628      	mov	r0, r5
    36e2:	f7ff feeb 	bl	34bc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    36e6:	3401      	adds	r4, #1
    36e8:	2c0f      	cmp	r4, #15
    36ea:	dc0c      	bgt.n	3706 <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
    36ec:	2c00      	cmp	r4, #0
    36ee:	dd02      	ble.n	36f6 <hexdump_line_print+0x4a>
    36f0:	f014 0f07 	tst.w	r4, #7
    36f4:	d0ee      	beq.n	36d4 <hexdump_line_print+0x28>
		if (i < length) {
    36f6:	42b4      	cmp	r4, r6
    36f8:	d2f1      	bcs.n	36de <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
    36fa:	5d3a      	ldrb	r2, [r7, r4]
    36fc:	4917      	ldr	r1, [pc, #92]	; (375c <hexdump_line_print+0xb0>)
    36fe:	4628      	mov	r0, r5
    3700:	f7ff fedc 	bl	34bc <print_formatted>
    3704:	e7ef      	b.n	36e6 <hexdump_line_print+0x3a>
	print_formatted(output, "|");
    3706:	4916      	ldr	r1, [pc, #88]	; (3760 <hexdump_line_print+0xb4>)
    3708:	4628      	mov	r0, r5
    370a:	f7ff fed7 	bl	34bc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    370e:	2400      	movs	r4, #0
    3710:	e009      	b.n	3726 <hexdump_line_print+0x7a>
			print_formatted(output, " ");
    3712:	4910      	ldr	r1, [pc, #64]	; (3754 <hexdump_line_print+0xa8>)
    3714:	4628      	mov	r0, r5
    3716:	f7ff fed1 	bl	34bc <print_formatted>
    371a:	e00b      	b.n	3734 <hexdump_line_print+0x88>
			print_formatted(output, "%c",
    371c:	4911      	ldr	r1, [pc, #68]	; (3764 <hexdump_line_print+0xb8>)
    371e:	4628      	mov	r0, r5
    3720:	f7ff fecc 	bl	34bc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3724:	3401      	adds	r4, #1
    3726:	2c0f      	cmp	r4, #15
    3728:	dc12      	bgt.n	3750 <hexdump_line_print+0xa4>
		if (i > 0 && !(i % 8)) {
    372a:	2c00      	cmp	r4, #0
    372c:	dd02      	ble.n	3734 <hexdump_line_print+0x88>
    372e:	f014 0f07 	tst.w	r4, #7
    3732:	d0ee      	beq.n	3712 <hexdump_line_print+0x66>
		if (i < length) {
    3734:	42b4      	cmp	r4, r6
    3736:	d206      	bcs.n	3746 <hexdump_line_print+0x9a>
			char c = (char)data[i];
    3738:	5d3a      	ldrb	r2, [r7, r4]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    373a:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(output, "%c",
    373e:	2b5e      	cmp	r3, #94	; 0x5e
    3740:	d9ec      	bls.n	371c <hexdump_line_print+0x70>
    3742:	222e      	movs	r2, #46	; 0x2e
    3744:	e7ea      	b.n	371c <hexdump_line_print+0x70>
			print_formatted(output, " ");
    3746:	4903      	ldr	r1, [pc, #12]	; (3754 <hexdump_line_print+0xa8>)
    3748:	4628      	mov	r0, r5
    374a:	f7ff feb7 	bl	34bc <print_formatted>
    374e:	e7e9      	b.n	3724 <hexdump_line_print+0x78>
}
    3750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3754:	000108b8 	.word	0x000108b8
    3758:	000108cc 	.word	0x000108cc
    375c:	000108c4 	.word	0x000108c4
    3760:	000108d0 	.word	0x000108d0
    3764:	000108d4 	.word	0x000108d4

00003768 <out_func>:
{
    3768:	b538      	push	{r3, r4, r5, lr}
    376a:	4605      	mov	r5, r0
    376c:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    376e:	684b      	ldr	r3, [r1, #4]
    3770:	681a      	ldr	r2, [r3, #0]
    3772:	68cb      	ldr	r3, [r1, #12]
    3774:	429a      	cmp	r2, r3
    3776:	d014      	beq.n	37a2 <out_func+0x3a>
	idx = atomic_inc(&out_ctx->control_block->offset);
    3778:	6863      	ldr	r3, [r4, #4]
    377a:	f3bf 8f5b 	dmb	ish
    377e:	e853 2f00 	ldrex	r2, [r3]
    3782:	1c51      	adds	r1, r2, #1
    3784:	e843 1000 	strex	r0, r1, [r3]
    3788:	2800      	cmp	r0, #0
    378a:	d1f8      	bne.n	377e <out_func+0x16>
    378c:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
    3790:	68a3      	ldr	r3, [r4, #8]
    3792:	549d      	strb	r5, [r3, r2]
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
    3794:	6863      	ldr	r3, [r4, #4]
    3796:	681a      	ldr	r2, [r3, #0]
    3798:	68e3      	ldr	r3, [r4, #12]
    379a:	429a      	cmp	r2, r3
    379c:	d805      	bhi.n	37aa <out_func+0x42>
}
    379e:	2000      	movs	r0, #0
    37a0:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
    37a2:	4608      	mov	r0, r1
    37a4:	f00b fc69 	bl	f07a <log_output_flush>
    37a8:	e7e6      	b.n	3778 <out_func+0x10>
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
    37aa:	4c06      	ldr	r4, [pc, #24]	; (37c4 <out_func+0x5c>)
    37ac:	2379      	movs	r3, #121	; 0x79
    37ae:	4622      	mov	r2, r4
    37b0:	4905      	ldr	r1, [pc, #20]	; (37c8 <out_func+0x60>)
    37b2:	4806      	ldr	r0, [pc, #24]	; (37cc <out_func+0x64>)
    37b4:	f00b fafd 	bl	edb2 <assert_print>
    37b8:	2179      	movs	r1, #121	; 0x79
    37ba:	4620      	mov	r0, r4
    37bc:	f00b faf2 	bl	eda4 <assert_post_action>
    37c0:	e7ed      	b.n	379e <out_func+0x36>
    37c2:	bf00      	nop
    37c4:	000108d8 	.word	0x000108d8
    37c8:	00010908 	.word	0x00010908
    37cc:	00010450 	.word	0x00010450

000037d0 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    37d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    37d4:	b084      	sub	sp, #16
    37d6:	4604      	mov	r4, r0
    37d8:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
    37dc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    37de:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
    37e0:	b99d      	cbnz	r5, 380a <log_output_process+0x3a>
		prefix_offset = prefix_print(output, flags, 0, timestamp, domain, source, level);
	} else {
		prefix_offset = 0;
    37e2:	f04f 0800 	mov.w	r8, #0
	}

	if (package) {
    37e6:	b147      	cbz	r7, 37fa <log_output_process+0x2a>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    37e8:	b9cd      	cbnz	r5, 381e <log_output_process+0x4e>
    37ea:	481c      	ldr	r0, [pc, #112]	; (385c <log_output_process+0x8c>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    37ec:	463b      	mov	r3, r7
    37ee:	4622      	mov	r2, r4
    37f0:	491b      	ldr	r1, [pc, #108]	; (3860 <log_output_process+0x90>)
    37f2:	f00b f91f 	bl	ea34 <cbpprintf_external>
				    (void *)output, (void *)package);

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
    37f6:	2800      	cmp	r0, #0
    37f8:	db13      	blt.n	3822 <log_output_process+0x52>
	}

	if (data_len) {
    37fa:	bb06      	cbnz	r6, 383e <log_output_process+0x6e>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    37fc:	bb45      	cbnz	r5, 3850 <log_output_process+0x80>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    37fe:	4620      	mov	r0, r4
    3800:	f00b fc3b 	bl	f07a <log_output_flush>
}
    3804:	b004      	add	sp, #16
    3806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		prefix_offset = prefix_print(output, flags, 0, timestamp, domain, source, level);
    380a:	9502      	str	r5, [sp, #8]
    380c:	9301      	str	r3, [sp, #4]
    380e:	9200      	str	r2, [sp, #0]
    3810:	460b      	mov	r3, r1
    3812:	2200      	movs	r2, #0
    3814:	990e      	ldr	r1, [sp, #56]	; 0x38
    3816:	f7ff fefb 	bl	3610 <prefix_print>
    381a:	4680      	mov	r8, r0
    381c:	e7e3      	b.n	37e6 <log_output_process+0x16>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    381e:	4811      	ldr	r0, [pc, #68]	; (3864 <log_output_process+0x94>)
    3820:	e7e4      	b.n	37ec <log_output_process+0x1c>
		__ASSERT_NO_MSG(err >= 0);
    3822:	4f11      	ldr	r7, [pc, #68]	; (3868 <log_output_process+0x98>)
    3824:	f44f 73fd 	mov.w	r3, #506	; 0x1fa
    3828:	463a      	mov	r2, r7
    382a:	4910      	ldr	r1, [pc, #64]	; (386c <log_output_process+0x9c>)
    382c:	4810      	ldr	r0, [pc, #64]	; (3870 <log_output_process+0xa0>)
    382e:	f00b fac0 	bl	edb2 <assert_print>
    3832:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
    3836:	4638      	mov	r0, r7
    3838:	f00b fab4 	bl	eda4 <assert_post_action>
    383c:	e7dd      	b.n	37fa <log_output_process+0x2a>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
    383e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3840:	9300      	str	r3, [sp, #0]
    3842:	4643      	mov	r3, r8
    3844:	4632      	mov	r2, r6
    3846:	990c      	ldr	r1, [sp, #48]	; 0x30
    3848:	4620      	mov	r0, r4
    384a:	f00b fbfb 	bl	f044 <log_msg_hexdump>
    384e:	e7d5      	b.n	37fc <log_output_process+0x2c>
		postfix_print(output, flags, level);
    3850:	462a      	mov	r2, r5
    3852:	990e      	ldr	r1, [sp, #56]	; 0x38
    3854:	4620      	mov	r0, r4
    3856:	f00b fbe9 	bl	f02c <postfix_print>
    385a:	e7d0      	b.n	37fe <log_output_process+0x2e>
    385c:	0000f095 	.word	0x0000f095
    3860:	0000f005 	.word	0x0000f005
    3864:	00003769 	.word	0x00003769
    3868:	000108d8 	.word	0x000108d8
    386c:	00010938 	.word	0x00010938
    3870:	00010450 	.word	0x00010450

00003874 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    3874:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3878:	b087      	sub	sp, #28
    387a:	4606      	mov	r6, r0
    387c:	460c      	mov	r4, r1
    387e:	4690      	mov	r8, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    3880:	f8d1 9008 	ldr.w	r9, [r1, #8]
	return msg->hdr.desc.level;
    3884:	880f      	ldrh	r7, [r1, #0]
    3886:	f3c7 1782 	ubfx	r7, r7, #6, #3
	return msg->hdr.source;
    388a:	684b      	ldr	r3, [r1, #4]
	return msg->hdr.desc.domain;
    388c:	7808      	ldrb	r0, [r1, #0]
    388e:	f3c0 00c2 	ubfx	r0, r0, #3, #3
	log_timestamp_t timestamp = log_msg_get_timestamp(msg);
	uint8_t level = log_msg_get_level(msg);
	void *source = (void *)log_msg_get_source(msg);
	uint8_t domain_id = log_msg_get_domain(msg);
	int16_t source_id = source ?
    3892:	b133      	cbz	r3, 38a2 <log_output_msg_process+0x2e>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    3894:	4911      	ldr	r1, [pc, #68]	; (38dc <log_output_msg_process+0x68>)
    3896:	1a59      	subs	r1, r3, r1
    3898:	f341 01cf 	sbfx	r1, r1, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    389c:	2900      	cmp	r1, #0
    389e:	da19      	bge.n	38d4 <log_output_msg_process+0x60>
    38a0:	2300      	movs	r3, #0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    38a2:	4621      	mov	r1, r4
    38a4:	f851 5b10 	ldr.w	r5, [r1], #16
    38a8:	f3c5 2549 	ubfx	r5, r5, #9, #10
	*len = msg->hdr.desc.data_len;
    38ac:	8862      	ldrh	r2, [r4, #2]
    38ae:	f3c2 02cb 	ubfx	r2, r2, #3, #12
	return msg->data + msg->hdr.desc.package_len;
    38b2:	1948      	adds	r0, r1, r5
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    38b4:	b905      	cbnz	r5, 38b8 <log_output_msg_process+0x44>
    38b6:	2100      	movs	r1, #0
    38b8:	f8cd 8010 	str.w	r8, [sp, #16]
    38bc:	9203      	str	r2, [sp, #12]
    38be:	9002      	str	r0, [sp, #8]
    38c0:	9101      	str	r1, [sp, #4]
    38c2:	9700      	str	r7, [sp, #0]
    38c4:	2200      	movs	r2, #0
    38c6:	4649      	mov	r1, r9
    38c8:	4630      	mov	r0, r6
    38ca:	f7ff ff81 	bl	37d0 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    38ce:	b007      	add	sp, #28
    38d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    38d4:	f7ff fd44 	bl	3360 <log_source_name_get>
    38d8:	4603      	mov	r3, r0
    38da:	e7e2      	b.n	38a2 <log_output_msg_process+0x2e>
    38dc:	00010124 	.word	0x00010124

000038e0 <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    38e0:	b570      	push	{r4, r5, r6, lr}
    38e2:	b082      	sub	sp, #8
    38e4:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
    38e6:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    38e8:	f242 730f 	movw	r3, #9999	; 0x270f
    38ec:	428b      	cmp	r3, r1
    38ee:	bf28      	it	cs
    38f0:	460b      	movcs	r3, r1
    38f2:	4a0e      	ldr	r2, [pc, #56]	; (392c <log_output_dropped_process+0x4c>)
    38f4:	2105      	movs	r1, #5
    38f6:	4668      	mov	r0, sp
    38f8:	f00b f90a 	bl	eb10 <snprintk>
    38fc:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
    38fe:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    3900:	685b      	ldr	r3, [r3, #4]
    3902:	220b      	movs	r2, #11
    3904:	490a      	ldr	r1, [pc, #40]	; (3930 <log_output_dropped_process+0x50>)
    3906:	4628      	mov	r0, r5
    3908:	f00b fb6f 	bl	efea <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
    390c:	6863      	ldr	r3, [r4, #4]
    390e:	685b      	ldr	r3, [r3, #4]
    3910:	4632      	mov	r2, r6
    3912:	4669      	mov	r1, sp
    3914:	4628      	mov	r0, r5
    3916:	f00b fb68 	bl	efea <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
    391a:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    391c:	685b      	ldr	r3, [r3, #4]
    391e:	221b      	movs	r2, #27
    3920:	4904      	ldr	r1, [pc, #16]	; (3934 <log_output_dropped_process+0x54>)
    3922:	4628      	mov	r0, r5
    3924:	f00b fb61 	bl	efea <buffer_write>
}
    3928:	b002      	add	sp, #8
    392a:	bd70      	pop	{r4, r5, r6, pc}
    392c:	000103e0 	.word	0x000103e0
    3930:	00010994 	.word	0x00010994
    3934:	00010978 	.word	0x00010978

00003938 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    3938:	4b07      	ldr	r3, [pc, #28]	; (3958 <log_output_timestamp_freq_set+0x20>)
    393a:	2201      	movs	r2, #1
    393c:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    393e:	e004      	b.n	394a <log_output_timestamp_freq_set+0x12>
		frequency /= 2U;
    3940:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    3942:	4a05      	ldr	r2, [pc, #20]	; (3958 <log_output_timestamp_freq_set+0x20>)
    3944:	6813      	ldr	r3, [r2, #0]
    3946:	005b      	lsls	r3, r3, #1
    3948:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    394a:	4b04      	ldr	r3, [pc, #16]	; (395c <log_output_timestamp_freq_set+0x24>)
    394c:	4298      	cmp	r0, r3
    394e:	d8f7      	bhi.n	3940 <log_output_timestamp_freq_set+0x8>
	}

	freq = frequency;
    3950:	4b03      	ldr	r3, [pc, #12]	; (3960 <log_output_timestamp_freq_set+0x28>)
    3952:	6018      	str	r0, [r3, #0]
}
    3954:	4770      	bx	lr
    3956:	bf00      	nop
    3958:	200009dc 	.word	0x200009dc
    395c:	000f4240 	.word	0x000f4240
    3960:	200009d8 	.word	0x200009d8

00003964 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    3964:	b570      	push	{r4, r5, r6, lr}
    3966:	4606      	mov	r6, r0
    3968:	460d      	mov	r5, r1
		dict_char_out_hex(data, length);
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
    396a:	2400      	movs	r4, #0
    396c:	e006      	b.n	397c <char_out+0x18>
			uart_poll_out(uart_dev, data[i]);
    396e:	4b05      	ldr	r3, [pc, #20]	; (3984 <char_out+0x20>)
    3970:	6818      	ldr	r0, [r3, #0]
    3972:	5d31      	ldrb	r1, [r6, r4]
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
    3974:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    3976:	685b      	ldr	r3, [r3, #4]
    3978:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    397a:	3401      	adds	r4, #1
    397c:	42ac      	cmp	r4, r5
    397e:	d3f6      	bcc.n	396e <char_out+0xa>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
    3980:	4628      	mov	r0, r5
    3982:	bd70      	pop	{r4, r5, r6, pc}
    3984:	200009f8 	.word	0x200009f8

00003988 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    3988:	4b01      	ldr	r3, [pc, #4]	; (3990 <format_set+0x8>)
    398a:	6019      	str	r1, [r3, #0]
	return 0;
}
    398c:	2000      	movs	r0, #0
    398e:	4770      	bx	lr
    3990:	200009e8 	.word	0x200009e8

00003994 <log_backend_uart_init>:

static void log_backend_uart_init(struct log_backend const *const backend)
{
    3994:	b510      	push	{r4, lr}
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    3996:	4809      	ldr	r0, [pc, #36]	; (39bc <log_backend_uart_init+0x28>)
    3998:	4b09      	ldr	r3, [pc, #36]	; (39c0 <log_backend_uart_init+0x2c>)
    399a:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    399c:	f00c f95d 	bl	fc5a <z_device_is_ready>
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    39a0:	b100      	cbz	r0, 39a4 <log_backend_uart_init+0x10>
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
    39a2:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    39a4:	4c07      	ldr	r4, [pc, #28]	; (39c4 <log_backend_uart_init+0x30>)
    39a6:	236f      	movs	r3, #111	; 0x6f
    39a8:	4622      	mov	r2, r4
    39aa:	4907      	ldr	r1, [pc, #28]	; (39c8 <log_backend_uart_init+0x34>)
    39ac:	4807      	ldr	r0, [pc, #28]	; (39cc <log_backend_uart_init+0x38>)
    39ae:	f00b fa00 	bl	edb2 <assert_print>
    39b2:	216f      	movs	r1, #111	; 0x6f
    39b4:	4620      	mov	r0, r4
    39b6:	f00b f9f5 	bl	eda4 <assert_post_action>
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
    39ba:	e7f2      	b.n	39a2 <log_backend_uart_init+0xe>
    39bc:	0000ff50 	.word	0x0000ff50
    39c0:	200009f8 	.word	0x200009f8
    39c4:	000109b4 	.word	0x000109b4
    39c8:	000109ec 	.word	0x000109ec
    39cc:	00010450 	.word	0x00010450

000039d0 <panic>:

static void panic(struct log_backend const *const backend)
{
    39d0:	b508      	push	{r3, lr}
	in_panic = true;
    39d2:	4b03      	ldr	r3, [pc, #12]	; (39e0 <panic+0x10>)
    39d4:	2201      	movs	r2, #1
    39d6:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    39d8:	4802      	ldr	r0, [pc, #8]	; (39e4 <panic+0x14>)
    39da:	f00b fb4e 	bl	f07a <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
    39de:	bd08      	pop	{r3, pc}
    39e0:	200012cc 	.word	0x200012cc
    39e4:	00010a44 	.word	0x00010a44

000039e8 <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
    39e8:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    39ea:	4802      	ldr	r0, [pc, #8]	; (39f4 <dropped+0xc>)
    39ec:	f7ff ff78 	bl	38e0 <log_output_dropped_process>
	if (IS_ENABLED(CONFIG_LOG_BACKEND_UART_OUTPUT_DICTIONARY)) {
		log_dict_output_dropped_process(&log_output_uart, cnt);
	} else {
		log_backend_std_dropped(&log_output_uart, cnt);
	}
}
    39f0:	bd08      	pop	{r3, pc}
    39f2:	bf00      	nop
    39f4:	00010a44 	.word	0x00010a44

000039f8 <process>:
{
    39f8:	b510      	push	{r4, lr}
    39fa:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    39fc:	4b04      	ldr	r3, [pc, #16]	; (3a10 <process+0x18>)
    39fe:	6818      	ldr	r0, [r3, #0]
    3a00:	f7ff fa62 	bl	2ec8 <log_format_func_t_get>
    3a04:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
    3a06:	220f      	movs	r2, #15
    3a08:	4621      	mov	r1, r4
    3a0a:	4802      	ldr	r0, [pc, #8]	; (3a14 <process+0x1c>)
    3a0c:	4798      	blx	r3
}
    3a0e:	bd10      	pop	{r4, pc}
    3a10:	200009e8 	.word	0x200009e8
    3a14:	00010a44 	.word	0x00010a44

00003a18 <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
    3a18:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    3a1a:	4b40      	ldr	r3, [pc, #256]	; (3b1c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x84>)
    3a1c:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    3a1e:	f005 031f 	and.w	r3, r5, #31
    3a22:	2201      	movs	r2, #1
    3a24:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3a26:	0969      	lsrs	r1, r5, #5
    3a28:	4b3d      	ldr	r3, [pc, #244]	; (3b20 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x88>)
    3a2a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    3a2e:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3a30:	f3bf 8f5b 	dmb	ish
    3a34:	e853 1f00 	ldrex	r1, [r3]
    3a38:	ea01 0400 	and.w	r4, r1, r0
    3a3c:	e843 4600 	strex	r6, r4, [r3]
    3a40:	2e00      	cmp	r6, #0
    3a42:	d1f7      	bne.n	3a34 <pm_system_resume+0x1c>
    3a44:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    3a48:	420a      	tst	r2, r1
    3a4a:	d100      	bne.n	3a4e <pm_system_resume+0x36>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
    3a4c:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
    3a4e:	4a35      	ldr	r2, [pc, #212]	; (3b24 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8c>)
    3a50:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    3a54:	0098      	lsls	r0, r3, #2
    3a56:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	if (pm_state_exit_post_ops != NULL) {
    3a5a:	4933      	ldr	r1, [pc, #204]	; (3b28 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x90>)
    3a5c:	b1a9      	cbz	r1, 3a8a <pm_system_resume+0x72>
		pm_state_exit_post_ops(info->state, info->substate_id);
    3a5e:	7859      	ldrb	r1, [r3, #1]
    3a60:	5c10      	ldrb	r0, [r2, r0]
    3a62:	f00b fc39 	bl	f2d8 <pm_state_exit_post_ops>
	__asm__ volatile(
    3a66:	f04f 0320 	mov.w	r3, #32
    3a6a:	f3ef 8611 	mrs	r6, BASEPRI
    3a6e:	f383 8812 	msr	BASEPRI_MAX, r3
    3a72:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3a76:	482d      	ldr	r0, [pc, #180]	; (3b2c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x94>)
    3a78:	f007 fc54 	bl	b324 <z_spin_lock_valid>
    3a7c:	b158      	cbz	r0, 3a96 <pm_system_resume+0x7e>
	z_spin_lock_set_owner(l);
    3a7e:	482b      	ldr	r0, [pc, #172]	; (3b2c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x94>)
    3a80:	f007 fc70 	bl	b364 <z_spin_lock_set_owner>
	return list->head;
    3a84:	4b2a      	ldr	r3, [pc, #168]	; (3b30 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x98>)
    3a86:	681c      	ldr	r4, [r3, #0]
    3a88:	e020      	b.n	3acc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x34>
	__asm__ volatile(
    3a8a:	2300      	movs	r3, #0
    3a8c:	f383 8811 	msr	BASEPRI, r3
    3a90:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    3a94:	e7e7      	b.n	3a66 <pm_system_resume+0x4e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3a96:	4c27      	ldr	r4, [pc, #156]	; (3b34 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x9c>)
    3a98:	238e      	movs	r3, #142	; 0x8e
    3a9a:	4622      	mov	r2, r4
    3a9c:	4926      	ldr	r1, [pc, #152]	; (3b38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa0>)
    3a9e:	4827      	ldr	r0, [pc, #156]	; (3b3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa4>)
    3aa0:	f00b f987 	bl	edb2 <assert_print>
    3aa4:	4921      	ldr	r1, [pc, #132]	; (3b2c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x94>)
    3aa6:	4826      	ldr	r0, [pc, #152]	; (3b40 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa8>)
    3aa8:	f00b f983 	bl	edb2 <assert_print>
    3aac:	218e      	movs	r1, #142	; 0x8e
    3aae:	4620      	mov	r0, r4
    3ab0:	f00b f978 	bl	eda4 <assert_post_action>
    3ab4:	e7e3      	b.n	3a7e <pm_system_resume+0x66>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    3ab6:	4b19      	ldr	r3, [pc, #100]	; (3b1c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x84>)
    3ab8:	7d1b      	ldrb	r3, [r3, #20]
    3aba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3abe:	4919      	ldr	r1, [pc, #100]	; (3b24 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8c>)
    3ac0:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    3ac4:	4790      	blx	r2
Z_GENLIST_PEEK_NEXT(slist, snode)
    3ac6:	b10c      	cbz	r4, 3acc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x34>
	return node->next;
    3ac8:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3aca:	b124      	cbz	r4, 3ad6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3e>
    3acc:	b11c      	cbz	r4, 3ad6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3e>
			callback = notifier->state_exit;
    3ace:	68a2      	ldr	r2, [r4, #8]
		if (callback) {
    3ad0:	2a00      	cmp	r2, #0
    3ad2:	d1f0      	bne.n	3ab6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1e>
    3ad4:	e7f7      	b.n	3ac6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3ad6:	4815      	ldr	r0, [pc, #84]	; (3b2c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x94>)
    3ad8:	f007 fc34 	bl	b344 <z_spin_unlock_valid>
    3adc:	b170      	cbz	r0, 3afc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x64>
	__asm__ volatile(
    3ade:	f386 8811 	msr	BASEPRI, r6
    3ae2:	f3bf 8f6f 	isb	sy
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    3ae6:	4a0f      	ldr	r2, [pc, #60]	; (3b24 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8c>)
    3ae8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    3aec:	00a9      	lsls	r1, r5, #2
    3aee:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    3af2:	2300      	movs	r3, #0
    3af4:	5053      	str	r3, [r2, r1]
    3af6:	606b      	str	r3, [r5, #4]
    3af8:	60ab      	str	r3, [r5, #8]
}
    3afa:	e7a7      	b.n	3a4c <pm_system_resume+0x34>
    3afc:	4c0d      	ldr	r4, [pc, #52]	; (3b34 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x9c>)
    3afe:	23b9      	movs	r3, #185	; 0xb9
    3b00:	4622      	mov	r2, r4
    3b02:	4910      	ldr	r1, [pc, #64]	; (3b44 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xac>)
    3b04:	480d      	ldr	r0, [pc, #52]	; (3b3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa4>)
    3b06:	f00b f954 	bl	edb2 <assert_print>
    3b0a:	4908      	ldr	r1, [pc, #32]	; (3b2c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x94>)
    3b0c:	480e      	ldr	r0, [pc, #56]	; (3b48 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb0>)
    3b0e:	f00b f950 	bl	edb2 <assert_print>
    3b12:	21b9      	movs	r1, #185	; 0xb9
    3b14:	4620      	mov	r0, r4
    3b16:	f00b f945 	bl	eda4 <assert_post_action>
    3b1a:	e7e0      	b.n	3ade <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x46>
    3b1c:	20001090 	.word	0x20001090
    3b20:	20000a28 	.word	0x20000a28
    3b24:	20000a1c 	.word	0x20000a1c
    3b28:	0000f2d9 	.word	0x0000f2d9
    3b2c:	20000a04 	.word	0x20000a04
    3b30:	20000a08 	.word	0x20000a08
    3b34:	000105e8 	.word	0x000105e8
    3b38:	00010648 	.word	0x00010648
    3b3c:	00010450 	.word	0x00010450
    3b40:	00010660 	.word	0x00010660
    3b44:	00010618 	.word	0x00010618
    3b48:	00010630 	.word	0x00010630

00003b4c <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    3b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b4e:	4604      	mov	r4, r0
	uint8_t id = CURRENT_CPU;
    3b50:	4b7c      	ldr	r3, [pc, #496]	; (3d44 <pm_system_suspend+0x1f8>)
    3b52:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
    3b54:	f04f 0320 	mov.w	r3, #32
    3b58:	f3ef 8611 	mrs	r6, BASEPRI
    3b5c:	f383 8812 	msr	BASEPRI_MAX, r3
    3b60:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3b64:	4878      	ldr	r0, [pc, #480]	; (3d48 <pm_system_suspend+0x1fc>)
    3b66:	f007 fbdd 	bl	b324 <z_spin_lock_valid>
    3b6a:	2800      	cmp	r0, #0
    3b6c:	d045      	beq.n	3bfa <pm_system_suspend+0xae>
	z_spin_lock_set_owner(l);
    3b6e:	4876      	ldr	r0, [pc, #472]	; (3d48 <pm_system_suspend+0x1fc>)
    3b70:	f007 fbf8 	bl	b364 <z_spin_lock_set_owner>
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    3b74:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    3b78:	4a74      	ldr	r2, [pc, #464]	; (3d4c <pm_system_suspend+0x200>)
    3b7a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    3b7e:	2b00      	cmp	r3, #0
    3b80:	d04b      	beq.n	3c1a <pm_system_suspend+0xce>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    3b82:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
    3b86:	4b72      	ldr	r3, [pc, #456]	; (3d50 <pm_system_suspend+0x204>)
    3b88:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
    3b8c:	4617      	mov	r7, r2
    3b8e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    3b92:	ea4f 0e83 	mov.w	lr, r3, lsl #2
    3b96:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3b9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    3b9e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    3ba2:	2300      	movs	r3, #0
    3ba4:	f807 300e 	strb.w	r3, [r7, lr]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3ba8:	4867      	ldr	r0, [pc, #412]	; (3d48 <pm_system_suspend+0x1fc>)
    3baa:	f007 fbcb 	bl	b344 <z_spin_unlock_valid>
    3bae:	2800      	cmp	r0, #0
    3bb0:	d042      	beq.n	3c38 <pm_system_suspend+0xec>
	__asm__ volatile(
    3bb2:	f386 8811 	msr	BASEPRI, r6
    3bb6:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    3bba:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    3bbe:	4a64      	ldr	r2, [pc, #400]	; (3d50 <pm_system_suspend+0x204>)
    3bc0:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    3bc4:	2b00      	cmp	r3, #0
    3bc6:	f000 80bb 	beq.w	3d40 <pm_system_suspend+0x1f4>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    3bca:	f1b4 3fff 	cmp.w	r4, #4294967295
    3bce:	d143      	bne.n	3c58 <pm_system_suspend+0x10c>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    3bd0:	f008 fdc4 	bl	c75c <k_sched_lock>
	__asm__ volatile(
    3bd4:	f04f 0320 	mov.w	r3, #32
    3bd8:	f3ef 8611 	mrs	r6, BASEPRI
    3bdc:	f383 8812 	msr	BASEPRI_MAX, r3
    3be0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3be4:	485b      	ldr	r0, [pc, #364]	; (3d54 <pm_system_suspend+0x208>)
    3be6:	f007 fb9d 	bl	b324 <z_spin_lock_valid>
    3bea:	2800      	cmp	r0, #0
    3bec:	d049      	beq.n	3c82 <pm_system_suspend+0x136>
	z_spin_lock_set_owner(l);
    3bee:	4859      	ldr	r0, [pc, #356]	; (3d54 <pm_system_suspend+0x208>)
    3bf0:	f007 fbb8 	bl	b364 <z_spin_lock_set_owner>
	return list->head;
    3bf4:	4b58      	ldr	r3, [pc, #352]	; (3d58 <pm_system_suspend+0x20c>)
    3bf6:	681c      	ldr	r4, [r3, #0]
    3bf8:	e05e      	b.n	3cb8 <pm_system_suspend+0x16c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3bfa:	4f58      	ldr	r7, [pc, #352]	; (3d5c <pm_system_suspend+0x210>)
    3bfc:	238e      	movs	r3, #142	; 0x8e
    3bfe:	463a      	mov	r2, r7
    3c00:	4957      	ldr	r1, [pc, #348]	; (3d60 <pm_system_suspend+0x214>)
    3c02:	4858      	ldr	r0, [pc, #352]	; (3d64 <pm_system_suspend+0x218>)
    3c04:	f00b f8d5 	bl	edb2 <assert_print>
    3c08:	494f      	ldr	r1, [pc, #316]	; (3d48 <pm_system_suspend+0x1fc>)
    3c0a:	4857      	ldr	r0, [pc, #348]	; (3d68 <pm_system_suspend+0x21c>)
    3c0c:	f00b f8d1 	bl	edb2 <assert_print>
    3c10:	218e      	movs	r1, #142	; 0x8e
    3c12:	4638      	mov	r0, r7
    3c14:	f00b f8c6 	bl	eda4 <assert_post_action>
    3c18:	e7a9      	b.n	3b6e <pm_system_suspend+0x22>
		info = pm_policy_next_state(id, ticks);
    3c1a:	4621      	mov	r1, r4
    3c1c:	4628      	mov	r0, r5
    3c1e:	f000 f8b1 	bl	3d84 <pm_policy_next_state>
		if (info != NULL) {
    3c22:	2800      	cmp	r0, #0
    3c24:	d0c0      	beq.n	3ba8 <pm_system_suspend+0x5c>
			z_cpus_pm_state[id] = *info;
    3c26:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    3c2a:	4a49      	ldr	r2, [pc, #292]	; (3d50 <pm_system_suspend+0x204>)
    3c2c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3c30:	c807      	ldmia	r0, {r0, r1, r2}
    3c32:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    3c36:	e7b7      	b.n	3ba8 <pm_system_suspend+0x5c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3c38:	4f48      	ldr	r7, [pc, #288]	; (3d5c <pm_system_suspend+0x210>)
    3c3a:	23b9      	movs	r3, #185	; 0xb9
    3c3c:	463a      	mov	r2, r7
    3c3e:	494b      	ldr	r1, [pc, #300]	; (3d6c <pm_system_suspend+0x220>)
    3c40:	4848      	ldr	r0, [pc, #288]	; (3d64 <pm_system_suspend+0x218>)
    3c42:	f00b f8b6 	bl	edb2 <assert_print>
    3c46:	4940      	ldr	r1, [pc, #256]	; (3d48 <pm_system_suspend+0x1fc>)
    3c48:	4849      	ldr	r0, [pc, #292]	; (3d70 <pm_system_suspend+0x224>)
    3c4a:	f00b f8b2 	bl	edb2 <assert_print>
    3c4e:	21b9      	movs	r1, #185	; 0xb9
    3c50:	4638      	mov	r0, r7
    3c52:	f00b f8a7 	bl	eda4 <assert_post_action>
    3c56:	e7ac      	b.n	3bb2 <pm_system_suspend+0x66>
		     k_us_to_ticks_ceil32(
    3c58:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    3c5c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3c60:	6898      	ldr	r0, [r3, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    3c62:	0c41      	lsrs	r1, r0, #17
    3c64:	03c0      	lsls	r0, r0, #15
    3c66:	4b43      	ldr	r3, [pc, #268]	; (3d74 <pm_system_suspend+0x228>)
    3c68:	18c0      	adds	r0, r0, r3
    3c6a:	4a43      	ldr	r2, [pc, #268]	; (3d78 <pm_system_suspend+0x22c>)
    3c6c:	f04f 0300 	mov.w	r3, #0
    3c70:	f141 0100 	adc.w	r1, r1, #0
    3c74:	f7fc fa44 	bl	100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    3c78:	2101      	movs	r1, #1
    3c7a:	1a20      	subs	r0, r4, r0
    3c7c:	f00a f9bc 	bl	dff8 <z_set_timeout_expiry>
    3c80:	e7a6      	b.n	3bd0 <pm_system_suspend+0x84>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3c82:	4c36      	ldr	r4, [pc, #216]	; (3d5c <pm_system_suspend+0x210>)
    3c84:	238e      	movs	r3, #142	; 0x8e
    3c86:	4622      	mov	r2, r4
    3c88:	4935      	ldr	r1, [pc, #212]	; (3d60 <pm_system_suspend+0x214>)
    3c8a:	4836      	ldr	r0, [pc, #216]	; (3d64 <pm_system_suspend+0x218>)
    3c8c:	f00b f891 	bl	edb2 <assert_print>
    3c90:	4930      	ldr	r1, [pc, #192]	; (3d54 <pm_system_suspend+0x208>)
    3c92:	4835      	ldr	r0, [pc, #212]	; (3d68 <pm_system_suspend+0x21c>)
    3c94:	f00b f88d 	bl	edb2 <assert_print>
    3c98:	218e      	movs	r1, #142	; 0x8e
    3c9a:	4620      	mov	r0, r4
    3c9c:	f00b f882 	bl	eda4 <assert_post_action>
    3ca0:	e7a5      	b.n	3bee <pm_system_suspend+0xa2>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    3ca2:	4b28      	ldr	r3, [pc, #160]	; (3d44 <pm_system_suspend+0x1f8>)
    3ca4:	7d1b      	ldrb	r3, [r3, #20]
    3ca6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3caa:	4929      	ldr	r1, [pc, #164]	; (3d50 <pm_system_suspend+0x204>)
    3cac:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    3cb0:	4790      	blx	r2
Z_GENLIST_PEEK_NEXT(slist, snode)
    3cb2:	b10c      	cbz	r4, 3cb8 <pm_system_suspend+0x16c>
	return node->next;
    3cb4:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3cb6:	b124      	cbz	r4, 3cc2 <pm_system_suspend+0x176>
    3cb8:	b11c      	cbz	r4, 3cc2 <pm_system_suspend+0x176>
			callback = notifier->state_entry;
    3cba:	6862      	ldr	r2, [r4, #4]
		if (callback) {
    3cbc:	2a00      	cmp	r2, #0
    3cbe:	d1f0      	bne.n	3ca2 <pm_system_suspend+0x156>
    3cc0:	e7f7      	b.n	3cb2 <pm_system_suspend+0x166>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3cc2:	4824      	ldr	r0, [pc, #144]	; (3d54 <pm_system_suspend+0x208>)
    3cc4:	f007 fb3e 	bl	b344 <z_spin_unlock_valid>
    3cc8:	b350      	cbz	r0, 3d20 <pm_system_suspend+0x1d4>
	__asm__ volatile(
    3cca:	f386 8811 	msr	BASEPRI, r6
    3cce:	f3bf 8f6f 	isb	sy
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    3cd2:	f005 031f 	and.w	r3, r5, #31
    3cd6:	2101      	movs	r1, #1
    3cd8:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    3cda:	096b      	lsrs	r3, r5, #5
    3cdc:	4a27      	ldr	r2, [pc, #156]	; (3d7c <pm_system_suspend+0x230>)
    3cde:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3ce2:	f3bf 8f5b 	dmb	ish
    3ce6:	e853 2f00 	ldrex	r2, [r3]
    3cea:	430a      	orrs	r2, r1
    3cec:	e843 2000 	strex	r0, r2, [r3]
    3cf0:	2800      	cmp	r0, #0
    3cf2:	d1f8      	bne.n	3ce6 <pm_system_suspend+0x19a>
    3cf4:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    3cf8:	4b21      	ldr	r3, [pc, #132]	; (3d80 <pm_system_suspend+0x234>)
    3cfa:	b15b      	cbz	r3, 3d14 <pm_system_suspend+0x1c8>
		pm_state_set(info->state, info->substate_id);
    3cfc:	4a14      	ldr	r2, [pc, #80]	; (3d50 <pm_system_suspend+0x204>)
    3cfe:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    3d02:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3d06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    3d0a:	7859      	ldrb	r1, [r3, #1]
    3d0c:	f812 0025 	ldrb.w	r0, [r2, r5, lsl #2]
    3d10:	f00b fad6 	bl	f2c0 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    3d14:	f7ff fe80 	bl	3a18 <pm_system_resume>
	k_sched_unlock();
    3d18:	f009 faac 	bl	d274 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    3d1c:	2001      	movs	r0, #1
}
    3d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3d20:	4c0e      	ldr	r4, [pc, #56]	; (3d5c <pm_system_suspend+0x210>)
    3d22:	23b9      	movs	r3, #185	; 0xb9
    3d24:	4622      	mov	r2, r4
    3d26:	4911      	ldr	r1, [pc, #68]	; (3d6c <pm_system_suspend+0x220>)
    3d28:	480e      	ldr	r0, [pc, #56]	; (3d64 <pm_system_suspend+0x218>)
    3d2a:	f00b f842 	bl	edb2 <assert_print>
    3d2e:	4909      	ldr	r1, [pc, #36]	; (3d54 <pm_system_suspend+0x208>)
    3d30:	480f      	ldr	r0, [pc, #60]	; (3d70 <pm_system_suspend+0x224>)
    3d32:	f00b f83e 	bl	edb2 <assert_print>
    3d36:	21b9      	movs	r1, #185	; 0xb9
    3d38:	4620      	mov	r0, r4
    3d3a:	f00b f833 	bl	eda4 <assert_post_action>
    3d3e:	e7c4      	b.n	3cca <pm_system_suspend+0x17e>
		return false;
    3d40:	2000      	movs	r0, #0
    3d42:	e7ec      	b.n	3d1e <pm_system_suspend+0x1d2>
    3d44:	20001090 	.word	0x20001090
    3d48:	20000a00 	.word	0x20000a00
    3d4c:	20000a10 	.word	0x20000a10
    3d50:	20000a1c 	.word	0x20000a1c
    3d54:	20000a04 	.word	0x20000a04
    3d58:	20000a08 	.word	0x20000a08
    3d5c:	000105e8 	.word	0x000105e8
    3d60:	00010648 	.word	0x00010648
    3d64:	00010450 	.word	0x00010450
    3d68:	00010660 	.word	0x00010660
    3d6c:	00010618 	.word	0x00010618
    3d70:	00010630 	.word	0x00010630
    3d74:	000f423f 	.word	0x000f423f
    3d78:	000f4240 	.word	0x000f4240
    3d7c:	20000a28 	.word	0x20000a28
    3d80:	0000f2c1 	.word	0x0000f2c1

00003d84 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    3d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3d88:	b082      	sub	sp, #8
    3d8a:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    3d8c:	a901      	add	r1, sp, #4
    3d8e:	f000 f845 	bl	3e1c <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    3d92:	1e44      	subs	r4, r0, #1
    3d94:	b224      	sxth	r4, r4
    3d96:	e007      	b.n	3da8 <pm_policy_next_state+0x24>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
		    (exit_latency >= max_latency_ticks)) {
			continue;
		}

		if ((ticks == K_TICKS_FOREVER) ||
    3d98:	f1b6 3fff 	cmp.w	r6, #4294967295
    3d9c:	d033      	beq.n	3e06 <pm_policy_next_state+0x82>
		    (ticks >= (min_residency + exit_latency))) {
    3d9e:	4440      	add	r0, r8
		if ((ticks == K_TICKS_FOREVER) ||
    3da0:	42b0      	cmp	r0, r6
    3da2:	d930      	bls.n	3e06 <pm_policy_next_state+0x82>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    3da4:	3c01      	subs	r4, #1
    3da6:	b224      	sxth	r4, r4
    3da8:	2c00      	cmp	r4, #0
    3daa:	db2b      	blt.n	3e04 <pm_policy_next_state+0x80>
		const struct pm_state_info *state = &cpu_states[i];
    3dac:	9b01      	ldr	r3, [sp, #4]
    3dae:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    3db2:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state, state->substate_id)) {
    3db6:	7869      	ldrb	r1, [r5, #1]
    3db8:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    3dbc:	f00b f978 	bl	f0b0 <pm_policy_state_lock_is_active>
    3dc0:	2800      	cmp	r0, #0
    3dc2:	d1ef      	bne.n	3da4 <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
    3dc4:	6868      	ldr	r0, [r5, #4]
    3dc6:	0c41      	lsrs	r1, r0, #17
    3dc8:	03c0      	lsls	r0, r0, #15
    3dca:	4f11      	ldr	r7, [pc, #68]	; (3e10 <pm_policy_next_state+0x8c>)
    3dcc:	19c0      	adds	r0, r0, r7
    3dce:	4a11      	ldr	r2, [pc, #68]	; (3e14 <pm_policy_next_state+0x90>)
    3dd0:	f04f 0300 	mov.w	r3, #0
    3dd4:	f141 0100 	adc.w	r1, r1, #0
    3dd8:	f7fc f992 	bl	100 <__aeabi_uldivmod>
    3ddc:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
    3dde:	68ab      	ldr	r3, [r5, #8]
    3de0:	0c59      	lsrs	r1, r3, #17
    3de2:	03db      	lsls	r3, r3, #15
    3de4:	19d8      	adds	r0, r3, r7
    3de6:	4a0b      	ldr	r2, [pc, #44]	; (3e14 <pm_policy_next_state+0x90>)
    3de8:	f04f 0300 	mov.w	r3, #0
    3dec:	f141 0100 	adc.w	r1, r1, #0
    3df0:	f7fc f986 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    3df4:	4b08      	ldr	r3, [pc, #32]	; (3e18 <pm_policy_next_state+0x94>)
    3df6:	681b      	ldr	r3, [r3, #0]
    3df8:	f1b3 3fff 	cmp.w	r3, #4294967295
    3dfc:	d0cc      	beq.n	3d98 <pm_policy_next_state+0x14>
    3dfe:	4283      	cmp	r3, r0
    3e00:	d8ca      	bhi.n	3d98 <pm_policy_next_state+0x14>
    3e02:	e7cf      	b.n	3da4 <pm_policy_next_state+0x20>
			return state;
		}
	}

	return NULL;
    3e04:	2500      	movs	r5, #0
}
    3e06:	4628      	mov	r0, r5
    3e08:	b002      	add	sp, #8
    3e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3e0e:	bf00      	nop
    3e10:	000f423f 	.word	0x000f423f
    3e14:	000f4240 	.word	0x000f4240
    3e18:	20000040 	.word	0x20000040

00003e1c <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    3e1c:	b908      	cbnz	r0, 3e22 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    3e1e:	4b02      	ldr	r3, [pc, #8]	; (3e28 <pm_state_cpu_get_all+0xc>)
    3e20:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    3e22:	2000      	movs	r0, #0
    3e24:	4770      	bx	lr
    3e26:	bf00      	nop
    3e28:	00010a58 	.word	0x00010a58

00003e2c <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    3e2c:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    3e2e:	4802      	ldr	r0, [pc, #8]	; (3e38 <nrf_cc3xx_platform_abort_init+0xc>)
    3e30:	f00a fc1e 	bl	e670 <nrf_cc3xx_platform_set_abort>
}
    3e34:	bd08      	pop	{r3, pc}
    3e36:	bf00      	nop
    3e38:	00010a58 	.word	0x00010a58

00003e3c <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    3e3c:	b1d0      	cbz	r0, 3e74 <mutex_unlock_platform+0x38>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3e3e:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    3e40:	6842      	ldr	r2, [r0, #4]
    3e42:	2a04      	cmp	r2, #4
    3e44:	d005      	beq.n	3e52 <mutex_unlock_platform+0x16>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3e46:	b1d2      	cbz	r2, 3e7e <mutex_unlock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    3e48:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    3e4a:	f007 fdcb 	bl	b9e4 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    3e4e:	2000      	movs	r0, #0
    }
}
    3e50:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    3e52:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3e54:	2200      	movs	r2, #0
    3e56:	f3bf 8f5b 	dmb	ish
    3e5a:	e853 1f00 	ldrex	r1, [r3]
    3e5e:	2901      	cmp	r1, #1
    3e60:	d103      	bne.n	3e6a <mutex_unlock_platform+0x2e>
    3e62:	e843 2000 	strex	r0, r2, [r3]
    3e66:	2800      	cmp	r0, #0
    3e68:	d1f7      	bne.n	3e5a <mutex_unlock_platform+0x1e>
    3e6a:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3e6e:	d104      	bne.n	3e7a <mutex_unlock_platform+0x3e>
    3e70:	4610      	mov	r0, r2
    3e72:	e7ed      	b.n	3e50 <mutex_unlock_platform+0x14>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    3e74:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    3e78:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3e7a:	4802      	ldr	r0, [pc, #8]	; (3e84 <mutex_unlock_platform+0x48>)
    3e7c:	e7e8      	b.n	3e50 <mutex_unlock_platform+0x14>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    3e7e:	4802      	ldr	r0, [pc, #8]	; (3e88 <mutex_unlock_platform+0x4c>)
    3e80:	e7e6      	b.n	3e50 <mutex_unlock_platform+0x14>
    3e82:	bf00      	nop
    3e84:	ffff8fe9 	.word	0xffff8fe9
    3e88:	ffff8fea 	.word	0xffff8fea

00003e8c <mutex_lock_platform>:
    if(mutex == NULL) {
    3e8c:	b320      	cbz	r0, 3ed8 <mutex_lock_platform+0x4c>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3e8e:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    3e90:	6842      	ldr	r2, [r0, #4]
    3e92:	2a04      	cmp	r2, #4
    3e94:	d002      	beq.n	3e9c <mutex_lock_platform+0x10>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3e96:	b992      	cbnz	r2, 3ebe <mutex_lock_platform+0x32>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    3e98:	4811      	ldr	r0, [pc, #68]	; (3ee0 <mutex_lock_platform+0x54>)
    3e9a:	e00f      	b.n	3ebc <mutex_lock_platform+0x30>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    3e9c:	6803      	ldr	r3, [r0, #0]
    3e9e:	2201      	movs	r2, #1
    3ea0:	f3bf 8f5b 	dmb	ish
    3ea4:	e853 1f00 	ldrex	r1, [r3]
    3ea8:	2900      	cmp	r1, #0
    3eaa:	d103      	bne.n	3eb4 <mutex_lock_platform+0x28>
    3eac:	e843 2000 	strex	r0, r2, [r3]
    3eb0:	2800      	cmp	r0, #0
    3eb2:	d1f7      	bne.n	3ea4 <mutex_lock_platform+0x18>
    3eb4:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3eb8:	d10c      	bne.n	3ed4 <mutex_lock_platform+0x48>
    3eba:	2000      	movs	r0, #0
}
    3ebc:	bd08      	pop	{r3, pc}
        p_mutex = (struct k_mutex *)mutex->mutex;
    3ebe:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    3ec0:	f04f 32ff 	mov.w	r2, #4294967295
    3ec4:	f04f 33ff 	mov.w	r3, #4294967295
    3ec8:	f007 fc6c 	bl	b7a4 <z_impl_k_mutex_lock>
        if (ret == 0) {
    3ecc:	2800      	cmp	r0, #0
    3ece:	d0f5      	beq.n	3ebc <mutex_lock_platform+0x30>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    3ed0:	4804      	ldr	r0, [pc, #16]	; (3ee4 <mutex_lock_platform+0x58>)
    3ed2:	e7f3      	b.n	3ebc <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3ed4:	4803      	ldr	r0, [pc, #12]	; (3ee4 <mutex_lock_platform+0x58>)
    3ed6:	e7f1      	b.n	3ebc <mutex_lock_platform+0x30>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    3ed8:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    3edc:	4770      	bx	lr
    3ede:	bf00      	nop
    3ee0:	ffff8fea 	.word	0xffff8fea
    3ee4:	ffff8fe9 	.word	0xffff8fe9

00003ee8 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3ee8:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    3eea:	4604      	mov	r4, r0
    3eec:	b188      	cbz	r0, 3f12 <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    3eee:	6863      	ldr	r3, [r4, #4]
    3ef0:	2b04      	cmp	r3, #4
    3ef2:	d00d      	beq.n	3f10 <mutex_free_platform+0x28>
    3ef4:	2b08      	cmp	r3, #8
    3ef6:	d00b      	beq.n	3f10 <mutex_free_platform+0x28>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3ef8:	b153      	cbz	r3, 3f10 <mutex_free_platform+0x28>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    3efa:	f013 0f02 	tst.w	r3, #2
    3efe:	d00d      	beq.n	3f1c <mutex_free_platform+0x34>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    3f00:	4621      	mov	r1, r4
    3f02:	4809      	ldr	r0, [pc, #36]	; (3f28 <mutex_free_platform+0x40>)
    3f04:	f007 f986 	bl	b214 <k_mem_slab_free>
        mutex->mutex = NULL;
    3f08:	2300      	movs	r3, #0
    3f0a:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    3f0c:	2300      	movs	r3, #0
    3f0e:	6063      	str	r3, [r4, #4]
}
    3f10:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    3f12:	4b06      	ldr	r3, [pc, #24]	; (3f2c <mutex_free_platform+0x44>)
    3f14:	685b      	ldr	r3, [r3, #4]
    3f16:	4806      	ldr	r0, [pc, #24]	; (3f30 <mutex_free_platform+0x48>)
    3f18:	4798      	blx	r3
    3f1a:	e7e8      	b.n	3eee <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    3f1c:	2214      	movs	r2, #20
    3f1e:	2100      	movs	r1, #0
    3f20:	6820      	ldr	r0, [r4, #0]
    3f22:	f00b f99c 	bl	f25e <memset>
    3f26:	e7f1      	b.n	3f0c <mutex_free_platform+0x24>
    3f28:	20000a2c 	.word	0x20000a2c
    3f2c:	2000012c 	.word	0x2000012c
    3f30:	00010a60 	.word	0x00010a60

00003f34 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3f34:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    3f36:	4604      	mov	r4, r0
    3f38:	b178      	cbz	r0, 3f5a <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    3f3a:	6863      	ldr	r3, [r4, #4]
    3f3c:	2b04      	cmp	r3, #4
    3f3e:	d00b      	beq.n	3f58 <mutex_init_platform+0x24>
    3f40:	2b08      	cmp	r3, #8
    3f42:	d009      	beq.n	3f58 <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    3f44:	b90b      	cbnz	r3, 3f4a <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
    3f46:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    3f48:	b163      	cbz	r3, 3f64 <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
    3f4a:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    3f4c:	f00b ff05 	bl	fd5a <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    3f50:	6863      	ldr	r3, [r4, #4]
    3f52:	f043 0301 	orr.w	r3, r3, #1
    3f56:	6063      	str	r3, [r4, #4]
}
    3f58:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    3f5a:	4b0f      	ldr	r3, [pc, #60]	; (3f98 <mutex_init_platform+0x64>)
    3f5c:	685b      	ldr	r3, [r3, #4]
    3f5e:	480f      	ldr	r0, [pc, #60]	; (3f9c <mutex_init_platform+0x68>)
    3f60:	4798      	blx	r3
    3f62:	e7ea      	b.n	3f3a <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    3f64:	f04f 32ff 	mov.w	r2, #4294967295
    3f68:	f04f 33ff 	mov.w	r3, #4294967295
    3f6c:	4621      	mov	r1, r4
    3f6e:	480c      	ldr	r0, [pc, #48]	; (3fa0 <mutex_init_platform+0x6c>)
    3f70:	f007 f8da 	bl	b128 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    3f74:	b908      	cbnz	r0, 3f7a <mutex_init_platform+0x46>
    3f76:	6823      	ldr	r3, [r4, #0]
    3f78:	b91b      	cbnz	r3, 3f82 <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
    3f7a:	4b07      	ldr	r3, [pc, #28]	; (3f98 <mutex_init_platform+0x64>)
    3f7c:	685b      	ldr	r3, [r3, #4]
    3f7e:	4809      	ldr	r0, [pc, #36]	; (3fa4 <mutex_init_platform+0x70>)
    3f80:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    3f82:	2214      	movs	r2, #20
    3f84:	2100      	movs	r1, #0
    3f86:	6820      	ldr	r0, [r4, #0]
    3f88:	f00b f969 	bl	f25e <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    3f8c:	6863      	ldr	r3, [r4, #4]
    3f8e:	f043 0302 	orr.w	r3, r3, #2
    3f92:	6063      	str	r3, [r4, #4]
    3f94:	e7d9      	b.n	3f4a <mutex_init_platform+0x16>
    3f96:	bf00      	nop
    3f98:	2000012c 	.word	0x2000012c
    3f9c:	00010a60 	.word	0x00010a60
    3fa0:	20000a2c 	.word	0x20000a2c
    3fa4:	00010a88 	.word	0x00010a88

00003fa8 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    3fa8:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    3faa:	2340      	movs	r3, #64	; 0x40
    3fac:	2214      	movs	r2, #20
    3fae:	4904      	ldr	r1, [pc, #16]	; (3fc0 <nrf_cc3xx_platform_mutex_init+0x18>)
    3fb0:	4804      	ldr	r0, [pc, #16]	; (3fc4 <nrf_cc3xx_platform_mutex_init+0x1c>)
    3fb2:	f00b fe7e 	bl	fcb2 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    3fb6:	4904      	ldr	r1, [pc, #16]	; (3fc8 <nrf_cc3xx_platform_mutex_init+0x20>)
    3fb8:	4804      	ldr	r0, [pc, #16]	; (3fcc <nrf_cc3xx_platform_mutex_init+0x24>)
    3fba:	f00a fbb9 	bl	e730 <nrf_cc3xx_platform_set_mutexes>
}
    3fbe:	bd08      	pop	{r3, pc}
    3fc0:	20000a4c 	.word	0x20000a4c
    3fc4:	20000a2c 	.word	0x20000a2c
    3fc8:	00010ac8 	.word	0x00010ac8
    3fcc:	00010ab8 	.word	0x00010ab8

00003fd0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    3fd0:	4901      	ldr	r1, [pc, #4]	; (3fd8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    3fd2:	2210      	movs	r2, #16
	str	r2, [r1]
    3fd4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    3fd6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    3fd8:	e000ed10 	.word	0xe000ed10

00003fdc <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    3fdc:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    3fde:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    3fe0:	f380 8811 	msr	BASEPRI, r0
	isb
    3fe4:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    3fe8:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    3fec:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    3fee:	b662      	cpsie	i
	isb
    3ff0:	f3bf 8f6f 	isb	sy

	bx	lr
    3ff4:	4770      	bx	lr
    3ff6:	bf00      	nop

00003ff8 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    3ff8:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    3ffa:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    3ffc:	f381 8811 	msr	BASEPRI, r1

	wfe
    4000:	bf20      	wfe

	msr	BASEPRI, r0
    4002:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    4006:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    4008:	4770      	bx	lr
    400a:	bf00      	nop

0000400c <esf_dump>:
#include <kernel_arch_data.h>
#include <zephyr/logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
    400c:	b5f0      	push	{r4, r5, r6, r7, lr}
    400e:	b083      	sub	sp, #12
    4010:	af00      	add	r7, sp, #0
    4012:	4604      	mov	r4, r0
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    4014:	f8d0 c000 	ldr.w	ip, [r0]
    4018:	6845      	ldr	r5, [r0, #4]
    401a:	6880      	ldr	r0, [r0, #8]
    401c:	466e      	mov	r6, sp
    401e:	b08a      	sub	sp, #40	; 0x28
    4020:	466b      	mov	r3, sp
    4022:	f113 0210 	adds.w	r2, r3, #16
    4026:	f000 80f0 	beq.w	420a <esf_dump+0x1fe>
    402a:	2114      	movs	r1, #20
    402c:	b12a      	cbz	r2, 403a <esf_dump+0x2e>
    402e:	2904      	cmp	r1, #4
    4030:	dd03      	ble.n	403a <esf_dump+0x2e>
    4032:	f8df e208 	ldr.w	lr, [pc, #520]	; 423c <esf_dump+0x230>
    4036:	f8c3 e014 	str.w	lr, [r3, #20]
    403a:	b11a      	cbz	r2, 4044 <esf_dump+0x38>
    403c:	2908      	cmp	r1, #8
    403e:	dd01      	ble.n	4044 <esf_dump+0x38>
    4040:	f8c3 c018 	str.w	ip, [r3, #24]
    4044:	b112      	cbz	r2, 404c <esf_dump+0x40>
    4046:	290c      	cmp	r1, #12
    4048:	dd00      	ble.n	404c <esf_dump+0x40>
    404a:	61dd      	str	r5, [r3, #28]
    404c:	b112      	cbz	r2, 4054 <esf_dump+0x48>
    404e:	2910      	cmp	r1, #16
    4050:	dd00      	ble.n	4054 <esf_dump+0x48>
    4052:	6218      	str	r0, [r3, #32]
    4054:	2913      	cmp	r1, #19
    4056:	f340 80db 	ble.w	4210 <esf_dump+0x204>
    405a:	2514      	movs	r5, #20
    405c:	b13a      	cbz	r2, 406e <esf_dump+0x62>
    405e:	2105      	movs	r1, #5
    4060:	7139      	strb	r1, [r7, #4]
    4062:	2100      	movs	r1, #0
    4064:	7179      	strb	r1, [r7, #5]
    4066:	71b9      	strb	r1, [r7, #6]
    4068:	71f9      	strb	r1, [r7, #7]
    406a:	6878      	ldr	r0, [r7, #4]
    406c:	6118      	str	r0, [r3, #16]
    406e:	2100      	movs	r1, #0
    4070:	f36f 0100 	bfc	r1, #0, #1
    4074:	f36f 0141 	bfc	r1, #1, #1
    4078:	f36f 0182 	bfc	r1, #2, #1
    407c:	f36f 01c5 	bfc	r1, #3, #3
    4080:	2301      	movs	r3, #1
    4082:	f363 1188 	bfi	r1, r3, #6, #3
    4086:	f405 757d 	and.w	r5, r5, #1012	; 0x3f4
    408a:	f365 2152 	bfi	r1, r5, #9, #10
    408e:	f36f 41de 	bfc	r1, #19, #12
    4092:	f36f 71df 	bfc	r1, #31, #1
    4096:	2300      	movs	r3, #0
    4098:	4869      	ldr	r0, [pc, #420]	; (4240 <esf_dump+0x234>)
    409a:	f7ff f9a7 	bl	33ec <z_impl_z_log_msg_static_create>
    409e:	46b5      	mov	sp, r6
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    40a0:	f8d4 c00c 	ldr.w	ip, [r4, #12]
    40a4:	6926      	ldr	r6, [r4, #16]
    40a6:	6960      	ldr	r0, [r4, #20]
    40a8:	466d      	mov	r5, sp
    40aa:	b08a      	sub	sp, #40	; 0x28
    40ac:	466b      	mov	r3, sp
    40ae:	f113 0210 	adds.w	r2, r3, #16
    40b2:	f000 80b0 	beq.w	4216 <esf_dump+0x20a>
    40b6:	2114      	movs	r1, #20
    40b8:	b12a      	cbz	r2, 40c6 <esf_dump+0xba>
    40ba:	2904      	cmp	r1, #4
    40bc:	dd03      	ble.n	40c6 <esf_dump+0xba>
    40be:	f8df e184 	ldr.w	lr, [pc, #388]	; 4244 <esf_dump+0x238>
    40c2:	f8c3 e014 	str.w	lr, [r3, #20]
    40c6:	b11a      	cbz	r2, 40d0 <esf_dump+0xc4>
    40c8:	2908      	cmp	r1, #8
    40ca:	dd01      	ble.n	40d0 <esf_dump+0xc4>
    40cc:	f8c3 c018 	str.w	ip, [r3, #24]
    40d0:	b112      	cbz	r2, 40d8 <esf_dump+0xcc>
    40d2:	290c      	cmp	r1, #12
    40d4:	dd00      	ble.n	40d8 <esf_dump+0xcc>
    40d6:	61de      	str	r6, [r3, #28]
    40d8:	b112      	cbz	r2, 40e0 <esf_dump+0xd4>
    40da:	2910      	cmp	r1, #16
    40dc:	dd00      	ble.n	40e0 <esf_dump+0xd4>
    40de:	6218      	str	r0, [r3, #32]
    40e0:	2913      	cmp	r1, #19
    40e2:	f340 809b 	ble.w	421c <esf_dump+0x210>
    40e6:	f04f 0c14 	mov.w	ip, #20
    40ea:	b13a      	cbz	r2, 40fc <esf_dump+0xf0>
    40ec:	2105      	movs	r1, #5
    40ee:	7139      	strb	r1, [r7, #4]
    40f0:	2100      	movs	r1, #0
    40f2:	7179      	strb	r1, [r7, #5]
    40f4:	71b9      	strb	r1, [r7, #6]
    40f6:	71f9      	strb	r1, [r7, #7]
    40f8:	6878      	ldr	r0, [r7, #4]
    40fa:	6118      	str	r0, [r3, #16]
    40fc:	2100      	movs	r1, #0
    40fe:	f36f 0100 	bfc	r1, #0, #1
    4102:	f36f 0141 	bfc	r1, #1, #1
    4106:	f36f 0182 	bfc	r1, #2, #1
    410a:	f36f 01c5 	bfc	r1, #3, #3
    410e:	2301      	movs	r3, #1
    4110:	f363 1188 	bfi	r1, r3, #6, #3
    4114:	f40c 7c7d 	and.w	ip, ip, #1012	; 0x3f4
    4118:	f36c 2152 	bfi	r1, ip, #9, #10
    411c:	f36f 41de 	bfc	r1, #19, #12
    4120:	f36f 71df 	bfc	r1, #31, #1
    4124:	2300      	movs	r3, #0
    4126:	4846      	ldr	r0, [pc, #280]	; (4240 <esf_dump+0x234>)
    4128:	f7ff f960 	bl	33ec <z_impl_z_log_msg_static_create>
    412c:	46ad      	mov	sp, r5
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    412e:	69e0      	ldr	r0, [r4, #28]
    4130:	466d      	mov	r5, sp
    4132:	b088      	sub	sp, #32
    4134:	466b      	mov	r3, sp
    4136:	f113 0210 	adds.w	r2, r3, #16
    413a:	d072      	beq.n	4222 <esf_dump+0x216>
    413c:	210c      	movs	r1, #12
    413e:	b11a      	cbz	r2, 4148 <esf_dump+0x13c>
    4140:	2904      	cmp	r1, #4
    4142:	dd01      	ble.n	4148 <esf_dump+0x13c>
    4144:	4e40      	ldr	r6, [pc, #256]	; (4248 <esf_dump+0x23c>)
    4146:	615e      	str	r6, [r3, #20]
    4148:	b112      	cbz	r2, 4150 <esf_dump+0x144>
    414a:	2908      	cmp	r1, #8
    414c:	dd00      	ble.n	4150 <esf_dump+0x144>
    414e:	6198      	str	r0, [r3, #24]
    4150:	290b      	cmp	r1, #11
    4152:	dd69      	ble.n	4228 <esf_dump+0x21c>
    4154:	f04f 0c0c 	mov.w	ip, #12
    4158:	b13a      	cbz	r2, 416a <esf_dump+0x15e>
    415a:	2103      	movs	r1, #3
    415c:	7139      	strb	r1, [r7, #4]
    415e:	2100      	movs	r1, #0
    4160:	7179      	strb	r1, [r7, #5]
    4162:	71b9      	strb	r1, [r7, #6]
    4164:	71f9      	strb	r1, [r7, #7]
    4166:	6878      	ldr	r0, [r7, #4]
    4168:	6118      	str	r0, [r3, #16]
    416a:	2100      	movs	r1, #0
    416c:	f36f 0100 	bfc	r1, #0, #1
    4170:	f36f 0141 	bfc	r1, #1, #1
    4174:	f36f 0182 	bfc	r1, #2, #1
    4178:	f36f 01c5 	bfc	r1, #3, #3
    417c:	2301      	movs	r3, #1
    417e:	f363 1188 	bfi	r1, r3, #6, #3
    4182:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
    4186:	f36c 2152 	bfi	r1, ip, #9, #10
    418a:	f36f 41de 	bfc	r1, #19, #12
    418e:	f36f 71df 	bfc	r1, #31, #1
    4192:	2300      	movs	r3, #0
    4194:	482a      	ldr	r0, [pc, #168]	; (4240 <esf_dump+0x234>)
    4196:	f7ff f929 	bl	33ec <z_impl_z_log_msg_static_create>
    419a:	46ad      	mov	sp, r5
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    419c:	69a0      	ldr	r0, [r4, #24]
    419e:	b088      	sub	sp, #32
    41a0:	466b      	mov	r3, sp
    41a2:	f113 0210 	adds.w	r2, r3, #16
    41a6:	d042      	beq.n	422e <esf_dump+0x222>
    41a8:	210c      	movs	r1, #12
    41aa:	b11a      	cbz	r2, 41b4 <esf_dump+0x1a8>
    41ac:	2904      	cmp	r1, #4
    41ae:	dd01      	ble.n	41b4 <esf_dump+0x1a8>
    41b0:	4c26      	ldr	r4, [pc, #152]	; (424c <esf_dump+0x240>)
    41b2:	615c      	str	r4, [r3, #20]
    41b4:	b112      	cbz	r2, 41bc <esf_dump+0x1b0>
    41b6:	2908      	cmp	r1, #8
    41b8:	dd00      	ble.n	41bc <esf_dump+0x1b0>
    41ba:	6198      	str	r0, [r3, #24]
    41bc:	290b      	cmp	r1, #11
    41be:	dd39      	ble.n	4234 <esf_dump+0x228>
    41c0:	240c      	movs	r4, #12
    41c2:	b13a      	cbz	r2, 41d4 <esf_dump+0x1c8>
    41c4:	2103      	movs	r1, #3
    41c6:	7139      	strb	r1, [r7, #4]
    41c8:	2100      	movs	r1, #0
    41ca:	7179      	strb	r1, [r7, #5]
    41cc:	71b9      	strb	r1, [r7, #6]
    41ce:	71f9      	strb	r1, [r7, #7]
    41d0:	6878      	ldr	r0, [r7, #4]
    41d2:	6118      	str	r0, [r3, #16]
    41d4:	2100      	movs	r1, #0
    41d6:	f36f 0100 	bfc	r1, #0, #1
    41da:	f36f 0141 	bfc	r1, #1, #1
    41de:	f36f 0182 	bfc	r1, #2, #1
    41e2:	f36f 01c5 	bfc	r1, #3, #3
    41e6:	2301      	movs	r3, #1
    41e8:	f363 1188 	bfi	r1, r3, #6, #3
    41ec:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
    41f0:	f364 2152 	bfi	r1, r4, #9, #10
    41f4:	f36f 41de 	bfc	r1, #19, #12
    41f8:	f36f 71df 	bfc	r1, #31, #1
    41fc:	2300      	movs	r3, #0
    41fe:	4810      	ldr	r0, [pc, #64]	; (4240 <esf_dump+0x234>)
    4200:	f7ff f8f4 	bl	33ec <z_impl_z_log_msg_static_create>
		esf->basic.pc);
}
    4204:	370c      	adds	r7, #12
    4206:	46bd      	mov	sp, r7
    4208:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    420a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    420e:	e70d      	b.n	402c <esf_dump+0x20>
    4210:	f06f 051b 	mvn.w	r5, #27
    4214:	e722      	b.n	405c <esf_dump+0x50>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    4216:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    421a:	e74d      	b.n	40b8 <esf_dump+0xac>
    421c:	f06f 0c1b 	mvn.w	ip, #27
    4220:	e763      	b.n	40ea <esf_dump+0xde>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    4222:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    4226:	e78a      	b.n	413e <esf_dump+0x132>
    4228:	f06f 0c1b 	mvn.w	ip, #27
    422c:	e794      	b.n	4158 <esf_dump+0x14c>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    422e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    4232:	e7ba      	b.n	41aa <esf_dump+0x19e>
    4234:	f06f 041b 	mvn.w	r4, #27
    4238:	e7c3      	b.n	41c2 <esf_dump+0x1b6>
    423a:	bf00      	nop
    423c:	00010adc 	.word	0x00010adc
    4240:	0001016c 	.word	0x0001016c
    4244:	00010b0c 	.word	0x00010b0c
    4248:	00010b3c 	.word	0x00010b3c
    424c:	00010b4c 	.word	0x00010b4c

00004250 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    4250:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    4252:	2800      	cmp	r0, #0
    4254:	db07      	blt.n	4266 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4256:	f000 021f 	and.w	r2, r0, #31
    425a:	0940      	lsrs	r0, r0, #5
    425c:	2301      	movs	r3, #1
    425e:	4093      	lsls	r3, r2
    4260:	4a01      	ldr	r2, [pc, #4]	; (4268 <arch_irq_enable+0x18>)
    4262:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
    4266:	4770      	bx	lr
    4268:	e000e100 	.word	0xe000e100

0000426c <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    426c:	0942      	lsrs	r2, r0, #5
    426e:	4b05      	ldr	r3, [pc, #20]	; (4284 <arch_irq_is_enabled+0x18>)
    4270:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    4274:	f000 001f 	and.w	r0, r0, #31
    4278:	2301      	movs	r3, #1
    427a:	fa03 f000 	lsl.w	r0, r3, r0
}
    427e:	4010      	ands	r0, r2
    4280:	4770      	bx	lr
    4282:	bf00      	nop
    4284:	e000e100 	.word	0xe000e100

00004288 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    4288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    428a:	4604      	mov	r4, r0
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
		} else {
			/* Use caller supplied prio level as-is */
		}
	} else {
		prio += _IRQ_PRIO_OFFSET;
    428c:	1c4d      	adds	r5, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    428e:	2d07      	cmp	r5, #7
    4290:	d80b      	bhi.n	42aa <z_arm_irq_priority_set+0x22>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    4292:	b260      	sxtb	r0, r4
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    4294:	2800      	cmp	r0, #0
    4296:	db1b      	blt.n	42d0 <z_arm_irq_priority_set+0x48>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4298:	016d      	lsls	r5, r5, #5
    429a:	b2ed      	uxtb	r5, r5
    429c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    42a0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    42a4:	f880 5300 	strb.w	r5, [r0, #768]	; 0x300
}
    42a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    42aa:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    42ac:	4f0c      	ldr	r7, [pc, #48]	; (42e0 <z_arm_irq_priority_set+0x58>)
    42ae:	235b      	movs	r3, #91	; 0x5b
    42b0:	463a      	mov	r2, r7
    42b2:	490c      	ldr	r1, [pc, #48]	; (42e4 <z_arm_irq_priority_set+0x5c>)
    42b4:	480c      	ldr	r0, [pc, #48]	; (42e8 <z_arm_irq_priority_set+0x60>)
    42b6:	f00a fd7c 	bl	edb2 <assert_print>
    42ba:	2307      	movs	r3, #7
    42bc:	4622      	mov	r2, r4
    42be:	4631      	mov	r1, r6
    42c0:	480a      	ldr	r0, [pc, #40]	; (42ec <z_arm_irq_priority_set+0x64>)
    42c2:	f00a fd76 	bl	edb2 <assert_print>
    42c6:	215b      	movs	r1, #91	; 0x5b
    42c8:	4638      	mov	r0, r7
    42ca:	f00a fd6b 	bl	eda4 <assert_post_action>
    42ce:	e7e0      	b.n	4292 <z_arm_irq_priority_set+0xa>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    42d0:	f000 000f 	and.w	r0, r0, #15
    42d4:	016d      	lsls	r5, r5, #5
    42d6:	b2ed      	uxtb	r5, r5
    42d8:	4b05      	ldr	r3, [pc, #20]	; (42f0 <z_arm_irq_priority_set+0x68>)
    42da:	541d      	strb	r5, [r3, r0]
}
    42dc:	e7e4      	b.n	42a8 <z_arm_irq_priority_set+0x20>
    42de:	bf00      	nop
    42e0:	00010b7c 	.word	0x00010b7c
    42e4:	00010bb4 	.word	0x00010bb4
    42e8:	00010450 	.word	0x00010450
    42ec:	00010bd0 	.word	0x00010bd0
    42f0:	e000ed14 	.word	0xe000ed14

000042f4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    42f4:	bf30      	wfi
    b z_SysNmiOnReset
    42f6:	f7ff bffd 	b.w	42f4 <z_SysNmiOnReset>
    42fa:	bf00      	nop

000042fc <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    42fc:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    42fe:	4b0b      	ldr	r3, [pc, #44]	; (432c <z_arm_prep_c+0x30>)
    4300:	4a0b      	ldr	r2, [pc, #44]	; (4330 <z_arm_prep_c+0x34>)
    4302:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    4306:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    4308:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    430c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    4310:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    4314:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    4318:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    431c:	f006 fe32 	bl	af84 <z_bss_zero>
	z_data_copy();
    4320:	f009 fc78 	bl	dc14 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    4324:	f000 fffa 	bl	531c <z_arm_interrupt_init>
	z_cstart();
    4328:	f006 fe8a 	bl	b040 <z_cstart>
    432c:	e000ed00 	.word	0xe000ed00
    4330:	00000000 	.word	0x00000000

00004334 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    4334:	4a0a      	ldr	r2, [pc, #40]	; (4360 <arch_swap+0x2c>)
    4336:	6893      	ldr	r3, [r2, #8]
    4338:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    433c:	4909      	ldr	r1, [pc, #36]	; (4364 <arch_swap+0x30>)
    433e:	6809      	ldr	r1, [r1, #0]
    4340:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4344:	4908      	ldr	r1, [pc, #32]	; (4368 <arch_swap+0x34>)
    4346:	684b      	ldr	r3, [r1, #4]
    4348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    434c:	604b      	str	r3, [r1, #4]
    434e:	2300      	movs	r3, #0
    4350:	f383 8811 	msr	BASEPRI, r3
    4354:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    4358:	6893      	ldr	r3, [r2, #8]
}
    435a:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    435e:	4770      	bx	lr
    4360:	20001090 	.word	0x20001090
    4364:	00012324 	.word	0x00012324
    4368:	e000ed00 	.word	0xe000ed00

0000436c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    436c:	4913      	ldr	r1, [pc, #76]	; (43bc <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    436e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    4370:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    4374:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    4376:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    437a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    437e:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    4380:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    4384:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    4388:	4f0d      	ldr	r7, [pc, #52]	; (43c0 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    438a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    438e:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    4390:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    4392:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    4394:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    4398:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    439a:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    439e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    43a2:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    43a4:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    43a6:	f001 f869 	bl	547c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    43aa:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    43ae:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    43b2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    43b6:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    43ba:	4770      	bx	lr
    ldr r1, =_kernel
    43bc:	20001090 	.word	0x20001090
    ldr v4, =_SCS_ICSR
    43c0:	e000ed04 	.word	0xe000ed04

000043c4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    43c4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    43c8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    43ca:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    43ce:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    43d2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    43d4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    43d8:	2902      	cmp	r1, #2
    beq _oops
    43da:	d0ff      	beq.n	43dc <_oops>

000043dc <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    43dc:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    43de:	f00a fe79 	bl	f0d4 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    43e2:	bd01      	pop	{r0, pc}

000043e4 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    43e4:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    43e6:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    43ea:	490e      	ldr	r1, [pc, #56]	; (4424 <arch_new_thread+0x40>)
    43ec:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    43f0:	f021 0101 	bic.w	r1, r1, #1
    43f4:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    43f8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    43fc:	9b01      	ldr	r3, [sp, #4]
    43fe:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    4402:	9b02      	ldr	r3, [sp, #8]
    4404:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    4408:	9b03      	ldr	r3, [sp, #12]
    440a:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    440e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    4412:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe = (struct __basic_sf *)
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
    4416:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    4418:	2300      	movs	r3, #0
    441a:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    441e:	bc10      	pop	{r4}
    4420:	4770      	bx	lr
    4422:	bf00      	nop
    4424:	0000ec65 	.word	0x0000ec65

00004428 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    4428:	4b12      	ldr	r3, [pc, #72]	; (4474 <z_check_thread_stack_fail+0x4c>)
    442a:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
    442c:	b302      	cbz	r2, 4470 <z_check_thread_stack_fail+0x48>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    442e:	f110 0f16 	cmn.w	r0, #22
    4432:	d011      	beq.n	4458 <z_check_thread_stack_fail+0x30>
    4434:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    4438:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
    443c:	4584      	cmp	ip, r0
    443e:	d805      	bhi.n	444c <z_check_thread_stack_fail+0x24>
    4440:	4283      	cmp	r3, r0
    4442:	d905      	bls.n	4450 <z_check_thread_stack_fail+0x28>
    4444:	428b      	cmp	r3, r1
    4446:	d805      	bhi.n	4454 <z_check_thread_stack_fail+0x2c>
    4448:	2100      	movs	r1, #0
    444a:	e00b      	b.n	4464 <z_check_thread_stack_fail+0x3c>
    444c:	2100      	movs	r1, #0
    444e:	e009      	b.n	4464 <z_check_thread_stack_fail+0x3c>
    4450:	2100      	movs	r1, #0
    4452:	e007      	b.n	4464 <z_check_thread_stack_fail+0x3c>
    4454:	2101      	movs	r1, #1
    4456:	e005      	b.n	4464 <z_check_thread_stack_fail+0x3c>
    4458:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    445c:	428b      	cmp	r3, r1
    445e:	bf94      	ite	ls
    4460:	2100      	movls	r1, #0
    4462:	2101      	movhi	r1, #1
    4464:	b909      	cbnz	r1, 446a <z_check_thread_stack_fail+0x42>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    4466:	2000      	movs	r0, #0
}
    4468:	4770      	bx	lr
		return thread->stack_info.start;
    446a:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    446e:	4770      	bx	lr
		return 0;
    4470:	2000      	movs	r0, #0
    4472:	4770      	bx	lr
    4474:	20001090 	.word	0x20001090

00004478 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    4478:	b508      	push	{r3, lr}
    447a:	460d      	mov	r5, r1
    447c:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    447e:	4b08      	ldr	r3, [pc, #32]	; (44a0 <arch_switch_to_main_thread+0x28>)
    4480:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    4482:	f000 fffb 	bl	547c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    4486:	4620      	mov	r0, r4
    4488:	f385 8809 	msr	PSP, r5
    448c:	2100      	movs	r1, #0
    448e:	b663      	cpsie	if
    4490:	f381 8811 	msr	BASEPRI, r1
    4494:	f3bf 8f6f 	isb	sy
    4498:	2200      	movs	r2, #0
    449a:	2300      	movs	r3, #0
    449c:	f00a fbe2 	bl	ec64 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    44a0:	20001090 	.word	0x20001090

000044a4 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    44a4:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    44a6:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    44a8:	4a0b      	ldr	r2, [pc, #44]	; (44d8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    44aa:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    44ac:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    44ae:	bf1e      	ittt	ne
	movne	r1, #0
    44b0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    44b2:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    44b4:	f00b fc35 	blne	fd22 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    44b8:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    44ba:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    44be:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    44c2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    44c6:	4905      	ldr	r1, [pc, #20]	; (44dc <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    44c8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    44ca:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    44cc:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    44ce:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    44d2:	4903      	ldr	r1, [pc, #12]	; (44e0 <_isr_wrapper+0x3c>)
	bx r1
    44d4:	4708      	bx	r1
    44d6:	0000      	.short	0x0000
	ldr r2, =_kernel
    44d8:	20001090 	.word	0x20001090
	ldr r1, =_sw_isr_table
    44dc:	0000ff80 	.word	0x0000ff80
	ldr r1, =z_arm_int_exit
    44e0:	000044e5 	.word	0x000044e5

000044e4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    44e4:	4b04      	ldr	r3, [pc, #16]	; (44f8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    44e6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    44e8:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    44ea:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    44ec:	d003      	beq.n	44f6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    44ee:	4903      	ldr	r1, [pc, #12]	; (44fc <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    44f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    44f4:	600a      	str	r2, [r1, #0]

000044f6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    44f6:	4770      	bx	lr
	ldr r3, =_kernel
    44f8:	20001090 	.word	0x20001090
	ldr r1, =_SCS_ICSR
    44fc:	e000ed04 	.word	0xe000ed04

00004500 <bus_fault>:
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    4500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4504:	b0ac      	sub	sp, #176	; 0xb0
    4506:	af00      	add	r7, sp, #0
    4508:	4605      	mov	r5, r0
    450a:	460e      	mov	r6, r1
    450c:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    450e:	4bba      	ldr	r3, [pc, #744]	; (47f8 <bus_fault+0x2f8>)
    4510:	61fb      	str	r3, [r7, #28]
    4512:	2302      	movs	r3, #2
    4514:	713b      	strb	r3, [r7, #4]
    4516:	2300      	movs	r3, #0
    4518:	717b      	strb	r3, [r7, #5]
    451a:	71bb      	strb	r3, [r7, #6]
    451c:	71fb      	strb	r3, [r7, #7]
    451e:	687a      	ldr	r2, [r7, #4]
    4520:	61ba      	str	r2, [r7, #24]
    4522:	4619      	mov	r1, r3
    4524:	f363 0100 	bfi	r1, r3, #0, #1
    4528:	f363 0141 	bfi	r1, r3, #1, #1
    452c:	f363 0182 	bfi	r1, r3, #2, #1
    4530:	f363 01c5 	bfi	r1, r3, #3, #3
    4534:	2201      	movs	r2, #1
    4536:	f362 1188 	bfi	r1, r2, #6, #3
    453a:	2208      	movs	r2, #8
    453c:	f362 2152 	bfi	r1, r2, #9, #10
    4540:	f363 41de 	bfi	r1, r3, #19, #12
    4544:	f363 71df 	bfi	r1, r3, #31, #1
    4548:	f107 0218 	add.w	r2, r7, #24
    454c:	48ab      	ldr	r0, [pc, #684]	; (47fc <bus_fault+0x2fc>)
    454e:	f7fe ff4d 	bl	33ec <z_impl_z_log_msg_static_create>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    4552:	4bab      	ldr	r3, [pc, #684]	; (4800 <bus_fault+0x300>)
    4554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4556:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    455a:	d12a      	bne.n	45b2 <bus_fault+0xb2>
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    455c:	4ba8      	ldr	r3, [pc, #672]	; (4800 <bus_fault+0x300>)
    455e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4560:	f413 6f00 	tst.w	r3, #2048	; 0x800
    4564:	d148      	bne.n	45f8 <bus_fault+0xf8>
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    4566:	4ba6      	ldr	r3, [pc, #664]	; (4800 <bus_fault+0x300>)
    4568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    456a:	f413 7f00 	tst.w	r3, #512	; 0x200
    456e:	d166      	bne.n	463e <bus_fault+0x13e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    4570:	4ba3      	ldr	r3, [pc, #652]	; (4800 <bus_fault+0x300>)
    4572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4574:	f413 6f80 	tst.w	r3, #1024	; 0x400
    4578:	f040 80d1 	bne.w	471e <bus_fault+0x21e>
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    457c:	4ba0      	ldr	r3, [pc, #640]	; (4800 <bus_fault+0x300>)
    457e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4580:	f413 7f80 	tst.w	r3, #256	; 0x100
    4584:	f040 80ee 	bne.w	4764 <bus_fault+0x264>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    4588:	4b9d      	ldr	r3, [pc, #628]	; (4800 <bus_fault+0x300>)
    458a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    458c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    4590:	f040 810d 	bne.w	47ae <bus_fault+0x2ae>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    4594:	4a9a      	ldr	r2, [pc, #616]	; (4800 <bus_fault+0x300>)
    4596:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4598:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    459c:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    459e:	2101      	movs	r1, #1
    45a0:	4628      	mov	r0, r5
    45a2:	f00a fda9 	bl	f0f8 <memory_fault_recoverable>
    45a6:	7020      	strb	r0, [r4, #0]

	return reason;
}
    45a8:	2000      	movs	r0, #0
    45aa:	37b0      	adds	r7, #176	; 0xb0
    45ac:	46bd      	mov	sp, r7
    45ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Stacking error");
    45b2:	4b94      	ldr	r3, [pc, #592]	; (4804 <bus_fault+0x304>)
    45b4:	637b      	str	r3, [r7, #52]	; 0x34
    45b6:	2302      	movs	r3, #2
    45b8:	713b      	strb	r3, [r7, #4]
    45ba:	2300      	movs	r3, #0
    45bc:	717b      	strb	r3, [r7, #5]
    45be:	71bb      	strb	r3, [r7, #6]
    45c0:	71fb      	strb	r3, [r7, #7]
    45c2:	687a      	ldr	r2, [r7, #4]
    45c4:	633a      	str	r2, [r7, #48]	; 0x30
    45c6:	4619      	mov	r1, r3
    45c8:	f363 0100 	bfi	r1, r3, #0, #1
    45cc:	f363 0141 	bfi	r1, r3, #1, #1
    45d0:	f363 0182 	bfi	r1, r3, #2, #1
    45d4:	f363 01c5 	bfi	r1, r3, #3, #3
    45d8:	2201      	movs	r2, #1
    45da:	f362 1188 	bfi	r1, r2, #6, #3
    45de:	2208      	movs	r2, #8
    45e0:	f362 2152 	bfi	r1, r2, #9, #10
    45e4:	f363 41de 	bfi	r1, r3, #19, #12
    45e8:	f363 71df 	bfi	r1, r3, #31, #1
    45ec:	f107 0230 	add.w	r2, r7, #48	; 0x30
    45f0:	4882      	ldr	r0, [pc, #520]	; (47fc <bus_fault+0x2fc>)
    45f2:	f7fe fefb 	bl	33ec <z_impl_z_log_msg_static_create>
    45f6:	e7b1      	b.n	455c <bus_fault+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    45f8:	4b83      	ldr	r3, [pc, #524]	; (4808 <bus_fault+0x308>)
    45fa:	64fb      	str	r3, [r7, #76]	; 0x4c
    45fc:	2302      	movs	r3, #2
    45fe:	713b      	strb	r3, [r7, #4]
    4600:	2300      	movs	r3, #0
    4602:	717b      	strb	r3, [r7, #5]
    4604:	71bb      	strb	r3, [r7, #6]
    4606:	71fb      	strb	r3, [r7, #7]
    4608:	687a      	ldr	r2, [r7, #4]
    460a:	64ba      	str	r2, [r7, #72]	; 0x48
    460c:	4619      	mov	r1, r3
    460e:	f363 0100 	bfi	r1, r3, #0, #1
    4612:	f363 0141 	bfi	r1, r3, #1, #1
    4616:	f363 0182 	bfi	r1, r3, #2, #1
    461a:	f363 01c5 	bfi	r1, r3, #3, #3
    461e:	2201      	movs	r2, #1
    4620:	f362 1188 	bfi	r1, r2, #6, #3
    4624:	2208      	movs	r2, #8
    4626:	f362 2152 	bfi	r1, r2, #9, #10
    462a:	f363 41de 	bfi	r1, r3, #19, #12
    462e:	f363 71df 	bfi	r1, r3, #31, #1
    4632:	f107 0248 	add.w	r2, r7, #72	; 0x48
    4636:	4871      	ldr	r0, [pc, #452]	; (47fc <bus_fault+0x2fc>)
    4638:	f7fe fed8 	bl	33ec <z_impl_z_log_msg_static_create>
    463c:	e793      	b.n	4566 <bus_fault+0x66>
		PR_FAULT_INFO("  Precise data bus error");
    463e:	4b73      	ldr	r3, [pc, #460]	; (480c <bus_fault+0x30c>)
    4640:	667b      	str	r3, [r7, #100]	; 0x64
    4642:	2302      	movs	r3, #2
    4644:	713b      	strb	r3, [r7, #4]
    4646:	2300      	movs	r3, #0
    4648:	717b      	strb	r3, [r7, #5]
    464a:	71bb      	strb	r3, [r7, #6]
    464c:	71fb      	strb	r3, [r7, #7]
    464e:	687a      	ldr	r2, [r7, #4]
    4650:	663a      	str	r2, [r7, #96]	; 0x60
    4652:	4619      	mov	r1, r3
    4654:	f363 0100 	bfi	r1, r3, #0, #1
    4658:	f363 0141 	bfi	r1, r3, #1, #1
    465c:	f363 0182 	bfi	r1, r3, #2, #1
    4660:	f363 01c5 	bfi	r1, r3, #3, #3
    4664:	2201      	movs	r2, #1
    4666:	f362 1188 	bfi	r1, r2, #6, #3
    466a:	2208      	movs	r2, #8
    466c:	f362 2152 	bfi	r1, r2, #9, #10
    4670:	f363 41de 	bfi	r1, r3, #19, #12
    4674:	f363 71df 	bfi	r1, r3, #31, #1
    4678:	f107 0260 	add.w	r2, r7, #96	; 0x60
    467c:	485f      	ldr	r0, [pc, #380]	; (47fc <bus_fault+0x2fc>)
    467e:	f7fe feb5 	bl	33ec <z_impl_z_log_msg_static_create>
		STORE_xFAR(bfar, SCB->BFAR);
    4682:	4b5f      	ldr	r3, [pc, #380]	; (4800 <bus_fault+0x300>)
    4684:	6b98      	ldr	r0, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    4686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4688:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    468c:	f43f af70 	beq.w	4570 <bus_fault+0x70>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    4690:	46e8      	mov	r8, sp
    4692:	b088      	sub	sp, #32
    4694:	466b      	mov	r3, sp
    4696:	f113 0210 	adds.w	r2, r3, #16
    469a:	d03a      	beq.n	4712 <bus_fault+0x212>
    469c:	210c      	movs	r1, #12
    469e:	b12a      	cbz	r2, 46ac <bus_fault+0x1ac>
    46a0:	2904      	cmp	r1, #4
    46a2:	dd03      	ble.n	46ac <bus_fault+0x1ac>
    46a4:	f8df c168 	ldr.w	ip, [pc, #360]	; 4810 <bus_fault+0x310>
    46a8:	f8c3 c014 	str.w	ip, [r3, #20]
    46ac:	b112      	cbz	r2, 46b4 <bus_fault+0x1b4>
    46ae:	2908      	cmp	r1, #8
    46b0:	dd00      	ble.n	46b4 <bus_fault+0x1b4>
    46b2:	6198      	str	r0, [r3, #24]
    46b4:	290b      	cmp	r1, #11
    46b6:	dd2f      	ble.n	4718 <bus_fault+0x218>
    46b8:	f04f 0c0c 	mov.w	ip, #12
    46bc:	b13a      	cbz	r2, 46ce <bus_fault+0x1ce>
    46be:	2103      	movs	r1, #3
    46c0:	7139      	strb	r1, [r7, #4]
    46c2:	2100      	movs	r1, #0
    46c4:	7179      	strb	r1, [r7, #5]
    46c6:	71b9      	strb	r1, [r7, #6]
    46c8:	71f9      	strb	r1, [r7, #7]
    46ca:	6878      	ldr	r0, [r7, #4]
    46cc:	6118      	str	r0, [r3, #16]
    46ce:	2100      	movs	r1, #0
    46d0:	f36f 0100 	bfc	r1, #0, #1
    46d4:	f36f 0141 	bfc	r1, #1, #1
    46d8:	f36f 0182 	bfc	r1, #2, #1
    46dc:	f36f 01c5 	bfc	r1, #3, #3
    46e0:	2301      	movs	r3, #1
    46e2:	f363 1188 	bfi	r1, r3, #6, #3
    46e6:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
    46ea:	f363 2152 	bfi	r1, r3, #9, #10
    46ee:	f36f 41de 	bfc	r1, #19, #12
    46f2:	f36f 71df 	bfc	r1, #31, #1
    46f6:	2300      	movs	r3, #0
    46f8:	4840      	ldr	r0, [pc, #256]	; (47fc <bus_fault+0x2fc>)
    46fa:	f7fe fe77 	bl	33ec <z_impl_z_log_msg_static_create>
    46fe:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    4700:	2e00      	cmp	r6, #0
    4702:	f43f af35 	beq.w	4570 <bus_fault+0x70>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    4706:	4a3e      	ldr	r2, [pc, #248]	; (4800 <bus_fault+0x300>)
    4708:	6a93      	ldr	r3, [r2, #40]	; 0x28
    470a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    470e:	6293      	str	r3, [r2, #40]	; 0x28
    4710:	e72e      	b.n	4570 <bus_fault+0x70>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    4712:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    4716:	e7c2      	b.n	469e <bus_fault+0x19e>
    4718:	f06f 0c1b 	mvn.w	ip, #27
    471c:	e7ce      	b.n	46bc <bus_fault+0x1bc>
		PR_FAULT_INFO("  Imprecise data bus error");
    471e:	4b3d      	ldr	r3, [pc, #244]	; (4814 <bus_fault+0x314>)
    4720:	67fb      	str	r3, [r7, #124]	; 0x7c
    4722:	2302      	movs	r3, #2
    4724:	713b      	strb	r3, [r7, #4]
    4726:	2300      	movs	r3, #0
    4728:	717b      	strb	r3, [r7, #5]
    472a:	71bb      	strb	r3, [r7, #6]
    472c:	71fb      	strb	r3, [r7, #7]
    472e:	687a      	ldr	r2, [r7, #4]
    4730:	67ba      	str	r2, [r7, #120]	; 0x78
    4732:	4619      	mov	r1, r3
    4734:	f363 0100 	bfi	r1, r3, #0, #1
    4738:	f363 0141 	bfi	r1, r3, #1, #1
    473c:	f363 0182 	bfi	r1, r3, #2, #1
    4740:	f363 01c5 	bfi	r1, r3, #3, #3
    4744:	2201      	movs	r2, #1
    4746:	f362 1188 	bfi	r1, r2, #6, #3
    474a:	2208      	movs	r2, #8
    474c:	f362 2152 	bfi	r1, r2, #9, #10
    4750:	f363 41de 	bfi	r1, r3, #19, #12
    4754:	f363 71df 	bfi	r1, r3, #31, #1
    4758:	f107 0278 	add.w	r2, r7, #120	; 0x78
    475c:	4827      	ldr	r0, [pc, #156]	; (47fc <bus_fault+0x2fc>)
    475e:	f7fe fe45 	bl	33ec <z_impl_z_log_msg_static_create>
    4762:	e70b      	b.n	457c <bus_fault+0x7c>
		PR_FAULT_INFO("  Instruction bus error");
    4764:	4b2c      	ldr	r3, [pc, #176]	; (4818 <bus_fault+0x318>)
    4766:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    476a:	2302      	movs	r3, #2
    476c:	713b      	strb	r3, [r7, #4]
    476e:	2300      	movs	r3, #0
    4770:	717b      	strb	r3, [r7, #5]
    4772:	71bb      	strb	r3, [r7, #6]
    4774:	71fb      	strb	r3, [r7, #7]
    4776:	687a      	ldr	r2, [r7, #4]
    4778:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
    477c:	4619      	mov	r1, r3
    477e:	f363 0100 	bfi	r1, r3, #0, #1
    4782:	f363 0141 	bfi	r1, r3, #1, #1
    4786:	f363 0182 	bfi	r1, r3, #2, #1
    478a:	f363 01c5 	bfi	r1, r3, #3, #3
    478e:	2201      	movs	r2, #1
    4790:	f362 1188 	bfi	r1, r2, #6, #3
    4794:	2208      	movs	r2, #8
    4796:	f362 2152 	bfi	r1, r2, #9, #10
    479a:	f363 41de 	bfi	r1, r3, #19, #12
    479e:	f363 71df 	bfi	r1, r3, #31, #1
    47a2:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
    47a6:	4815      	ldr	r0, [pc, #84]	; (47fc <bus_fault+0x2fc>)
    47a8:	f7fe fe20 	bl	33ec <z_impl_z_log_msg_static_create>
    47ac:	e6f2      	b.n	4594 <bus_fault+0x94>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    47ae:	4b1b      	ldr	r3, [pc, #108]	; (481c <bus_fault+0x31c>)
    47b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    47b4:	2302      	movs	r3, #2
    47b6:	713b      	strb	r3, [r7, #4]
    47b8:	2300      	movs	r3, #0
    47ba:	717b      	strb	r3, [r7, #5]
    47bc:	71bb      	strb	r3, [r7, #6]
    47be:	71fb      	strb	r3, [r7, #7]
    47c0:	687a      	ldr	r2, [r7, #4]
    47c2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    47c6:	4619      	mov	r1, r3
    47c8:	f363 0100 	bfi	r1, r3, #0, #1
    47cc:	f363 0141 	bfi	r1, r3, #1, #1
    47d0:	f363 0182 	bfi	r1, r3, #2, #1
    47d4:	f363 01c5 	bfi	r1, r3, #3, #3
    47d8:	2201      	movs	r2, #1
    47da:	f362 1188 	bfi	r1, r2, #6, #3
    47de:	2208      	movs	r2, #8
    47e0:	f362 2152 	bfi	r1, r2, #9, #10
    47e4:	f363 41de 	bfi	r1, r3, #19, #12
    47e8:	f363 71df 	bfi	r1, r3, #31, #1
    47ec:	f107 0290 	add.w	r2, r7, #144	; 0x90
    47f0:	4802      	ldr	r0, [pc, #8]	; (47fc <bus_fault+0x2fc>)
    47f2:	f7fe fdfb 	bl	33ec <z_impl_z_log_msg_static_create>
    47f6:	e6cd      	b.n	4594 <bus_fault+0x94>
    47f8:	00010c10 	.word	0x00010c10
    47fc:	0001016c 	.word	0x0001016c
    4800:	e000ed00 	.word	0xe000ed00
    4804:	00010c28 	.word	0x00010c28
    4808:	00010c3c 	.word	0x00010c3c
    480c:	00010c50 	.word	0x00010c50
    4810:	00010c6c 	.word	0x00010c6c
    4814:	00010c84 	.word	0x00010c84
    4818:	00010ca0 	.word	0x00010ca0
    481c:	00010cb8 	.word	0x00010cb8

00004820 <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
    4820:	b500      	push	{lr}
    4822:	b0ad      	sub	sp, #180	; 0xb4
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    4824:	4b9a      	ldr	r3, [pc, #616]	; (4a90 <usage_fault+0x270>)
    4826:	9307      	str	r3, [sp, #28]
    4828:	2302      	movs	r3, #2
    482a:	f88d 3004 	strb.w	r3, [sp, #4]
    482e:	2300      	movs	r3, #0
    4830:	f88d 3005 	strb.w	r3, [sp, #5]
    4834:	f88d 3006 	strb.w	r3, [sp, #6]
    4838:	f88d 3007 	strb.w	r3, [sp, #7]
    483c:	9a01      	ldr	r2, [sp, #4]
    483e:	9206      	str	r2, [sp, #24]
    4840:	4619      	mov	r1, r3
    4842:	f363 0100 	bfi	r1, r3, #0, #1
    4846:	f363 0141 	bfi	r1, r3, #1, #1
    484a:	f363 0182 	bfi	r1, r3, #2, #1
    484e:	f363 01c5 	bfi	r1, r3, #3, #3
    4852:	2201      	movs	r2, #1
    4854:	f362 1188 	bfi	r1, r2, #6, #3
    4858:	2208      	movs	r2, #8
    485a:	f362 2152 	bfi	r1, r2, #9, #10
    485e:	f363 41de 	bfi	r1, r3, #19, #12
    4862:	f363 71df 	bfi	r1, r3, #31, #1
    4866:	aa06      	add	r2, sp, #24
    4868:	488a      	ldr	r0, [pc, #552]	; (4a94 <usage_fault+0x274>)
    486a:	f7fe fdbf 	bl	33ec <z_impl_z_log_msg_static_create>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    486e:	4b8a      	ldr	r3, [pc, #552]	; (4a98 <usage_fault+0x278>)
    4870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4872:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    4876:	d126      	bne.n	48c6 <usage_fault+0xa6>
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    4878:	4b87      	ldr	r3, [pc, #540]	; (4a98 <usage_fault+0x278>)
    487a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    487c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    4880:	d147      	bne.n	4912 <usage_fault+0xf2>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    4882:	4b85      	ldr	r3, [pc, #532]	; (4a98 <usage_fault+0x278>)
    4884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4886:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    488a:	d168      	bne.n	495e <usage_fault+0x13e>
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    488c:	4b82      	ldr	r3, [pc, #520]	; (4a98 <usage_fault+0x278>)
    488e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4890:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    4894:	f040 8089 	bne.w	49aa <usage_fault+0x18a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    4898:	4b7f      	ldr	r3, [pc, #508]	; (4a98 <usage_fault+0x278>)
    489a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    489c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    48a0:	f040 80a9 	bne.w	49f6 <usage_fault+0x1d6>
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    48a4:	4b7c      	ldr	r3, [pc, #496]	; (4a98 <usage_fault+0x278>)
    48a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    48a8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    48ac:	f040 80c9 	bne.w	4a42 <usage_fault+0x222>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    48b0:	4a79      	ldr	r2, [pc, #484]	; (4a98 <usage_fault+0x278>)
    48b2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    48b4:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    48b8:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    48bc:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    48be:	2000      	movs	r0, #0
    48c0:	b02d      	add	sp, #180	; 0xb4
    48c2:	f85d fb04 	ldr.w	pc, [sp], #4
		PR_FAULT_INFO("  Division by zero");
    48c6:	4b75      	ldr	r3, [pc, #468]	; (4a9c <usage_fault+0x27c>)
    48c8:	930d      	str	r3, [sp, #52]	; 0x34
    48ca:	2302      	movs	r3, #2
    48cc:	f88d 3004 	strb.w	r3, [sp, #4]
    48d0:	2300      	movs	r3, #0
    48d2:	f88d 3005 	strb.w	r3, [sp, #5]
    48d6:	f88d 3006 	strb.w	r3, [sp, #6]
    48da:	f88d 3007 	strb.w	r3, [sp, #7]
    48de:	9a01      	ldr	r2, [sp, #4]
    48e0:	920c      	str	r2, [sp, #48]	; 0x30
    48e2:	4619      	mov	r1, r3
    48e4:	f363 0100 	bfi	r1, r3, #0, #1
    48e8:	f363 0141 	bfi	r1, r3, #1, #1
    48ec:	f363 0182 	bfi	r1, r3, #2, #1
    48f0:	f363 01c5 	bfi	r1, r3, #3, #3
    48f4:	2201      	movs	r2, #1
    48f6:	f362 1188 	bfi	r1, r2, #6, #3
    48fa:	2208      	movs	r2, #8
    48fc:	f362 2152 	bfi	r1, r2, #9, #10
    4900:	f363 41de 	bfi	r1, r3, #19, #12
    4904:	f363 71df 	bfi	r1, r3, #31, #1
    4908:	aa0c      	add	r2, sp, #48	; 0x30
    490a:	4862      	ldr	r0, [pc, #392]	; (4a94 <usage_fault+0x274>)
    490c:	f7fe fd6e 	bl	33ec <z_impl_z_log_msg_static_create>
    4910:	e7b2      	b.n	4878 <usage_fault+0x58>
		PR_FAULT_INFO("  Unaligned memory access");
    4912:	4b63      	ldr	r3, [pc, #396]	; (4aa0 <usage_fault+0x280>)
    4914:	9313      	str	r3, [sp, #76]	; 0x4c
    4916:	2302      	movs	r3, #2
    4918:	f88d 3004 	strb.w	r3, [sp, #4]
    491c:	2300      	movs	r3, #0
    491e:	f88d 3005 	strb.w	r3, [sp, #5]
    4922:	f88d 3006 	strb.w	r3, [sp, #6]
    4926:	f88d 3007 	strb.w	r3, [sp, #7]
    492a:	9a01      	ldr	r2, [sp, #4]
    492c:	9212      	str	r2, [sp, #72]	; 0x48
    492e:	4619      	mov	r1, r3
    4930:	f363 0100 	bfi	r1, r3, #0, #1
    4934:	f363 0141 	bfi	r1, r3, #1, #1
    4938:	f363 0182 	bfi	r1, r3, #2, #1
    493c:	f363 01c5 	bfi	r1, r3, #3, #3
    4940:	2201      	movs	r2, #1
    4942:	f362 1188 	bfi	r1, r2, #6, #3
    4946:	2208      	movs	r2, #8
    4948:	f362 2152 	bfi	r1, r2, #9, #10
    494c:	f363 41de 	bfi	r1, r3, #19, #12
    4950:	f363 71df 	bfi	r1, r3, #31, #1
    4954:	aa12      	add	r2, sp, #72	; 0x48
    4956:	484f      	ldr	r0, [pc, #316]	; (4a94 <usage_fault+0x274>)
    4958:	f7fe fd48 	bl	33ec <z_impl_z_log_msg_static_create>
    495c:	e791      	b.n	4882 <usage_fault+0x62>
		PR_FAULT_INFO("  No coprocessor instructions");
    495e:	4b51      	ldr	r3, [pc, #324]	; (4aa4 <usage_fault+0x284>)
    4960:	9319      	str	r3, [sp, #100]	; 0x64
    4962:	2302      	movs	r3, #2
    4964:	f88d 3004 	strb.w	r3, [sp, #4]
    4968:	2300      	movs	r3, #0
    496a:	f88d 3005 	strb.w	r3, [sp, #5]
    496e:	f88d 3006 	strb.w	r3, [sp, #6]
    4972:	f88d 3007 	strb.w	r3, [sp, #7]
    4976:	9a01      	ldr	r2, [sp, #4]
    4978:	9218      	str	r2, [sp, #96]	; 0x60
    497a:	4619      	mov	r1, r3
    497c:	f363 0100 	bfi	r1, r3, #0, #1
    4980:	f363 0141 	bfi	r1, r3, #1, #1
    4984:	f363 0182 	bfi	r1, r3, #2, #1
    4988:	f363 01c5 	bfi	r1, r3, #3, #3
    498c:	2201      	movs	r2, #1
    498e:	f362 1188 	bfi	r1, r2, #6, #3
    4992:	2208      	movs	r2, #8
    4994:	f362 2152 	bfi	r1, r2, #9, #10
    4998:	f363 41de 	bfi	r1, r3, #19, #12
    499c:	f363 71df 	bfi	r1, r3, #31, #1
    49a0:	aa18      	add	r2, sp, #96	; 0x60
    49a2:	483c      	ldr	r0, [pc, #240]	; (4a94 <usage_fault+0x274>)
    49a4:	f7fe fd22 	bl	33ec <z_impl_z_log_msg_static_create>
    49a8:	e770      	b.n	488c <usage_fault+0x6c>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    49aa:	4b3f      	ldr	r3, [pc, #252]	; (4aa8 <usage_fault+0x288>)
    49ac:	931f      	str	r3, [sp, #124]	; 0x7c
    49ae:	2302      	movs	r3, #2
    49b0:	f88d 3004 	strb.w	r3, [sp, #4]
    49b4:	2300      	movs	r3, #0
    49b6:	f88d 3005 	strb.w	r3, [sp, #5]
    49ba:	f88d 3006 	strb.w	r3, [sp, #6]
    49be:	f88d 3007 	strb.w	r3, [sp, #7]
    49c2:	9a01      	ldr	r2, [sp, #4]
    49c4:	921e      	str	r2, [sp, #120]	; 0x78
    49c6:	4619      	mov	r1, r3
    49c8:	f363 0100 	bfi	r1, r3, #0, #1
    49cc:	f363 0141 	bfi	r1, r3, #1, #1
    49d0:	f363 0182 	bfi	r1, r3, #2, #1
    49d4:	f363 01c5 	bfi	r1, r3, #3, #3
    49d8:	2201      	movs	r2, #1
    49da:	f362 1188 	bfi	r1, r2, #6, #3
    49de:	2208      	movs	r2, #8
    49e0:	f362 2152 	bfi	r1, r2, #9, #10
    49e4:	f363 41de 	bfi	r1, r3, #19, #12
    49e8:	f363 71df 	bfi	r1, r3, #31, #1
    49ec:	aa1e      	add	r2, sp, #120	; 0x78
    49ee:	4829      	ldr	r0, [pc, #164]	; (4a94 <usage_fault+0x274>)
    49f0:	f7fe fcfc 	bl	33ec <z_impl_z_log_msg_static_create>
    49f4:	e750      	b.n	4898 <usage_fault+0x78>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    49f6:	4b2d      	ldr	r3, [pc, #180]	; (4aac <usage_fault+0x28c>)
    49f8:	9325      	str	r3, [sp, #148]	; 0x94
    49fa:	2302      	movs	r3, #2
    49fc:	f88d 3004 	strb.w	r3, [sp, #4]
    4a00:	2300      	movs	r3, #0
    4a02:	f88d 3005 	strb.w	r3, [sp, #5]
    4a06:	f88d 3006 	strb.w	r3, [sp, #6]
    4a0a:	f88d 3007 	strb.w	r3, [sp, #7]
    4a0e:	9a01      	ldr	r2, [sp, #4]
    4a10:	9224      	str	r2, [sp, #144]	; 0x90
    4a12:	4619      	mov	r1, r3
    4a14:	f363 0100 	bfi	r1, r3, #0, #1
    4a18:	f363 0141 	bfi	r1, r3, #1, #1
    4a1c:	f363 0182 	bfi	r1, r3, #2, #1
    4a20:	f363 01c5 	bfi	r1, r3, #3, #3
    4a24:	2201      	movs	r2, #1
    4a26:	f362 1188 	bfi	r1, r2, #6, #3
    4a2a:	2208      	movs	r2, #8
    4a2c:	f362 2152 	bfi	r1, r2, #9, #10
    4a30:	f363 41de 	bfi	r1, r3, #19, #12
    4a34:	f363 71df 	bfi	r1, r3, #31, #1
    4a38:	aa24      	add	r2, sp, #144	; 0x90
    4a3a:	4816      	ldr	r0, [pc, #88]	; (4a94 <usage_fault+0x274>)
    4a3c:	f7fe fcd6 	bl	33ec <z_impl_z_log_msg_static_create>
    4a40:	e730      	b.n	48a4 <usage_fault+0x84>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    4a42:	4b1b      	ldr	r3, [pc, #108]	; (4ab0 <usage_fault+0x290>)
    4a44:	932b      	str	r3, [sp, #172]	; 0xac
    4a46:	2302      	movs	r3, #2
    4a48:	f88d 3004 	strb.w	r3, [sp, #4]
    4a4c:	2300      	movs	r3, #0
    4a4e:	f88d 3005 	strb.w	r3, [sp, #5]
    4a52:	f88d 3006 	strb.w	r3, [sp, #6]
    4a56:	f88d 3007 	strb.w	r3, [sp, #7]
    4a5a:	9a01      	ldr	r2, [sp, #4]
    4a5c:	922a      	str	r2, [sp, #168]	; 0xa8
    4a5e:	4619      	mov	r1, r3
    4a60:	f363 0100 	bfi	r1, r3, #0, #1
    4a64:	f363 0141 	bfi	r1, r3, #1, #1
    4a68:	f363 0182 	bfi	r1, r3, #2, #1
    4a6c:	f363 01c5 	bfi	r1, r3, #3, #3
    4a70:	2201      	movs	r2, #1
    4a72:	f362 1188 	bfi	r1, r2, #6, #3
    4a76:	2208      	movs	r2, #8
    4a78:	f362 2152 	bfi	r1, r2, #9, #10
    4a7c:	f363 41de 	bfi	r1, r3, #19, #12
    4a80:	f363 71df 	bfi	r1, r3, #31, #1
    4a84:	aa2a      	add	r2, sp, #168	; 0xa8
    4a86:	4803      	ldr	r0, [pc, #12]	; (4a94 <usage_fault+0x274>)
    4a88:	f7fe fcb0 	bl	33ec <z_impl_z_log_msg_static_create>
    4a8c:	e710      	b.n	48b0 <usage_fault+0x90>
    4a8e:	bf00      	nop
    4a90:	00010ce8 	.word	0x00010ce8
    4a94:	0001016c 	.word	0x0001016c
    4a98:	e000ed00 	.word	0xe000ed00
    4a9c:	00010d00 	.word	0x00010d00
    4aa0:	00010d14 	.word	0x00010d14
    4aa4:	00010d30 	.word	0x00010d30
    4aa8:	00010d50 	.word	0x00010d50
    4aac:	00010d78 	.word	0x00010d78
    4ab0:	00010d94 	.word	0x00010d94

00004ab4 <debug_monitor>:
 *
 * See z_arm_fault_dump() for example.
 *
 */
static void debug_monitor(z_arch_esf_t *esf, bool *recoverable)
{
    4ab4:	b500      	push	{lr}
    4ab6:	b089      	sub	sp, #36	; 0x24
	*recoverable = false;
    4ab8:	2300      	movs	r3, #0
    4aba:	700b      	strb	r3, [r1, #0]

	PR_FAULT_INFO(
    4abc:	4a13      	ldr	r2, [pc, #76]	; (4b0c <debug_monitor+0x58>)
    4abe:	9207      	str	r2, [sp, #28]
    4ac0:	2202      	movs	r2, #2
    4ac2:	f88d 2004 	strb.w	r2, [sp, #4]
    4ac6:	f88d 3005 	strb.w	r3, [sp, #5]
    4aca:	f88d 3006 	strb.w	r3, [sp, #6]
    4ace:	f88d 3007 	strb.w	r3, [sp, #7]
    4ad2:	9a01      	ldr	r2, [sp, #4]
    4ad4:	9206      	str	r2, [sp, #24]
    4ad6:	4619      	mov	r1, r3
    4ad8:	f363 0100 	bfi	r1, r3, #0, #1
    4adc:	f363 0141 	bfi	r1, r3, #1, #1
    4ae0:	f363 0182 	bfi	r1, r3, #2, #1
    4ae4:	f363 01c5 	bfi	r1, r3, #3, #3
    4ae8:	2201      	movs	r2, #1
    4aea:	f362 1188 	bfi	r1, r2, #6, #3
    4aee:	2208      	movs	r2, #8
    4af0:	f362 2152 	bfi	r1, r2, #9, #10
    4af4:	f363 41de 	bfi	r1, r3, #19, #12
    4af8:	f363 71df 	bfi	r1, r3, #31, #1
    4afc:	aa06      	add	r2, sp, #24
    4afe:	4804      	ldr	r0, [pc, #16]	; (4b10 <debug_monitor+0x5c>)
    4b00:	f7fe fc74 	bl	33ec <z_impl_z_log_msg_static_create>

		*recoverable = memory_fault_recoverable(esf, false);
	}

#endif
}
    4b04:	b009      	add	sp, #36	; 0x24
    4b06:	f85d fb04 	ldr.w	pc, [sp], #4
    4b0a:	bf00      	nop
    4b0c:	00010dc0 	.word	0x00010dc0
    4b10:	0001016c 	.word	0x0001016c

00004b14 <reserved_exception>:
 *
 * See z_arm_fault_dump() for example.
 *
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
    4b14:	b590      	push	{r4, r7, lr}
    4b16:	b083      	sub	sp, #12
    4b18:	af00      	add	r7, sp, #0
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
    4b1a:	290f      	cmp	r1, #15
    4b1c:	dc4b      	bgt.n	4bb6 <reserved_exception+0xa2>
    4b1e:	4c2f      	ldr	r4, [pc, #188]	; (4bdc <reserved_exception+0xc8>)
    4b20:	3910      	subs	r1, #16
    4b22:	2302      	movs	r3, #2
    4b24:	713b      	strb	r3, [r7, #4]
    4b26:	b08a      	sub	sp, #40	; 0x28
    4b28:	466b      	mov	r3, sp
    4b2a:	f113 0210 	adds.w	r2, r3, #16
    4b2e:	d044      	beq.n	4bba <reserved_exception+0xa6>
    4b30:	f04f 0c11 	mov.w	ip, #17
    4b34:	b122      	cbz	r2, 4b40 <reserved_exception+0x2c>
    4b36:	f1bc 0f04 	cmp.w	ip, #4
    4b3a:	dd01      	ble.n	4b40 <reserved_exception+0x2c>
    4b3c:	4828      	ldr	r0, [pc, #160]	; (4be0 <reserved_exception+0xcc>)
    4b3e:	6158      	str	r0, [r3, #20]
    4b40:	2002      	movs	r0, #2
    4b42:	7038      	strb	r0, [r7, #0]
    4b44:	b11a      	cbz	r2, 4b4e <reserved_exception+0x3a>
    4b46:	f1bc 0f08 	cmp.w	ip, #8
    4b4a:	dd00      	ble.n	4b4e <reserved_exception+0x3a>
    4b4c:	619c      	str	r4, [r3, #24]
    4b4e:	b11a      	cbz	r2, 4b58 <reserved_exception+0x44>
    4b50:	f1bc 0f0c 	cmp.w	ip, #12
    4b54:	dd00      	ble.n	4b58 <reserved_exception+0x44>
    4b56:	61d9      	str	r1, [r3, #28]
    4b58:	b11a      	cbz	r2, 4b62 <reserved_exception+0x4e>
    4b5a:	f103 0120 	add.w	r1, r3, #32
    4b5e:	2000      	movs	r0, #0
    4b60:	b370      	cbz	r0, 4bc0 <reserved_exception+0xac>
    4b62:	f1bc 0f10 	cmp.w	ip, #16
    4b66:	dd35      	ble.n	4bd4 <reserved_exception+0xc0>
    4b68:	f04f 0c11 	mov.w	ip, #17
    4b6c:	b142      	cbz	r2, 4b80 <reserved_exception+0x6c>
    4b6e:	2104      	movs	r1, #4
    4b70:	7139      	strb	r1, [r7, #4]
    4b72:	2100      	movs	r1, #0
    4b74:	7179      	strb	r1, [r7, #5]
    4b76:	71b9      	strb	r1, [r7, #6]
    4b78:	2101      	movs	r1, #1
    4b7a:	71f9      	strb	r1, [r7, #7]
    4b7c:	6878      	ldr	r0, [r7, #4]
    4b7e:	6118      	str	r0, [r3, #16]
    4b80:	2100      	movs	r1, #0
    4b82:	f36f 0100 	bfc	r1, #0, #1
    4b86:	f36f 0141 	bfc	r1, #1, #1
    4b8a:	f36f 0182 	bfc	r1, #2, #1
    4b8e:	f36f 01c5 	bfc	r1, #3, #3
    4b92:	2301      	movs	r3, #1
    4b94:	f363 1188 	bfi	r1, r3, #6, #3
    4b98:	f3cc 0c09 	ubfx	ip, ip, #0, #10
    4b9c:	f36c 2152 	bfi	r1, ip, #9, #10
    4ba0:	f36f 41de 	bfc	r1, #19, #12
    4ba4:	f36f 71df 	bfc	r1, #31, #1
    4ba8:	2300      	movs	r3, #0
    4baa:	480e      	ldr	r0, [pc, #56]	; (4be4 <reserved_exception+0xd0>)
    4bac:	f7fe fc1e 	bl	33ec <z_impl_z_log_msg_static_create>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
    4bb0:	370c      	adds	r7, #12
    4bb2:	46bd      	mov	sp, r7
    4bb4:	bd90      	pop	{r4, r7, pc}
	PR_FAULT_INFO("***** %s %d) *****",
    4bb6:	4c0c      	ldr	r4, [pc, #48]	; (4be8 <reserved_exception+0xd4>)
    4bb8:	e7b2      	b.n	4b20 <reserved_exception+0xc>
    4bba:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
    4bbe:	e7b9      	b.n	4b34 <reserved_exception+0x20>
    4bc0:	f107 0408 	add.w	r4, r7, #8
    4bc4:	eb04 0e00 	add.w	lr, r4, r0
    4bc8:	f81e ec08 	ldrb.w	lr, [lr, #-8]
    4bcc:	f801 eb01 	strb.w	lr, [r1], #1
    4bd0:	3001      	adds	r0, #1
    4bd2:	e7c5      	b.n	4b60 <reserved_exception+0x4c>
    4bd4:	f06f 0c1b 	mvn.w	ip, #27
    4bd8:	e7c8      	b.n	4b6c <reserved_exception+0x58>
    4bda:	bf00      	nop
    4bdc:	00010e00 	.word	0x00010e00
    4be0:	00010e18 	.word	0x00010e18
    4be4:	0001016c 	.word	0x0001016c
    4be8:	00010de4 	.word	0x00010de4

00004bec <mem_manage_fault>:
{
    4bec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4bf0:	b0a7      	sub	sp, #156	; 0x9c
    4bf2:	af00      	add	r7, sp, #0
    4bf4:	4605      	mov	r5, r0
    4bf6:	460c      	mov	r4, r1
    4bf8:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    4bfa:	4bc3      	ldr	r3, [pc, #780]	; (4f08 <mem_manage_fault+0x31c>)
    4bfc:	61fb      	str	r3, [r7, #28]
    4bfe:	2302      	movs	r3, #2
    4c00:	713b      	strb	r3, [r7, #4]
    4c02:	2300      	movs	r3, #0
    4c04:	717b      	strb	r3, [r7, #5]
    4c06:	71bb      	strb	r3, [r7, #6]
    4c08:	71fb      	strb	r3, [r7, #7]
    4c0a:	687a      	ldr	r2, [r7, #4]
    4c0c:	61ba      	str	r2, [r7, #24]
    4c0e:	4619      	mov	r1, r3
    4c10:	f363 0100 	bfi	r1, r3, #0, #1
    4c14:	f363 0141 	bfi	r1, r3, #1, #1
    4c18:	f363 0182 	bfi	r1, r3, #2, #1
    4c1c:	f363 01c5 	bfi	r1, r3, #3, #3
    4c20:	2201      	movs	r2, #1
    4c22:	f362 1188 	bfi	r1, r2, #6, #3
    4c26:	2208      	movs	r2, #8
    4c28:	f362 2152 	bfi	r1, r2, #9, #10
    4c2c:	f363 41de 	bfi	r1, r3, #19, #12
    4c30:	f363 71df 	bfi	r1, r3, #31, #1
    4c34:	f107 0218 	add.w	r2, r7, #24
    4c38:	48b4      	ldr	r0, [pc, #720]	; (4f0c <mem_manage_fault+0x320>)
    4c3a:	f7fe fbd7 	bl	33ec <z_impl_z_log_msg_static_create>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    4c3e:	4bb4      	ldr	r3, [pc, #720]	; (4f10 <mem_manage_fault+0x324>)
    4c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4c42:	f013 0f10 	tst.w	r3, #16
    4c46:	d140      	bne.n	4cca <mem_manage_fault+0xde>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    4c48:	4bb1      	ldr	r3, [pc, #708]	; (4f10 <mem_manage_fault+0x324>)
    4c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4c4c:	f013 0f08 	tst.w	r3, #8
    4c50:	d15e      	bne.n	4d10 <mem_manage_fault+0x124>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    4c52:	4baf      	ldr	r3, [pc, #700]	; (4f10 <mem_manage_fault+0x324>)
    4c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4c56:	f013 0f02 	tst.w	r3, #2
    4c5a:	d17c      	bne.n	4d56 <mem_manage_fault+0x16a>
	uint32_t mmfar = -EINVAL;
    4c5c:	f06f 0815 	mvn.w	r8, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    4c60:	4bab      	ldr	r3, [pc, #684]	; (4f10 <mem_manage_fault+0x324>)
    4c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4c64:	f013 0f01 	tst.w	r3, #1
    4c68:	f040 80e7 	bne.w	4e3a <mem_manage_fault+0x24e>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    4c6c:	4ba8      	ldr	r3, [pc, #672]	; (4f10 <mem_manage_fault+0x324>)
    4c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4c70:	f013 0f20 	tst.w	r3, #32
    4c74:	f040 8104 	bne.w	4e80 <mem_manage_fault+0x294>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    4c78:	4ba5      	ldr	r3, [pc, #660]	; (4f10 <mem_manage_fault+0x324>)
    4c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4c7c:	f013 0f10 	tst.w	r3, #16
    4c80:	d104      	bne.n	4c8c <mem_manage_fault+0xa0>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    4c82:	4ba3      	ldr	r3, [pc, #652]	; (4f10 <mem_manage_fault+0x324>)
    4c84:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    4c86:	f014 0402 	ands.w	r4, r4, #2
    4c8a:	d005      	beq.n	4c98 <mem_manage_fault+0xac>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    4c8c:	4ba0      	ldr	r3, [pc, #640]	; (4f10 <mem_manage_fault+0x324>)
    4c8e:	685c      	ldr	r4, [r3, #4]
    4c90:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    4c94:	f040 8119 	bne.w	4eca <mem_manage_fault+0x2de>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    4c98:	4b9d      	ldr	r3, [pc, #628]	; (4f10 <mem_manage_fault+0x324>)
    4c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4c9c:	f013 0f20 	tst.w	r3, #32
    4ca0:	d004      	beq.n	4cac <mem_manage_fault+0xc0>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    4ca2:	4a9b      	ldr	r2, [pc, #620]	; (4f10 <mem_manage_fault+0x324>)
    4ca4:	6a53      	ldr	r3, [r2, #36]	; 0x24
    4ca6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    4caa:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    4cac:	4a98      	ldr	r2, [pc, #608]	; (4f10 <mem_manage_fault+0x324>)
    4cae:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4cb0:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    4cb4:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    4cb6:	2101      	movs	r1, #1
    4cb8:	4628      	mov	r0, r5
    4cba:	f00a fa1d 	bl	f0f8 <memory_fault_recoverable>
    4cbe:	7030      	strb	r0, [r6, #0]
}
    4cc0:	4620      	mov	r0, r4
    4cc2:	379c      	adds	r7, #156	; 0x9c
    4cc4:	46bd      	mov	sp, r7
    4cc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		PR_FAULT_INFO("  Stacking error (context area might be"
    4cca:	4b92      	ldr	r3, [pc, #584]	; (4f14 <mem_manage_fault+0x328>)
    4ccc:	637b      	str	r3, [r7, #52]	; 0x34
    4cce:	2302      	movs	r3, #2
    4cd0:	713b      	strb	r3, [r7, #4]
    4cd2:	2300      	movs	r3, #0
    4cd4:	717b      	strb	r3, [r7, #5]
    4cd6:	71bb      	strb	r3, [r7, #6]
    4cd8:	71fb      	strb	r3, [r7, #7]
    4cda:	687a      	ldr	r2, [r7, #4]
    4cdc:	633a      	str	r2, [r7, #48]	; 0x30
    4cde:	4619      	mov	r1, r3
    4ce0:	f363 0100 	bfi	r1, r3, #0, #1
    4ce4:	f363 0141 	bfi	r1, r3, #1, #1
    4ce8:	f363 0182 	bfi	r1, r3, #2, #1
    4cec:	f363 01c5 	bfi	r1, r3, #3, #3
    4cf0:	2201      	movs	r2, #1
    4cf2:	f362 1188 	bfi	r1, r2, #6, #3
    4cf6:	2208      	movs	r2, #8
    4cf8:	f362 2152 	bfi	r1, r2, #9, #10
    4cfc:	f363 41de 	bfi	r1, r3, #19, #12
    4d00:	f363 71df 	bfi	r1, r3, #31, #1
    4d04:	f107 0230 	add.w	r2, r7, #48	; 0x30
    4d08:	4880      	ldr	r0, [pc, #512]	; (4f0c <mem_manage_fault+0x320>)
    4d0a:	f7fe fb6f 	bl	33ec <z_impl_z_log_msg_static_create>
    4d0e:	e79b      	b.n	4c48 <mem_manage_fault+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    4d10:	4b81      	ldr	r3, [pc, #516]	; (4f18 <mem_manage_fault+0x32c>)
    4d12:	64fb      	str	r3, [r7, #76]	; 0x4c
    4d14:	2302      	movs	r3, #2
    4d16:	713b      	strb	r3, [r7, #4]
    4d18:	2300      	movs	r3, #0
    4d1a:	717b      	strb	r3, [r7, #5]
    4d1c:	71bb      	strb	r3, [r7, #6]
    4d1e:	71fb      	strb	r3, [r7, #7]
    4d20:	687a      	ldr	r2, [r7, #4]
    4d22:	64ba      	str	r2, [r7, #72]	; 0x48
    4d24:	4619      	mov	r1, r3
    4d26:	f363 0100 	bfi	r1, r3, #0, #1
    4d2a:	f363 0141 	bfi	r1, r3, #1, #1
    4d2e:	f363 0182 	bfi	r1, r3, #2, #1
    4d32:	f363 01c5 	bfi	r1, r3, #3, #3
    4d36:	2201      	movs	r2, #1
    4d38:	f362 1188 	bfi	r1, r2, #6, #3
    4d3c:	2208      	movs	r2, #8
    4d3e:	f362 2152 	bfi	r1, r2, #9, #10
    4d42:	f363 41de 	bfi	r1, r3, #19, #12
    4d46:	f363 71df 	bfi	r1, r3, #31, #1
    4d4a:	f107 0248 	add.w	r2, r7, #72	; 0x48
    4d4e:	486f      	ldr	r0, [pc, #444]	; (4f0c <mem_manage_fault+0x320>)
    4d50:	f7fe fb4c 	bl	33ec <z_impl_z_log_msg_static_create>
    4d54:	e77d      	b.n	4c52 <mem_manage_fault+0x66>
		PR_FAULT_INFO("  Data Access Violation");
    4d56:	4b71      	ldr	r3, [pc, #452]	; (4f1c <mem_manage_fault+0x330>)
    4d58:	667b      	str	r3, [r7, #100]	; 0x64
    4d5a:	2302      	movs	r3, #2
    4d5c:	713b      	strb	r3, [r7, #4]
    4d5e:	2300      	movs	r3, #0
    4d60:	717b      	strb	r3, [r7, #5]
    4d62:	71bb      	strb	r3, [r7, #6]
    4d64:	71fb      	strb	r3, [r7, #7]
    4d66:	687a      	ldr	r2, [r7, #4]
    4d68:	663a      	str	r2, [r7, #96]	; 0x60
    4d6a:	4619      	mov	r1, r3
    4d6c:	f363 0100 	bfi	r1, r3, #0, #1
    4d70:	f363 0141 	bfi	r1, r3, #1, #1
    4d74:	f363 0182 	bfi	r1, r3, #2, #1
    4d78:	f363 01c5 	bfi	r1, r3, #3, #3
    4d7c:	2201      	movs	r2, #1
    4d7e:	f362 1188 	bfi	r1, r2, #6, #3
    4d82:	2208      	movs	r2, #8
    4d84:	f362 2152 	bfi	r1, r2, #9, #10
    4d88:	f363 41de 	bfi	r1, r3, #19, #12
    4d8c:	f363 71df 	bfi	r1, r3, #31, #1
    4d90:	f107 0260 	add.w	r2, r7, #96	; 0x60
    4d94:	485d      	ldr	r0, [pc, #372]	; (4f0c <mem_manage_fault+0x320>)
    4d96:	f7fe fb29 	bl	33ec <z_impl_z_log_msg_static_create>
		uint32_t temp = SCB->MMFAR;
    4d9a:	4b5d      	ldr	r3, [pc, #372]	; (4f10 <mem_manage_fault+0x324>)
    4d9c:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    4da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4da2:	f013 0f80 	tst.w	r3, #128	; 0x80
    4da6:	d045      	beq.n	4e34 <mem_manage_fault+0x248>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    4da8:	46e9      	mov	r9, sp
    4daa:	b088      	sub	sp, #32
    4dac:	466b      	mov	r3, sp
    4dae:	f113 0210 	adds.w	r2, r3, #16
    4db2:	d039      	beq.n	4e28 <mem_manage_fault+0x23c>
    4db4:	210c      	movs	r1, #12
    4db6:	b11a      	cbz	r2, 4dc0 <mem_manage_fault+0x1d4>
    4db8:	2904      	cmp	r1, #4
    4dba:	dd01      	ble.n	4dc0 <mem_manage_fault+0x1d4>
    4dbc:	4858      	ldr	r0, [pc, #352]	; (4f20 <mem_manage_fault+0x334>)
    4dbe:	6158      	str	r0, [r3, #20]
    4dc0:	b11a      	cbz	r2, 4dca <mem_manage_fault+0x1de>
    4dc2:	2908      	cmp	r1, #8
    4dc4:	dd01      	ble.n	4dca <mem_manage_fault+0x1de>
    4dc6:	f8c3 8018 	str.w	r8, [r3, #24]
    4dca:	290b      	cmp	r1, #11
    4dcc:	dd2f      	ble.n	4e2e <mem_manage_fault+0x242>
    4dce:	f04f 0c0c 	mov.w	ip, #12
    4dd2:	b13a      	cbz	r2, 4de4 <mem_manage_fault+0x1f8>
    4dd4:	2103      	movs	r1, #3
    4dd6:	7139      	strb	r1, [r7, #4]
    4dd8:	2100      	movs	r1, #0
    4dda:	7179      	strb	r1, [r7, #5]
    4ddc:	71b9      	strb	r1, [r7, #6]
    4dde:	71f9      	strb	r1, [r7, #7]
    4de0:	6878      	ldr	r0, [r7, #4]
    4de2:	6118      	str	r0, [r3, #16]
    4de4:	2100      	movs	r1, #0
    4de6:	f36f 0100 	bfc	r1, #0, #1
    4dea:	f36f 0141 	bfc	r1, #1, #1
    4dee:	f36f 0182 	bfc	r1, #2, #1
    4df2:	f36f 01c5 	bfc	r1, #3, #3
    4df6:	2301      	movs	r3, #1
    4df8:	f363 1188 	bfi	r1, r3, #6, #3
    4dfc:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
    4e00:	f363 2152 	bfi	r1, r3, #9, #10
    4e04:	f36f 41de 	bfc	r1, #19, #12
    4e08:	f36f 71df 	bfc	r1, #31, #1
    4e0c:	2300      	movs	r3, #0
    4e0e:	483f      	ldr	r0, [pc, #252]	; (4f0c <mem_manage_fault+0x320>)
    4e10:	f7fe faec 	bl	33ec <z_impl_z_log_msg_static_create>
    4e14:	46cd      	mov	sp, r9
			if (from_hard_fault != 0) {
    4e16:	2c00      	cmp	r4, #0
    4e18:	f43f af22 	beq.w	4c60 <mem_manage_fault+0x74>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    4e1c:	4a3c      	ldr	r2, [pc, #240]	; (4f10 <mem_manage_fault+0x324>)
    4e1e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4e20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    4e24:	6293      	str	r3, [r2, #40]	; 0x28
    4e26:	e71b      	b.n	4c60 <mem_manage_fault+0x74>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    4e28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    4e2c:	e7c3      	b.n	4db6 <mem_manage_fault+0x1ca>
    4e2e:	f06f 0c1b 	mvn.w	ip, #27
    4e32:	e7ce      	b.n	4dd2 <mem_manage_fault+0x1e6>
	uint32_t mmfar = -EINVAL;
    4e34:	f06f 0815 	mvn.w	r8, #21
    4e38:	e712      	b.n	4c60 <mem_manage_fault+0x74>
		PR_FAULT_INFO("  Instruction Access Violation");
    4e3a:	4b3a      	ldr	r3, [pc, #232]	; (4f24 <mem_manage_fault+0x338>)
    4e3c:	67fb      	str	r3, [r7, #124]	; 0x7c
    4e3e:	2302      	movs	r3, #2
    4e40:	713b      	strb	r3, [r7, #4]
    4e42:	2300      	movs	r3, #0
    4e44:	717b      	strb	r3, [r7, #5]
    4e46:	71bb      	strb	r3, [r7, #6]
    4e48:	71fb      	strb	r3, [r7, #7]
    4e4a:	687a      	ldr	r2, [r7, #4]
    4e4c:	67ba      	str	r2, [r7, #120]	; 0x78
    4e4e:	4619      	mov	r1, r3
    4e50:	f363 0100 	bfi	r1, r3, #0, #1
    4e54:	f363 0141 	bfi	r1, r3, #1, #1
    4e58:	f363 0182 	bfi	r1, r3, #2, #1
    4e5c:	f363 01c5 	bfi	r1, r3, #3, #3
    4e60:	2201      	movs	r2, #1
    4e62:	f362 1188 	bfi	r1, r2, #6, #3
    4e66:	2208      	movs	r2, #8
    4e68:	f362 2152 	bfi	r1, r2, #9, #10
    4e6c:	f363 41de 	bfi	r1, r3, #19, #12
    4e70:	f363 71df 	bfi	r1, r3, #31, #1
    4e74:	f107 0278 	add.w	r2, r7, #120	; 0x78
    4e78:	4824      	ldr	r0, [pc, #144]	; (4f0c <mem_manage_fault+0x320>)
    4e7a:	f7fe fab7 	bl	33ec <z_impl_z_log_msg_static_create>
    4e7e:	e6f5      	b.n	4c6c <mem_manage_fault+0x80>
		PR_FAULT_INFO(
    4e80:	4b29      	ldr	r3, [pc, #164]	; (4f28 <mem_manage_fault+0x33c>)
    4e82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    4e86:	2302      	movs	r3, #2
    4e88:	713b      	strb	r3, [r7, #4]
    4e8a:	2300      	movs	r3, #0
    4e8c:	717b      	strb	r3, [r7, #5]
    4e8e:	71bb      	strb	r3, [r7, #6]
    4e90:	71fb      	strb	r3, [r7, #7]
    4e92:	687a      	ldr	r2, [r7, #4]
    4e94:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    4e98:	4619      	mov	r1, r3
    4e9a:	f363 0100 	bfi	r1, r3, #0, #1
    4e9e:	f363 0141 	bfi	r1, r3, #1, #1
    4ea2:	f363 0182 	bfi	r1, r3, #2, #1
    4ea6:	f363 01c5 	bfi	r1, r3, #3, #3
    4eaa:	2201      	movs	r2, #1
    4eac:	f362 1188 	bfi	r1, r2, #6, #3
    4eb0:	2208      	movs	r2, #8
    4eb2:	f362 2152 	bfi	r1, r2, #9, #10
    4eb6:	f363 41de 	bfi	r1, r3, #19, #12
    4eba:	f363 71df 	bfi	r1, r3, #31, #1
    4ebe:	f107 0290 	add.w	r2, r7, #144	; 0x90
    4ec2:	4812      	ldr	r0, [pc, #72]	; (4f0c <mem_manage_fault+0x320>)
    4ec4:	f7fe fa92 	bl	33ec <z_impl_z_log_msg_static_create>
    4ec8:	e6d6      	b.n	4c78 <mem_manage_fault+0x8c>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    4eca:	4629      	mov	r1, r5
    4ecc:	4640      	mov	r0, r8
    4ece:	f7ff faab 	bl	4428 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    4ed2:	4680      	mov	r8, r0
    4ed4:	bb90      	cbnz	r0, 4f3c <mem_manage_fault+0x350>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    4ed6:	4b0e      	ldr	r3, [pc, #56]	; (4f10 <mem_manage_fault+0x324>)
    4ed8:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    4eda:	f014 0410 	ands.w	r4, r4, #16
    4ede:	f43f aedb 	beq.w	4c98 <mem_manage_fault+0xac>
    4ee2:	4c12      	ldr	r4, [pc, #72]	; (4f2c <mem_manage_fault+0x340>)
    4ee4:	f240 1353 	movw	r3, #339	; 0x153
    4ee8:	4622      	mov	r2, r4
    4eea:	4911      	ldr	r1, [pc, #68]	; (4f30 <mem_manage_fault+0x344>)
    4eec:	4811      	ldr	r0, [pc, #68]	; (4f34 <mem_manage_fault+0x348>)
    4eee:	f009 ff60 	bl	edb2 <assert_print>
    4ef2:	4811      	ldr	r0, [pc, #68]	; (4f38 <mem_manage_fault+0x34c>)
    4ef4:	f009 ff5d 	bl	edb2 <assert_print>
    4ef8:	f240 1153 	movw	r1, #339	; 0x153
    4efc:	4620      	mov	r0, r4
    4efe:	f009 ff51 	bl	eda4 <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    4f02:	4644      	mov	r4, r8
    4f04:	e6c8      	b.n	4c98 <mem_manage_fault+0xac>
    4f06:	bf00      	nop
    4f08:	00010e2c 	.word	0x00010e2c
    4f0c:	0001016c 	.word	0x0001016c
    4f10:	e000ed00 	.word	0xe000ed00
    4f14:	00010e44 	.word	0x00010e44
    4f18:	00010c3c 	.word	0x00010c3c
    4f1c:	00010e78 	.word	0x00010e78
    4f20:	00010e90 	.word	0x00010e90
    4f24:	00010ea8 	.word	0x00010ea8
    4f28:	00010cb8 	.word	0x00010cb8
    4f2c:	00010ec8 	.word	0x00010ec8
    4f30:	00010f04 	.word	0x00010f04
    4f34:	00010450 	.word	0x00010450
    4f38:	00010f50 	.word	0x00010f50
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    4f3c:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    4f40:	2402      	movs	r4, #2
    4f42:	e6a9      	b.n	4c98 <mem_manage_fault+0xac>

00004f44 <hard_fault>:
{
    4f44:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f46:	b09b      	sub	sp, #108	; 0x6c
    4f48:	af00      	add	r7, sp, #0
    4f4a:	4606      	mov	r6, r0
    4f4c:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** HARD FAULT *****");
    4f4e:	4b96      	ldr	r3, [pc, #600]	; (51a8 <hard_fault+0x264>)
    4f50:	61fb      	str	r3, [r7, #28]
    4f52:	2302      	movs	r3, #2
    4f54:	713b      	strb	r3, [r7, #4]
    4f56:	2400      	movs	r4, #0
    4f58:	717c      	strb	r4, [r7, #5]
    4f5a:	71bc      	strb	r4, [r7, #6]
    4f5c:	71fc      	strb	r4, [r7, #7]
    4f5e:	687b      	ldr	r3, [r7, #4]
    4f60:	61bb      	str	r3, [r7, #24]
    4f62:	4621      	mov	r1, r4
    4f64:	f364 0100 	bfi	r1, r4, #0, #1
    4f68:	f364 0141 	bfi	r1, r4, #1, #1
    4f6c:	f364 0182 	bfi	r1, r4, #2, #1
    4f70:	f364 01c5 	bfi	r1, r4, #3, #3
    4f74:	2301      	movs	r3, #1
    4f76:	f363 1188 	bfi	r1, r3, #6, #3
    4f7a:	2308      	movs	r3, #8
    4f7c:	f363 2152 	bfi	r1, r3, #9, #10
    4f80:	f364 41de 	bfi	r1, r4, #19, #12
    4f84:	f364 71df 	bfi	r1, r4, #31, #1
    4f88:	4623      	mov	r3, r4
    4f8a:	f107 0218 	add.w	r2, r7, #24
    4f8e:	4887      	ldr	r0, [pc, #540]	; (51ac <hard_fault+0x268>)
    4f90:	f7fe fa2c 	bl	33ec <z_impl_z_log_msg_static_create>
	*recoverable = false;
    4f94:	702c      	strb	r4, [r5, #0]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    4f96:	4b86      	ldr	r3, [pc, #536]	; (51b0 <hard_fault+0x26c>)
    4f98:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    4f9a:	f014 0402 	ands.w	r4, r4, #2
    4f9e:	d14a      	bne.n	5036 <hard_fault+0xf2>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    4fa0:	4b83      	ldr	r3, [pc, #524]	; (51b0 <hard_fault+0x26c>)
    4fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4fa4:	2b00      	cmp	r3, #0
    4fa6:	db6d      	blt.n	5084 <hard_fault+0x140>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    4fa8:	4b81      	ldr	r3, [pc, #516]	; (51b0 <hard_fault+0x26c>)
    4faa:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    4fac:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    4fb0:	f000 80e8 	beq.w	5184 <hard_fault+0x240>
		PR_EXC("  Fault escalation (see below)");
    4fb4:	4b7f      	ldr	r3, [pc, #508]	; (51b4 <hard_fault+0x270>)
    4fb6:	637b      	str	r3, [r7, #52]	; 0x34
    4fb8:	2302      	movs	r3, #2
    4fba:	713b      	strb	r3, [r7, #4]
    4fbc:	2300      	movs	r3, #0
    4fbe:	717b      	strb	r3, [r7, #5]
    4fc0:	71bb      	strb	r3, [r7, #6]
    4fc2:	71fb      	strb	r3, [r7, #7]
    4fc4:	687a      	ldr	r2, [r7, #4]
    4fc6:	633a      	str	r2, [r7, #48]	; 0x30
    4fc8:	4619      	mov	r1, r3
    4fca:	f363 0100 	bfi	r1, r3, #0, #1
    4fce:	f363 0141 	bfi	r1, r3, #1, #1
    4fd2:	f363 0182 	bfi	r1, r3, #2, #1
    4fd6:	f363 01c5 	bfi	r1, r3, #3, #3
    4fda:	2201      	movs	r2, #1
    4fdc:	f362 1188 	bfi	r1, r2, #6, #3
    4fe0:	2208      	movs	r2, #8
    4fe2:	f362 2152 	bfi	r1, r2, #9, #10
    4fe6:	f363 41de 	bfi	r1, r3, #19, #12
    4fea:	f363 71df 	bfi	r1, r3, #31, #1
    4fee:	f107 0230 	add.w	r2, r7, #48	; 0x30
    4ff2:	486e      	ldr	r0, [pc, #440]	; (51ac <hard_fault+0x268>)
    4ff4:	f7fe f9fa 	bl	33ec <z_impl_z_log_msg_static_create>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    4ff8:	69b3      	ldr	r3, [r6, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    4ffa:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    4ffe:	f64d 7302 	movw	r3, #57090	; 0xdf02
    5002:	429a      	cmp	r2, r3
    5004:	d061      	beq.n	50ca <hard_fault+0x186>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    5006:	4b6a      	ldr	r3, [pc, #424]	; (51b0 <hard_fault+0x26c>)
    5008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    500a:	f013 0fff 	tst.w	r3, #255	; 0xff
    500e:	f040 809a 	bne.w	5146 <hard_fault+0x202>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    5012:	4b67      	ldr	r3, [pc, #412]	; (51b0 <hard_fault+0x26c>)
    5014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5016:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    501a:	f040 809b 	bne.w	5154 <hard_fault+0x210>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    501e:	4b64      	ldr	r3, [pc, #400]	; (51b0 <hard_fault+0x26c>)
    5020:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    5022:	0c24      	lsrs	r4, r4, #16
    5024:	0424      	lsls	r4, r4, #16
    5026:	2c00      	cmp	r4, #0
    5028:	f000 809b 	beq.w	5162 <hard_fault+0x21e>
			reason = usage_fault(esf);
    502c:	4630      	mov	r0, r6
    502e:	f7ff fbf7 	bl	4820 <usage_fault>
    5032:	4604      	mov	r4, r0
    5034:	e022      	b.n	507c <hard_fault+0x138>
		PR_EXC("  Bus fault on vector table read");
    5036:	4b60      	ldr	r3, [pc, #384]	; (51b8 <hard_fault+0x274>)
    5038:	667b      	str	r3, [r7, #100]	; 0x64
    503a:	2302      	movs	r3, #2
    503c:	713b      	strb	r3, [r7, #4]
    503e:	2400      	movs	r4, #0
    5040:	717c      	strb	r4, [r7, #5]
    5042:	71bc      	strb	r4, [r7, #6]
    5044:	71fc      	strb	r4, [r7, #7]
    5046:	687b      	ldr	r3, [r7, #4]
    5048:	663b      	str	r3, [r7, #96]	; 0x60
    504a:	4621      	mov	r1, r4
    504c:	f364 0100 	bfi	r1, r4, #0, #1
    5050:	f364 0141 	bfi	r1, r4, #1, #1
    5054:	f364 0182 	bfi	r1, r4, #2, #1
    5058:	f364 01c5 	bfi	r1, r4, #3, #3
    505c:	2301      	movs	r3, #1
    505e:	f363 1188 	bfi	r1, r3, #6, #3
    5062:	2308      	movs	r3, #8
    5064:	f363 2152 	bfi	r1, r3, #9, #10
    5068:	f364 41de 	bfi	r1, r4, #19, #12
    506c:	f364 71df 	bfi	r1, r4, #31, #1
    5070:	4623      	mov	r3, r4
    5072:	f107 0260 	add.w	r2, r7, #96	; 0x60
    5076:	484d      	ldr	r0, [pc, #308]	; (51ac <hard_fault+0x268>)
    5078:	f7fe f9b8 	bl	33ec <z_impl_z_log_msg_static_create>
}
    507c:	4620      	mov	r0, r4
    507e:	376c      	adds	r7, #108	; 0x6c
    5080:	46bd      	mov	sp, r7
    5082:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("  Debug event");
    5084:	4b4d      	ldr	r3, [pc, #308]	; (51bc <hard_fault+0x278>)
    5086:	64fb      	str	r3, [r7, #76]	; 0x4c
    5088:	2302      	movs	r3, #2
    508a:	713b      	strb	r3, [r7, #4]
    508c:	2300      	movs	r3, #0
    508e:	717b      	strb	r3, [r7, #5]
    5090:	71bb      	strb	r3, [r7, #6]
    5092:	71fb      	strb	r3, [r7, #7]
    5094:	687a      	ldr	r2, [r7, #4]
    5096:	64ba      	str	r2, [r7, #72]	; 0x48
    5098:	4619      	mov	r1, r3
    509a:	f363 0100 	bfi	r1, r3, #0, #1
    509e:	f363 0141 	bfi	r1, r3, #1, #1
    50a2:	f363 0182 	bfi	r1, r3, #2, #1
    50a6:	f363 01c5 	bfi	r1, r3, #3, #3
    50aa:	2201      	movs	r2, #1
    50ac:	f362 1188 	bfi	r1, r2, #6, #3
    50b0:	2208      	movs	r2, #8
    50b2:	f362 2152 	bfi	r1, r2, #9, #10
    50b6:	f363 41de 	bfi	r1, r3, #19, #12
    50ba:	f363 71df 	bfi	r1, r3, #31, #1
    50be:	f107 0248 	add.w	r2, r7, #72	; 0x48
    50c2:	483a      	ldr	r0, [pc, #232]	; (51ac <hard_fault+0x268>)
    50c4:	f7fe f992 	bl	33ec <z_impl_z_log_msg_static_create>
    50c8:	e7d8      	b.n	507c <hard_fault+0x138>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    50ca:	6830      	ldr	r0, [r6, #0]
    50cc:	466d      	mov	r5, sp
    50ce:	b088      	sub	sp, #32
    50d0:	466b      	mov	r3, sp
    50d2:	f113 0210 	adds.w	r2, r3, #16
    50d6:	d030      	beq.n	513a <hard_fault+0x1f6>
    50d8:	210c      	movs	r1, #12
    50da:	b11a      	cbz	r2, 50e4 <hard_fault+0x1a0>
    50dc:	2904      	cmp	r1, #4
    50de:	dd01      	ble.n	50e4 <hard_fault+0x1a0>
    50e0:	4c37      	ldr	r4, [pc, #220]	; (51c0 <hard_fault+0x27c>)
    50e2:	615c      	str	r4, [r3, #20]
    50e4:	b112      	cbz	r2, 50ec <hard_fault+0x1a8>
    50e6:	2908      	cmp	r1, #8
    50e8:	dd00      	ble.n	50ec <hard_fault+0x1a8>
    50ea:	6198      	str	r0, [r3, #24]
    50ec:	290b      	cmp	r1, #11
    50ee:	dd27      	ble.n	5140 <hard_fault+0x1fc>
    50f0:	240c      	movs	r4, #12
    50f2:	b13a      	cbz	r2, 5104 <hard_fault+0x1c0>
    50f4:	2103      	movs	r1, #3
    50f6:	7139      	strb	r1, [r7, #4]
    50f8:	2100      	movs	r1, #0
    50fa:	7179      	strb	r1, [r7, #5]
    50fc:	71b9      	strb	r1, [r7, #6]
    50fe:	71f9      	strb	r1, [r7, #7]
    5100:	6878      	ldr	r0, [r7, #4]
    5102:	6118      	str	r0, [r3, #16]
    5104:	2100      	movs	r1, #0
    5106:	f36f 0100 	bfc	r1, #0, #1
    510a:	f36f 0141 	bfc	r1, #1, #1
    510e:	f36f 0182 	bfc	r1, #2, #1
    5112:	f36f 01c5 	bfc	r1, #3, #3
    5116:	2301      	movs	r3, #1
    5118:	f363 1188 	bfi	r1, r3, #6, #3
    511c:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
    5120:	f364 2152 	bfi	r1, r4, #9, #10
    5124:	f36f 41de 	bfc	r1, #19, #12
    5128:	f36f 71df 	bfc	r1, #31, #1
    512c:	2300      	movs	r3, #0
    512e:	481f      	ldr	r0, [pc, #124]	; (51ac <hard_fault+0x268>)
    5130:	f7fe f95c 	bl	33ec <z_impl_z_log_msg_static_create>
    5134:	46ad      	mov	sp, r5
			reason = esf->basic.r0;
    5136:	6834      	ldr	r4, [r6, #0]
    5138:	e7a0      	b.n	507c <hard_fault+0x138>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    513a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    513e:	e7cc      	b.n	50da <hard_fault+0x196>
    5140:	f06f 041b 	mvn.w	r4, #27
    5144:	e7d5      	b.n	50f2 <hard_fault+0x1ae>
			reason = mem_manage_fault(esf, 1, recoverable);
    5146:	462a      	mov	r2, r5
    5148:	2101      	movs	r1, #1
    514a:	4630      	mov	r0, r6
    514c:	f7ff fd4e 	bl	4bec <mem_manage_fault>
    5150:	4604      	mov	r4, r0
    5152:	e793      	b.n	507c <hard_fault+0x138>
			reason = bus_fault(esf, 1, recoverable);
    5154:	462a      	mov	r2, r5
    5156:	2101      	movs	r1, #1
    5158:	4630      	mov	r0, r6
    515a:	f7ff f9d1 	bl	4500 <bus_fault>
    515e:	4604      	mov	r4, r0
    5160:	e78c      	b.n	507c <hard_fault+0x138>
			__ASSERT(0,
    5162:	4d18      	ldr	r5, [pc, #96]	; (51c4 <hard_fault+0x280>)
    5164:	f240 23d7 	movw	r3, #727	; 0x2d7
    5168:	462a      	mov	r2, r5
    516a:	4917      	ldr	r1, [pc, #92]	; (51c8 <hard_fault+0x284>)
    516c:	4817      	ldr	r0, [pc, #92]	; (51cc <hard_fault+0x288>)
    516e:	f009 fe20 	bl	edb2 <assert_print>
    5172:	4817      	ldr	r0, [pc, #92]	; (51d0 <hard_fault+0x28c>)
    5174:	f009 fe1d 	bl	edb2 <assert_print>
    5178:	f240 21d7 	movw	r1, #727	; 0x2d7
    517c:	4628      	mov	r0, r5
    517e:	f009 fe11 	bl	eda4 <assert_post_action>
    5182:	e77b      	b.n	507c <hard_fault+0x138>
		__ASSERT(0,
    5184:	4d0f      	ldr	r5, [pc, #60]	; (51c4 <hard_fault+0x280>)
    5186:	f240 23db 	movw	r3, #731	; 0x2db
    518a:	462a      	mov	r2, r5
    518c:	490e      	ldr	r1, [pc, #56]	; (51c8 <hard_fault+0x284>)
    518e:	480f      	ldr	r0, [pc, #60]	; (51cc <hard_fault+0x288>)
    5190:	f009 fe0f 	bl	edb2 <assert_print>
    5194:	480f      	ldr	r0, [pc, #60]	; (51d4 <hard_fault+0x290>)
    5196:	f009 fe0c 	bl	edb2 <assert_print>
    519a:	f240 21db 	movw	r1, #731	; 0x2db
    519e:	4628      	mov	r0, r5
    51a0:	f009 fe00 	bl	eda4 <assert_post_action>
	return reason;
    51a4:	e76a      	b.n	507c <hard_fault+0x138>
    51a6:	bf00      	nop
    51a8:	00010f74 	.word	0x00010f74
    51ac:	0001016c 	.word	0x0001016c
    51b0:	e000ed00 	.word	0xe000ed00
    51b4:	00010fc0 	.word	0x00010fc0
    51b8:	00010f8c 	.word	0x00010f8c
    51bc:	00010fb0 	.word	0x00010fb0
    51c0:	00010fe0 	.word	0x00010fe0
    51c4:	00010ec8 	.word	0x00010ec8
    51c8:	00011934 	.word	0x00011934
    51cc:	00010450 	.word	0x00010450
    51d0:	00010ffc 	.word	0x00010ffc
    51d4:	00011020 	.word	0x00011020

000051d8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    51d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    51da:	b091      	sub	sp, #68	; 0x44
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    51dc:	4b3f      	ldr	r3, [pc, #252]	; (52dc <z_arm_fault+0x104>)
    51de:	685d      	ldr	r5, [r3, #4]
    51e0:	f3c5 0508 	ubfx	r5, r5, #0, #9
    51e4:	2300      	movs	r3, #0
    51e6:	f383 8811 	msr	BASEPRI, r3
    51ea:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    51ee:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    51f2:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    51f6:	d142      	bne.n	527e <z_arm_fault+0xa6>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    51f8:	f002 030c 	and.w	r3, r2, #12
    51fc:	2b08      	cmp	r3, #8
    51fe:	d013      	beq.n	5228 <z_arm_fault+0x50>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    5200:	f012 0f08 	tst.w	r2, #8
    5204:	d038      	beq.n	5278 <z_arm_fault+0xa0>
			ptr_esf =  (z_arch_esf_t *)psp;
    5206:	460c      	mov	r4, r1
	*nested_exc = false;
    5208:	2600      	movs	r6, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    520a:	2c00      	cmp	r4, #0
    520c:	d03a      	beq.n	5284 <z_arm_fault+0xac>

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    520e:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    5212:	4629      	mov	r1, r5
    5214:	4620      	mov	r0, r4
    5216:	f009 ff71 	bl	f0fc <fault_handle>
    521a:	4605      	mov	r5, r0
	if (recoverable) {
    521c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    5220:	2b00      	cmp	r3, #0
    5222:	d040      	beq.n	52a6 <z_arm_fault+0xce>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    5224:	b011      	add	sp, #68	; 0x44
    5226:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    5228:	4b2d      	ldr	r3, [pc, #180]	; (52e0 <z_arm_fault+0x108>)
    522a:	930f      	str	r3, [sp, #60]	; 0x3c
    522c:	2302      	movs	r3, #2
    522e:	f88d 3000 	strb.w	r3, [sp]
    5232:	2400      	movs	r4, #0
    5234:	f88d 4001 	strb.w	r4, [sp, #1]
    5238:	f88d 4002 	strb.w	r4, [sp, #2]
    523c:	f88d 4003 	strb.w	r4, [sp, #3]
    5240:	9b00      	ldr	r3, [sp, #0]
    5242:	930e      	str	r3, [sp, #56]	; 0x38
    5244:	4621      	mov	r1, r4
    5246:	f364 0100 	bfi	r1, r4, #0, #1
    524a:	f364 0141 	bfi	r1, r4, #1, #1
    524e:	f364 0182 	bfi	r1, r4, #2, #1
    5252:	f364 01c5 	bfi	r1, r4, #3, #3
    5256:	2301      	movs	r3, #1
    5258:	f363 1188 	bfi	r1, r3, #6, #3
    525c:	2308      	movs	r3, #8
    525e:	f363 2152 	bfi	r1, r3, #9, #10
    5262:	f364 41de 	bfi	r1, r4, #19, #12
    5266:	f364 71df 	bfi	r1, r4, #31, #1
    526a:	4623      	mov	r3, r4
    526c:	aa0e      	add	r2, sp, #56	; 0x38
    526e:	481d      	ldr	r0, [pc, #116]	; (52e4 <z_arm_fault+0x10c>)
    5270:	f7fe f8bc 	bl	33ec <z_impl_z_log_msg_static_create>
	*nested_exc = false;
    5274:	4626      	mov	r6, r4
		return NULL;
    5276:	e7c8      	b.n	520a <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    5278:	4604      	mov	r4, r0
			*nested_exc = true;
    527a:	2601      	movs	r6, #1
    527c:	e7c5      	b.n	520a <z_arm_fault+0x32>
	*nested_exc = false;
    527e:	2600      	movs	r6, #0
		return NULL;
    5280:	4634      	mov	r4, r6
    5282:	e7c2      	b.n	520a <z_arm_fault+0x32>
	__ASSERT(esf != NULL,
    5284:	4f18      	ldr	r7, [pc, #96]	; (52e8 <z_arm_fault+0x110>)
    5286:	f240 4305 	movw	r3, #1029	; 0x405
    528a:	463a      	mov	r2, r7
    528c:	4917      	ldr	r1, [pc, #92]	; (52ec <z_arm_fault+0x114>)
    528e:	4818      	ldr	r0, [pc, #96]	; (52f0 <z_arm_fault+0x118>)
    5290:	f009 fd8f 	bl	edb2 <assert_print>
    5294:	4817      	ldr	r0, [pc, #92]	; (52f4 <z_arm_fault+0x11c>)
    5296:	f009 fd8c 	bl	edb2 <assert_print>
    529a:	f240 4105 	movw	r1, #1029	; 0x405
    529e:	4638      	mov	r0, r7
    52a0:	f009 fd80 	bl	eda4 <assert_post_action>
    52a4:	e7b3      	b.n	520e <z_arm_fault+0x36>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    52a6:	2220      	movs	r2, #32
    52a8:	4621      	mov	r1, r4
    52aa:	a801      	add	r0, sp, #4
    52ac:	f009 ffa8 	bl	f200 <memcpy>
	if (nested_exc) {
    52b0:	b14e      	cbz	r6, 52c6 <z_arm_fault+0xee>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    52b2:	9b08      	ldr	r3, [sp, #32]
    52b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
    52b8:	b95a      	cbnz	r2, 52d2 <z_arm_fault+0xfa>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    52ba:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    52be:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    52c2:	9308      	str	r3, [sp, #32]
    52c4:	e005      	b.n	52d2 <z_arm_fault+0xfa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    52c6:	9b08      	ldr	r3, [sp, #32]
    52c8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    52cc:	f023 0301 	bic.w	r3, r3, #1
    52d0:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    52d2:	a901      	add	r1, sp, #4
    52d4:	4628      	mov	r0, r5
    52d6:	f009 fef1 	bl	f0bc <z_arm_fatal_error>
    52da:	e7a3      	b.n	5224 <z_arm_fault+0x4c>
    52dc:	e000ed00 	.word	0xe000ed00
    52e0:	00011050 	.word	0x00011050
    52e4:	0001016c 	.word	0x0001016c
    52e8:	00010ec8 	.word	0x00010ec8
    52ec:	0001107c 	.word	0x0001107c
    52f0:	00010450 	.word	0x00010450
    52f4:	00011090 	.word	0x00011090

000052f8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    52f8:	4a02      	ldr	r2, [pc, #8]	; (5304 <z_arm_fault_init+0xc>)
    52fa:	6953      	ldr	r3, [r2, #20]
    52fc:	f043 0310 	orr.w	r3, r3, #16
    5300:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    5302:	4770      	bx	lr
    5304:	e000ed00 	.word	0xe000ed00

00005308 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    5308:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    530c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    5310:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    5312:	4672      	mov	r2, lr
	bl z_arm_fault
    5314:	f7ff ff60 	bl	51d8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    5318:	bd01      	pop	{r0, pc}
    531a:	bf00      	nop

0000531c <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    531c:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    531e:	e006      	b.n	532e <z_arm_interrupt_init+0x12>
    5320:	f002 010f 	and.w	r1, r2, #15
    5324:	4b09      	ldr	r3, [pc, #36]	; (534c <z_arm_interrupt_init+0x30>)
    5326:	440b      	add	r3, r1
    5328:	2120      	movs	r1, #32
    532a:	7619      	strb	r1, [r3, #24]
    532c:	3201      	adds	r2, #1
    532e:	2a2f      	cmp	r2, #47	; 0x2f
    5330:	dc0a      	bgt.n	5348 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    5332:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    5334:	2b00      	cmp	r3, #0
    5336:	dbf3      	blt.n	5320 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5338:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    533c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    5340:	2120      	movs	r1, #32
    5342:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    5346:	e7f1      	b.n	532c <z_arm_interrupt_init+0x10>
	}
}
    5348:	4770      	bx	lr
    534a:	bf00      	nop
    534c:	e000ecfc 	.word	0xe000ecfc

00005350 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_DEBUG_THREAD_INFO)
    /* Clear z_sys_post_kernel flag for RTOS aware debuggers */
    movs.n r0, #0
    5350:	2000      	movs	r0, #0
    ldr r1, =z_sys_post_kernel
    5352:	4913      	ldr	r1, [pc, #76]	; (53a0 <__start+0x50>)
    strb r0, [r1]
    5354:	7008      	strb	r0, [r1, #0]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    5356:	2000      	movs	r0, #0
    msr CONTROL, r0
    5358:	f380 8814 	msr	CONTROL, r0
    isb
    535c:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    5360:	f7fd fbf0 	bl	2b44 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    5364:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    5366:	490f      	ldr	r1, [pc, #60]	; (53a4 <__start+0x54>)
    str r0, [r1]
    5368:	6008      	str	r0, [r1, #0]
    dsb
    536a:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    536e:	480e      	ldr	r0, [pc, #56]	; (53a8 <__start+0x58>)
    msr msp, r0
    5370:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    5374:	f000 f830 	bl	53d8 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    5378:	2020      	movs	r0, #32
    msr BASEPRI, r0
    537a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    537e:	480b      	ldr	r0, [pc, #44]	; (53ac <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    5380:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    5384:	1840      	adds	r0, r0, r1
    msr PSP, r0
    5386:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    538a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    538e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    5390:	4308      	orrs	r0, r1
    msr CONTROL, r0
    5392:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    5396:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    539a:	f7fe ffaf 	bl	42fc <z_arm_prep_c>
    539e:	0000      	.short	0x0000
    ldr r1, =z_sys_post_kernel
    53a0:	200012d3 	.word	0x200012d3
    ldr r1, =_SCS_MPU_CTRL
    53a4:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    53a8:	20001f40 	.word	0x20001f40
    ldr r0, =z_interrupt_stacks
    53ac:	20002100 	.word	0x20002100

000053b0 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    53b0:	4b08      	ldr	r3, [pc, #32]	; (53d4 <z_arm_clear_arm_mpu_config+0x24>)
    53b2:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
    53b6:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    53ba:	2300      	movs	r3, #0
    53bc:	e006      	b.n	53cc <z_arm_clear_arm_mpu_config+0x1c>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    53be:	4a05      	ldr	r2, [pc, #20]	; (53d4 <z_arm_clear_arm_mpu_config+0x24>)
    53c0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    53c4:	2100      	movs	r1, #0
    53c6:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    53ca:	3301      	adds	r3, #1
    53cc:	4283      	cmp	r3, r0
    53ce:	dbf6      	blt.n	53be <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
    53d0:	4770      	bx	lr
    53d2:	bf00      	nop
    53d4:	e000ed00 	.word	0xe000ed00

000053d8 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    53d8:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    53da:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    53dc:	2400      	movs	r4, #0
    53de:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    53e2:	f7ff ffe5 	bl	53b0 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    53e6:	4623      	mov	r3, r4
    53e8:	e008      	b.n	53fc <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    53ea:	f103 0120 	add.w	r1, r3, #32
    53ee:	4a0e      	ldr	r2, [pc, #56]	; (5428 <z_arm_init_arch_hw_at_boot+0x50>)
    53f0:	f04f 30ff 	mov.w	r0, #4294967295
    53f4:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    53f8:	3301      	adds	r3, #1
    53fa:	b2db      	uxtb	r3, r3
    53fc:	2b07      	cmp	r3, #7
    53fe:	d9f4      	bls.n	53ea <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    5400:	2300      	movs	r3, #0
    5402:	e008      	b.n	5416 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    5404:	f103 0160 	add.w	r1, r3, #96	; 0x60
    5408:	4a07      	ldr	r2, [pc, #28]	; (5428 <z_arm_init_arch_hw_at_boot+0x50>)
    540a:	f04f 30ff 	mov.w	r0, #4294967295
    540e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    5412:	3301      	adds	r3, #1
    5414:	b2db      	uxtb	r3, r3
    5416:	2b07      	cmp	r3, #7
    5418:	d9f4      	bls.n	5404 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    541a:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    541c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5420:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    5424:	bd10      	pop	{r4, pc}
    5426:	bf00      	nop
    5428:	e000e100 	.word	0xe000e100

0000542c <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    542c:	b508      	push	{r3, lr}
	if (_current == thread) {
    542e:	4b0a      	ldr	r3, [pc, #40]	; (5458 <z_impl_k_thread_abort+0x2c>)
    5430:	689b      	ldr	r3, [r3, #8]
    5432:	4283      	cmp	r3, r0
    5434:	d002      	beq.n	543c <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
    5436:	f008 fa8d 	bl	d954 <z_thread_abort>
}
    543a:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    543c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    5440:	2b00      	cmp	r3, #0
    5442:	d0f8      	beq.n	5436 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    5444:	4b05      	ldr	r3, [pc, #20]	; (545c <z_impl_k_thread_abort+0x30>)
    5446:	685a      	ldr	r2, [r3, #4]
    5448:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    544c:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    544e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    5450:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    5454:	625a      	str	r2, [r3, #36]	; 0x24
    5456:	e7ee      	b.n	5436 <z_impl_k_thread_abort+0xa>
    5458:	20001090 	.word	0x20001090
    545c:	e000ed00 	.word	0xe000ed00

00005460 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    5460:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    5462:	4b03      	ldr	r3, [pc, #12]	; (5470 <z_arm_configure_static_mpu_regions+0x10>)
    5464:	4a03      	ldr	r2, [pc, #12]	; (5474 <z_arm_configure_static_mpu_regions+0x14>)
    5466:	2101      	movs	r1, #1
    5468:	4803      	ldr	r0, [pc, #12]	; (5478 <z_arm_configure_static_mpu_regions+0x18>)
    546a:	f000 f921 	bl	56b0 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    546e:	bd08      	pop	{r3, pc}
    5470:	20040000 	.word	0x20040000
    5474:	20000000 	.word	0x20000000
    5478:	000110d4 	.word	0x000110d4

0000547c <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    547c:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    547e:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    5482:	3b40      	subs	r3, #64	; 0x40
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    5484:	4804      	ldr	r0, [pc, #16]	; (5498 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    5486:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    5488:	2340      	movs	r3, #64	; 0x40
    548a:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    548c:	4b03      	ldr	r3, [pc, #12]	; (549c <z_arm_configure_dynamic_mpu_regions+0x20>)
    548e:	6083      	str	r3, [r0, #8]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    5490:	2101      	movs	r1, #1
    5492:	f000 f92f 	bl	56f4 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_enable();
#endif
}
    5496:	bd08      	pop	{r3, pc}
    5498:	20000f4c 	.word	0x20000f4c
    549c:	150b0000 	.word	0x150b0000

000054a0 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    54a0:	4a08      	ldr	r2, [pc, #32]	; (54c4 <region_init+0x24>)
    54a2:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    54a6:	680b      	ldr	r3, [r1, #0]
    54a8:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    54ac:	4303      	orrs	r3, r0
    54ae:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    54b2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    54b6:	688b      	ldr	r3, [r1, #8]
    54b8:	f043 0301 	orr.w	r3, r3, #1
    54bc:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    54c0:	4770      	bx	lr
    54c2:	bf00      	nop
    54c4:	e000ed00 	.word	0xe000ed00

000054c8 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
    54c8:	b5b0      	push	{r4, r5, r7, lr}
    54ca:	b082      	sub	sp, #8
    54cc:	af00      	add	r7, sp, #0
    54ce:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    54d0:	2807      	cmp	r0, #7
    54d2:	d805      	bhi.n	54e0 <region_allocate_and_init+0x18>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    54d4:	f7ff ffe4 	bl	54a0 <region_init>

	return index;
    54d8:	4620      	mov	r0, r4
}
    54da:	3708      	adds	r7, #8
    54dc:	46bd      	mov	sp, r7
    54de:	bdb0      	pop	{r4, r5, r7, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    54e0:	466d      	mov	r5, sp
    54e2:	b088      	sub	sp, #32
    54e4:	466b      	mov	r3, sp
    54e6:	f113 0210 	adds.w	r2, r3, #16
    54ea:	d031      	beq.n	5550 <region_allocate_and_init+0x88>
    54ec:	210c      	movs	r1, #12
    54ee:	b11a      	cbz	r2, 54f8 <region_allocate_and_init+0x30>
    54f0:	2904      	cmp	r1, #4
    54f2:	dd01      	ble.n	54f8 <region_allocate_and_init+0x30>
    54f4:	4819      	ldr	r0, [pc, #100]	; (555c <region_allocate_and_init+0x94>)
    54f6:	6158      	str	r0, [r3, #20]
    54f8:	b112      	cbz	r2, 5500 <region_allocate_and_init+0x38>
    54fa:	2908      	cmp	r1, #8
    54fc:	dd00      	ble.n	5500 <region_allocate_and_init+0x38>
    54fe:	619c      	str	r4, [r3, #24]
    5500:	290b      	cmp	r1, #11
    5502:	dd28      	ble.n	5556 <region_allocate_and_init+0x8e>
    5504:	240c      	movs	r4, #12
    5506:	b13a      	cbz	r2, 5518 <region_allocate_and_init+0x50>
    5508:	2103      	movs	r1, #3
    550a:	7139      	strb	r1, [r7, #4]
    550c:	2100      	movs	r1, #0
    550e:	7179      	strb	r1, [r7, #5]
    5510:	71b9      	strb	r1, [r7, #6]
    5512:	71f9      	strb	r1, [r7, #7]
    5514:	6878      	ldr	r0, [r7, #4]
    5516:	6118      	str	r0, [r3, #16]
    5518:	2100      	movs	r1, #0
    551a:	f36f 0100 	bfc	r1, #0, #1
    551e:	f36f 0141 	bfc	r1, #1, #1
    5522:	f36f 0182 	bfc	r1, #2, #1
    5526:	f36f 01c5 	bfc	r1, #3, #3
    552a:	2301      	movs	r3, #1
    552c:	f363 1188 	bfi	r1, r3, #6, #3
    5530:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
    5534:	f364 2152 	bfi	r1, r4, #9, #10
    5538:	f36f 41de 	bfc	r1, #19, #12
    553c:	f36f 71df 	bfc	r1, #31, #1
    5540:	2300      	movs	r3, #0
    5542:	4807      	ldr	r0, [pc, #28]	; (5560 <region_allocate_and_init+0x98>)
    5544:	f7fd ff52 	bl	33ec <z_impl_z_log_msg_static_create>
    5548:	46ad      	mov	sp, r5
		return -EINVAL;
    554a:	f06f 0015 	mvn.w	r0, #21
    554e:	e7c4      	b.n	54da <region_allocate_and_init+0x12>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    5550:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    5554:	e7cb      	b.n	54ee <region_allocate_and_init+0x26>
    5556:	f06f 041b 	mvn.w	r4, #27
    555a:	e7d4      	b.n	5506 <region_allocate_and_init+0x3e>
    555c:	000110e0 	.word	0x000110e0
    5560:	0001015c 	.word	0x0001015c

00005564 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    5564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5568:	b082      	sub	sp, #8
    556a:	af00      	add	r7, sp, #0
    556c:	4681      	mov	r9, r0
    556e:	4688      	mov	r8, r1
    5570:	469a      	mov	sl, r3
	int i;
	int reg_index = start_reg_index;
    5572:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
    5574:	2500      	movs	r5, #0
    5576:	e00f      	b.n	5598 <mpu_configure_regions+0x34>
		}
		/* Non-empty region. */

		if (do_sanity_check &&
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    5578:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    557c:	e024      	b.n	55c8 <mpu_configure_regions+0x64>
    557e:	f06f 041b 	mvn.w	r4, #27
    5582:	e02d      	b.n	55e0 <mpu_configure_regions+0x7c>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    5584:	4621      	mov	r1, r4
    5586:	b2f0      	uxtb	r0, r6
    5588:	f009 fdee 	bl	f168 <mpu_configure_region>
    558c:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
    558e:	f110 0f16 	cmn.w	r0, #22
    5592:	d049      	beq.n	5628 <mpu_configure_regions+0xc4>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
    5594:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
    5596:	3501      	adds	r5, #1
    5598:	4545      	cmp	r5, r8
    559a:	da45      	bge.n	5628 <mpu_configure_regions+0xc4>
		if (regions[i].size == 0U) {
    559c:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    55a0:	eb09 0484 	add.w	r4, r9, r4, lsl #2
    55a4:	6862      	ldr	r2, [r4, #4]
    55a6:	2a00      	cmp	r2, #0
    55a8:	d0f5      	beq.n	5596 <mpu_configure_regions+0x32>
		if (do_sanity_check &&
    55aa:	f1ba 0f00 	cmp.w	sl, #0
    55ae:	d0e9      	beq.n	5584 <mpu_configure_regions+0x20>
				(!mpu_partition_is_valid(&regions[i]))) {
    55b0:	4620      	mov	r0, r4
    55b2:	f009 fdc8 	bl	f146 <mpu_partition_is_valid>
		if (do_sanity_check &&
    55b6:	2800      	cmp	r0, #0
    55b8:	d1e4      	bne.n	5584 <mpu_configure_regions+0x20>
			LOG_ERR("Partition %u: sanity check failed.", i);
    55ba:	466e      	mov	r6, sp
    55bc:	b088      	sub	sp, #32
    55be:	466b      	mov	r3, sp
    55c0:	f113 0210 	adds.w	r2, r3, #16
    55c4:	d0d8      	beq.n	5578 <mpu_configure_regions+0x14>
    55c6:	210c      	movs	r1, #12
    55c8:	b11a      	cbz	r2, 55d2 <mpu_configure_regions+0x6e>
    55ca:	2904      	cmp	r1, #4
    55cc:	dd01      	ble.n	55d2 <mpu_configure_regions+0x6e>
    55ce:	4819      	ldr	r0, [pc, #100]	; (5634 <mpu_configure_regions+0xd0>)
    55d0:	6158      	str	r0, [r3, #20]
    55d2:	b112      	cbz	r2, 55da <mpu_configure_regions+0x76>
    55d4:	2908      	cmp	r1, #8
    55d6:	dd00      	ble.n	55da <mpu_configure_regions+0x76>
    55d8:	619d      	str	r5, [r3, #24]
    55da:	290b      	cmp	r1, #11
    55dc:	ddcf      	ble.n	557e <mpu_configure_regions+0x1a>
    55de:	240c      	movs	r4, #12
    55e0:	b13a      	cbz	r2, 55f2 <mpu_configure_regions+0x8e>
    55e2:	2103      	movs	r1, #3
    55e4:	7139      	strb	r1, [r7, #4]
    55e6:	2100      	movs	r1, #0
    55e8:	7179      	strb	r1, [r7, #5]
    55ea:	71b9      	strb	r1, [r7, #6]
    55ec:	71f9      	strb	r1, [r7, #7]
    55ee:	6878      	ldr	r0, [r7, #4]
    55f0:	6118      	str	r0, [r3, #16]
    55f2:	2100      	movs	r1, #0
    55f4:	f36f 0100 	bfc	r1, #0, #1
    55f8:	f36f 0141 	bfc	r1, #1, #1
    55fc:	f36f 0182 	bfc	r1, #2, #1
    5600:	f36f 01c5 	bfc	r1, #3, #3
    5604:	2301      	movs	r3, #1
    5606:	f363 1188 	bfi	r1, r3, #6, #3
    560a:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
    560e:	f363 2152 	bfi	r1, r3, #9, #10
    5612:	f36f 41de 	bfc	r1, #19, #12
    5616:	f36f 71df 	bfc	r1, #31, #1
    561a:	2300      	movs	r3, #0
    561c:	4806      	ldr	r0, [pc, #24]	; (5638 <mpu_configure_regions+0xd4>)
    561e:	f7fd fee5 	bl	33ec <z_impl_z_log_msg_static_create>
    5622:	46b5      	mov	sp, r6
			return -EINVAL;
    5624:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
    5628:	4630      	mov	r0, r6
    562a:	3708      	adds	r7, #8
    562c:	46bd      	mov	sp, r7
    562e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5632:	bf00      	nop
    5634:	00011108 	.word	0x00011108
    5638:	0001015c 	.word	0x0001015c

0000563c <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    563c:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    563e:	4c03      	ldr	r4, [pc, #12]	; (564c <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    5640:	2301      	movs	r3, #1
    5642:	7822      	ldrb	r2, [r4, #0]
    5644:	f7ff ff8e 	bl	5564 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    5648:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    564a:	bd10      	pop	{r4, pc}
    564c:	200012cd 	.word	0x200012cd

00005650 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    5650:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    5652:	2300      	movs	r3, #0
    5654:	4a09      	ldr	r2, [pc, #36]	; (567c <mpu_configure_dynamic_mpu_regions+0x2c>)
    5656:	7812      	ldrb	r2, [r2, #0]
    5658:	f7ff ff84 	bl	5564 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    565c:	f110 0f16 	cmn.w	r0, #22
    5660:	d00a      	beq.n	5678 <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    5662:	4603      	mov	r3, r0
    5664:	e006      	b.n	5674 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    5666:	4a06      	ldr	r2, [pc, #24]	; (5680 <mpu_configure_dynamic_mpu_regions+0x30>)
    5668:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    566c:	2100      	movs	r1, #0
    566e:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    5672:	3301      	adds	r3, #1
    5674:	2b07      	cmp	r3, #7
    5676:	ddf6      	ble.n	5666 <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    5678:	bd08      	pop	{r3, pc}
    567a:	bf00      	nop
    567c:	200012cd 	.word	0x200012cd
    5680:	e000ed00 	.word	0xe000ed00

00005684 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    5684:	4b04      	ldr	r3, [pc, #16]	; (5698 <arm_core_mpu_enable+0x14>)
    5686:	2205      	movs	r2, #5
    5688:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    568c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5690:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    5694:	4770      	bx	lr
    5696:	bf00      	nop
    5698:	e000ed00 	.word	0xe000ed00

0000569c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    569c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    56a0:	4b02      	ldr	r3, [pc, #8]	; (56ac <arm_core_mpu_disable+0x10>)
    56a2:	2200      	movs	r2, #0
    56a4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    56a8:	4770      	bx	lr
    56aa:	bf00      	nop
    56ac:	e000ed00 	.word	0xe000ed00

000056b0 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    56b0:	b538      	push	{r3, r4, r5, lr}
    56b2:	460c      	mov	r4, r1
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    56b4:	f7ff ffc2 	bl	563c <mpu_configure_static_mpu_regions>
    56b8:	f110 0f16 	cmn.w	r0, #22
    56bc:	d000      	beq.n	56c0 <arm_core_mpu_configure_static_mpu_regions+0x10>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    56be:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    56c0:	4d08      	ldr	r5, [pc, #32]	; (56e4 <arm_core_mpu_configure_static_mpu_regions+0x34>)
    56c2:	f44f 738b 	mov.w	r3, #278	; 0x116
    56c6:	462a      	mov	r2, r5
    56c8:	4907      	ldr	r1, [pc, #28]	; (56e8 <arm_core_mpu_configure_static_mpu_regions+0x38>)
    56ca:	4808      	ldr	r0, [pc, #32]	; (56ec <arm_core_mpu_configure_static_mpu_regions+0x3c>)
    56cc:	f009 fb71 	bl	edb2 <assert_print>
    56d0:	4621      	mov	r1, r4
    56d2:	4807      	ldr	r0, [pc, #28]	; (56f0 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    56d4:	f009 fb6d 	bl	edb2 <assert_print>
    56d8:	f44f 718b 	mov.w	r1, #278	; 0x116
    56dc:	4628      	mov	r0, r5
    56de:	f009 fb61 	bl	eda4 <assert_post_action>
}
    56e2:	e7ec      	b.n	56be <arm_core_mpu_configure_static_mpu_regions+0xe>
    56e4:	0001112c 	.word	0x0001112c
    56e8:	00011934 	.word	0x00011934
    56ec:	00010450 	.word	0x00010450
    56f0:	00011164 	.word	0x00011164

000056f4 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    56f4:	b538      	push	{r3, r4, r5, lr}
    56f6:	460c      	mov	r4, r1
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
    56f8:	f7ff ffaa 	bl	5650 <mpu_configure_dynamic_mpu_regions>
    56fc:	f110 0f16 	cmn.w	r0, #22
    5700:	d000      	beq.n	5704 <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    5702:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    5704:	4d08      	ldr	r5, [pc, #32]	; (5728 <arm_core_mpu_configure_dynamic_mpu_regions+0x34>)
    5706:	f240 1335 	movw	r3, #309	; 0x135
    570a:	462a      	mov	r2, r5
    570c:	4907      	ldr	r1, [pc, #28]	; (572c <arm_core_mpu_configure_dynamic_mpu_regions+0x38>)
    570e:	4808      	ldr	r0, [pc, #32]	; (5730 <arm_core_mpu_configure_dynamic_mpu_regions+0x3c>)
    5710:	f009 fb4f 	bl	edb2 <assert_print>
    5714:	4621      	mov	r1, r4
    5716:	4807      	ldr	r0, [pc, #28]	; (5734 <arm_core_mpu_configure_dynamic_mpu_regions+0x40>)
    5718:	f009 fb4b 	bl	edb2 <assert_print>
    571c:	f240 1135 	movw	r1, #309	; 0x135
    5720:	4628      	mov	r0, r5
    5722:	f009 fb3f 	bl	eda4 <assert_post_action>
}
    5726:	e7ec      	b.n	5702 <arm_core_mpu_configure_dynamic_mpu_regions+0xe>
    5728:	0001112c 	.word	0x0001112c
    572c:	00011934 	.word	0x00011934
    5730:	00010450 	.word	0x00010450
    5734:	00011190 	.word	0x00011190

00005738 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    5738:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    573a:	4b24      	ldr	r3, [pc, #144]	; (57cc <z_arm_mpu_init+0x94>)
    573c:	681d      	ldr	r5, [r3, #0]
    573e:	2d08      	cmp	r5, #8
    5740:	d803      	bhi.n	574a <z_arm_mpu_init+0x12>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    5742:	f7ff ffab 	bl	569c <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    5746:	2400      	movs	r4, #0
    5748:	e01e      	b.n	5788 <z_arm_mpu_init+0x50>
		__ASSERT(0,
    574a:	4c21      	ldr	r4, [pc, #132]	; (57d0 <z_arm_mpu_init+0x98>)
    574c:	f240 134d 	movw	r3, #333	; 0x14d
    5750:	4622      	mov	r2, r4
    5752:	4920      	ldr	r1, [pc, #128]	; (57d4 <z_arm_mpu_init+0x9c>)
    5754:	4820      	ldr	r0, [pc, #128]	; (57d8 <z_arm_mpu_init+0xa0>)
    5756:	f009 fb2c 	bl	edb2 <assert_print>
    575a:	2208      	movs	r2, #8
    575c:	4629      	mov	r1, r5
    575e:	481f      	ldr	r0, [pc, #124]	; (57dc <z_arm_mpu_init+0xa4>)
    5760:	f009 fb27 	bl	edb2 <assert_print>
    5764:	f240 114d 	movw	r1, #333	; 0x14d
    5768:	4620      	mov	r0, r4
    576a:	f009 fb1b 	bl	eda4 <assert_post_action>
		return -1;
    576e:	f04f 30ff 	mov.w	r0, #4294967295
    5772:	e017      	b.n	57a4 <z_arm_mpu_init+0x6c>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    5774:	4b15      	ldr	r3, [pc, #84]	; (57cc <z_arm_mpu_init+0x94>)
    5776:	6859      	ldr	r1, [r3, #4]
    5778:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    577c:	0093      	lsls	r3, r2, #2
    577e:	4419      	add	r1, r3
    5780:	4620      	mov	r0, r4
    5782:	f7ff fe8d 	bl	54a0 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    5786:	3401      	adds	r4, #1
    5788:	42a5      	cmp	r5, r4
    578a:	d8f3      	bhi.n	5774 <z_arm_mpu_init+0x3c>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    578c:	4b14      	ldr	r3, [pc, #80]	; (57e0 <z_arm_mpu_init+0xa8>)
    578e:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    5790:	f7ff ff78 	bl	5684 <arm_core_mpu_enable>

	/* Sanity check for number of regions in Cortex-M0+, M3, and M4. */
#if defined(CONFIG_CPU_CORTEX_M0PLUS) || \
	defined(CONFIG_CPU_CORTEX_M3) || \
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
    5794:	4b13      	ldr	r3, [pc, #76]	; (57e4 <z_arm_mpu_init+0xac>)
    5796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    579a:	f3c3 2307 	ubfx	r3, r3, #8, #8
    579e:	2b08      	cmp	r3, #8
    57a0:	d101      	bne.n	57a6 <z_arm_mpu_init+0x6e>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    57a2:	2000      	movs	r0, #0
}
    57a4:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(
    57a6:	4c0a      	ldr	r4, [pc, #40]	; (57d0 <z_arm_mpu_init+0x98>)
    57a8:	f240 13ad 	movw	r3, #429	; 0x1ad
    57ac:	4622      	mov	r2, r4
    57ae:	490e      	ldr	r1, [pc, #56]	; (57e8 <z_arm_mpu_init+0xb0>)
    57b0:	4809      	ldr	r0, [pc, #36]	; (57d8 <z_arm_mpu_init+0xa0>)
    57b2:	f009 fafe 	bl	edb2 <assert_print>
    57b6:	480d      	ldr	r0, [pc, #52]	; (57ec <z_arm_mpu_init+0xb4>)
    57b8:	f009 fafb 	bl	edb2 <assert_print>
    57bc:	f240 11ad 	movw	r1, #429	; 0x1ad
    57c0:	4620      	mov	r0, r4
    57c2:	f009 faef 	bl	eda4 <assert_post_action>
	return 0;
    57c6:	2000      	movs	r0, #0
    57c8:	e7ec      	b.n	57a4 <z_arm_mpu_init+0x6c>
    57ca:	bf00      	nop
    57cc:	00011278 	.word	0x00011278
    57d0:	0001112c 	.word	0x0001112c
    57d4:	00011934 	.word	0x00011934
    57d8:	00010450 	.word	0x00010450
    57dc:	000111c0 	.word	0x000111c0
    57e0:	200012cd 	.word	0x200012cd
    57e4:	e000ed00 	.word	0xe000ed00
    57e8:	000111f4 	.word	0x000111f4
    57ec:	00011244 	.word	0x00011244

000057f0 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    57f0:	4b01      	ldr	r3, [pc, #4]	; (57f8 <__stdout_hook_install+0x8>)
    57f2:	6018      	str	r0, [r3, #0]
}
    57f4:	4770      	bx	lr
    57f6:	bf00      	nop
    57f8:	20000064 	.word	0x20000064

000057fc <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    57fc:	b510      	push	{r4, lr}
	__asm__ volatile(
    57fe:	f04f 0320 	mov.w	r3, #32
    5802:	f3ef 8411 	mrs	r4, BASEPRI
    5806:	f383 8812 	msr	BASEPRI_MAX, r3
    580a:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    580e:	2301      	movs	r3, #1
    5810:	4a0c      	ldr	r2, [pc, #48]	; (5844 <nordicsemi_nrf52_init+0x48>)
    5812:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    5816:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    581a:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    581e:	f009 fd3f 	bl	f2a0 <nrf52_errata_197>
    5822:	b120      	cbz	r0, 582e <nordicsemi_nrf52_init+0x32>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    5824:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5828:	2201      	movs	r2, #1
    582a:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    582e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5832:	2201      	movs	r2, #1
    5834:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    5838:	f384 8811 	msr	BASEPRI, r4
    583c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    5840:	2000      	movs	r0, #0
    5842:	bd10      	pop	{r4, pc}
    5844:	4001e000 	.word	0x4001e000

00005848 <sys_arch_reboot>:
    *p_gpregret = val;
    5848:	b2c0      	uxtb	r0, r0
    584a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    584e:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    5852:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    5856:	4905      	ldr	r1, [pc, #20]	; (586c <sys_arch_reboot+0x24>)
    5858:	68ca      	ldr	r2, [r1, #12]
    585a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    585e:	4b04      	ldr	r3, [pc, #16]	; (5870 <sys_arch_reboot+0x28>)
    5860:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    5862:	60cb      	str	r3, [r1, #12]
    5864:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    5868:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    586a:	e7fd      	b.n	5868 <sys_arch_reboot+0x20>
    586c:	e000ed00 	.word	0xe000ed00
    5870:	05fa0004 	.word	0x05fa0004

00005874 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    5874:	b130      	cbz	r0, 5884 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    5876:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    5878:	0180      	lsls	r0, r0, #6
    587a:	4b03      	ldr	r3, [pc, #12]	; (5888 <arch_busy_wait+0x14>)
    587c:	f043 0301 	orr.w	r3, r3, #1
    5880:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    5882:	bd08      	pop	{r3, pc}
    5884:	4770      	bx	lr
    5886:	bf00      	nop
    5888:	000101f0 	.word	0x000101f0

0000588c <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    588c:	4800      	ldr	r0, [pc, #0]	; (5890 <get_hf_flags+0x4>)
    588e:	4770      	bx	lr
    5890:	20000fb0 	.word	0x20000fb0

00005894 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    5894:	4b01      	ldr	r3, [pc, #4]	; (589c <get_subsys+0x8>)
    5896:	1ac0      	subs	r0, r0, r3

	return (clock_control_subsys_t)offset;
}
    5898:	1140      	asrs	r0, r0, #5
    589a:	4770      	bx	lr
    589c:	20000f68 	.word	0x20000f68

000058a0 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    58a0:	b530      	push	{r4, r5, lr}
    58a2:	b083      	sub	sp, #12
    58a4:	4605      	mov	r5, r0
    58a6:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    58a8:	f7ff fff4 	bl	5894 <get_subsys>
    58ac:	4601      	mov	r1, r0
    58ae:	2340      	movs	r3, #64	; 0x40
    58b0:	9300      	str	r3, [sp, #0]
    58b2:	4623      	mov	r3, r4
    58b4:	4a05      	ldr	r2, [pc, #20]	; (58cc <onoff_start+0x2c>)
    58b6:	4806      	ldr	r0, [pc, #24]	; (58d0 <onoff_start+0x30>)
    58b8:	f009 fd81 	bl	f3be <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    58bc:	1e01      	subs	r1, r0, #0
    58be:	db01      	blt.n	58c4 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    58c0:	b003      	add	sp, #12
    58c2:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    58c4:	4628      	mov	r0, r5
    58c6:	47a0      	blx	r4
}
    58c8:	e7fa      	b.n	58c0 <onoff_start+0x20>
    58ca:	bf00      	nop
    58cc:	0000f407 	.word	0x0000f407
    58d0:	0000fef0 	.word	0x0000fef0

000058d4 <generic_hfclk_stop>:
{
    58d4:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    58d6:	4b0a      	ldr	r3, [pc, #40]	; (5900 <generic_hfclk_stop+0x2c>)
    58d8:	f3bf 8f5b 	dmb	ish
    58dc:	e853 2f00 	ldrex	r2, [r3]
    58e0:	f022 0102 	bic.w	r1, r2, #2
    58e4:	e843 1000 	strex	r0, r1, [r3]
    58e8:	2800      	cmp	r0, #0
    58ea:	d1f7      	bne.n	58dc <generic_hfclk_stop+0x8>
    58ec:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    58f0:	f012 0f01 	tst.w	r2, #1
    58f4:	d000      	beq.n	58f8 <generic_hfclk_stop+0x24>
}
    58f6:	bd08      	pop	{r3, pc}
	hfclk_stop();
    58f8:	f009 fd97 	bl	f42a <hfclk_stop>
    58fc:	e7fb      	b.n	58f6 <generic_hfclk_stop+0x22>
    58fe:	bf00      	nop
    5900:	20000fc0 	.word	0x20000fc0

00005904 <get_status>:
{
    5904:	b570      	push	{r4, r5, r6, lr}
    5906:	4605      	mov	r5, r0
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    5908:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    590a:	2c01      	cmp	r4, #1
    590c:	d807      	bhi.n	591e <get_status+0x1a>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    590e:	4621      	mov	r1, r4
    5910:	4628      	mov	r0, r5
    5912:	f009 fce7 	bl	f2e4 <get_sub_data>
    5916:	6880      	ldr	r0, [r0, #8]
}
    5918:	f000 0007 	and.w	r0, r0, #7
    591c:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    591e:	4e06      	ldr	r6, [pc, #24]	; (5938 <get_status+0x34>)
    5920:	2379      	movs	r3, #121	; 0x79
    5922:	4632      	mov	r2, r6
    5924:	4905      	ldr	r1, [pc, #20]	; (593c <get_status+0x38>)
    5926:	4806      	ldr	r0, [pc, #24]	; (5940 <get_status+0x3c>)
    5928:	f009 fa43 	bl	edb2 <assert_print>
    592c:	2179      	movs	r1, #121	; 0x79
    592e:	4630      	mov	r0, r6
    5930:	f009 fa38 	bl	eda4 <assert_post_action>
    5934:	e7eb      	b.n	590e <get_status+0xa>
    5936:	bf00      	nop
    5938:	0001129c 	.word	0x0001129c
    593c:	000112dc 	.word	0x000112dc
    5940:	00010450 	.word	0x00010450

00005944 <stop>:
{
    5944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5948:	4607      	mov	r7, r0
    594a:	4616      	mov	r6, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    594c:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    594e:	4621      	mov	r1, r4
    5950:	f009 fcc8 	bl	f2e4 <get_sub_data>
    5954:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    5956:	2c01      	cmp	r4, #1
    5958:	d80f      	bhi.n	597a <stop+0x36>
	err = set_off_state(&subdata->flags, ctx);
    595a:	4631      	mov	r1, r6
    595c:	f105 0008 	add.w	r0, r5, #8
    5960:	f009 fcd1 	bl	f306 <set_off_state>
	if (err < 0) {
    5964:	2800      	cmp	r0, #0
    5966:	db06      	blt.n	5976 <stop+0x32>
	get_sub_config(dev, type)->stop();
    5968:	4621      	mov	r1, r4
    596a:	4638      	mov	r0, r7
    596c:	f009 fcc1 	bl	f2f2 <get_sub_config>
    5970:	6843      	ldr	r3, [r0, #4]
    5972:	4798      	blx	r3
	return 0;
    5974:	2000      	movs	r0, #0
}
    5976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    597a:	f8df 801c 	ldr.w	r8, [pc, #28]	; 5998 <stop+0x54>
    597e:	f240 134d 	movw	r3, #333	; 0x14d
    5982:	4642      	mov	r2, r8
    5984:	4905      	ldr	r1, [pc, #20]	; (599c <stop+0x58>)
    5986:	4806      	ldr	r0, [pc, #24]	; (59a0 <stop+0x5c>)
    5988:	f009 fa13 	bl	edb2 <assert_print>
    598c:	f240 114d 	movw	r1, #333	; 0x14d
    5990:	4640      	mov	r0, r8
    5992:	f009 fa07 	bl	eda4 <assert_post_action>
    5996:	e7e0      	b.n	595a <stop+0x16>
    5998:	0001129c 	.word	0x0001129c
    599c:	000112dc 	.word	0x000112dc
    59a0:	00010450 	.word	0x00010450

000059a4 <onoff_stop>:
{
    59a4:	b538      	push	{r3, r4, r5, lr}
    59a6:	4605      	mov	r5, r0
    59a8:	460c      	mov	r4, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    59aa:	f7ff ff73 	bl	5894 <get_subsys>
    59ae:	4601      	mov	r1, r0
    59b0:	2240      	movs	r2, #64	; 0x40
    59b2:	4803      	ldr	r0, [pc, #12]	; (59c0 <onoff_stop+0x1c>)
    59b4:	f7ff ffc6 	bl	5944 <stop>
    59b8:	4601      	mov	r1, r0
	notify(mgr, res);
    59ba:	4628      	mov	r0, r5
    59bc:	47a0      	blx	r4
}
    59be:	bd38      	pop	{r3, r4, r5, pc}
    59c0:	0000fef0 	.word	0x0000fef0

000059c4 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    59c4:	b510      	push	{r4, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    59c6:	2801      	cmp	r0, #1
    59c8:	d01d      	beq.n	5a06 <clock_event_handler+0x42>
    59ca:	2803      	cmp	r0, #3
    59cc:	d020      	beq.n	5a10 <clock_event_handler+0x4c>
    59ce:	b168      	cbz	r0, 59ec <clock_event_handler+0x28>
			/* Should not happen when calibration is disabled. */
			__ASSERT_NO_MSG(false);
		}
		break;
	default:
		__ASSERT_NO_MSG(0);
    59d0:	4c16      	ldr	r4, [pc, #88]	; (5a2c <clock_event_handler+0x68>)
    59d2:	f240 2362 	movw	r3, #610	; 0x262
    59d6:	4622      	mov	r2, r4
    59d8:	4915      	ldr	r1, [pc, #84]	; (5a30 <clock_event_handler+0x6c>)
    59da:	4816      	ldr	r0, [pc, #88]	; (5a34 <clock_event_handler+0x70>)
    59dc:	f009 f9e9 	bl	edb2 <assert_print>
    59e0:	f240 2162 	movw	r1, #610	; 0x262
    59e4:	4620      	mov	r0, r4
    59e6:	f009 f9dd 	bl	eda4 <assert_post_action>
		break;
	}
}
    59ea:	e010      	b.n	5a0e <clock_event_handler+0x4a>
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    59ec:	2100      	movs	r1, #0
    59ee:	4812      	ldr	r0, [pc, #72]	; (5a38 <clock_event_handler+0x74>)
    59f0:	f009 fc78 	bl	f2e4 <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    59f4:	6883      	ldr	r3, [r0, #8]
    59f6:	f013 0f07 	tst.w	r3, #7
    59fa:	d108      	bne.n	5a0e <clock_event_handler+0x4a>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    59fc:	2100      	movs	r1, #0
    59fe:	480e      	ldr	r0, [pc, #56]	; (5a38 <clock_event_handler+0x74>)
    5a00:	f009 fccb 	bl	f39a <clkstarted_handle>
    5a04:	e003      	b.n	5a0e <clock_event_handler+0x4a>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    5a06:	2101      	movs	r1, #1
    5a08:	480b      	ldr	r0, [pc, #44]	; (5a38 <clock_event_handler+0x74>)
    5a0a:	f009 fcc6 	bl	f39a <clkstarted_handle>
}
    5a0e:	bd10      	pop	{r4, pc}
			__ASSERT_NO_MSG(false);
    5a10:	4c06      	ldr	r4, [pc, #24]	; (5a2c <clock_event_handler+0x68>)
    5a12:	f240 235e 	movw	r3, #606	; 0x25e
    5a16:	4622      	mov	r2, r4
    5a18:	4905      	ldr	r1, [pc, #20]	; (5a30 <clock_event_handler+0x6c>)
    5a1a:	4806      	ldr	r0, [pc, #24]	; (5a34 <clock_event_handler+0x70>)
    5a1c:	f009 f9c9 	bl	edb2 <assert_print>
    5a20:	f240 215e 	movw	r1, #606	; 0x25e
    5a24:	4620      	mov	r0, r4
    5a26:	f009 f9bd 	bl	eda4 <assert_post_action>
		break;
    5a2a:	e7f0      	b.n	5a0e <clock_event_handler+0x4a>
    5a2c:	0001129c 	.word	0x0001129c
    5a30:	00011934 	.word	0x00011934
    5a34:	00010450 	.word	0x00010450
    5a38:	0000fef0 	.word	0x0000fef0

00005a3c <api_blocking_start>:
{
    5a3c:	b500      	push	{lr}
    5a3e:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    5a40:	f8cd d000 	str.w	sp, [sp]
    5a44:	f8cd d004 	str.w	sp, [sp, #4]
    5a48:	2300      	movs	r3, #0
    5a4a:	9302      	str	r3, [sp, #8]
    5a4c:	2301      	movs	r3, #1
    5a4e:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    5a50:	466b      	mov	r3, sp
    5a52:	4a07      	ldr	r2, [pc, #28]	; (5a70 <api_blocking_start+0x34>)
    5a54:	f009 fccf 	bl	f3f6 <api_start>
	if (err < 0) {
    5a58:	2800      	cmp	r0, #0
    5a5a:	db05      	blt.n	5a68 <api_blocking_start+0x2c>
	return z_impl_k_sem_take(sem, timeout);
    5a5c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    5a60:	2300      	movs	r3, #0
    5a62:	4668      	mov	r0, sp
    5a64:	f006 f8a2 	bl	bbac <z_impl_k_sem_take>
}
    5a68:	b005      	add	sp, #20
    5a6a:	f85d fb04 	ldr.w	pc, [sp], #4
    5a6e:	bf00      	nop
    5a70:	0000f449 	.word	0x0000f449

00005a74 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    5a74:	b570      	push	{r4, r5, r6, lr}
    5a76:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    5a78:	2200      	movs	r2, #0
    5a7a:	2101      	movs	r1, #1
    5a7c:	4610      	mov	r0, r2
    5a7e:	f7fe fc03 	bl	4288 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    5a82:	4811      	ldr	r0, [pc, #68]	; (5ac8 <clk_init+0x54>)
    5a84:	f002 ff94 	bl	89b0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    5a88:	4b10      	ldr	r3, [pc, #64]	; (5acc <clk_init+0x58>)
    5a8a:	4298      	cmp	r0, r3
    5a8c:	d119      	bne.n	5ac2 <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    5a8e:	f002 ffb9 	bl	8a04 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    5a92:	2400      	movs	r4, #0
    5a94:	2c01      	cmp	r4, #1
    5a96:	d812      	bhi.n	5abe <clk_init+0x4a>
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    5a98:	4621      	mov	r1, r4
    5a9a:	4630      	mov	r0, r6
    5a9c:	f009 fc22 	bl	f2e4 <get_sub_data>
    5aa0:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    5aa2:	4621      	mov	r1, r4
    5aa4:	4630      	mov	r0, r6
    5aa6:	f009 fc2a 	bl	f2fe <get_onoff_manager>
    5aaa:	4909      	ldr	r1, [pc, #36]	; (5ad0 <clk_init+0x5c>)
    5aac:	f009 f8be 	bl	ec2c <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    5ab0:	2800      	cmp	r0, #0
    5ab2:	db05      	blt.n	5ac0 <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    5ab4:	2301      	movs	r3, #1
    5ab6:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    5ab8:	441c      	add	r4, r3
    5aba:	b2e4      	uxtb	r4, r4
    5abc:	e7ea      	b.n	5a94 <clk_init+0x20>
	}

	return 0;
    5abe:	2000      	movs	r0, #0
}
    5ac0:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    5ac2:	f06f 0004 	mvn.w	r0, #4
    5ac6:	e7fb      	b.n	5ac0 <clk_init+0x4c>
    5ac8:	000059c5 	.word	0x000059c5
    5acc:	0bad0000 	.word	0x0bad0000
    5ad0:	00011364 	.word	0x00011364

00005ad4 <lfclk_spinwait>:
{
    5ad4:	b570      	push	{r4, r5, r6, lr}
    5ad6:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    5ad8:	2801      	cmp	r0, #1
    5ada:	d107      	bne.n	5aec <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    5adc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5ae0:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    5ae4:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    5ae8:	2b01      	cmp	r3, #1
    5aea:	d05a      	beq.n	5ba2 <lfclk_spinwait+0xce>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    5aec:	f00a f902 	bl	fcf4 <k_is_in_isr>
    5af0:	b928      	cbnz	r0, 5afe <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
    5af2:	4b2f      	ldr	r3, [pc, #188]	; (5bb0 <lfclk_spinwait+0xdc>)
    5af4:	781b      	ldrb	r3, [r3, #0]
    5af6:	2b00      	cmp	r3, #0
    5af8:	d043      	beq.n	5b82 <lfclk_spinwait+0xae>
    5afa:	2300      	movs	r3, #0
    5afc:	e000      	b.n	5b00 <lfclk_spinwait+0x2c>
    5afe:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    5b00:	461c      	mov	r4, r3
    5b02:	2b00      	cmp	r3, #0
    5b04:	d03f      	beq.n	5b86 <lfclk_spinwait+0xb2>
	__asm__ volatile(
    5b06:	f04f 0320 	mov.w	r3, #32
    5b0a:	f3ef 8611 	mrs	r6, BASEPRI
    5b0e:	f383 8812 	msr	BASEPRI_MAX, r3
    5b12:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    5b16:	b924      	cbnz	r4, 5b22 <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
    5b18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5b1c:	2202      	movs	r2, #2
    5b1e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5b22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5b26:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    5b2a:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5b2e:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    5b32:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    5b36:	d12d      	bne.n	5b94 <lfclk_spinwait+0xc0>
    return false;
    5b38:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    5b3a:	b11a      	cbz	r2, 5b44 <lfclk_spinwait+0x70>
    5b3c:	2b01      	cmp	r3, #1
    5b3e:	d02b      	beq.n	5b98 <lfclk_spinwait+0xc4>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    5b40:	2d01      	cmp	r5, #1
    5b42:	d029      	beq.n	5b98 <lfclk_spinwait+0xc4>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    5b44:	b30c      	cbz	r4, 5b8a <lfclk_spinwait+0xb6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    5b46:	4630      	mov	r0, r6
    5b48:	f7fe fa56 	bl	3ff8 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    5b4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5b50:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    5b54:	2b00      	cmp	r3, #0
    5b56:	d1e4      	bne.n	5b22 <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5b58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5b5c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    5b60:	2b00      	cmp	r3, #0
    5b62:	d0de      	beq.n	5b22 <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5b64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5b68:	2200      	movs	r2, #0
    5b6a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    5b6e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    5b72:	2201      	movs	r2, #1
    5b74:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5b78:	490e      	ldr	r1, [pc, #56]	; (5bb4 <lfclk_spinwait+0xe0>)
    5b7a:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5b7e:	609a      	str	r2, [r3, #8]
}
    5b80:	e7cf      	b.n	5b22 <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    5b82:	2301      	movs	r3, #1
    5b84:	e7bc      	b.n	5b00 <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
    5b86:	2600      	movs	r6, #0
    5b88:	e7c5      	b.n	5b16 <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
    5b8a:	2021      	movs	r0, #33	; 0x21
    5b8c:	2100      	movs	r1, #0
    5b8e:	f007 fe8f 	bl	d8b0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    5b92:	e7db      	b.n	5b4c <lfclk_spinwait+0x78>
                return true;
    5b94:	2201      	movs	r2, #1
    5b96:	e7d0      	b.n	5b3a <lfclk_spinwait+0x66>
	if (isr_mode) {
    5b98:	b124      	cbz	r4, 5ba4 <lfclk_spinwait+0xd0>
	__asm__ volatile(
    5b9a:	f386 8811 	msr	BASEPRI, r6
    5b9e:	f3bf 8f6f 	isb	sy
}
    5ba2:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
    5ba4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5ba8:	2202      	movs	r2, #2
    5baa:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    5bae:	e7f8      	b.n	5ba2 <lfclk_spinwait+0xce>
    5bb0:	200012d3 	.word	0x200012d3
    5bb4:	e000e100 	.word	0xe000e100

00005bb8 <generic_hfclk_start>:
{
    5bb8:	b510      	push	{r4, lr}
	__asm__ volatile(
    5bba:	f04f 0320 	mov.w	r3, #32
    5bbe:	f3ef 8411 	mrs	r4, BASEPRI
    5bc2:	f383 8812 	msr	BASEPRI_MAX, r3
    5bc6:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    5bca:	4a13      	ldr	r2, [pc, #76]	; (5c18 <generic_hfclk_start+0x60>)
    5bcc:	6813      	ldr	r3, [r2, #0]
    5bce:	f043 0302 	orr.w	r3, r3, #2
    5bd2:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    5bd4:	f013 0f01 	tst.w	r3, #1
    5bd8:	d108      	bne.n	5bec <generic_hfclk_start+0x34>
	bool already_started = false;
    5bda:	2300      	movs	r3, #0
	__asm__ volatile(
    5bdc:	f384 8811 	msr	BASEPRI, r4
    5be0:	f3bf 8f6f 	isb	sy
	if (already_started) {
    5be4:	b99b      	cbnz	r3, 5c0e <generic_hfclk_start+0x56>
	hfclk_start();
    5be6:	f009 fc16 	bl	f416 <hfclk_start>
}
    5bea:	bd10      	pop	{r4, pc}
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    5bec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5bf0:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    5bf4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    5bf8:	f012 0f01 	tst.w	r2, #1
    5bfc:	d101      	bne.n	5c02 <generic_hfclk_start+0x4a>
	bool already_started = false;
    5bfe:	2300      	movs	r3, #0
    5c00:	e7ec      	b.n	5bdc <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    5c02:	f7ff fe43 	bl	588c <get_hf_flags>
    5c06:	f009 fbb5 	bl	f374 <set_on_state>
			already_started = true;
    5c0a:	2301      	movs	r3, #1
    5c0c:	e7e6      	b.n	5bdc <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    5c0e:	2100      	movs	r1, #0
    5c10:	4802      	ldr	r0, [pc, #8]	; (5c1c <generic_hfclk_start+0x64>)
    5c12:	f009 fbc2 	bl	f39a <clkstarted_handle>
		return;
    5c16:	e7e8      	b.n	5bea <generic_hfclk_start+0x32>
    5c18:	20000fc0 	.word	0x20000fc0
    5c1c:	0000fef0 	.word	0x0000fef0

00005c20 <z_nrf_clock_control_lf_on>:
{
    5c20:	b538      	push	{r3, r4, r5, lr}
    5c22:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    5c24:	4b1f      	ldr	r3, [pc, #124]	; (5ca4 <z_nrf_clock_control_lf_on+0x84>)
    5c26:	2101      	movs	r1, #1
    5c28:	f3bf 8f5b 	dmb	ish
    5c2c:	e853 2f00 	ldrex	r2, [r3]
    5c30:	e843 1000 	strex	r0, r1, [r3]
    5c34:	2800      	cmp	r0, #0
    5c36:	d1f9      	bne.n	5c2c <z_nrf_clock_control_lf_on+0xc>
    5c38:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    5c3c:	b142      	cbz	r2, 5c50 <z_nrf_clock_control_lf_on+0x30>
	switch (start_mode) {
    5c3e:	b134      	cbz	r4, 5c4e <z_nrf_clock_control_lf_on+0x2e>
    5c40:	1e63      	subs	r3, r4, #1
    5c42:	b2db      	uxtb	r3, r3
    5c44:	2b01      	cmp	r3, #1
    5c46:	d81f      	bhi.n	5c88 <z_nrf_clock_control_lf_on+0x68>
		lfclk_spinwait(start_mode);
    5c48:	4620      	mov	r0, r4
    5c4a:	f7ff ff43 	bl	5ad4 <lfclk_spinwait>
}
    5c4e:	bd38      	pop	{r3, r4, r5, pc}
				get_onoff_manager(CLOCK_DEVICE,
    5c50:	4815      	ldr	r0, [pc, #84]	; (5ca8 <z_nrf_clock_control_lf_on+0x88>)
    5c52:	f009 fb54 	bl	f2fe <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    5c56:	4915      	ldr	r1, [pc, #84]	; (5cac <z_nrf_clock_control_lf_on+0x8c>)
    5c58:	2300      	movs	r3, #0
    5c5a:	604b      	str	r3, [r1, #4]
    5c5c:	608b      	str	r3, [r1, #8]
    5c5e:	60cb      	str	r3, [r1, #12]
    5c60:	2301      	movs	r3, #1
    5c62:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    5c64:	f7fb ff16 	bl	1a94 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    5c68:	2800      	cmp	r0, #0
    5c6a:	dae8      	bge.n	5c3e <z_nrf_clock_control_lf_on+0x1e>
    5c6c:	4d10      	ldr	r5, [pc, #64]	; (5cb0 <z_nrf_clock_control_lf_on+0x90>)
    5c6e:	f44f 7308 	mov.w	r3, #544	; 0x220
    5c72:	462a      	mov	r2, r5
    5c74:	490f      	ldr	r1, [pc, #60]	; (5cb4 <z_nrf_clock_control_lf_on+0x94>)
    5c76:	4810      	ldr	r0, [pc, #64]	; (5cb8 <z_nrf_clock_control_lf_on+0x98>)
    5c78:	f009 f89b 	bl	edb2 <assert_print>
    5c7c:	f44f 7108 	mov.w	r1, #544	; 0x220
    5c80:	4628      	mov	r0, r5
    5c82:	f009 f88f 	bl	eda4 <assert_post_action>
    5c86:	e7da      	b.n	5c3e <z_nrf_clock_control_lf_on+0x1e>
		__ASSERT_NO_MSG(false);
    5c88:	4c09      	ldr	r4, [pc, #36]	; (5cb0 <z_nrf_clock_control_lf_on+0x90>)
    5c8a:	f240 2332 	movw	r3, #562	; 0x232
    5c8e:	4622      	mov	r2, r4
    5c90:	490a      	ldr	r1, [pc, #40]	; (5cbc <z_nrf_clock_control_lf_on+0x9c>)
    5c92:	4809      	ldr	r0, [pc, #36]	; (5cb8 <z_nrf_clock_control_lf_on+0x98>)
    5c94:	f009 f88d 	bl	edb2 <assert_print>
    5c98:	f240 2132 	movw	r1, #562	; 0x232
    5c9c:	4620      	mov	r0, r4
    5c9e:	f009 f881 	bl	eda4 <assert_post_action>
    5ca2:	e7d4      	b.n	5c4e <z_nrf_clock_control_lf_on+0x2e>
    5ca4:	20000fc4 	.word	0x20000fc4
    5ca8:	0000fef0 	.word	0x0000fef0
    5cac:	20000f58 	.word	0x20000f58
    5cb0:	0001129c 	.word	0x0001129c
    5cb4:	00010938 	.word	0x00010938
    5cb8:	00010450 	.word	0x00010450
    5cbc:	00011934 	.word	0x00011934

00005cc0 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    5cc0:	b510      	push	{r4, lr}
    5cc2:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    5cc4:	280a      	cmp	r0, #10
    5cc6:	d007      	beq.n	5cd8 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    5cc8:	4b07      	ldr	r3, [pc, #28]	; (5ce8 <console_out+0x28>)
    5cca:	6818      	ldr	r0, [r3, #0]
    5ccc:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
    5cce:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    5cd0:	685b      	ldr	r3, [r3, #4]
    5cd2:	4798      	blx	r3

	return c;
}
    5cd4:	4620      	mov	r0, r4
    5cd6:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    5cd8:	4b03      	ldr	r3, [pc, #12]	; (5ce8 <console_out+0x28>)
    5cda:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    5cdc:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    5cde:	685b      	ldr	r3, [r3, #4]
    5ce0:	210d      	movs	r1, #13
    5ce2:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    5ce4:	e7f0      	b.n	5cc8 <console_out+0x8>
    5ce6:	bf00      	nop
    5ce8:	20000fc8 	.word	0x20000fc8

00005cec <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
    5cec:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
    5cee:	4c04      	ldr	r4, [pc, #16]	; (5d00 <uart_console_hook_install+0x14>)
    5cf0:	4620      	mov	r0, r4
    5cf2:	f7ff fd7d 	bl	57f0 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
    5cf6:	4620      	mov	r0, r4
    5cf8:	f7fb fc0c 	bl	1514 <__printk_hook_install>
#endif
}
    5cfc:	bd10      	pop	{r4, pc}
    5cfe:	bf00      	nop
    5d00:	00005cc1 	.word	0x00005cc1

00005d04 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    5d04:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    5d06:	4806      	ldr	r0, [pc, #24]	; (5d20 <uart_console_init+0x1c>)
    5d08:	4b06      	ldr	r3, [pc, #24]	; (5d24 <uart_console_init+0x20>)
    5d0a:	6018      	str	r0, [r3, #0]
    5d0c:	f009 ffa5 	bl	fc5a <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    5d10:	b118      	cbz	r0, 5d1a <uart_console_init+0x16>
		return -ENODEV;
	}

	uart_console_hook_install();
    5d12:	f7ff ffeb 	bl	5cec <uart_console_hook_install>

	return 0;
    5d16:	2000      	movs	r0, #0
}
    5d18:	bd08      	pop	{r3, pc}
		return -ENODEV;
    5d1a:	f06f 0012 	mvn.w	r0, #18
    5d1e:	e7fb      	b.n	5d18 <uart_console_init+0x14>
    5d20:	0000ff50 	.word	0x0000ff50
    5d24:	20000fc8 	.word	0x20000fc8

00005d28 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    5d28:	b128      	cbz	r0, 5d36 <get_dev+0xe>
    5d2a:	2801      	cmp	r0, #1
    5d2c:	d101      	bne.n	5d32 <get_dev+0xa>
    5d2e:	4803      	ldr	r0, [pc, #12]	; (5d3c <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    5d30:	4770      	bx	lr
	const struct device *dev = NULL;
    5d32:	2000      	movs	r0, #0
    5d34:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    5d36:	4802      	ldr	r0, [pc, #8]	; (5d40 <get_dev+0x18>)
    5d38:	4770      	bx	lr
    5d3a:	bf00      	nop
    5d3c:	0000ff08 	.word	0x0000ff08
    5d40:	0000ff20 	.word	0x0000ff20

00005d44 <gpio_nrfx_manage_callback>:
{
    5d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5d48:	4616      	mov	r6, r2
	return port->data;
    5d4a:	6905      	ldr	r5, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    5d4c:	1d2f      	adds	r7, r5, #4
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    5d4e:	460c      	mov	r4, r1
    5d50:	b131      	cbz	r1, 5d60 <gpio_nrfx_manage_callback+0x1c>
	__ASSERT(callback->handler, "No callback handler!");
    5d52:	6863      	ldr	r3, [r4, #4]
    5d54:	b1a3      	cbz	r3, 5d80 <gpio_nrfx_manage_callback+0x3c>
	return list->head;
    5d56:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    5d58:	2b00      	cmp	r3, #0
    5d5a:	d03b      	beq.n	5dd4 <gpio_nrfx_manage_callback+0x90>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5d5c:	2100      	movs	r1, #0
    5d5e:	e02a      	b.n	5db6 <gpio_nrfx_manage_callback+0x72>
	__ASSERT(callback, "No callback!");
    5d60:	f8df 8094 	ldr.w	r8, [pc, #148]	; 5df8 <gpio_nrfx_manage_callback+0xb4>
    5d64:	2324      	movs	r3, #36	; 0x24
    5d66:	4642      	mov	r2, r8
    5d68:	4924      	ldr	r1, [pc, #144]	; (5dfc <gpio_nrfx_manage_callback+0xb8>)
    5d6a:	4825      	ldr	r0, [pc, #148]	; (5e00 <gpio_nrfx_manage_callback+0xbc>)
    5d6c:	f009 f821 	bl	edb2 <assert_print>
    5d70:	4824      	ldr	r0, [pc, #144]	; (5e04 <gpio_nrfx_manage_callback+0xc0>)
    5d72:	f009 f81e 	bl	edb2 <assert_print>
    5d76:	2124      	movs	r1, #36	; 0x24
    5d78:	4640      	mov	r0, r8
    5d7a:	f009 f813 	bl	eda4 <assert_post_action>
    5d7e:	e7e8      	b.n	5d52 <gpio_nrfx_manage_callback+0xe>
	__ASSERT(callback->handler, "No callback handler!");
    5d80:	f8df 8074 	ldr.w	r8, [pc, #116]	; 5df8 <gpio_nrfx_manage_callback+0xb4>
    5d84:	2325      	movs	r3, #37	; 0x25
    5d86:	4642      	mov	r2, r8
    5d88:	491f      	ldr	r1, [pc, #124]	; (5e08 <gpio_nrfx_manage_callback+0xc4>)
    5d8a:	481d      	ldr	r0, [pc, #116]	; (5e00 <gpio_nrfx_manage_callback+0xbc>)
    5d8c:	f009 f811 	bl	edb2 <assert_print>
    5d90:	481e      	ldr	r0, [pc, #120]	; (5e0c <gpio_nrfx_manage_callback+0xc8>)
    5d92:	f009 f80e 	bl	edb2 <assert_print>
    5d96:	2125      	movs	r1, #37	; 0x25
    5d98:	4640      	mov	r0, r8
    5d9a:	f009 f803 	bl	eda4 <assert_post_action>
    5d9e:	e7da      	b.n	5d56 <gpio_nrfx_manage_callback+0x12>
	return node->next;
    5da0:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    5da2:	606b      	str	r3, [r5, #4]
	return list->tail;
    5da4:	687a      	ldr	r2, [r7, #4]
Z_GENLIST_REMOVE(slist, snode)
    5da6:	4294      	cmp	r4, r2
    5da8:	d10f      	bne.n	5dca <gpio_nrfx_manage_callback+0x86>
	list->tail = node;
    5daa:	607b      	str	r3, [r7, #4]
}
    5dac:	e00d      	b.n	5dca <gpio_nrfx_manage_callback+0x86>
	list->tail = node;
    5dae:	6079      	str	r1, [r7, #4]
}
    5db0:	e00b      	b.n	5dca <gpio_nrfx_manage_callback+0x86>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5db2:	4619      	mov	r1, r3
    5db4:	681b      	ldr	r3, [r3, #0]
    5db6:	b15b      	cbz	r3, 5dd0 <gpio_nrfx_manage_callback+0x8c>
    5db8:	429c      	cmp	r4, r3
    5dba:	d1fa      	bne.n	5db2 <gpio_nrfx_manage_callback+0x6e>
Z_GENLIST_REMOVE(slist, snode)
    5dbc:	2900      	cmp	r1, #0
    5dbe:	d0ef      	beq.n	5da0 <gpio_nrfx_manage_callback+0x5c>
	return node->next;
    5dc0:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
    5dc2:	600b      	str	r3, [r1, #0]
	return list->tail;
    5dc4:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_REMOVE(slist, snode)
    5dc6:	429c      	cmp	r4, r3
    5dc8:	d0f1      	beq.n	5dae <gpio_nrfx_manage_callback+0x6a>
	parent->next = child;
    5dca:	2300      	movs	r3, #0
    5dcc:	6023      	str	r3, [r4, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5dce:	2301      	movs	r3, #1
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    5dd0:	b903      	cbnz	r3, 5dd4 <gpio_nrfx_manage_callback+0x90>
			if (!set) {
    5dd2:	b156      	cbz	r6, 5dea <gpio_nrfx_manage_callback+0xa6>
				return -EINVAL;
			}
		}
	}

	if (set) {
    5dd4:	b166      	cbz	r6, 5df0 <gpio_nrfx_manage_callback+0xac>
	return list->head;
    5dd6:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
    5dd8:	6023      	str	r3, [r4, #0]
	list->head = node;
    5dda:	606c      	str	r4, [r5, #4]
	return list->tail;
    5ddc:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_PREPEND(slist, snode)
    5dde:	b10b      	cbz	r3, 5de4 <gpio_nrfx_manage_callback+0xa0>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    5de0:	2000      	movs	r0, #0
    5de2:	e006      	b.n	5df2 <gpio_nrfx_manage_callback+0xae>
	list->tail = node;
    5de4:	607c      	str	r4, [r7, #4]
    5de6:	2000      	movs	r0, #0
}
    5de8:	e003      	b.n	5df2 <gpio_nrfx_manage_callback+0xae>
				return -EINVAL;
    5dea:	f06f 0015 	mvn.w	r0, #21
    5dee:	e000      	b.n	5df2 <gpio_nrfx_manage_callback+0xae>
	return 0;
    5df0:	2000      	movs	r0, #0
}
    5df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5df6:	bf00      	nop
    5df8:	00011370 	.word	0x00011370
    5dfc:	000113a0 	.word	0x000113a0
    5e00:	00010450 	.word	0x00010450
    5e04:	000113ac 	.word	0x000113ac
    5e08:	000113bc 	.word	0x000113bc
    5e0c:	000113d0 	.word	0x000113d0

00005e10 <nrfx_gpio_handler>:

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
    5e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    5e14:	f000 041f 	and.w	r4, r0, #31
	uint32_t pin = abs_pin;
	uint32_t port_id = nrf_gpio_pin_port_number_extract(&pin);
	const struct device *port = get_dev(port_id);
    5e18:	0940      	lsrs	r0, r0, #5
    5e1a:	f7ff ff85 	bl	5d28 <get_dev>

	/* If given port is handled directly by nrfx driver it might not be enabled in DT. */
	if (port == NULL) {
    5e1e:	b380      	cbz	r0, 5e82 <nrfx_gpio_handler+0x72>
    5e20:	4607      	mov	r7, r0
	return port->data;
    5e22:	6903      	ldr	r3, [r0, #16]
	}

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
    5e24:	2601      	movs	r6, #1
    5e26:	40a6      	lsls	r6, r4
	return list->head;
    5e28:	685c      	ldr	r4, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5e2a:	b11c      	cbz	r4, 5e34 <nrfx_gpio_handler+0x24>
    5e2c:	4625      	mov	r5, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    5e2e:	b17c      	cbz	r4, 5e50 <nrfx_gpio_handler+0x40>
	return node->next;
    5e30:	6825      	ldr	r5, [r4, #0]
    5e32:	e00d      	b.n	5e50 <nrfx_gpio_handler+0x40>
    5e34:	4625      	mov	r5, r4
    5e36:	e00b      	b.n	5e50 <nrfx_gpio_handler+0x40>
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    5e38:	6863      	ldr	r3, [r4, #4]
    5e3a:	68a2      	ldr	r2, [r4, #8]
    5e3c:	4032      	ands	r2, r6
    5e3e:	4621      	mov	r1, r4
    5e40:	4638      	mov	r0, r7
    5e42:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5e44:	b1dd      	cbz	r5, 5e7e <nrfx_gpio_handler+0x6e>
    5e46:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    5e48:	b105      	cbz	r5, 5e4c <nrfx_gpio_handler+0x3c>
	return node->next;
    5e4a:	682b      	ldr	r3, [r5, #0]
    5e4c:	462c      	mov	r4, r5
    5e4e:	461d      	mov	r5, r3
    5e50:	b1bc      	cbz	r4, 5e82 <nrfx_gpio_handler+0x72>
		if (cb->pin_mask & pins) {
    5e52:	68a3      	ldr	r3, [r4, #8]
    5e54:	421e      	tst	r6, r3
    5e56:	d0f5      	beq.n	5e44 <nrfx_gpio_handler+0x34>
			__ASSERT(cb->handler, "No callback handler!");
    5e58:	6863      	ldr	r3, [r4, #4]
    5e5a:	2b00      	cmp	r3, #0
    5e5c:	d1ec      	bne.n	5e38 <nrfx_gpio_handler+0x28>
    5e5e:	f8df 8028 	ldr.w	r8, [pc, #40]	; 5e88 <nrfx_gpio_handler+0x78>
    5e62:	2345      	movs	r3, #69	; 0x45
    5e64:	4642      	mov	r2, r8
    5e66:	4909      	ldr	r1, [pc, #36]	; (5e8c <nrfx_gpio_handler+0x7c>)
    5e68:	4809      	ldr	r0, [pc, #36]	; (5e90 <nrfx_gpio_handler+0x80>)
    5e6a:	f008 ffa2 	bl	edb2 <assert_print>
    5e6e:	4809      	ldr	r0, [pc, #36]	; (5e94 <nrfx_gpio_handler+0x84>)
    5e70:	f008 ff9f 	bl	edb2 <assert_print>
    5e74:	2145      	movs	r1, #69	; 0x45
    5e76:	4640      	mov	r0, r8
    5e78:	f008 ff94 	bl	eda4 <assert_post_action>
    5e7c:	e7dc      	b.n	5e38 <nrfx_gpio_handler+0x28>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5e7e:	462b      	mov	r3, r5
    5e80:	e7e4      	b.n	5e4c <nrfx_gpio_handler+0x3c>
}
    5e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5e86:	bf00      	nop
    5e88:	00011370 	.word	0x00011370
    5e8c:	000113e8 	.word	0x000113e8
    5e90:	00010450 	.word	0x00010450
    5e94:	000113d0 	.word	0x000113d0

00005e98 <gpio_nrfx_pin_interrupt_configure>:
{
    5e98:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e9a:	b085      	sub	sp, #20
    5e9c:	460e      	mov	r6, r1
    5e9e:	4619      	mov	r1, r3
	return port->config;
    5ea0:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    5ea2:	7b1b      	ldrb	r3, [r3, #12]
    5ea4:	f006 041f 	and.w	r4, r6, #31
    5ea8:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    5eac:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
    5eb0:	d022      	beq.n	5ef8 <gpio_nrfx_pin_interrupt_configure+0x60>
    5eb2:	4607      	mov	r7, r0
    5eb4:	4615      	mov	r5, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    5eb6:	2300      	movs	r3, #0
    5eb8:	9301      	str	r3, [sp, #4]
    5eba:	9302      	str	r3, [sp, #8]
		.trigger = get_trigger(mode, trig),
    5ebc:	4610      	mov	r0, r2
    5ebe:	f009 fb43 	bl	f548 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    5ec2:	f88d 0004 	strb.w	r0, [sp, #4]
	return port->config;
    5ec6:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    5ec8:	6899      	ldr	r1, [r3, #8]
    5eca:	40f1      	lsrs	r1, r6
    5ecc:	f011 0101 	ands.w	r1, r1, #1
    5ed0:	d102      	bne.n	5ed8 <gpio_nrfx_pin_interrupt_configure+0x40>
    5ed2:	f1b5 7fa0 	cmp.w	r5, #20971520	; 0x1400000
    5ed6:	d014      	beq.n	5f02 <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    5ed8:	2300      	movs	r3, #0
    5eda:	aa01      	add	r2, sp, #4
    5edc:	4619      	mov	r1, r3
    5ede:	4620      	mov	r0, r4
    5ee0:	f003 fa0a 	bl	92f8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    5ee4:	4b32      	ldr	r3, [pc, #200]	; (5fb0 <gpio_nrfx_pin_interrupt_configure+0x118>)
    5ee6:	4298      	cmp	r0, r3
    5ee8:	d15f      	bne.n	5faa <gpio_nrfx_pin_interrupt_configure+0x112>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    5eea:	2101      	movs	r1, #1
    5eec:	4620      	mov	r0, r4
    5eee:	f003 fc67 	bl	97c0 <nrfx_gpiote_trigger_enable>
	return 0;
    5ef2:	2000      	movs	r0, #0
}
    5ef4:	b005      	add	sp, #20
    5ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    5ef8:	4620      	mov	r0, r4
    5efa:	f003 fd6d 	bl	99d8 <nrfx_gpiote_trigger_disable>
		return 0;
    5efe:	2000      	movs	r0, #0
    5f00:	e7f8      	b.n	5ef4 <gpio_nrfx_pin_interrupt_configure+0x5c>
    switch (port)
    5f02:	0963      	lsrs	r3, r4, #5
    5f04:	d01f      	beq.n	5f46 <gpio_nrfx_pin_interrupt_configure+0xae>
    5f06:	2b01      	cmp	r3, #1
    5f08:	d101      	bne.n	5f0e <gpio_nrfx_pin_interrupt_configure+0x76>
            mask = P1_FEATURE_PINS_PRESENT;
    5f0a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    pin_number &= 0x1F;
    5f0e:	f004 031f 	and.w	r3, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5f12:	40d9      	lsrs	r1, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5f14:	f011 0f01 	tst.w	r1, #1
    5f18:	d018      	beq.n	5f4c <gpio_nrfx_pin_interrupt_configure+0xb4>
    *p_pin = pin_number & 0x1F;
    5f1a:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5f1e:	0963      	lsrs	r3, r4, #5
    5f20:	d022      	beq.n	5f68 <gpio_nrfx_pin_interrupt_configure+0xd0>
    5f22:	2b01      	cmp	r3, #1
    5f24:	d023      	beq.n	5f6e <gpio_nrfx_pin_interrupt_configure+0xd6>
            NRFX_ASSERT(0);
    5f26:	4e23      	ldr	r6, [pc, #140]	; (5fb4 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    5f28:	f44f 7313 	mov.w	r3, #588	; 0x24c
    5f2c:	4632      	mov	r2, r6
    5f2e:	4922      	ldr	r1, [pc, #136]	; (5fb8 <gpio_nrfx_pin_interrupt_configure+0x120>)
    5f30:	4822      	ldr	r0, [pc, #136]	; (5fbc <gpio_nrfx_pin_interrupt_configure+0x124>)
    5f32:	f008 ff3e 	bl	edb2 <assert_print>
    5f36:	f44f 7113 	mov.w	r1, #588	; 0x24c
    5f3a:	4630      	mov	r0, r6
    5f3c:	f008 ff32 	bl	eda4 <assert_post_action>
        case 0: return NRF_P0;
    5f40:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    5f44:	e014      	b.n	5f70 <gpio_nrfx_pin_interrupt_configure+0xd8>
            mask = P0_FEATURE_PINS_PRESENT;
    5f46:	f04f 31ff 	mov.w	r1, #4294967295
    5f4a:	e7e0      	b.n	5f0e <gpio_nrfx_pin_interrupt_configure+0x76>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5f4c:	4d19      	ldr	r5, [pc, #100]	; (5fb4 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    5f4e:	f240 2347 	movw	r3, #583	; 0x247
    5f52:	462a      	mov	r2, r5
    5f54:	491a      	ldr	r1, [pc, #104]	; (5fc0 <gpio_nrfx_pin_interrupt_configure+0x128>)
    5f56:	4819      	ldr	r0, [pc, #100]	; (5fbc <gpio_nrfx_pin_interrupt_configure+0x124>)
    5f58:	f008 ff2b 	bl	edb2 <assert_print>
    5f5c:	f240 2147 	movw	r1, #583	; 0x247
    5f60:	4628      	mov	r0, r5
    5f62:	f008 ff1f 	bl	eda4 <assert_post_action>
    5f66:	e7d8      	b.n	5f1a <gpio_nrfx_pin_interrupt_configure+0x82>
        case 0: return NRF_P0;
    5f68:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    5f6c:	e000      	b.n	5f70 <gpio_nrfx_pin_interrupt_configure+0xd8>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5f6e:	4b15      	ldr	r3, [pc, #84]	; (5fc4 <gpio_nrfx_pin_interrupt_configure+0x12c>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    5f70:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    5f74:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    5f78:	f013 0f01 	tst.w	r3, #1
    5f7c:	d1ac      	bne.n	5ed8 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    5f7e:	f10d 010f 	add.w	r1, sp, #15
    5f82:	4620      	mov	r0, r4
    5f84:	f003 fbac 	bl	96e0 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    5f88:	4b0f      	ldr	r3, [pc, #60]	; (5fc8 <gpio_nrfx_pin_interrupt_configure+0x130>)
    5f8a:	4298      	cmp	r0, r3
    5f8c:	d003      	beq.n	5f96 <gpio_nrfx_pin_interrupt_configure+0xfe>
		trigger_config.p_in_channel = &ch;
    5f8e:	f10d 030f 	add.w	r3, sp, #15
    5f92:	9302      	str	r3, [sp, #8]
    5f94:	e7a0      	b.n	5ed8 <gpio_nrfx_pin_interrupt_configure+0x40>
			err = nrfx_gpiote_channel_alloc(&ch);
    5f96:	f10d 000f 	add.w	r0, sp, #15
    5f9a:	f003 fc09 	bl	97b0 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    5f9e:	4b04      	ldr	r3, [pc, #16]	; (5fb0 <gpio_nrfx_pin_interrupt_configure+0x118>)
    5fa0:	4298      	cmp	r0, r3
    5fa2:	d0f4      	beq.n	5f8e <gpio_nrfx_pin_interrupt_configure+0xf6>
				return -ENOMEM;
    5fa4:	f06f 000b 	mvn.w	r0, #11
    5fa8:	e7a4      	b.n	5ef4 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EINVAL;
    5faa:	f06f 0015 	mvn.w	r0, #21
    5fae:	e7a1      	b.n	5ef4 <gpio_nrfx_pin_interrupt_configure+0x5c>
    5fb0:	0bad0000 	.word	0x0bad0000
    5fb4:	000113f4 	.word	0x000113f4
    5fb8:	00011934 	.word	0x00011934
    5fbc:	00010450 	.word	0x00010450
    5fc0:	00011428 	.word	0x00011428
    5fc4:	50000300 	.word	0x50000300
    5fc8:	0bad0004 	.word	0x0bad0004

00005fcc <gpio_nrfx_pin_configure>:
{
    5fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5fd0:	b086      	sub	sp, #24
    5fd2:	460e      	mov	r6, r1
    5fd4:	4614      	mov	r4, r2
	return port->config;
    5fd6:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    5fda:	f898 300c 	ldrb.w	r3, [r8, #12]
    5fde:	f001 051f 	and.w	r5, r1, #31
    5fe2:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    5fe6:	f10d 0117 	add.w	r1, sp, #23
    5fea:	4628      	mov	r0, r5
    5fec:	f003 fb78 	bl	96e0 <nrfx_gpiote_channel_get>
    5ff0:	4607      	mov	r7, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    5ff2:	f414 3f40 	tst.w	r4, #196608	; 0x30000
    5ff6:	d03b      	beq.n	6070 <gpio_nrfx_pin_configure+0xa4>
	nrfx_gpiote_trigger_config_t trigger_config = {
    5ff8:	2100      	movs	r1, #0
    5ffa:	9103      	str	r1, [sp, #12]
    5ffc:	9104      	str	r1, [sp, #16]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    5ffe:	460b      	mov	r3, r1
    6000:	aa03      	add	r2, sp, #12
    6002:	4628      	mov	r0, r5
    6004:	f003 f978 	bl	92f8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    6008:	4b42      	ldr	r3, [pc, #264]	; (6114 <gpio_nrfx_pin_configure+0x148>)
    600a:	4298      	cmp	r0, r3
    600c:	d17f      	bne.n	610e <gpio_nrfx_pin_configure+0x142>
	if (free_ch) {
    600e:	429f      	cmp	r7, r3
    6010:	d04c      	beq.n	60ac <gpio_nrfx_pin_configure+0xe0>
	if (flags & GPIO_OUTPUT) {
    6012:	f414 3f00 	tst.w	r4, #131072	; 0x20000
    6016:	d067      	beq.n	60e8 <gpio_nrfx_pin_configure+0x11c>
		int rv = get_drive(flags, &drive);
    6018:	f10d 0103 	add.w	r1, sp, #3
    601c:	4620      	mov	r0, r4
    601e:	f009 fa18 	bl	f452 <get_drive>
		if (rv != 0) {
    6022:	4607      	mov	r7, r0
    6024:	bb58      	cbnz	r0, 607e <gpio_nrfx_pin_configure+0xb2>
		nrfx_gpiote_output_config_t output_config = {
    6026:	f89d 3003 	ldrb.w	r3, [sp, #3]
    602a:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    602e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
    6032:	bf0c      	ite	eq
    6034:	2301      	moveq	r3, #1
    6036:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    6038:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    603c:	4620      	mov	r0, r4
    603e:	f009 fa4b 	bl	f4d8 <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    6042:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    6046:	f414 2f00 	tst.w	r4, #524288	; 0x80000
    604a:	d042      	beq.n	60d2 <gpio_nrfx_pin_configure+0x106>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    604c:	f8d8 3004 	ldr.w	r3, [r8, #4]
    6050:	2101      	movs	r1, #1
    6052:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    6056:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    605a:	2200      	movs	r2, #0
    605c:	a901      	add	r1, sp, #4
    605e:	4628      	mov	r0, r5
    6060:	f003 fa3e 	bl	94e0 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    6064:	4b2b      	ldr	r3, [pc, #172]	; (6114 <gpio_nrfx_pin_configure+0x148>)
    6066:	4298      	cmp	r0, r3
    6068:	d009      	beq.n	607e <gpio_nrfx_pin_configure+0xb2>
    606a:	f06f 0715 	mvn.w	r7, #21
    606e:	e006      	b.n	607e <gpio_nrfx_pin_configure+0xb2>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    6070:	4628      	mov	r0, r5
    6072:	f003 fd19 	bl	9aa8 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    6076:	4b27      	ldr	r3, [pc, #156]	; (6114 <gpio_nrfx_pin_configure+0x148>)
    6078:	429f      	cmp	r7, r3
    607a:	d004      	beq.n	6086 <gpio_nrfx_pin_configure+0xba>
		return 0;
    607c:	2700      	movs	r7, #0
}
    607e:	4638      	mov	r0, r7
    6080:	b006      	add	sp, #24
    6082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = nrfx_gpiote_channel_free(ch);
    6086:	f89d 0017 	ldrb.w	r0, [sp, #23]
    608a:	f003 fb89 	bl	97a0 <nrfx_gpiote_channel_free>
			__ASSERT_NO_MSG(err == NRFX_SUCCESS);
    608e:	4b21      	ldr	r3, [pc, #132]	; (6114 <gpio_nrfx_pin_configure+0x148>)
    6090:	4298      	cmp	r0, r3
    6092:	d0f3      	beq.n	607c <gpio_nrfx_pin_configure+0xb0>
    6094:	4c20      	ldr	r4, [pc, #128]	; (6118 <gpio_nrfx_pin_configure+0x14c>)
    6096:	2368      	movs	r3, #104	; 0x68
    6098:	4622      	mov	r2, r4
    609a:	4920      	ldr	r1, [pc, #128]	; (611c <gpio_nrfx_pin_configure+0x150>)
    609c:	4820      	ldr	r0, [pc, #128]	; (6120 <gpio_nrfx_pin_configure+0x154>)
    609e:	f008 fe88 	bl	edb2 <assert_print>
    60a2:	2168      	movs	r1, #104	; 0x68
    60a4:	4620      	mov	r0, r4
    60a6:	f008 fe7d 	bl	eda4 <assert_post_action>
    60aa:	e7e7      	b.n	607c <gpio_nrfx_pin_configure+0xb0>
		err = nrfx_gpiote_channel_free(ch);
    60ac:	f89d 0017 	ldrb.w	r0, [sp, #23]
    60b0:	f003 fb76 	bl	97a0 <nrfx_gpiote_channel_free>
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
    60b4:	4b17      	ldr	r3, [pc, #92]	; (6114 <gpio_nrfx_pin_configure+0x148>)
    60b6:	4298      	cmp	r0, r3
    60b8:	d0ab      	beq.n	6012 <gpio_nrfx_pin_configure+0x46>
    60ba:	4f17      	ldr	r7, [pc, #92]	; (6118 <gpio_nrfx_pin_configure+0x14c>)
    60bc:	237a      	movs	r3, #122	; 0x7a
    60be:	463a      	mov	r2, r7
    60c0:	4916      	ldr	r1, [pc, #88]	; (611c <gpio_nrfx_pin_configure+0x150>)
    60c2:	4817      	ldr	r0, [pc, #92]	; (6120 <gpio_nrfx_pin_configure+0x154>)
    60c4:	f008 fe75 	bl	edb2 <assert_print>
    60c8:	217a      	movs	r1, #122	; 0x7a
    60ca:	4638      	mov	r0, r7
    60cc:	f008 fe6a 	bl	eda4 <assert_post_action>
    60d0:	e79f      	b.n	6012 <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    60d2:	f414 2f80 	tst.w	r4, #262144	; 0x40000
    60d6:	d0c0      	beq.n	605a <gpio_nrfx_pin_configure+0x8e>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    60d8:	f8d8 2004 	ldr.w	r2, [r8, #4]
    60dc:	2301      	movs	r3, #1
    60de:	fa03 f606 	lsl.w	r6, r3, r6
    p_reg->OUTCLR = clr_mask;
    60e2:	f8c2 650c 	str.w	r6, [r2, #1292]	; 0x50c
}
    60e6:	e7b8      	b.n	605a <gpio_nrfx_pin_configure+0x8e>
		.pull = get_pull(flags)
    60e8:	4620      	mov	r0, r4
    60ea:	f009 f9f5 	bl	f4d8 <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    60ee:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    60f2:	2300      	movs	r3, #0
    60f4:	461a      	mov	r2, r3
    60f6:	a902      	add	r1, sp, #8
    60f8:	4628      	mov	r0, r5
    60fa:	f003 f8fd 	bl	92f8 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    60fe:	4b05      	ldr	r3, [pc, #20]	; (6114 <gpio_nrfx_pin_configure+0x148>)
    6100:	4298      	cmp	r0, r3
    6102:	d101      	bne.n	6108 <gpio_nrfx_pin_configure+0x13c>
    6104:	2700      	movs	r7, #0
    6106:	e7ba      	b.n	607e <gpio_nrfx_pin_configure+0xb2>
    6108:	f06f 0715 	mvn.w	r7, #21
    610c:	e7b7      	b.n	607e <gpio_nrfx_pin_configure+0xb2>
		return -EINVAL;
    610e:	f06f 0715 	mvn.w	r7, #21
    6112:	e7b4      	b.n	607e <gpio_nrfx_pin_configure+0xb2>
    6114:	0bad0000 	.word	0x0bad0000
    6118:	0001144c 	.word	0x0001144c
    611c:	00011478 	.word	0x00011478
    6120:	00010450 	.word	0x00010450

00006124 <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    6124:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    6126:	f003 fb31 	bl	978c <nrfx_gpiote_is_init>
    612a:	b108      	cbz	r0, 6130 <gpio_nrfx_init+0xc>
		return 0;
    612c:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    612e:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    6130:	f003 fb02 	bl	9738 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    6134:	4b08      	ldr	r3, [pc, #32]	; (6158 <gpio_nrfx_init+0x34>)
    6136:	4298      	cmp	r0, r3
    6138:	d10a      	bne.n	6150 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    613a:	2100      	movs	r1, #0
    613c:	4807      	ldr	r0, [pc, #28]	; (615c <gpio_nrfx_init+0x38>)
    613e:	f003 fac9 	bl	96d4 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    6142:	2200      	movs	r2, #0
    6144:	2105      	movs	r1, #5
    6146:	2006      	movs	r0, #6
    6148:	f7fe f89e 	bl	4288 <z_arm_irq_priority_set>
	return 0;
    614c:	2000      	movs	r0, #0
    614e:	e7ee      	b.n	612e <gpio_nrfx_init+0xa>
		return -EIO;
    6150:	f06f 0004 	mvn.w	r0, #4
    6154:	e7eb      	b.n	612e <gpio_nrfx_init+0xa>
    6156:	bf00      	nop
    6158:	0bad0000 	.word	0x0bad0000
    615c:	00005e11 	.word	0x00005e11

00006160 <pwm_nrfx_get_cycles_per_sec>:
{
	/* TODO: Since this function might be removed, we will always return
	 * 16MHz from this function and handle the conversion with prescaler,
	 * etc, in the pin set function. See issue #6958.
	 */
	*cycles = 16ul * 1000ul * 1000ul;
    6160:	4802      	ldr	r0, [pc, #8]	; (616c <pwm_nrfx_get_cycles_per_sec+0xc>)
    6162:	2100      	movs	r1, #0
    6164:	e9c2 0100 	strd	r0, r1, [r2]

	return 0;
}
    6168:	2000      	movs	r0, #0
    616a:	4770      	bx	lr
    616c:	00f42400 	.word	0x00f42400

00006170 <channel_psel_get>:
{
    6170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6172:	460d      	mov	r5, r1
	*psel = nrf_pwm_pin_get(config->pwm.p_registers, (uint8_t)channel);
    6174:	6816      	ldr	r6, [r2, #0]
    6176:	b2c4      	uxtb	r4, r0
    }
}

NRF_STATIC_INLINE uint32_t nrf_pwm_pin_get(NRF_PWM_Type const * p_reg, uint8_t channel)
{
    NRFX_ASSERT(channel < NRF_PWM_CHANNEL_COUNT);
    6178:	2c03      	cmp	r4, #3
    617a:	d807      	bhi.n	618c <channel_psel_get+0x1c>
    return p_reg->PSEL.OUT[channel];
    617c:	f504 74ac 	add.w	r4, r4, #344	; 0x158
    6180:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
    6184:	6028      	str	r0, [r5, #0]
}
    6186:	43c0      	mvns	r0, r0
    6188:	0fc0      	lsrs	r0, r0, #31
    618a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    NRFX_ASSERT(channel < NRF_PWM_CHANNEL_COUNT);
    618c:	4f06      	ldr	r7, [pc, #24]	; (61a8 <channel_psel_get+0x38>)
    618e:	f240 2393 	movw	r3, #659	; 0x293
    6192:	463a      	mov	r2, r7
    6194:	4905      	ldr	r1, [pc, #20]	; (61ac <channel_psel_get+0x3c>)
    6196:	4806      	ldr	r0, [pc, #24]	; (61b0 <channel_psel_get+0x40>)
    6198:	f008 fe0b 	bl	edb2 <assert_print>
    619c:	f240 2193 	movw	r1, #659	; 0x293
    61a0:	4638      	mov	r0, r7
    61a2:	f008 fdff 	bl	eda4 <assert_post_action>
    61a6:	e7e9      	b.n	617c <channel_psel_get+0xc>
    61a8:	000114f0 	.word	0x000114f0
    61ac:	00011524 	.word	0x00011524
    61b0:	00010450 	.word	0x00010450

000061b4 <pwm_period_check_and_set>:
{
    61b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    61b8:	b089      	sub	sp, #36	; 0x24
    61ba:	af00      	add	r7, sp, #0
    61bc:	4615      	mov	r5, r2
	const struct pwm_nrfx_config *config = dev->config;
    61be:	6846      	ldr	r6, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;
    61c0:	6902      	ldr	r2, [r0, #16]
	if (period_cycles == data->period_cycles) {
    61c2:	6813      	ldr	r3, [r2, #0]
    61c4:	42ab      	cmp	r3, r5
    61c6:	f000 8096 	beq.w	62f6 <pwm_period_check_and_set+0x142>
	if ((data->pwm_needed & ~BIT(channel)) != 0) {
    61ca:	7b10      	ldrb	r0, [r2, #12]
    61cc:	2301      	movs	r3, #1
    61ce:	fa03 f101 	lsl.w	r1, r3, r1
    61d2:	ea30 0301 	bics.w	r3, r0, r1
    61d6:	d143      	bne.n	6260 <pwm_period_check_and_set+0xac>
	countertop = period_cycles;
    61d8:	462b      	mov	r3, r5
	prescaler = 0;
    61da:	2400      	movs	r4, #0
		if (countertop <= PWM_COUNTERTOP_COUNTERTOP_Msk) {
    61dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    61e0:	d363      	bcc.n	62aa <pwm_period_check_and_set+0xf6>
		countertop >>= 1;
    61e2:	085b      	lsrs	r3, r3, #1
		++prescaler;
    61e4:	3401      	adds	r4, #1
    61e6:	b2e4      	uxtb	r4, r4
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
    61e8:	2c07      	cmp	r4, #7
    61ea:	d9f7      	bls.n	61dc <pwm_period_check_and_set+0x28>
	LOG_ERR("Prescaler for period_cycles %u not found.", period_cycles);
    61ec:	466e      	mov	r6, sp
    61ee:	b088      	sub	sp, #32
    61f0:	466b      	mov	r3, sp
    61f2:	f113 0210 	adds.w	r2, r3, #16
    61f6:	d078      	beq.n	62ea <pwm_period_check_and_set+0x136>
    61f8:	210c      	movs	r1, #12
    61fa:	b11a      	cbz	r2, 6204 <pwm_period_check_and_set+0x50>
    61fc:	2904      	cmp	r1, #4
    61fe:	dd01      	ble.n	6204 <pwm_period_check_and_set+0x50>
    6200:	483e      	ldr	r0, [pc, #248]	; (62fc <pwm_period_check_and_set+0x148>)
    6202:	6158      	str	r0, [r3, #20]
    6204:	b112      	cbz	r2, 620c <pwm_period_check_and_set+0x58>
    6206:	2908      	cmp	r1, #8
    6208:	dd00      	ble.n	620c <pwm_period_check_and_set+0x58>
    620a:	619d      	str	r5, [r3, #24]
    620c:	290b      	cmp	r1, #11
    620e:	dd6f      	ble.n	62f0 <pwm_period_check_and_set+0x13c>
    6210:	240c      	movs	r4, #12
    6212:	b13a      	cbz	r2, 6224 <pwm_period_check_and_set+0x70>
    6214:	2103      	movs	r1, #3
    6216:	7139      	strb	r1, [r7, #4]
    6218:	2100      	movs	r1, #0
    621a:	7179      	strb	r1, [r7, #5]
    621c:	71b9      	strb	r1, [r7, #6]
    621e:	71f9      	strb	r1, [r7, #7]
    6220:	6878      	ldr	r0, [r7, #4]
    6222:	6118      	str	r0, [r3, #16]
    6224:	2100      	movs	r1, #0
    6226:	f36f 0100 	bfc	r1, #0, #1
    622a:	f36f 0141 	bfc	r1, #1, #1
    622e:	f36f 0182 	bfc	r1, #2, #1
    6232:	f36f 01c5 	bfc	r1, #3, #3
    6236:	2301      	movs	r3, #1
    6238:	f363 1188 	bfi	r1, r3, #6, #3
    623c:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
    6240:	f364 2152 	bfi	r1, r4, #9, #10
    6244:	f36f 41de 	bfc	r1, #19, #12
    6248:	f36f 71df 	bfc	r1, #31, #1
    624c:	2300      	movs	r3, #0
    624e:	482c      	ldr	r0, [pc, #176]	; (6300 <pwm_period_check_and_set+0x14c>)
    6250:	f7fd f8cc 	bl	33ec <z_impl_z_log_msg_static_create>
    6254:	46b5      	mov	sp, r6
	return false;
    6256:	2000      	movs	r0, #0
}
    6258:	3724      	adds	r7, #36	; 0x24
    625a:	46bd      	mov	sp, r7
    625c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LOG_ERR("Incompatible period.");
    6260:	4b28      	ldr	r3, [pc, #160]	; (6304 <pwm_period_check_and_set+0x150>)
    6262:	61fb      	str	r3, [r7, #28]
    6264:	2302      	movs	r3, #2
    6266:	713b      	strb	r3, [r7, #4]
    6268:	2400      	movs	r4, #0
    626a:	717c      	strb	r4, [r7, #5]
    626c:	71bc      	strb	r4, [r7, #6]
    626e:	71fc      	strb	r4, [r7, #7]
    6270:	687b      	ldr	r3, [r7, #4]
    6272:	61bb      	str	r3, [r7, #24]
    6274:	4621      	mov	r1, r4
    6276:	f364 0100 	bfi	r1, r4, #0, #1
    627a:	f364 0141 	bfi	r1, r4, #1, #1
    627e:	f364 0182 	bfi	r1, r4, #2, #1
    6282:	f364 01c5 	bfi	r1, r4, #3, #3
    6286:	2301      	movs	r3, #1
    6288:	f363 1188 	bfi	r1, r3, #6, #3
    628c:	2308      	movs	r3, #8
    628e:	f363 2152 	bfi	r1, r3, #9, #10
    6292:	f364 41de 	bfi	r1, r4, #19, #12
    6296:	f364 71df 	bfi	r1, r4, #31, #1
    629a:	4623      	mov	r3, r4
    629c:	f107 0218 	add.w	r2, r7, #24
    62a0:	4817      	ldr	r0, [pc, #92]	; (6300 <pwm_period_check_and_set+0x14c>)
    62a2:	f7fd f8a3 	bl	33ec <z_impl_z_log_msg_static_create>
		return false;
    62a6:	4620      	mov	r0, r4
    62a8:	e7d6      	b.n	6258 <pwm_period_check_and_set+0xa4>
			data->period_cycles = period_cycles;
    62aa:	6015      	str	r5, [r2, #0]
			data->prescaler     = prescaler;
    62ac:	7354      	strb	r4, [r2, #13]
			nrf_pwm_configure(config->pwm.p_registers,
    62ae:	6835      	ldr	r5, [r6, #0]
    62b0:	f896 800e 	ldrb.w	r8, [r6, #14]
    62b4:	b29e      	uxth	r6, r3
NRF_STATIC_INLINE void nrf_pwm_configure(NRF_PWM_Type * p_reg,
                                         nrf_pwm_clk_t  base_clock,
                                         nrf_pwm_mode_t mode,
                                         uint16_t       top_value)
{
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);
    62b6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    62ba:	d107      	bne.n	62cc <pwm_period_check_and_set+0x118>

    p_reg->PRESCALER  = base_clock;
    62bc:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
    p_reg->MODE       = mode;
    62c0:	f8c5 8504 	str.w	r8, [r5, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
    62c4:	f8c5 6508 	str.w	r6, [r5, #1288]	; 0x508
			return true;
    62c8:	2001      	movs	r0, #1
}
    62ca:	e7c5      	b.n	6258 <pwm_period_check_and_set+0xa4>
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);
    62cc:	f8df 9038 	ldr.w	r9, [pc, #56]	; 6308 <pwm_period_check_and_set+0x154>
    62d0:	f44f 7327 	mov.w	r3, #668	; 0x29c
    62d4:	464a      	mov	r2, r9
    62d6:	490d      	ldr	r1, [pc, #52]	; (630c <pwm_period_check_and_set+0x158>)
    62d8:	480d      	ldr	r0, [pc, #52]	; (6310 <pwm_period_check_and_set+0x15c>)
    62da:	f008 fd6a 	bl	edb2 <assert_print>
    62de:	f44f 7127 	mov.w	r1, #668	; 0x29c
    62e2:	4648      	mov	r0, r9
    62e4:	f008 fd5e 	bl	eda4 <assert_post_action>
    62e8:	e7e8      	b.n	62bc <pwm_period_check_and_set+0x108>
	LOG_ERR("Prescaler for period_cycles %u not found.", period_cycles);
    62ea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    62ee:	e784      	b.n	61fa <pwm_period_check_and_set+0x46>
    62f0:	f06f 041b 	mvn.w	r4, #27
    62f4:	e78d      	b.n	6212 <pwm_period_check_and_set+0x5e>
		return true;
    62f6:	2001      	movs	r0, #1
    62f8:	e7ae      	b.n	6258 <pwm_period_check_and_set+0xa4>
    62fa:	bf00      	nop
    62fc:	0001156c 	.word	0x0001156c
    6300:	0001017c 	.word	0x0001017c
    6304:	00011530 	.word	0x00011530
    6308:	000114f0 	.word	0x000114f0
    630c:	00011548 	.word	0x00011548
    6310:	00010450 	.word	0x00010450

00006314 <pwm_nrfx_init>:
	.set_cycles = pwm_nrfx_set_cycles,
	.get_cycles_per_sec = pwm_nrfx_get_cycles_per_sec,
};

static int pwm_nrfx_init(const struct device *dev)
{
    6314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6318:	b082      	sub	sp, #8
    631a:	af00      	add	r7, sp, #0
    631c:	4680      	mov	r8, r0
	const struct pwm_nrfx_config *config = dev->config;
    631e:	6846      	ldr	r6, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;
    6320:	6905      	ldr	r5, [r0, #16]

#ifdef CONFIG_PINCTRL
	int ret = pinctrl_apply_state(config->pcfg, PINCTRL_STATE_DEFAULT);
    6322:	6ab4      	ldr	r4, [r6, #40]	; 0x28
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    6324:	1d3a      	adds	r2, r7, #4
    6326:	2100      	movs	r1, #0
    6328:	4620      	mov	r0, r4
    632a:	f009 fb37 	bl	f99c <pinctrl_lookup_state>
	if (ret < 0) {
    632e:	2800      	cmp	r0, #0
    6330:	db05      	blt.n	633e <pwm_nrfx_init+0x2a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    6332:	687b      	ldr	r3, [r7, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    6334:	6822      	ldr	r2, [r4, #0]
    6336:	7919      	ldrb	r1, [r3, #4]
    6338:	6818      	ldr	r0, [r3, #0]
    633a:	f000 fe0b 	bl	6f54 <pinctrl_configure_pins>

	if (ret < 0) {
    633e:	2800      	cmp	r0, #0
    6340:	db74      	blt.n	642c <pwm_nrfx_init+0x118>
		return ret;
	}

	data->initially_inverted = 0;
    6342:	2400      	movs	r4, #0
    6344:	73ac      	strb	r4, [r5, #14]
	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
    6346:	e024      	b.n	6392 <pwm_nrfx_init+0x7e>
            mask = P0_FEATURE_PINS_PRESENT;
    6348:	f04f 33ff 	mov.w	r3, #4294967295
    634c:	e033      	b.n	63b6 <pwm_nrfx_init+0xa2>
    switch (port)
    634e:	2300      	movs	r3, #0
    6350:	e031      	b.n	63b6 <pwm_nrfx_init+0xa2>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6352:	f8df a188 	ldr.w	sl, [pc, #392]	; 64dc <pwm_nrfx_init+0x1c8>
    6356:	f240 2347 	movw	r3, #583	; 0x247
    635a:	4652      	mov	r2, sl
    635c:	4960      	ldr	r1, [pc, #384]	; (64e0 <pwm_nrfx_init+0x1cc>)
    635e:	4861      	ldr	r0, [pc, #388]	; (64e4 <pwm_nrfx_init+0x1d0>)
    6360:	f008 fd27 	bl	edb2 <assert_print>
    6364:	f240 2147 	movw	r1, #583	; 0x247
    6368:	4650      	mov	r0, sl
    636a:	f008 fd1b 	bl	eda4 <assert_post_action>
    636e:	e028      	b.n	63c2 <pwm_nrfx_init+0xae>
        case 0: return NRF_P0;
    6370:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6374:	e000      	b.n	6378 <pwm_nrfx_init+0x64>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6376:	4b5c      	ldr	r3, [pc, #368]	; (64e8 <pwm_nrfx_init+0x1d4>)
    return p_reg->OUT;
    6378:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    return ((nrf_gpio_port_out_read(reg) >> pin_number) & 1UL);
    637c:	fa23 f30a 	lsr.w	r3, r3, sl
			/* Mark channels as inverted according to what initial
			 * state of their outputs has been set by pinctrl (high
			 * idle state means that the channel is inverted).
			 */
			data->initially_inverted |=
				nrf_gpio_pin_out_read(psel) ? BIT(i) : 0;
    6380:	f013 0301 	ands.w	r3, r3, #1
    6384:	d001      	beq.n	638a <pwm_nrfx_init+0x76>
    6386:	2301      	movs	r3, #1
    6388:	40a3      	lsls	r3, r4
			data->initially_inverted |=
    638a:	7baa      	ldrb	r2, [r5, #14]
    638c:	4313      	orrs	r3, r2
    638e:	73ab      	strb	r3, [r5, #14]
	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
    6390:	3401      	adds	r4, #1
    6392:	2c03      	cmp	r4, #3
    6394:	d82e      	bhi.n	63f4 <pwm_nrfx_init+0xe0>
		if (channel_psel_get(i, &psel, config)) {
    6396:	4632      	mov	r2, r6
    6398:	1d39      	adds	r1, r7, #4
    639a:	4620      	mov	r0, r4
    639c:	f7ff fee8 	bl	6170 <channel_psel_get>
    63a0:	2800      	cmp	r0, #0
    63a2:	d0f5      	beq.n	6390 <pwm_nrfx_init+0x7c>
				nrf_gpio_pin_out_read(psel) ? BIT(i) : 0;
    63a4:	f8d7 9004 	ldr.w	r9, [r7, #4]
    switch (port)
    63a8:	ea5f 1359 	movs.w	r3, r9, lsr #5
    63ac:	d0cc      	beq.n	6348 <pwm_nrfx_init+0x34>
    63ae:	2b01      	cmp	r3, #1
    63b0:	d1cd      	bne.n	634e <pwm_nrfx_init+0x3a>
            mask = P1_FEATURE_PINS_PRESENT;
    63b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    63b6:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    63ba:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    63bc:	f013 0f01 	tst.w	r3, #1
    63c0:	d0c7      	beq.n	6352 <pwm_nrfx_init+0x3e>
    *p_pin = pin_number & 0x1F;
    63c2:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    63c6:	ea5f 1959 	movs.w	r9, r9, lsr #5
    63ca:	d0d1      	beq.n	6370 <pwm_nrfx_init+0x5c>
    63cc:	f1b9 0f01 	cmp.w	r9, #1
    63d0:	d0d1      	beq.n	6376 <pwm_nrfx_init+0x62>
            NRFX_ASSERT(0);
    63d2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 64dc <pwm_nrfx_init+0x1c8>
    63d6:	f44f 7313 	mov.w	r3, #588	; 0x24c
    63da:	464a      	mov	r2, r9
    63dc:	4943      	ldr	r1, [pc, #268]	; (64ec <pwm_nrfx_init+0x1d8>)
    63de:	4841      	ldr	r0, [pc, #260]	; (64e4 <pwm_nrfx_init+0x1d0>)
    63e0:	f008 fce7 	bl	edb2 <assert_print>
    63e4:	f44f 7113 	mov.w	r1, #588	; 0x24c
    63e8:	4648      	mov	r0, r9
    63ea:	f008 fcdb 	bl	eda4 <assert_post_action>
        case 0: return NRF_P0;
    63ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    63f2:	e7c1      	b.n	6378 <pwm_nrfx_init+0x64>
		}
	}
#endif

	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
    63f4:	2300      	movs	r3, #0
    63f6:	e005      	b.n	6404 <pwm_nrfx_init+0xf0>
		bool inverted = data->initially_inverted & BIT(i);

		data->seq_values[i] = PWM_NRFX_CH_VALUE(0, inverted);
    63f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    63fc:	eb05 0243 	add.w	r2, r5, r3, lsl #1
    6400:	8091      	strh	r1, [r2, #4]
	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
    6402:	3301      	adds	r3, #1
    6404:	2b03      	cmp	r3, #3
    6406:	d806      	bhi.n	6416 <pwm_nrfx_init+0x102>
		bool inverted = data->initially_inverted & BIT(i);
    6408:	7ba9      	ldrb	r1, [r5, #14]
    640a:	2201      	movs	r2, #1
    640c:	409a      	lsls	r2, r3
		data->seq_values[i] = PWM_NRFX_CH_VALUE(0, inverted);
    640e:	4211      	tst	r1, r2
    6410:	d0f2      	beq.n	63f8 <pwm_nrfx_init+0xe4>
    6412:	2100      	movs	r1, #0
    6414:	e7f2      	b.n	63fc <pwm_nrfx_init+0xe8>
	}

	nrfx_err_t result = nrfx_pwm_init(&config->pwm,
    6416:	2300      	movs	r3, #0
    6418:	461a      	mov	r2, r3
    641a:	f106 0108 	add.w	r1, r6, #8
    641e:	4630      	mov	r0, r6
    6420:	f003 fce8 	bl	9df4 <nrfx_pwm_init>
					  &config->initial_config,
					  NULL,
					  NULL);
	if (result != NRFX_SUCCESS) {
    6424:	4b32      	ldr	r3, [pc, #200]	; (64f0 <pwm_nrfx_init+0x1dc>)
    6426:	4298      	cmp	r0, r3
    6428:	d104      	bne.n	6434 <pwm_nrfx_init+0x120>
		LOG_ERR("Failed to initialize device: %s", dev->name);
		return -EBUSY;
	}

	return 0;
    642a:	2000      	movs	r0, #0
}
    642c:	3708      	adds	r7, #8
    642e:	46bd      	mov	sp, r7
    6430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		LOG_ERR("Failed to initialize device: %s", dev->name);
    6434:	f8d8 0000 	ldr.w	r0, [r8]
    6438:	2302      	movs	r3, #2
    643a:	713b      	strb	r3, [r7, #4]
    643c:	466d      	mov	r5, sp
    643e:	b088      	sub	sp, #32
    6440:	466b      	mov	r3, sp
    6442:	f113 0210 	adds.w	r2, r3, #16
    6446:	d039      	beq.n	64bc <pwm_nrfx_init+0x1a8>
    6448:	240d      	movs	r4, #13
    644a:	b11a      	cbz	r2, 6454 <pwm_nrfx_init+0x140>
    644c:	2c04      	cmp	r4, #4
    644e:	dd01      	ble.n	6454 <pwm_nrfx_init+0x140>
    6450:	4928      	ldr	r1, [pc, #160]	; (64f4 <pwm_nrfx_init+0x1e0>)
    6452:	6159      	str	r1, [r3, #20]
    6454:	2102      	movs	r1, #2
    6456:	7039      	strb	r1, [r7, #0]
    6458:	b112      	cbz	r2, 6460 <pwm_nrfx_init+0x14c>
    645a:	2c08      	cmp	r4, #8
    645c:	dd00      	ble.n	6460 <pwm_nrfx_init+0x14c>
    645e:	6198      	str	r0, [r3, #24]
    6460:	b11a      	cbz	r2, 646a <pwm_nrfx_init+0x156>
    6462:	f103 011c 	add.w	r1, r3, #28
    6466:	2000      	movs	r0, #0
    6468:	b358      	cbz	r0, 64c2 <pwm_nrfx_init+0x1ae>
    646a:	2c0c      	cmp	r4, #12
    646c:	dd32      	ble.n	64d4 <pwm_nrfx_init+0x1c0>
    646e:	240d      	movs	r4, #13
    6470:	b142      	cbz	r2, 6484 <pwm_nrfx_init+0x170>
    6472:	2103      	movs	r1, #3
    6474:	7139      	strb	r1, [r7, #4]
    6476:	2100      	movs	r1, #0
    6478:	7179      	strb	r1, [r7, #5]
    647a:	71b9      	strb	r1, [r7, #6]
    647c:	2101      	movs	r1, #1
    647e:	71f9      	strb	r1, [r7, #7]
    6480:	6878      	ldr	r0, [r7, #4]
    6482:	6118      	str	r0, [r3, #16]
    6484:	2100      	movs	r1, #0
    6486:	f36f 0100 	bfc	r1, #0, #1
    648a:	f36f 0141 	bfc	r1, #1, #1
    648e:	f36f 0182 	bfc	r1, #2, #1
    6492:	f36f 01c5 	bfc	r1, #3, #3
    6496:	2301      	movs	r3, #1
    6498:	f363 1188 	bfi	r1, r3, #6, #3
    649c:	f3c4 0409 	ubfx	r4, r4, #0, #10
    64a0:	f364 2152 	bfi	r1, r4, #9, #10
    64a4:	f36f 41de 	bfc	r1, #19, #12
    64a8:	f36f 71df 	bfc	r1, #31, #1
    64ac:	2300      	movs	r3, #0
    64ae:	4812      	ldr	r0, [pc, #72]	; (64f8 <pwm_nrfx_init+0x1e4>)
    64b0:	f7fc ff9c 	bl	33ec <z_impl_z_log_msg_static_create>
    64b4:	46ad      	mov	sp, r5
		return -EBUSY;
    64b6:	f06f 000f 	mvn.w	r0, #15
    64ba:	e7b7      	b.n	642c <pwm_nrfx_init+0x118>
		LOG_ERR("Failed to initialize device: %s", dev->name);
    64bc:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    64c0:	e7c3      	b.n	644a <pwm_nrfx_init+0x136>
    64c2:	f107 0608 	add.w	r6, r7, #8
    64c6:	4406      	add	r6, r0
    64c8:	f816 6c08 	ldrb.w	r6, [r6, #-8]
    64cc:	f801 6b01 	strb.w	r6, [r1], #1
    64d0:	3001      	adds	r0, #1
    64d2:	e7c9      	b.n	6468 <pwm_nrfx_init+0x154>
    64d4:	f06f 041b 	mvn.w	r4, #27
    64d8:	e7ca      	b.n	6470 <pwm_nrfx_init+0x15c>
    64da:	bf00      	nop
    64dc:	000113f4 	.word	0x000113f4
    64e0:	00011428 	.word	0x00011428
    64e4:	00010450 	.word	0x00010450
    64e8:	50000300 	.word	0x50000300
    64ec:	00011934 	.word	0x00011934
    64f0:	0bad0000 	.word	0x0bad0000
    64f4:	00011598 	.word	0x00011598
    64f8:	0001017c 	.word	0x0001017c

000064fc <pwm_nrfx_set_cycles>:
{
    64fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6500:	b083      	sub	sp, #12
    6502:	af00      	add	r7, sp, #0
    6504:	460d      	mov	r5, r1
	const struct pwm_nrfx_config *config = dev->config;
    6506:	6844      	ldr	r4, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;
    6508:	6906      	ldr	r6, [r0, #16]
	bool inverted = (flags & PWM_POLARITY_INVERTED);
    650a:	f8b7 9028 	ldrh.w	r9, [r7, #40]	; 0x28
	if (channel >= NRF_PWM_CHANNEL_COUNT) {
    650e:	2903      	cmp	r1, #3
    6510:	d80e      	bhi.n	6530 <pwm_nrfx_set_cycles+0x34>
    6512:	4698      	mov	r8, r3
    6514:	f009 0901 	and.w	r9, r9, #1
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
    6518:	7ba3      	ldrb	r3, [r4, #14]
    651a:	2b01      	cmp	r3, #1
    651c:	d046      	beq.n	65ac <pwm_nrfx_set_cycles+0xb0>
	if (pulse_cycles == 0) {
    651e:	f1b8 0f00 	cmp.w	r8, #0
    6522:	d053      	beq.n	65cc <pwm_nrfx_set_cycles+0xd0>
	} else if (pulse_cycles >= period_cycles) {
    6524:	4542      	cmp	r2, r8
    6526:	d845      	bhi.n	65b4 <pwm_nrfx_set_cycles+0xb8>
	bool needs_pwm = false;
    6528:	2100      	movs	r1, #0
		compare_value = PWM_NRFX_CH_COMPARE_MASK;
    652a:	f647 72ff 	movw	r2, #32767	; 0x7fff
    652e:	e04f      	b.n	65d0 <pwm_nrfx_set_cycles+0xd4>
		LOG_ERR("Invalid channel: %u.", channel);
    6530:	466e      	mov	r6, sp
    6532:	b088      	sub	sp, #32
    6534:	466b      	mov	r3, sp
    6536:	f113 0210 	adds.w	r2, r3, #16
    653a:	d031      	beq.n	65a0 <pwm_nrfx_set_cycles+0xa4>
    653c:	210c      	movs	r1, #12
    653e:	b11a      	cbz	r2, 6548 <pwm_nrfx_set_cycles+0x4c>
    6540:	2904      	cmp	r1, #4
    6542:	dd01      	ble.n	6548 <pwm_nrfx_set_cycles+0x4c>
    6544:	488d      	ldr	r0, [pc, #564]	; (677c <pwm_nrfx_set_cycles+0x280>)
    6546:	6158      	str	r0, [r3, #20]
    6548:	b112      	cbz	r2, 6550 <pwm_nrfx_set_cycles+0x54>
    654a:	2908      	cmp	r1, #8
    654c:	dd00      	ble.n	6550 <pwm_nrfx_set_cycles+0x54>
    654e:	619d      	str	r5, [r3, #24]
    6550:	290b      	cmp	r1, #11
    6552:	dd28      	ble.n	65a6 <pwm_nrfx_set_cycles+0xaa>
    6554:	240c      	movs	r4, #12
    6556:	b13a      	cbz	r2, 6568 <pwm_nrfx_set_cycles+0x6c>
    6558:	2103      	movs	r1, #3
    655a:	7139      	strb	r1, [r7, #4]
    655c:	2100      	movs	r1, #0
    655e:	7179      	strb	r1, [r7, #5]
    6560:	71b9      	strb	r1, [r7, #6]
    6562:	71f9      	strb	r1, [r7, #7]
    6564:	6878      	ldr	r0, [r7, #4]
    6566:	6118      	str	r0, [r3, #16]
    6568:	2100      	movs	r1, #0
    656a:	f36f 0100 	bfc	r1, #0, #1
    656e:	f36f 0141 	bfc	r1, #1, #1
    6572:	f36f 0182 	bfc	r1, #2, #1
    6576:	f36f 01c5 	bfc	r1, #3, #3
    657a:	2301      	movs	r3, #1
    657c:	f363 1188 	bfi	r1, r3, #6, #3
    6580:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
    6584:	f363 2152 	bfi	r1, r3, #9, #10
    6588:	f36f 41de 	bfc	r1, #19, #12
    658c:	f36f 71df 	bfc	r1, #31, #1
    6590:	2300      	movs	r3, #0
    6592:	487b      	ldr	r0, [pc, #492]	; (6780 <pwm_nrfx_set_cycles+0x284>)
    6594:	f7fc ff2a 	bl	33ec <z_impl_z_log_msg_static_create>
    6598:	46b5      	mov	sp, r6
		return -EINVAL;
    659a:	f06f 0015 	mvn.w	r0, #21
    659e:	e03a      	b.n	6616 <pwm_nrfx_set_cycles+0x11a>
		LOG_ERR("Invalid channel: %u.", channel);
    65a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    65a4:	e7cb      	b.n	653e <pwm_nrfx_set_cycles+0x42>
    65a6:	f06f 041b 	mvn.w	r4, #27
    65aa:	e7d4      	b.n	6556 <pwm_nrfx_set_cycles+0x5a>
		period_cycles /= 2;
    65ac:	0852      	lsrs	r2, r2, #1
		pulse_cycles /= 2;
    65ae:	ea4f 0858 	mov.w	r8, r8, lsr #1
    65b2:	e7b4      	b.n	651e <pwm_nrfx_set_cycles+0x22>
		if (!pwm_period_check_and_set(dev, channel, period_cycles)) {
    65b4:	4629      	mov	r1, r5
    65b6:	f7ff fdfd 	bl	61b4 <pwm_period_check_and_set>
    65ba:	4601      	mov	r1, r0
    65bc:	2800      	cmp	r0, #0
    65be:	f000 80da 	beq.w	6776 <pwm_nrfx_set_cycles+0x27a>
		compare_value = (uint16_t)(pulse_cycles >> data->prescaler);
    65c2:	7b73      	ldrb	r3, [r6, #13]
    65c4:	fa28 f303 	lsr.w	r3, r8, r3
    65c8:	b29a      	uxth	r2, r3
		needs_pwm = true;
    65ca:	e001      	b.n	65d0 <pwm_nrfx_set_cycles+0xd4>
	bool needs_pwm = false;
    65cc:	2100      	movs	r1, #0
		compare_value = 0;
    65ce:	460a      	mov	r2, r1
	data->seq_values[channel] = PWM_NRFX_CH_VALUE(compare_value, inverted);
    65d0:	f1b9 0f00 	cmp.w	r9, #0
    65d4:	d023      	beq.n	661e <pwm_nrfx_set_cycles+0x122>
    65d6:	2300      	movs	r3, #0
    65d8:	4313      	orrs	r3, r2
    65da:	eb06 0245 	add.w	r2, r6, r5, lsl #1
    65de:	8093      	strh	r3, [r2, #4]
	if (!needs_pwm) {
    65e0:	b301      	cbz	r1, 6624 <pwm_nrfx_set_cycles+0x128>
		data->pwm_needed |= BIT(channel);
    65e2:	2101      	movs	r1, #1
    65e4:	40a9      	lsls	r1, r5
    65e6:	7b35      	ldrb	r5, [r6, #12]
    65e8:	430d      	orrs	r5, r1
    65ea:	7335      	strb	r5, [r6, #12]
	if (data->pwm_needed == 0) {
    65ec:	7b33      	ldrb	r3, [r6, #12]
    65ee:	2b00      	cmp	r3, #0
    65f0:	f000 80b9 	beq.w	6766 <pwm_nrfx_set_cycles+0x26a>
		if (data->stop_requested) {
    65f4:	7bf3      	ldrb	r3, [r6, #15]
    65f6:	b133      	cbz	r3, 6606 <pwm_nrfx_set_cycles+0x10a>
			data->stop_requested = false;
    65f8:	2300      	movs	r3, #0
    65fa:	73f3      	strb	r3, [r6, #15]
			while (!nrfx_pwm_is_stopped(&config->pwm)) {
    65fc:	4620      	mov	r0, r4
    65fe:	f003 fe19 	bl	a234 <nrfx_pwm_is_stopped>
    6602:	2800      	cmp	r0, #0
    6604:	d0fa      	beq.n	65fc <pwm_nrfx_set_cycles+0x100>
		nrfx_pwm_simple_playback(&config->pwm, &config->seq, 1, 0);
    6606:	2300      	movs	r3, #0
    6608:	2201      	movs	r2, #1
    660a:	f104 0118 	add.w	r1, r4, #24
    660e:	4620      	mov	r0, r4
    6610:	f003 fc86 	bl	9f20 <nrfx_pwm_simple_playback>
	return 0;
    6614:	2000      	movs	r0, #0
}
    6616:	370c      	adds	r7, #12
    6618:	46bd      	mov	sp, r7
    661a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->seq_values[channel] = PWM_NRFX_CH_VALUE(compare_value, inverted);
    661e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    6622:	e7d9      	b.n	65d8 <pwm_nrfx_set_cycles+0xdc>
		if (channel_psel_get(channel, &psel, config)) {
    6624:	4622      	mov	r2, r4
    6626:	1d39      	adds	r1, r7, #4
    6628:	4628      	mov	r0, r5
    662a:	f7ff fda1 	bl	6170 <channel_psel_get>
    662e:	2800      	cmp	r0, #0
    6630:	d04e      	beq.n	66d0 <pwm_nrfx_set_cycles+0x1d4>
			uint32_t out_level = (pulse_cycles == 0) ? 0 : 1;
    6632:	f1b8 0300 	subs.w	r3, r8, #0
    6636:	bf18      	it	ne
    6638:	2301      	movne	r3, #1
			if (inverted) {
    663a:	f1b9 0f00 	cmp.w	r9, #0
    663e:	d002      	beq.n	6646 <pwm_nrfx_set_cycles+0x14a>
				out_level ^= 1;
    6640:	fab8 f388 	clz	r3, r8
    6644:	095b      	lsrs	r3, r3, #5
			nrf_gpio_pin_write(psel, out_level);
    6646:	f8d7 8004 	ldr.w	r8, [r7, #4]
    if (value == 0)
    664a:	2b00      	cmp	r3, #0
    664c:	d147      	bne.n	66de <pwm_nrfx_set_cycles+0x1e2>
    switch (port)
    664e:	ea5f 1258 	movs.w	r2, r8, lsr #5
    6652:	d022      	beq.n	669a <pwm_nrfx_set_cycles+0x19e>
    6654:	2a01      	cmp	r2, #1
    6656:	d101      	bne.n	665c <pwm_nrfx_set_cycles+0x160>
            mask = P1_FEATURE_PINS_PRESENT;
    6658:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    665c:	f008 021f 	and.w	r2, r8, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6660:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6662:	f013 0f01 	tst.w	r3, #1
    6666:	d01b      	beq.n	66a0 <pwm_nrfx_set_cycles+0x1a4>
    *p_pin = pin_number & 0x1F;
    6668:	f008 091f 	and.w	r9, r8, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    666c:	ea5f 1858 	movs.w	r8, r8, lsr #5
    6670:	d025      	beq.n	66be <pwm_nrfx_set_cycles+0x1c2>
    6672:	f1b8 0f01 	cmp.w	r8, #1
    6676:	d025      	beq.n	66c4 <pwm_nrfx_set_cycles+0x1c8>
            NRFX_ASSERT(0);
    6678:	f8df 8108 	ldr.w	r8, [pc, #264]	; 6784 <pwm_nrfx_set_cycles+0x288>
    667c:	f44f 7313 	mov.w	r3, #588	; 0x24c
    6680:	4642      	mov	r2, r8
    6682:	4941      	ldr	r1, [pc, #260]	; (6788 <pwm_nrfx_set_cycles+0x28c>)
    6684:	4841      	ldr	r0, [pc, #260]	; (678c <pwm_nrfx_set_cycles+0x290>)
    6686:	f008 fb94 	bl	edb2 <assert_print>
    668a:	f44f 7113 	mov.w	r1, #588	; 0x24c
    668e:	4640      	mov	r0, r8
    6690:	f008 fb88 	bl	eda4 <assert_post_action>
        case 0: return NRF_P0;
    6694:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6698:	e015      	b.n	66c6 <pwm_nrfx_set_cycles+0x1ca>
            mask = P0_FEATURE_PINS_PRESENT;
    669a:	f04f 33ff 	mov.w	r3, #4294967295
    669e:	e7dd      	b.n	665c <pwm_nrfx_set_cycles+0x160>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    66a0:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 6784 <pwm_nrfx_set_cycles+0x288>
    66a4:	f240 2347 	movw	r3, #583	; 0x247
    66a8:	464a      	mov	r2, r9
    66aa:	4939      	ldr	r1, [pc, #228]	; (6790 <pwm_nrfx_set_cycles+0x294>)
    66ac:	4837      	ldr	r0, [pc, #220]	; (678c <pwm_nrfx_set_cycles+0x290>)
    66ae:	f008 fb80 	bl	edb2 <assert_print>
    66b2:	f240 2147 	movw	r1, #583	; 0x247
    66b6:	4648      	mov	r0, r9
    66b8:	f008 fb74 	bl	eda4 <assert_post_action>
    66bc:	e7d4      	b.n	6668 <pwm_nrfx_set_cycles+0x16c>
        case 0: return NRF_P0;
    66be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    66c2:	e000      	b.n	66c6 <pwm_nrfx_set_cycles+0x1ca>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    66c4:	4a33      	ldr	r2, [pc, #204]	; (6794 <pwm_nrfx_set_cycles+0x298>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    66c6:	2301      	movs	r3, #1
    66c8:	fa03 f309 	lsl.w	r3, r3, r9
    p_reg->OUTCLR = clr_mask;
    66cc:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
		data->pwm_needed &= ~BIT(channel);
    66d0:	2101      	movs	r1, #1
    66d2:	40a9      	lsls	r1, r5
    66d4:	7b35      	ldrb	r5, [r6, #12]
    66d6:	ea25 0501 	bic.w	r5, r5, r1
    66da:	7335      	strb	r5, [r6, #12]
    66dc:	e786      	b.n	65ec <pwm_nrfx_set_cycles+0xf0>
    switch (port)
    66de:	ea5f 1358 	movs.w	r3, r8, lsr #5
    66e2:	d022      	beq.n	672a <pwm_nrfx_set_cycles+0x22e>
    66e4:	2b01      	cmp	r3, #1
    66e6:	d123      	bne.n	6730 <pwm_nrfx_set_cycles+0x234>
            mask = P1_FEATURE_PINS_PRESENT;
    66e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    66ec:	f008 021f 	and.w	r2, r8, #31
    return (mask & (1UL << pin_number)) ? true : false;
    66f0:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    66f2:	f013 0f01 	tst.w	r3, #1
    66f6:	d01d      	beq.n	6734 <pwm_nrfx_set_cycles+0x238>
    *p_pin = pin_number & 0x1F;
    66f8:	f008 091f 	and.w	r9, r8, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    66fc:	ea5f 1858 	movs.w	r8, r8, lsr #5
    6700:	d027      	beq.n	6752 <pwm_nrfx_set_cycles+0x256>
    6702:	f1b8 0f01 	cmp.w	r8, #1
    6706:	d027      	beq.n	6758 <pwm_nrfx_set_cycles+0x25c>
            NRFX_ASSERT(0);
    6708:	f8df 8078 	ldr.w	r8, [pc, #120]	; 6784 <pwm_nrfx_set_cycles+0x288>
    670c:	f44f 7313 	mov.w	r3, #588	; 0x24c
    6710:	4642      	mov	r2, r8
    6712:	491d      	ldr	r1, [pc, #116]	; (6788 <pwm_nrfx_set_cycles+0x28c>)
    6714:	481d      	ldr	r0, [pc, #116]	; (678c <pwm_nrfx_set_cycles+0x290>)
    6716:	f008 fb4c 	bl	edb2 <assert_print>
    671a:	f44f 7113 	mov.w	r1, #588	; 0x24c
    671e:	4640      	mov	r0, r8
    6720:	f008 fb40 	bl	eda4 <assert_post_action>
        case 0: return NRF_P0;
    6724:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6728:	e017      	b.n	675a <pwm_nrfx_set_cycles+0x25e>
            mask = P0_FEATURE_PINS_PRESENT;
    672a:	f04f 33ff 	mov.w	r3, #4294967295
    672e:	e7dd      	b.n	66ec <pwm_nrfx_set_cycles+0x1f0>
    switch (port)
    6730:	2300      	movs	r3, #0
    6732:	e7db      	b.n	66ec <pwm_nrfx_set_cycles+0x1f0>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6734:	f8df 904c 	ldr.w	r9, [pc, #76]	; 6784 <pwm_nrfx_set_cycles+0x288>
    6738:	f240 2347 	movw	r3, #583	; 0x247
    673c:	464a      	mov	r2, r9
    673e:	4914      	ldr	r1, [pc, #80]	; (6790 <pwm_nrfx_set_cycles+0x294>)
    6740:	4812      	ldr	r0, [pc, #72]	; (678c <pwm_nrfx_set_cycles+0x290>)
    6742:	f008 fb36 	bl	edb2 <assert_print>
    6746:	f240 2147 	movw	r1, #583	; 0x247
    674a:	4648      	mov	r0, r9
    674c:	f008 fb2a 	bl	eda4 <assert_post_action>
    6750:	e7d2      	b.n	66f8 <pwm_nrfx_set_cycles+0x1fc>
        case 0: return NRF_P0;
    6752:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6756:	e000      	b.n	675a <pwm_nrfx_set_cycles+0x25e>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6758:	4a0e      	ldr	r2, [pc, #56]	; (6794 <pwm_nrfx_set_cycles+0x298>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    675a:	2301      	movs	r3, #1
    675c:	fa03 f309 	lsl.w	r3, r3, r9
    p_reg->OUTSET = set_mask;
    6760:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
}
    6764:	e7b4      	b.n	66d0 <pwm_nrfx_set_cycles+0x1d4>
		nrfx_pwm_stop(&config->pwm, false);
    6766:	2100      	movs	r1, #0
    6768:	4620      	mov	r0, r4
    676a:	f003 fd9b 	bl	a2a4 <nrfx_pwm_stop>
		data->stop_requested = true;
    676e:	2301      	movs	r3, #1
    6770:	73f3      	strb	r3, [r6, #15]
	return 0;
    6772:	2000      	movs	r0, #0
    6774:	e74f      	b.n	6616 <pwm_nrfx_set_cycles+0x11a>
			return -EINVAL;
    6776:	f06f 0015 	mvn.w	r0, #21
    677a:	e74c      	b.n	6616 <pwm_nrfx_set_cycles+0x11a>
    677c:	000115b8 	.word	0x000115b8
    6780:	0001017c 	.word	0x0001017c
    6784:	000113f4 	.word	0x000113f4
    6788:	00011934 	.word	0x00011934
    678c:	00010450 	.word	0x00010450
    6790:	00011428 	.word	0x00011428
    6794:	50000300 	.word	0x50000300

00006798 <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
    6798:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
    679a:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    679c:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    67a0:	d06f      	beq.n	6882 <baudrate_set+0xea>
    67a2:	d83a      	bhi.n	681a <baudrate_set+0x82>
    67a4:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    67a8:	d06e      	beq.n	6888 <baudrate_set+0xf0>
    67aa:	d90a      	bls.n	67c2 <baudrate_set+0x2a>
    67ac:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    67b0:	d075      	beq.n	689e <baudrate_set+0x106>
    67b2:	d924      	bls.n	67fe <baudrate_set+0x66>
    67b4:	f647 2312 	movw	r3, #31250	; 0x7a12
    67b8:	4299      	cmp	r1, r3
    67ba:	d12b      	bne.n	6814 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    67bc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    67c0:	e013      	b.n	67ea <baudrate_set+0x52>
	switch (baudrate) {
    67c2:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    67c6:	d061      	beq.n	688c <baudrate_set+0xf4>
    67c8:	d907      	bls.n	67da <baudrate_set+0x42>
    67ca:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    67ce:	d063      	beq.n	6898 <baudrate_set+0x100>
    67d0:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    67d4:	d110      	bne.n	67f8 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    67d6:	4b3c      	ldr	r3, [pc, #240]	; (68c8 <baudrate_set+0x130>)
    67d8:	e007      	b.n	67ea <baudrate_set+0x52>
	switch (baudrate) {
    67da:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    67de:	d058      	beq.n	6892 <baudrate_set+0xfa>
    67e0:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    67e4:	d105      	bne.n	67f2 <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    67e6:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    67ea:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    67ee:	2000      	movs	r0, #0
    67f0:	4770      	bx	lr
	switch (baudrate) {
    67f2:	f06f 0015 	mvn.w	r0, #21
    67f6:	4770      	bx	lr
    67f8:	f06f 0015 	mvn.w	r0, #21
    67fc:	4770      	bx	lr
    67fe:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    6802:	d04e      	beq.n	68a2 <baudrate_set+0x10a>
    6804:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    6808:	d101      	bne.n	680e <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    680a:	4b30      	ldr	r3, [pc, #192]	; (68cc <baudrate_set+0x134>)
    680c:	e7ed      	b.n	67ea <baudrate_set+0x52>
	switch (baudrate) {
    680e:	f06f 0015 	mvn.w	r0, #21
    6812:	4770      	bx	lr
    6814:	f06f 0015 	mvn.w	r0, #21
    6818:	4770      	bx	lr
    681a:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    681e:	d042      	beq.n	68a6 <baudrate_set+0x10e>
    6820:	d909      	bls.n	6836 <baudrate_set+0x9e>
    6822:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    6826:	d046      	beq.n	68b6 <baudrate_set+0x11e>
    6828:	d91f      	bls.n	686a <baudrate_set+0xd2>
    682a:	4b29      	ldr	r3, [pc, #164]	; (68d0 <baudrate_set+0x138>)
    682c:	4299      	cmp	r1, r3
    682e:	d148      	bne.n	68c2 <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    6830:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    6834:	e7d9      	b.n	67ea <baudrate_set+0x52>
	switch (baudrate) {
    6836:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    683a:	d037      	beq.n	68ac <baudrate_set+0x114>
    683c:	d905      	bls.n	684a <baudrate_set+0xb2>
    683e:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    6842:	d10f      	bne.n	6864 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    6844:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    6848:	e7cf      	b.n	67ea <baudrate_set+0x52>
	switch (baudrate) {
    684a:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    684e:	4299      	cmp	r1, r3
    6850:	d02e      	beq.n	68b0 <baudrate_set+0x118>
    6852:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    6856:	d102      	bne.n	685e <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    6858:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    685c:	e7c5      	b.n	67ea <baudrate_set+0x52>
	switch (baudrate) {
    685e:	f06f 0015 	mvn.w	r0, #21
    6862:	4770      	bx	lr
    6864:	f06f 0015 	mvn.w	r0, #21
    6868:	4770      	bx	lr
    686a:	4b1a      	ldr	r3, [pc, #104]	; (68d4 <baudrate_set+0x13c>)
    686c:	4299      	cmp	r1, r3
    686e:	d025      	beq.n	68bc <baudrate_set+0x124>
    6870:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    6874:	d102      	bne.n	687c <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    6876:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    687a:	e7b6      	b.n	67ea <baudrate_set+0x52>
	switch (baudrate) {
    687c:	f06f 0015 	mvn.w	r0, #21
    6880:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    6882:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    6886:	e7b0      	b.n	67ea <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    6888:	4b13      	ldr	r3, [pc, #76]	; (68d8 <baudrate_set+0x140>)
    688a:	e7ae      	b.n	67ea <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    688c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    6890:	e7ab      	b.n	67ea <baudrate_set+0x52>
	switch (baudrate) {
    6892:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    6896:	e7a8      	b.n	67ea <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    6898:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    689c:	e7a5      	b.n	67ea <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    689e:	4b0f      	ldr	r3, [pc, #60]	; (68dc <baudrate_set+0x144>)
    68a0:	e7a3      	b.n	67ea <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    68a2:	4b0f      	ldr	r3, [pc, #60]	; (68e0 <baudrate_set+0x148>)
    68a4:	e7a1      	b.n	67ea <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    68a6:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    68aa:	e79e      	b.n	67ea <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    68ac:	4b0d      	ldr	r3, [pc, #52]	; (68e4 <baudrate_set+0x14c>)
    68ae:	e79c      	b.n	67ea <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    68b0:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    68b4:	e799      	b.n	67ea <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    68b6:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    68ba:	e796      	b.n	67ea <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    68bc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    68c0:	e793      	b.n	67ea <baudrate_set+0x52>
	switch (baudrate) {
    68c2:	f06f 0015 	mvn.w	r0, #21
}
    68c6:	4770      	bx	lr
    68c8:	0013b000 	.word	0x0013b000
    68cc:	004ea000 	.word	0x004ea000
    68d0:	000f4240 	.word	0x000f4240
    68d4:	0003d090 	.word	0x0003d090
    68d8:	00275000 	.word	0x00275000
    68dc:	0075c000 	.word	0x0075c000
    68e0:	003af000 	.word	0x003af000
    68e4:	013a9000 	.word	0x013a9000

000068e8 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    68e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    68ec:	4605      	mov	r5, r0
    68ee:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = dev->data;
    68f0:	f8d0 8010 	ldr.w	r8, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    68f4:	f009 f9fe 	bl	fcf4 <k_is_in_isr>
    68f8:	b920      	cbnz	r0, 6904 <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
    68fa:	4b17      	ldr	r3, [pc, #92]	; (6958 <uarte_nrfx_poll_out+0x70>)
    68fc:	781b      	ldrb	r3, [r3, #0]
    68fe:	b143      	cbz	r3, 6912 <uarte_nrfx_poll_out+0x2a>
    6900:	2300      	movs	r3, #0
    6902:	e000      	b.n	6906 <uarte_nrfx_poll_out+0x1e>
    6904:	2301      	movs	r3, #1

		t = now;
	}
#endif

	if (isr_mode) {
    6906:	b953      	cbnz	r3, 691e <uarte_nrfx_poll_out+0x36>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    6908:	4628      	mov	r0, r5
    690a:	f008 ff27 	bl	f75c <wait_tx_ready>
    690e:	4606      	mov	r6, r0
    6910:	e013      	b.n	693a <uarte_nrfx_poll_out+0x52>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    6912:	2301      	movs	r3, #1
    6914:	e7f7      	b.n	6906 <uarte_nrfx_poll_out+0x1e>
    6916:	f384 8811 	msr	BASEPRI, r4
    691a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    691e:	f04f 0320 	mov.w	r3, #32
    6922:	f3ef 8411 	mrs	r4, BASEPRI
    6926:	f383 8812 	msr	BASEPRI_MAX, r3
    692a:	f3bf 8f6f 	isb	sy
    692e:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
    6930:	4628      	mov	r0, r5
    6932:	f008 fec4 	bl	f6be <is_tx_ready>
    6936:	2800      	cmp	r0, #0
    6938:	d0ed      	beq.n	6916 <uarte_nrfx_poll_out+0x2e>
	}

	*data->char_out = c;
    693a:	f8d8 3010 	ldr.w	r3, [r8, #16]
    693e:	701f      	strb	r7, [r3, #0]
	tx_start(dev, data->char_out, 1);
    6940:	2201      	movs	r2, #1
    6942:	f8d8 1010 	ldr.w	r1, [r8, #16]
    6946:	4628      	mov	r0, r5
    6948:	f008 fed3 	bl	f6f2 <tx_start>
	__asm__ volatile(
    694c:	f386 8811 	msr	BASEPRI, r6
    6950:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    6954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6958:	200012d3 	.word	0x200012d3

0000695c <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    695c:	b530      	push	{r4, r5, lr}
    695e:	b089      	sub	sp, #36	; 0x24
    6960:	4604      	mov	r4, r0
    6962:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    6964:	f101 0018 	add.w	r0, r1, #24
    6968:	f003 f92a 	bl	9bc0 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    696c:	4b1e      	ldr	r3, [pc, #120]	; (69e8 <endtx_stoptx_ppi_init+0x8c>)
    696e:	4298      	cmp	r0, r3
    6970:	d112      	bne.n	6998 <endtx_stoptx_ppi_init+0x3c>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    6972:	7e2b      	ldrb	r3, [r5, #24]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    6974:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
    6978:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    697a:	4a1c      	ldr	r2, [pc, #112]	; (69ec <endtx_stoptx_ppi_init+0x90>)
    697c:	33a2      	adds	r3, #162	; 0xa2
    697e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
    6982:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    6986:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    6988:	7e29      	ldrb	r1, [r5, #24]
    698a:	2301      	movs	r3, #1
    698c:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
    698e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    6992:	2000      	movs	r0, #0
}
    6994:	b009      	add	sp, #36	; 0x24
    6996:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Failed to allocate PPI Channel");
    6998:	4b15      	ldr	r3, [pc, #84]	; (69f0 <endtx_stoptx_ppi_init+0x94>)
    699a:	9307      	str	r3, [sp, #28]
    699c:	2302      	movs	r3, #2
    699e:	f88d 3004 	strb.w	r3, [sp, #4]
    69a2:	2300      	movs	r3, #0
    69a4:	f88d 3005 	strb.w	r3, [sp, #5]
    69a8:	f88d 3006 	strb.w	r3, [sp, #6]
    69ac:	f88d 3007 	strb.w	r3, [sp, #7]
    69b0:	9a01      	ldr	r2, [sp, #4]
    69b2:	9206      	str	r2, [sp, #24]
    69b4:	4619      	mov	r1, r3
    69b6:	f363 0100 	bfi	r1, r3, #0, #1
    69ba:	f363 0141 	bfi	r1, r3, #1, #1
    69be:	f363 0182 	bfi	r1, r3, #2, #1
    69c2:	f363 01c5 	bfi	r1, r3, #3, #3
    69c6:	2201      	movs	r2, #1
    69c8:	f362 1188 	bfi	r1, r2, #6, #3
    69cc:	2208      	movs	r2, #8
    69ce:	f362 2152 	bfi	r1, r2, #9, #10
    69d2:	f363 41de 	bfi	r1, r3, #19, #12
    69d6:	f363 71df 	bfi	r1, r3, #31, #1
    69da:	aa06      	add	r2, sp, #24
    69dc:	4805      	ldr	r0, [pc, #20]	; (69f4 <endtx_stoptx_ppi_init+0x98>)
    69de:	f7fc fd05 	bl	33ec <z_impl_z_log_msg_static_create>
		return -EIO;
    69e2:	f06f 0004 	mvn.w	r0, #4
    69e6:	e7d5      	b.n	6994 <endtx_stoptx_ppi_init+0x38>
    69e8:	0bad0000 	.word	0x0bad0000
    69ec:	4001f000 	.word	0x4001f000
    69f0:	00011638 	.word	0x00011638
    69f4:	0001018c 	.word	0x0001018c

000069f8 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    69f8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    69fc:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    6a00:	4b01      	ldr	r3, [pc, #4]	; (6a08 <set_comparator+0x10>)
    6a02:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    6a06:	4770      	bx	lr
    6a08:	40011000 	.word	0x40011000

00006a0c <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    6a0c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    6a10:	4b01      	ldr	r3, [pc, #4]	; (6a18 <get_comparator+0xc>)
    6a12:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    6a16:	4770      	bx	lr
    6a18:	40011000 	.word	0x40011000

00006a1c <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    6a1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6a20:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    6a22:	4a02      	ldr	r2, [pc, #8]	; (6a2c <event_enable+0x10>)
    6a24:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    6a28:	4770      	bx	lr
    6a2a:	bf00      	nop
    6a2c:	40011000 	.word	0x40011000

00006a30 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    6a30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6a34:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    6a36:	4a02      	ldr	r2, [pc, #8]	; (6a40 <event_disable+0x10>)
    6a38:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    6a3c:	4770      	bx	lr
    6a3e:	bf00      	nop
    6a40:	40011000 	.word	0x40011000

00006a44 <counter>:
     return p_reg->COUNTER;
    6a44:	4b01      	ldr	r3, [pc, #4]	; (6a4c <counter+0x8>)
    6a46:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    6a4a:	4770      	bx	lr
    6a4c:	40011000 	.word	0x40011000

00006a50 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    6a50:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    6a52:	2301      	movs	r3, #1
    6a54:	4083      	lsls	r3, r0
    6a56:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6a5a:	4a10      	ldr	r2, [pc, #64]	; (6a9c <compare_int_lock+0x4c>)
    6a5c:	f3bf 8f5b 	dmb	ish
    6a60:	e852 1f00 	ldrex	r1, [r2]
    6a64:	ea01 0e0c 	and.w	lr, r1, ip
    6a68:	e842 e400 	strex	r4, lr, [r2]
    6a6c:	2c00      	cmp	r4, #0
    6a6e:	d1f7      	bne.n	6a60 <compare_int_lock+0x10>
    6a70:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    6a74:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    6a78:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    6a7c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    6a80:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    6a84:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    6a88:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6a8c:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    6a90:	420b      	tst	r3, r1
}
    6a92:	bf14      	ite	ne
    6a94:	2001      	movne	r0, #1
    6a96:	2000      	moveq	r0, #0
    6a98:	bd10      	pop	{r4, pc}
    6a9a:	bf00      	nop
    6a9c:	20000ff8 	.word	0x20000ff8

00006aa0 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    6aa0:	b570      	push	{r4, r5, r6, lr}
    6aa2:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    6aa4:	f008 ff14 	bl	f8d0 <full_int_lock>
    6aa8:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    6aaa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6aae:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    6ab0:	4a17      	ldr	r2, [pc, #92]	; (6b10 <channel_processing_check_and_clear+0x70>)
    6ab2:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    6ab6:	4213      	tst	r3, r2
    6ab8:	d105      	bne.n	6ac6 <channel_processing_check_and_clear+0x26>
	bool result = false;
    6aba:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    6abc:	4628      	mov	r0, r5
    6abe:	f008 ff10 	bl	f8e2 <full_int_unlock>

	return result;
}
    6ac2:	4630      	mov	r0, r6
    6ac4:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    6ac6:	2301      	movs	r3, #1
    6ac8:	40a3      	lsls	r3, r4
    6aca:	43db      	mvns	r3, r3
    6acc:	4a11      	ldr	r2, [pc, #68]	; (6b14 <channel_processing_check_and_clear+0x74>)
    6ace:	f3bf 8f5b 	dmb	ish
    6ad2:	e852 1f00 	ldrex	r1, [r2]
    6ad6:	ea01 0003 	and.w	r0, r1, r3
    6ada:	e842 0600 	strex	r6, r0, [r2]
    6ade:	2e00      	cmp	r6, #0
    6ae0:	d1f7      	bne.n	6ad2 <channel_processing_check_and_clear+0x32>
    6ae2:	f3bf 8f5b 	dmb	ish
    6ae6:	b959      	cbnz	r1, 6b00 <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    6ae8:	f104 0350 	add.w	r3, r4, #80	; 0x50
    6aec:	009b      	lsls	r3, r3, #2
    6aee:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6af0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6af4:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    6af8:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    6afa:	b113      	cbz	r3, 6b02 <channel_processing_check_and_clear+0x62>
    6afc:	2301      	movs	r3, #1
    6afe:	e000      	b.n	6b02 <channel_processing_check_and_clear+0x62>
    6b00:	2301      	movs	r3, #1
		if (result) {
    6b02:	461e      	mov	r6, r3
    6b04:	2b00      	cmp	r3, #0
    6b06:	d0d9      	beq.n	6abc <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
    6b08:	4620      	mov	r0, r4
    6b0a:	f008 fed2 	bl	f8b2 <event_clear>
    6b0e:	e7d5      	b.n	6abc <channel_processing_check_and_clear+0x1c>
    6b10:	40011000 	.word	0x40011000
    6b14:	20000ff4 	.word	0x20000ff4

00006b18 <compare_int_unlock>:
	if (key) {
    6b18:	b901      	cbnz	r1, 6b1c <compare_int_unlock+0x4>
}
    6b1a:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    6b1c:	2301      	movs	r3, #1
    6b1e:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6b20:	4a11      	ldr	r2, [pc, #68]	; (6b68 <compare_int_unlock+0x50>)
    6b22:	f3bf 8f5b 	dmb	ish
    6b26:	e852 1f00 	ldrex	r1, [r2]
    6b2a:	4319      	orrs	r1, r3
    6b2c:	e842 1c00 	strex	ip, r1, [r2]
    6b30:	f1bc 0f00 	cmp.w	ip, #0
    6b34:	d1f7      	bne.n	6b26 <compare_int_unlock+0xe>
    6b36:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    6b3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6b3e:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    6b40:	4a0a      	ldr	r2, [pc, #40]	; (6b6c <compare_int_unlock+0x54>)
    6b42:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6b46:	f3bf 8f5b 	dmb	ish
    6b4a:	4b09      	ldr	r3, [pc, #36]	; (6b70 <compare_int_unlock+0x58>)
    6b4c:	681b      	ldr	r3, [r3, #0]
    6b4e:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    6b52:	fa23 f000 	lsr.w	r0, r3, r0
    6b56:	f010 0f01 	tst.w	r0, #1
    6b5a:	d0de      	beq.n	6b1a <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6b5c:	4b05      	ldr	r3, [pc, #20]	; (6b74 <compare_int_unlock+0x5c>)
    6b5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    6b62:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    6b66:	e7d8      	b.n	6b1a <compare_int_unlock+0x2>
    6b68:	20000ff8 	.word	0x20000ff8
    6b6c:	40011000 	.word	0x40011000
    6b70:	20000ff4 	.word	0x20000ff4
    6b74:	e000e100 	.word	0xe000e100

00006b78 <sys_clock_timeout_handler>:
{
    6b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6b7c:	4607      	mov	r7, r0
    6b7e:	4614      	mov	r4, r2
    6b80:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    6b82:	4610      	mov	r0, r2
    6b84:	4619      	mov	r1, r3
    6b86:	f008 fea0 	bl	f8ca <absolute_time_to_cc>
    6b8a:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    6b8c:	4b15      	ldr	r3, [pc, #84]	; (6be4 <sys_clock_timeout_handler+0x6c>)
    6b8e:	681a      	ldr	r2, [r3, #0]
    6b90:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    6b92:	601c      	str	r4, [r3, #0]
    6b94:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    6b96:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    6b9a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    6b9e:	d309      	bcc.n	6bb4 <sys_clock_timeout_handler+0x3c>
	return false;
    6ba0:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    6ba2:	f007 fa8f 	bl	e0c4 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    6ba6:	4638      	mov	r0, r7
    6ba8:	f7ff ff30 	bl	6a0c <get_comparator>
    6bac:	42a8      	cmp	r0, r5
    6bae:	d00e      	beq.n	6bce <sys_clock_timeout_handler+0x56>
}
    6bb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    6bb4:	4b0c      	ldr	r3, [pc, #48]	; (6be8 <sys_clock_timeout_handler+0x70>)
    6bb6:	681b      	ldr	r3, [r3, #0]
    6bb8:	0a1a      	lsrs	r2, r3, #8
    6bba:	061b      	lsls	r3, r3, #24
    6bbc:	eb15 0803 	adds.w	r8, r5, r3
    6bc0:	f142 0900 	adc.w	r9, r2, #0
    6bc4:	4b09      	ldr	r3, [pc, #36]	; (6bec <sys_clock_timeout_handler+0x74>)
    6bc6:	e9c3 8900 	strd	r8, r9, [r3]
		return true;
    6bca:	2401      	movs	r4, #1
    6bcc:	e7e9      	b.n	6ba2 <sys_clock_timeout_handler+0x2a>
		if (!anchor_updated) {
    6bce:	b11c      	cbz	r4, 6bd8 <sys_clock_timeout_handler+0x60>
		event_enable(chan);
    6bd0:	4638      	mov	r0, r7
    6bd2:	f7ff ff23 	bl	6a1c <event_enable>
}
    6bd6:	e7eb      	b.n	6bb0 <sys_clock_timeout_handler+0x38>
			set_comparator(chan, COUNTER_HALF_SPAN);
    6bd8:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    6bdc:	4638      	mov	r0, r7
    6bde:	f7ff ff0b 	bl	69f8 <set_comparator>
    6be2:	e7f5      	b.n	6bd0 <sys_clock_timeout_handler+0x58>
    6be4:	20000708 	.word	0x20000708
    6be8:	20000ffc 	.word	0x20000ffc
    6bec:	200006f0 	.word	0x200006f0

00006bf0 <z_nrf_rtc_timer_read>:
{
    6bf0:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    6bf2:	4b0d      	ldr	r3, [pc, #52]	; (6c28 <z_nrf_rtc_timer_read+0x38>)
    6bf4:	681c      	ldr	r4, [r3, #0]
    6bf6:	0a25      	lsrs	r5, r4, #8
    6bf8:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
    6bfa:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    6bfe:	f7ff ff21 	bl	6a44 <counter>
    6c02:	4603      	mov	r3, r0
	val += cntr;
    6c04:	1900      	adds	r0, r0, r4
    6c06:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    6c0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    6c0e:	d20a      	bcs.n	6c26 <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    6c10:	4b06      	ldr	r3, [pc, #24]	; (6c2c <z_nrf_rtc_timer_read+0x3c>)
    6c12:	e9d3 2300 	ldrd	r2, r3, [r3]
    6c16:	4290      	cmp	r0, r2
    6c18:	eb71 0303 	sbcs.w	r3, r1, r3
    6c1c:	d203      	bcs.n	6c26 <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    6c1e:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    6c22:	f141 0100 	adc.w	r1, r1, #0
}
    6c26:	bd38      	pop	{r3, r4, r5, pc}
    6c28:	20000ffc 	.word	0x20000ffc
    6c2c:	200006f0 	.word	0x200006f0

00006c30 <compare_set_nolocks>:
{
    6c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6c32:	4606      	mov	r6, r0
    6c34:	4614      	mov	r4, r2
    6c36:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    6c38:	4610      	mov	r0, r2
    6c3a:	4619      	mov	r1, r3
    6c3c:	f008 fe45 	bl	f8ca <absolute_time_to_cc>
    6c40:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    6c42:	f7ff ffd5 	bl	6bf0 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    6c46:	42a0      	cmp	r0, r4
    6c48:	eb71 0305 	sbcs.w	r3, r1, r5
    6c4c:	d21d      	bcs.n	6c8a <compare_set_nolocks+0x5a>
		if (target_time - curr_time > COUNTER_SPAN) {
    6c4e:	1a23      	subs	r3, r4, r0
    6c50:	eb65 0101 	sbc.w	r1, r5, r1
    6c54:	4a1b      	ldr	r2, [pc, #108]	; (6cc4 <compare_set_nolocks+0x94>)
    6c56:	4293      	cmp	r3, r2
    6c58:	f171 0300 	sbcs.w	r3, r1, #0
    6c5c:	d22f      	bcs.n	6cbe <compare_set_nolocks+0x8e>
		if (target_time != cc_data[chan].target_time) {
    6c5e:	4b1a      	ldr	r3, [pc, #104]	; (6cc8 <compare_set_nolocks+0x98>)
    6c60:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    6c64:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    6c68:	42ab      	cmp	r3, r5
    6c6a:	bf08      	it	eq
    6c6c:	42a2      	cmpeq	r2, r4
    6c6e:	d01a      	beq.n	6ca6 <compare_set_nolocks+0x76>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    6c70:	4639      	mov	r1, r7
    6c72:	4630      	mov	r0, r6
    6c74:	f008 fe3a 	bl	f8ec <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    6c78:	4639      	mov	r1, r7
    6c7a:	f008 fe16 	bl	f8aa <counter_sub>
    6c7e:	1900      	adds	r0, r0, r4
    6c80:	f145 0300 	adc.w	r3, r5, #0
    6c84:	4604      	mov	r4, r0
    6c86:	461d      	mov	r5, r3
    6c88:	e00d      	b.n	6ca6 <compare_set_nolocks+0x76>
		atomic_or(&force_isr_mask, BIT(chan));
    6c8a:	2301      	movs	r3, #1
    6c8c:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6c8e:	4a0f      	ldr	r2, [pc, #60]	; (6ccc <compare_set_nolocks+0x9c>)
    6c90:	f3bf 8f5b 	dmb	ish
    6c94:	e852 1f00 	ldrex	r1, [r2]
    6c98:	4319      	orrs	r1, r3
    6c9a:	e842 1000 	strex	r0, r1, [r2]
    6c9e:	2800      	cmp	r0, #0
    6ca0:	d1f8      	bne.n	6c94 <compare_set_nolocks+0x64>
    6ca2:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    6ca6:	4b08      	ldr	r3, [pc, #32]	; (6cc8 <compare_set_nolocks+0x98>)
    6ca8:	0132      	lsls	r2, r6, #4
    6caa:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    6cae:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    6cb2:	9906      	ldr	r1, [sp, #24]
    6cb4:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    6cb6:	9b07      	ldr	r3, [sp, #28]
    6cb8:	6073      	str	r3, [r6, #4]
	return ret;
    6cba:	2000      	movs	r0, #0
}
    6cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
    6cbe:	f06f 0015 	mvn.w	r0, #21
    6cc2:	e7fb      	b.n	6cbc <compare_set_nolocks+0x8c>
    6cc4:	01000001 	.word	0x01000001
    6cc8:	200006f8 	.word	0x200006f8
    6ccc:	20000ff4 	.word	0x20000ff4

00006cd0 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    6cd0:	b530      	push	{r4, r5, lr}
    6cd2:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    6cd4:	2300      	movs	r3, #0
    6cd6:	4a1d      	ldr	r2, [pc, #116]	; (6d4c <sys_clock_driver_init+0x7c>)
    6cd8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    6cdc:	2b00      	cmp	r3, #0
    6cde:	dd24      	ble.n	6d2a <sys_clock_driver_init+0x5a>
    p_reg->INTENSET = mask;
    6ce0:	4c1a      	ldr	r4, [pc, #104]	; (6d4c <sys_clock_driver_init+0x7c>)
    6ce2:	2502      	movs	r5, #2
    6ce4:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6ce8:	4b19      	ldr	r3, [pc, #100]	; (6d50 <sys_clock_driver_init+0x80>)
    6cea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    6cee:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    6cf2:	2200      	movs	r2, #0
    6cf4:	2101      	movs	r1, #1
    6cf6:	2011      	movs	r0, #17
    6cf8:	f7fd fac6 	bl	4288 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    6cfc:	2011      	movs	r0, #17
    6cfe:	f7fd faa7 	bl	4250 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    6d02:	2301      	movs	r3, #1
    6d04:	60a3      	str	r3, [r4, #8]
    6d06:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    6d08:	4a12      	ldr	r2, [pc, #72]	; (6d54 <sys_clock_driver_init+0x84>)
    6d0a:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    6d0c:	2400      	movs	r4, #0
    6d0e:	9401      	str	r4, [sp, #4]
    6d10:	4b11      	ldr	r3, [pc, #68]	; (6d58 <sys_clock_driver_init+0x88>)
    6d12:	9300      	str	r3, [sp, #0]
    6d14:	4a11      	ldr	r2, [pc, #68]	; (6d5c <sys_clock_driver_init+0x8c>)
    6d16:	2300      	movs	r3, #0
    6d18:	4620      	mov	r0, r4
    6d1a:	f008 fe22 	bl	f962 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    6d1e:	4628      	mov	r0, r5
    6d20:	f7fe ff7e 	bl	5c20 <z_nrf_clock_control_lf_on>

	return 0;
}
    6d24:	4620      	mov	r0, r4
    6d26:	b003      	add	sp, #12
    6d28:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    6d2a:	4a0d      	ldr	r2, [pc, #52]	; (6d60 <sys_clock_driver_init+0x90>)
    6d2c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    6d30:	f04f 30ff 	mov.w	r0, #4294967295
    6d34:	f04f 31ff 	mov.w	r1, #4294967295
    6d38:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    6d3c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    6d40:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    6d42:	4902      	ldr	r1, [pc, #8]	; (6d4c <sys_clock_driver_init+0x7c>)
    6d44:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    6d48:	3301      	adds	r3, #1
    6d4a:	e7c7      	b.n	6cdc <sys_clock_driver_init+0xc>
    6d4c:	40011000 	.word	0x40011000
    6d50:	e000e100 	.word	0xe000e100
    6d54:	20000ff8 	.word	0x20000ff8
    6d58:	00006b79 	.word	0x00006b79
    6d5c:	007fffff 	.word	0x007fffff
    6d60:	200006f8 	.word	0x200006f8

00006d64 <process_channel>:
{
    6d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6d68:	b082      	sub	sp, #8
    6d6a:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    6d6c:	f7ff fe98 	bl	6aa0 <channel_processing_check_and_clear>
    6d70:	b910      	cbnz	r0, 6d78 <process_channel+0x14>
}
    6d72:	b002      	add	sp, #8
    6d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    6d78:	f7ff ff3a 	bl	6bf0 <z_nrf_rtc_timer_read>
    6d7c:	4682      	mov	sl, r0
    6d7e:	460e      	mov	r6, r1
		mcu_critical_state = full_int_lock();
    6d80:	f008 fda6 	bl	f8d0 <full_int_lock>
    6d84:	4605      	mov	r5, r0
		expire_time = cc_data[chan].target_time;
    6d86:	4b13      	ldr	r3, [pc, #76]	; (6dd4 <process_channel+0x70>)
    6d88:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    6d8c:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    6d90:	45c2      	cmp	sl, r8
    6d92:	eb76 0309 	sbcs.w	r3, r6, r9
    6d96:	d20b      	bcs.n	6db0 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    6d98:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
    6d9a:	4628      	mov	r0, r5
    6d9c:	f008 fda1 	bl	f8e2 <full_int_unlock>
		if (handler) {
    6da0:	2e00      	cmp	r6, #0
    6da2:	d0e6      	beq.n	6d72 <process_channel+0xe>
			handler(chan, expire_time, user_context);
    6da4:	9700      	str	r7, [sp, #0]
    6da6:	4642      	mov	r2, r8
    6da8:	464b      	mov	r3, r9
    6daa:	4620      	mov	r0, r4
    6dac:	47b0      	blx	r6
}
    6dae:	e7e0      	b.n	6d72 <process_channel+0xe>
			handler = cc_data[chan].callback;
    6db0:	4a08      	ldr	r2, [pc, #32]	; (6dd4 <process_channel+0x70>)
    6db2:	0123      	lsls	r3, r4, #4
    6db4:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    6db8:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
    6dba:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
    6dbc:	2000      	movs	r0, #0
    6dbe:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    6dc0:	f04f 32ff 	mov.w	r2, #4294967295
    6dc4:	f04f 33ff 	mov.w	r3, #4294967295
    6dc8:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    6dcc:	4620      	mov	r0, r4
    6dce:	f7ff fe2f 	bl	6a30 <event_disable>
    6dd2:	e7e2      	b.n	6d9a <process_channel+0x36>
    6dd4:	200006f8 	.word	0x200006f8

00006dd8 <rtc_nrf_isr>:
{
    6dd8:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    6dda:	4b0e      	ldr	r3, [pc, #56]	; (6e14 <rtc_nrf_isr+0x3c>)
    6ddc:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    6de0:	f013 0f02 	tst.w	r3, #2
    6de4:	d00d      	beq.n	6e02 <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6de6:	4b0b      	ldr	r3, [pc, #44]	; (6e14 <rtc_nrf_isr+0x3c>)
    6de8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    6dec:	b14b      	cbz	r3, 6e02 <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    6dee:	4b09      	ldr	r3, [pc, #36]	; (6e14 <rtc_nrf_isr+0x3c>)
    6df0:	2200      	movs	r2, #0
    6df2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    6df6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
    6dfa:	4a07      	ldr	r2, [pc, #28]	; (6e18 <rtc_nrf_isr+0x40>)
    6dfc:	6813      	ldr	r3, [r2, #0]
    6dfe:	3301      	adds	r3, #1
    6e00:	6013      	str	r3, [r2, #0]
{
    6e02:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    6e04:	2c00      	cmp	r4, #0
    6e06:	dd00      	ble.n	6e0a <rtc_nrf_isr+0x32>
}
    6e08:	bd10      	pop	{r4, pc}
		process_channel(chan);
    6e0a:	4620      	mov	r0, r4
    6e0c:	f7ff ffaa 	bl	6d64 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    6e10:	3401      	adds	r4, #1
    6e12:	e7f7      	b.n	6e04 <rtc_nrf_isr+0x2c>
    6e14:	40011000 	.word	0x40011000
    6e18:	20000ffc 	.word	0x20000ffc

00006e1c <sys_clock_set_timeout>:
{
    6e1c:	b510      	push	{r4, lr}
    6e1e:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    6e20:	f1b0 3fff 	cmp.w	r0, #4294967295
    6e24:	d006      	beq.n	6e34 <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    6e26:	2801      	cmp	r0, #1
    6e28:	dd06      	ble.n	6e38 <sys_clock_set_timeout+0x1c>
    6e2a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    6e2e:	da05      	bge.n	6e3c <sys_clock_set_timeout+0x20>
    6e30:	1e44      	subs	r4, r0, #1
    6e32:	e004      	b.n	6e3e <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    6e34:	480f      	ldr	r0, [pc, #60]	; (6e74 <sys_clock_set_timeout+0x58>)
    6e36:	e7f8      	b.n	6e2a <sys_clock_set_timeout+0xe>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    6e38:	2400      	movs	r4, #0
    6e3a:	e000      	b.n	6e3e <sys_clock_set_timeout+0x22>
    6e3c:	4c0d      	ldr	r4, [pc, #52]	; (6e74 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    6e3e:	f7ff fed7 	bl	6bf0 <z_nrf_rtc_timer_read>
    6e42:	4b0d      	ldr	r3, [pc, #52]	; (6e78 <sys_clock_set_timeout+0x5c>)
    6e44:	6819      	ldr	r1, [r3, #0]
    6e46:	685b      	ldr	r3, [r3, #4]
    6e48:	1a40      	subs	r0, r0, r1
	if (unannounced >= COUNTER_HALF_SPAN) {
    6e4a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    6e4e:	d300      	bcc.n	6e52 <sys_clock_set_timeout+0x36>
		ticks = 0;
    6e50:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    6e52:	4420      	add	r0, r4
    6e54:	1c42      	adds	r2, r0, #1
	if (cyc > MAX_CYCLES) {
    6e56:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    6e5a:	d300      	bcc.n	6e5e <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    6e5c:	4a05      	ldr	r2, [pc, #20]	; (6e74 <sys_clock_set_timeout+0x58>)
	uint64_t target_time = cyc + last_count;
    6e5e:	2000      	movs	r0, #0
    6e60:	188a      	adds	r2, r1, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    6e62:	9001      	str	r0, [sp, #4]
    6e64:	4905      	ldr	r1, [pc, #20]	; (6e7c <sys_clock_set_timeout+0x60>)
    6e66:	9100      	str	r1, [sp, #0]
    6e68:	f143 0300 	adc.w	r3, r3, #0
    6e6c:	f008 fd79 	bl	f962 <compare_set>
}
    6e70:	b002      	add	sp, #8
    6e72:	bd10      	pop	{r4, pc}
    6e74:	007fffff 	.word	0x007fffff
    6e78:	20000708 	.word	0x20000708
    6e7c:	00006b79 	.word	0x00006b79

00006e80 <sys_clock_elapsed>:
{
    6e80:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    6e82:	f7ff feb5 	bl	6bf0 <z_nrf_rtc_timer_read>
    6e86:	4b02      	ldr	r3, [pc, #8]	; (6e90 <sys_clock_elapsed+0x10>)
    6e88:	681b      	ldr	r3, [r3, #0]
}
    6e8a:	1ac0      	subs	r0, r0, r3
    6e8c:	bd08      	pop	{r3, pc}
    6e8e:	bf00      	nop
    6e90:	20000708 	.word	0x20000708

00006e94 <nrf_pin_configure>:
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input,
				       nrf_gpio_pin_drive_t drive)
{
    6e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6e98:	460c      	mov	r4, r1
    6e9a:	4691      	mov	r9, r2
    6e9c:	461f      	mov	r7, r3
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    6e9e:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    6ea2:	d002      	beq.n	6eaa <nrf_pin_configure+0x16>
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    6ea4:	f04f 0901 	mov.w	r9, #1
		dir = NRF_GPIO_PIN_DIR_INPUT;
    6ea8:	2400      	movs	r4, #0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin), drive,
    6eaa:	f000 053f 	and.w	r5, r0, #63	; 0x3f
    6eae:	f3c0 1881 	ubfx	r8, r0, #6, #2
    uint32_t port = pin_number >> 5;
    6eb2:	f3c0 1340 	ubfx	r3, r0, #5, #1
    switch (port)
    6eb6:	f010 0f20 	tst.w	r0, #32
    6eba:	d01d      	beq.n	6ef8 <nrf_pin_configure+0x64>
    6ebc:	b1fb      	cbz	r3, 6efe <nrf_pin_configure+0x6a>
            mask = P1_FEATURE_PINS_PRESENT;
    6ebe:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6ec2:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6ec6:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6ec8:	f013 0f01 	tst.w	r3, #1
    6ecc:	d019      	beq.n	6f02 <nrf_pin_configure+0x6e>
    *p_pin = pin_number & 0x1F;
    6ece:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6ed2:	096d      	lsrs	r5, r5, #5
    6ed4:	d023      	beq.n	6f1e <nrf_pin_configure+0x8a>
    6ed6:	bb2d      	cbnz	r5, 6f24 <nrf_pin_configure+0x90>
            NRFX_ASSERT(0);
    6ed8:	4d19      	ldr	r5, [pc, #100]	; (6f40 <nrf_pin_configure+0xac>)
    6eda:	f44f 7313 	mov.w	r3, #588	; 0x24c
    6ede:	462a      	mov	r2, r5
    6ee0:	4918      	ldr	r1, [pc, #96]	; (6f44 <nrf_pin_configure+0xb0>)
    6ee2:	4819      	ldr	r0, [pc, #100]	; (6f48 <nrf_pin_configure+0xb4>)
    6ee4:	f007 ff65 	bl	edb2 <assert_print>
    6ee8:	f44f 7113 	mov.w	r1, #588	; 0x24c
    6eec:	4628      	mov	r0, r5
    6eee:	f007 ff59 	bl	eda4 <assert_post_action>
        case 0: return NRF_P0;
    6ef2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6ef6:	e016      	b.n	6f26 <nrf_pin_configure+0x92>
            mask = P0_FEATURE_PINS_PRESENT;
    6ef8:	f04f 33ff 	mov.w	r3, #4294967295
    6efc:	e7e1      	b.n	6ec2 <nrf_pin_configure+0x2e>
    switch (port)
    6efe:	2300      	movs	r3, #0
    6f00:	e7df      	b.n	6ec2 <nrf_pin_configure+0x2e>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6f02:	4e0f      	ldr	r6, [pc, #60]	; (6f40 <nrf_pin_configure+0xac>)
    6f04:	f240 2347 	movw	r3, #583	; 0x247
    6f08:	4632      	mov	r2, r6
    6f0a:	4910      	ldr	r1, [pc, #64]	; (6f4c <nrf_pin_configure+0xb8>)
    6f0c:	480e      	ldr	r0, [pc, #56]	; (6f48 <nrf_pin_configure+0xb4>)
    6f0e:	f007 ff50 	bl	edb2 <assert_print>
    6f12:	f240 2147 	movw	r1, #583	; 0x247
    6f16:	4630      	mov	r0, r6
    6f18:	f007 ff44 	bl	eda4 <assert_post_action>
    6f1c:	e7d7      	b.n	6ece <nrf_pin_configure+0x3a>
        case 0: return NRF_P0;
    6f1e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6f22:	e000      	b.n	6f26 <nrf_pin_configure+0x92>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6f24:	4a0a      	ldr	r2, [pc, #40]	; (6f50 <nrf_pin_configure+0xbc>)
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    6f26:	ea44 0449 	orr.w	r4, r4, r9, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    6f2a:	ea44 0488 	orr.w	r4, r4, r8, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    6f2e:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    6f32:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    6f36:	f842 4026 	str.w	r4, [r2, r6, lsl #2]
		     NRF_GPIO_PIN_NOSENSE);
}
    6f3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6f3e:	bf00      	nop
    6f40:	000113f4 	.word	0x000113f4
    6f44:	00011934 	.word	0x00011934
    6f48:	00010450 	.word	0x00010450
    6f4c:	00011428 	.word	0x00011428
    6f50:	50000300 	.word	0x50000300

00006f54 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    6f54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6f58:	4605      	mov	r5, r0
    6f5a:	460f      	mov	r7, r1
    6f5c:	4690      	mov	r8, r2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    6f5e:	2400      	movs	r4, #0
    6f60:	e04f      	b.n	7002 <pinctrl_configure_pins+0xae>
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);

		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    6f62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6f66:	f8c8 350c 	str.w	r3, [r8, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    6f6a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    6f6e:	f003 0a3f 	and.w	sl, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    6f72:	f3c3 1140 	ubfx	r1, r3, #5, #1
    switch (port)
    6f76:	f013 0f20 	tst.w	r3, #32
    6f7a:	d01f      	beq.n	6fbc <pinctrl_configure_pins+0x68>
    6f7c:	b109      	cbz	r1, 6f82 <pinctrl_configure_pins+0x2e>
            mask = P1_FEATURE_PINS_PRESENT;
    6f7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    6f82:	f00a 031f 	and.w	r3, sl, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6f86:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6f88:	f012 0f01 	tst.w	r2, #1
    6f8c:	d019      	beq.n	6fc2 <pinctrl_configure_pins+0x6e>
    *p_pin = pin_number & 0x1F;
    6f8e:	f00a 0b1f 	and.w	fp, sl, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6f92:	ea5f 135a 	movs.w	r3, sl, lsr #5
    6f96:	d023      	beq.n	6fe0 <pinctrl_configure_pins+0x8c>
    6f98:	bb2b      	cbnz	r3, 6fe6 <pinctrl_configure_pins+0x92>
            NRFX_ASSERT(0);
    6f9a:	f8df a344 	ldr.w	sl, [pc, #836]	; 72e0 <pinctrl_configure_pins+0x38c>
    6f9e:	f44f 7313 	mov.w	r3, #588	; 0x24c
    6fa2:	4652      	mov	r2, sl
    6fa4:	49cf      	ldr	r1, [pc, #828]	; (72e4 <pinctrl_configure_pins+0x390>)
    6fa6:	48d0      	ldr	r0, [pc, #832]	; (72e8 <pinctrl_configure_pins+0x394>)
    6fa8:	f007 ff03 	bl	edb2 <assert_print>
    6fac:	f44f 7113 	mov.w	r1, #588	; 0x24c
    6fb0:	4650      	mov	r0, sl
    6fb2:	f007 fef7 	bl	eda4 <assert_post_action>
        case 0: return NRF_P0;
    6fb6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6fba:	e015      	b.n	6fe8 <pinctrl_configure_pins+0x94>
            mask = P0_FEATURE_PINS_PRESENT;
    6fbc:	f04f 32ff 	mov.w	r2, #4294967295
    6fc0:	e7df      	b.n	6f82 <pinctrl_configure_pins+0x2e>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6fc2:	f8df b31c 	ldr.w	fp, [pc, #796]	; 72e0 <pinctrl_configure_pins+0x38c>
    6fc6:	f240 2347 	movw	r3, #583	; 0x247
    6fca:	465a      	mov	r2, fp
    6fcc:	49c7      	ldr	r1, [pc, #796]	; (72ec <pinctrl_configure_pins+0x398>)
    6fce:	48c6      	ldr	r0, [pc, #792]	; (72e8 <pinctrl_configure_pins+0x394>)
    6fd0:	f007 feef 	bl	edb2 <assert_print>
    6fd4:	f240 2147 	movw	r1, #583	; 0x247
    6fd8:	4658      	mov	r0, fp
    6fda:	f007 fee3 	bl	eda4 <assert_post_action>
    6fde:	e7d6      	b.n	6f8e <pinctrl_configure_pins+0x3a>
        case 0: return NRF_P0;
    6fe0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6fe4:	e000      	b.n	6fe8 <pinctrl_configure_pins+0x94>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6fe6:	4ac2      	ldr	r2, [pc, #776]	; (72f0 <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    6fe8:	2101      	movs	r1, #1
    6fea:	fa01 f30b 	lsl.w	r3, r1, fp
    p_reg->OUTSET = set_mask;
    6fee:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    6ff2:	4633      	mov	r3, r6
    6ff4:	460a      	mov	r2, r1
    6ff6:	f855 0009 	ldr.w	r0, [r5, r9]
    6ffa:	f7ff ff4b 	bl	6e94 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    6ffe:	3401      	adds	r4, #1
    7000:	b2e4      	uxtb	r4, r4
    7002:	42bc      	cmp	r4, r7
    7004:	f080 843a 	bcs.w	787c <pinctrl_configure_pins+0x928>
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    7008:	ea4f 0984 	mov.w	r9, r4, lsl #2
    700c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    7010:	f3c3 2603 	ubfx	r6, r3, #8, #4
		switch (NRF_GET_FUN(pins[i])) {
    7014:	0c1a      	lsrs	r2, r3, #16
    7016:	2a22      	cmp	r2, #34	; 0x22
    7018:	f200 8432 	bhi.w	7880 <pinctrl_configure_pins+0x92c>
    701c:	a101      	add	r1, pc, #4	; (adr r1, 7024 <pinctrl_configure_pins+0xd0>)
    701e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    7022:	bf00      	nop
    7024:	00006f63 	.word	0x00006f63
    7028:	000070b1 	.word	0x000070b1
    702c:	000070c9 	.word	0x000070c9
    7030:	0000716b 	.word	0x0000716b
    7034:	00007183 	.word	0x00007183
    7038:	00007225 	.word	0x00007225
    703c:	000072c7 	.word	0x000072c7
    7040:	00007881 	.word	0x00007881
    7044:	00007881 	.word	0x00007881
    7048:	00007881 	.word	0x00007881
    704c:	00007881 	.word	0x00007881
    7050:	000072f5 	.word	0x000072f5
    7054:	00007311 	.word	0x00007311
    7058:	00007881 	.word	0x00007881
    705c:	00007881 	.word	0x00007881
    7060:	00007881 	.word	0x00007881
    7064:	00007881 	.word	0x00007881
    7068:	00007881 	.word	0x00007881
    706c:	00007881 	.word	0x00007881
    7070:	00007881 	.word	0x00007881
    7074:	00007881 	.word	0x00007881
    7078:	00007881 	.word	0x00007881
    707c:	0000732d 	.word	0x0000732d
    7080:	00007455 	.word	0x00007455
    7084:	0000757d 	.word	0x0000757d
    7088:	000076bb 	.word	0x000076bb
    708c:	00007881 	.word	0x00007881
    7090:	00007881 	.word	0x00007881
    7094:	00007881 	.word	0x00007881
    7098:	000077e3 	.word	0x000077e3
    709c:	000077fb 	.word	0x000077fb
    70a0:	00007815 	.word	0x00007815
    70a4:	0000782f 	.word	0x0000782f
    70a8:	00007849 	.word	0x00007849
    70ac:	00007863 	.word	0x00007863
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
		case NRF_FUN_UART_RX:
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    70b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    70b4:	f8c8 3514 	str.w	r3, [r8, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    70b8:	4633      	mov	r3, r6
    70ba:	2200      	movs	r2, #0
    70bc:	4611      	mov	r1, r2
    70be:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    70c2:	f7ff fee7 	bl	6e94 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
    70c6:	e79a      	b.n	6ffe <pinctrl_configure_pins+0xaa>
		case NRF_FUN_UART_RTS:
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    70c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    70cc:	f8c8 3508 	str.w	r3, [r8, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    70d0:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    70d4:	f003 0a3f 	and.w	sl, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    70d8:	f3c3 1240 	ubfx	r2, r3, #5, #1
    switch (port)
    70dc:	f013 0f20 	tst.w	r3, #32
    70e0:	d01f      	beq.n	7122 <pinctrl_configure_pins+0x1ce>
    70e2:	b30a      	cbz	r2, 7128 <pinctrl_configure_pins+0x1d4>
            mask = P1_FEATURE_PINS_PRESENT;
    70e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    70e8:	f00a 021f 	and.w	r2, sl, #31
    return (mask & (1UL << pin_number)) ? true : false;
    70ec:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    70ee:	f013 0f01 	tst.w	r3, #1
    70f2:	d01b      	beq.n	712c <pinctrl_configure_pins+0x1d8>
    *p_pin = pin_number & 0x1F;
    70f4:	f00a 0b1f 	and.w	fp, sl, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    70f8:	ea5f 135a 	movs.w	r3, sl, lsr #5
    70fc:	d025      	beq.n	714a <pinctrl_configure_pins+0x1f6>
    70fe:	bb3b      	cbnz	r3, 7150 <pinctrl_configure_pins+0x1fc>
            NRFX_ASSERT(0);
    7100:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 72e0 <pinctrl_configure_pins+0x38c>
    7104:	f44f 7313 	mov.w	r3, #588	; 0x24c
    7108:	4652      	mov	r2, sl
    710a:	4976      	ldr	r1, [pc, #472]	; (72e4 <pinctrl_configure_pins+0x390>)
    710c:	4876      	ldr	r0, [pc, #472]	; (72e8 <pinctrl_configure_pins+0x394>)
    710e:	f007 fe50 	bl	edb2 <assert_print>
    7112:	f44f 7113 	mov.w	r1, #588	; 0x24c
    7116:	4650      	mov	r0, sl
    7118:	f007 fe44 	bl	eda4 <assert_post_action>
        case 0: return NRF_P0;
    711c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    7120:	e017      	b.n	7152 <pinctrl_configure_pins+0x1fe>
            mask = P0_FEATURE_PINS_PRESENT;
    7122:	f04f 33ff 	mov.w	r3, #4294967295
    7126:	e7df      	b.n	70e8 <pinctrl_configure_pins+0x194>
    switch (port)
    7128:	2300      	movs	r3, #0
    712a:	e7dd      	b.n	70e8 <pinctrl_configure_pins+0x194>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    712c:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 72e0 <pinctrl_configure_pins+0x38c>
    7130:	f240 2347 	movw	r3, #583	; 0x247
    7134:	465a      	mov	r2, fp
    7136:	496d      	ldr	r1, [pc, #436]	; (72ec <pinctrl_configure_pins+0x398>)
    7138:	486b      	ldr	r0, [pc, #428]	; (72e8 <pinctrl_configure_pins+0x394>)
    713a:	f007 fe3a 	bl	edb2 <assert_print>
    713e:	f240 2147 	movw	r1, #583	; 0x247
    7142:	4658      	mov	r0, fp
    7144:	f007 fe2e 	bl	eda4 <assert_post_action>
    7148:	e7d4      	b.n	70f4 <pinctrl_configure_pins+0x1a0>
        case 0: return NRF_P0;
    714a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    714e:	e000      	b.n	7152 <pinctrl_configure_pins+0x1fe>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7150:	4a67      	ldr	r2, [pc, #412]	; (72f0 <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    7152:	2101      	movs	r1, #1
    7154:	fa01 f30b 	lsl.w	r3, r1, fp
    p_reg->OUTSET = set_mask;
    7158:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    715c:	4633      	mov	r3, r6
    715e:	460a      	mov	r2, r1
    7160:	f855 0009 	ldr.w	r0, [r5, r9]
    7164:	f7ff fe96 	bl	6e94 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    7168:	e749      	b.n	6ffe <pinctrl_configure_pins+0xaa>
		case NRF_FUN_UART_CTS:
			NRF_PSEL_UART(reg, CTS) = NRF_GET_PIN(pins[i]);
    716a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    716e:	f8c8 3510 	str.w	r3, [r8, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7172:	4633      	mov	r3, r6
    7174:	2200      	movs	r2, #0
    7176:	4611      	mov	r1, r2
    7178:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    717c:	f7ff fe8a 	bl	6e94 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
    7180:	e73d      	b.n	6ffe <pinctrl_configure_pins+0xaa>
#endif /* defined(NRF_PSEL_UART) */
#if defined(NRF_PSEL_SPIM)
		case NRF_FUN_SPIM_SCK:
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    7182:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7186:	f8c8 3508 	str.w	r3, [r8, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    718a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    718e:	f003 0a3f 	and.w	sl, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    7192:	f3c3 1240 	ubfx	r2, r3, #5, #1
    switch (port)
    7196:	f013 0f20 	tst.w	r3, #32
    719a:	d01f      	beq.n	71dc <pinctrl_configure_pins+0x288>
    719c:	b30a      	cbz	r2, 71e2 <pinctrl_configure_pins+0x28e>
            mask = P1_FEATURE_PINS_PRESENT;
    719e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    71a2:	f00a 021f 	and.w	r2, sl, #31
    return (mask & (1UL << pin_number)) ? true : false;
    71a6:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    71a8:	f013 0f01 	tst.w	r3, #1
    71ac:	d01b      	beq.n	71e6 <pinctrl_configure_pins+0x292>
    *p_pin = pin_number & 0x1F;
    71ae:	f00a 0b1f 	and.w	fp, sl, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    71b2:	ea5f 135a 	movs.w	r3, sl, lsr #5
    71b6:	d025      	beq.n	7204 <pinctrl_configure_pins+0x2b0>
    71b8:	bb3b      	cbnz	r3, 720a <pinctrl_configure_pins+0x2b6>
            NRFX_ASSERT(0);
    71ba:	f8df a124 	ldr.w	sl, [pc, #292]	; 72e0 <pinctrl_configure_pins+0x38c>
    71be:	f44f 7313 	mov.w	r3, #588	; 0x24c
    71c2:	4652      	mov	r2, sl
    71c4:	4947      	ldr	r1, [pc, #284]	; (72e4 <pinctrl_configure_pins+0x390>)
    71c6:	4848      	ldr	r0, [pc, #288]	; (72e8 <pinctrl_configure_pins+0x394>)
    71c8:	f007 fdf3 	bl	edb2 <assert_print>
    71cc:	f44f 7113 	mov.w	r1, #588	; 0x24c
    71d0:	4650      	mov	r0, sl
    71d2:	f007 fde7 	bl	eda4 <assert_post_action>
        case 0: return NRF_P0;
    71d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    71da:	e017      	b.n	720c <pinctrl_configure_pins+0x2b8>
            mask = P0_FEATURE_PINS_PRESENT;
    71dc:	f04f 33ff 	mov.w	r3, #4294967295
    71e0:	e7df      	b.n	71a2 <pinctrl_configure_pins+0x24e>
    switch (port)
    71e2:	2300      	movs	r3, #0
    71e4:	e7dd      	b.n	71a2 <pinctrl_configure_pins+0x24e>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    71e6:	f8df b0f8 	ldr.w	fp, [pc, #248]	; 72e0 <pinctrl_configure_pins+0x38c>
    71ea:	f240 2347 	movw	r3, #583	; 0x247
    71ee:	465a      	mov	r2, fp
    71f0:	493e      	ldr	r1, [pc, #248]	; (72ec <pinctrl_configure_pins+0x398>)
    71f2:	483d      	ldr	r0, [pc, #244]	; (72e8 <pinctrl_configure_pins+0x394>)
    71f4:	f007 fddd 	bl	edb2 <assert_print>
    71f8:	f240 2147 	movw	r1, #583	; 0x247
    71fc:	4658      	mov	r0, fp
    71fe:	f007 fdd1 	bl	eda4 <assert_post_action>
    7202:	e7d4      	b.n	71ae <pinctrl_configure_pins+0x25a>
        case 0: return NRF_P0;
    7204:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    7208:	e000      	b.n	720c <pinctrl_configure_pins+0x2b8>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    720a:	4a39      	ldr	r2, [pc, #228]	; (72f0 <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    720c:	2101      	movs	r1, #1
    720e:	fa01 f30b 	lsl.w	r3, r1, fp
    p_reg->OUTCLR = clr_mask;
    7212:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    7216:	4633      	mov	r3, r6
    7218:	2200      	movs	r2, #0
    721a:	f855 0009 	ldr.w	r0, [r5, r9]
    721e:	f7ff fe39 	bl	6e94 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
    7222:	e6ec      	b.n	6ffe <pinctrl_configure_pins+0xaa>
		case NRF_FUN_SPIM_MOSI:
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    7224:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7228:	f8c8 350c 	str.w	r3, [r8, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    722c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    7230:	f003 0a3f 	and.w	sl, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    7234:	f3c3 1240 	ubfx	r2, r3, #5, #1
    switch (port)
    7238:	f013 0f20 	tst.w	r3, #32
    723c:	d01f      	beq.n	727e <pinctrl_configure_pins+0x32a>
    723e:	b30a      	cbz	r2, 7284 <pinctrl_configure_pins+0x330>
            mask = P1_FEATURE_PINS_PRESENT;
    7240:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    7244:	f00a 021f 	and.w	r2, sl, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7248:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    724a:	f013 0f01 	tst.w	r3, #1
    724e:	d01b      	beq.n	7288 <pinctrl_configure_pins+0x334>
    *p_pin = pin_number & 0x1F;
    7250:	f00a 0b1f 	and.w	fp, sl, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7254:	ea5f 135a 	movs.w	r3, sl, lsr #5
    7258:	d025      	beq.n	72a6 <pinctrl_configure_pins+0x352>
    725a:	bb3b      	cbnz	r3, 72ac <pinctrl_configure_pins+0x358>
            NRFX_ASSERT(0);
    725c:	f8df a080 	ldr.w	sl, [pc, #128]	; 72e0 <pinctrl_configure_pins+0x38c>
    7260:	f44f 7313 	mov.w	r3, #588	; 0x24c
    7264:	4652      	mov	r2, sl
    7266:	491f      	ldr	r1, [pc, #124]	; (72e4 <pinctrl_configure_pins+0x390>)
    7268:	481f      	ldr	r0, [pc, #124]	; (72e8 <pinctrl_configure_pins+0x394>)
    726a:	f007 fda2 	bl	edb2 <assert_print>
    726e:	f44f 7113 	mov.w	r1, #588	; 0x24c
    7272:	4650      	mov	r0, sl
    7274:	f007 fd96 	bl	eda4 <assert_post_action>
        case 0: return NRF_P0;
    7278:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    727c:	e017      	b.n	72ae <pinctrl_configure_pins+0x35a>
            mask = P0_FEATURE_PINS_PRESENT;
    727e:	f04f 33ff 	mov.w	r3, #4294967295
    7282:	e7df      	b.n	7244 <pinctrl_configure_pins+0x2f0>
    switch (port)
    7284:	2300      	movs	r3, #0
    7286:	e7dd      	b.n	7244 <pinctrl_configure_pins+0x2f0>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7288:	f8df b054 	ldr.w	fp, [pc, #84]	; 72e0 <pinctrl_configure_pins+0x38c>
    728c:	f240 2347 	movw	r3, #583	; 0x247
    7290:	465a      	mov	r2, fp
    7292:	4916      	ldr	r1, [pc, #88]	; (72ec <pinctrl_configure_pins+0x398>)
    7294:	4814      	ldr	r0, [pc, #80]	; (72e8 <pinctrl_configure_pins+0x394>)
    7296:	f007 fd8c 	bl	edb2 <assert_print>
    729a:	f240 2147 	movw	r1, #583	; 0x247
    729e:	4658      	mov	r0, fp
    72a0:	f007 fd80 	bl	eda4 <assert_post_action>
    72a4:	e7d4      	b.n	7250 <pinctrl_configure_pins+0x2fc>
        case 0: return NRF_P0;
    72a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    72aa:	e000      	b.n	72ae <pinctrl_configure_pins+0x35a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    72ac:	4a10      	ldr	r2, [pc, #64]	; (72f0 <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    72ae:	2101      	movs	r1, #1
    72b0:	fa01 f30b 	lsl.w	r3, r1, fp
    p_reg->OUTCLR = clr_mask;
    72b4:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    72b8:	4633      	mov	r3, r6
    72ba:	460a      	mov	r2, r1
    72bc:	f855 0009 	ldr.w	r0, [r5, r9]
    72c0:	f7ff fde8 	bl	6e94 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    72c4:	e69b      	b.n	6ffe <pinctrl_configure_pins+0xaa>
		case NRF_FUN_SPIM_MISO:
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    72c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    72ca:	f8c8 3510 	str.w	r3, [r8, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    72ce:	4633      	mov	r3, r6
    72d0:	2200      	movs	r2, #0
    72d2:	4611      	mov	r1, r2
    72d4:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    72d8:	f7ff fddc 	bl	6e94 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
    72dc:	e68f      	b.n	6ffe <pinctrl_configure_pins+0xaa>
    72de:	bf00      	nop
    72e0:	000113f4 	.word	0x000113f4
    72e4:	00011934 	.word	0x00011934
    72e8:	00010450 	.word	0x00010450
    72ec:	00011428 	.word	0x00011428
    72f0:	50000300 	.word	0x50000300
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
#endif /* defined(NRF_PSEL_SPIS) */
#if defined(NRF_PSEL_TWIM)
		case NRF_FUN_TWIM_SCL:
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    72f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    72f8:	f8c8 3508 	str.w	r3, [r8, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    72fc:	b906      	cbnz	r6, 7300 <pinctrl_configure_pins+0x3ac>
				 * suitable for TWI/TWIM peripherals (S0D1).
				 * This drive cannot be used always so that
				 * users are able to select e.g. H0D1 or E0E1
				 * in devicetree.
				 */
				drive = NRF_DRIVE_S0D1;
    72fe:	2606      	movs	r6, #6
			}
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7300:	4633      	mov	r3, r6
    7302:	2200      	movs	r2, #0
    7304:	4611      	mov	r1, r2
    7306:	f855 0009 	ldr.w	r0, [r5, r9]
    730a:	f7ff fdc3 	bl	6e94 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
    730e:	e676      	b.n	6ffe <pinctrl_configure_pins+0xaa>
		case NRF_FUN_TWIM_SDA:
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    7310:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7314:	f8c8 350c 	str.w	r3, [r8, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    7318:	b906      	cbnz	r6, 731c <pinctrl_configure_pins+0x3c8>
				drive = NRF_DRIVE_S0D1;
    731a:	2606      	movs	r6, #6
			}
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    731c:	4633      	mov	r3, r6
    731e:	2200      	movs	r2, #0
    7320:	4611      	mov	r1, r2
    7322:	f855 0009 	ldr.w	r0, [r5, r9]
    7326:	f7ff fdb5 	bl	6e94 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
    732a:	e668      	b.n	6ffe <pinctrl_configure_pins+0xaa>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
#endif /* defined(NRF_PSEL_PDM) */
#if defined(NRF_PSEL_PWM)
		case NRF_FUN_PWM_OUT0:
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    732c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7330:	f8c8 3560 	str.w	r3, [r8, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    7334:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    7338:	f003 0a3f 	and.w	sl, r3, #63	; 0x3f
    733c:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    7340:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    7344:	d145      	bne.n	73d2 <pinctrl_configure_pins+0x47e>
    switch (port)
    7346:	ea5f 135a 	movs.w	r3, sl, lsr #5
    734a:	d01f      	beq.n	738c <pinctrl_configure_pins+0x438>
    734c:	b10b      	cbz	r3, 7352 <pinctrl_configure_pins+0x3fe>
            mask = P1_FEATURE_PINS_PRESENT;
    734e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    7352:	f00a 031f 	and.w	r3, sl, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7356:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7358:	f012 0f01 	tst.w	r2, #1
    735c:	d019      	beq.n	7392 <pinctrl_configure_pins+0x43e>
    *p_pin = pin_number & 0x1F;
    735e:	f00a 0b1f 	and.w	fp, sl, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7362:	ea5f 135a 	movs.w	r3, sl, lsr #5
    7366:	d023      	beq.n	73b0 <pinctrl_configure_pins+0x45c>
    7368:	bb2b      	cbnz	r3, 73b6 <pinctrl_configure_pins+0x462>
            NRFX_ASSERT(0);
    736a:	f8df a304 	ldr.w	sl, [pc, #772]	; 7670 <pinctrl_configure_pins+0x71c>
    736e:	f44f 7313 	mov.w	r3, #588	; 0x24c
    7372:	4652      	mov	r2, sl
    7374:	49bf      	ldr	r1, [pc, #764]	; (7674 <pinctrl_configure_pins+0x720>)
    7376:	48c0      	ldr	r0, [pc, #768]	; (7678 <pinctrl_configure_pins+0x724>)
    7378:	f007 fd1b 	bl	edb2 <assert_print>
    737c:	f44f 7113 	mov.w	r1, #588	; 0x24c
    7380:	4650      	mov	r0, sl
    7382:	f007 fd0f 	bl	eda4 <assert_post_action>
        case 0: return NRF_P0;
    7386:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    738a:	e015      	b.n	73b8 <pinctrl_configure_pins+0x464>
            mask = P0_FEATURE_PINS_PRESENT;
    738c:	f04f 32ff 	mov.w	r2, #4294967295
    7390:	e7df      	b.n	7352 <pinctrl_configure_pins+0x3fe>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7392:	f8df b2dc 	ldr.w	fp, [pc, #732]	; 7670 <pinctrl_configure_pins+0x71c>
    7396:	f240 2347 	movw	r3, #583	; 0x247
    739a:	465a      	mov	r2, fp
    739c:	49b7      	ldr	r1, [pc, #732]	; (767c <pinctrl_configure_pins+0x728>)
    739e:	48b6      	ldr	r0, [pc, #728]	; (7678 <pinctrl_configure_pins+0x724>)
    73a0:	f007 fd07 	bl	edb2 <assert_print>
    73a4:	f240 2147 	movw	r1, #583	; 0x247
    73a8:	4658      	mov	r0, fp
    73aa:	f007 fcfb 	bl	eda4 <assert_post_action>
    73ae:	e7d6      	b.n	735e <pinctrl_configure_pins+0x40a>
        case 0: return NRF_P0;
    73b0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    73b4:	e000      	b.n	73b8 <pinctrl_configure_pins+0x464>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    73b6:	4ab2      	ldr	r2, [pc, #712]	; (7680 <pinctrl_configure_pins+0x72c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    73b8:	2301      	movs	r3, #1
    73ba:	fa03 f30b 	lsl.w	r3, r3, fp
    p_reg->OUTCLR = clr_mask;
    73be:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    73c2:	4633      	mov	r3, r6
    73c4:	2201      	movs	r2, #1
    73c6:	4611      	mov	r1, r2
    73c8:	f855 0009 	ldr.w	r0, [r5, r9]
    73cc:	f7ff fd62 	bl	6e94 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    73d0:	e615      	b.n	6ffe <pinctrl_configure_pins+0xaa>
    switch (port)
    73d2:	ea5f 135a 	movs.w	r3, sl, lsr #5
    73d6:	d01f      	beq.n	7418 <pinctrl_configure_pins+0x4c4>
    73d8:	b30b      	cbz	r3, 741e <pinctrl_configure_pins+0x4ca>
            mask = P1_FEATURE_PINS_PRESENT;
    73da:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    73de:	f00a 021f 	and.w	r2, sl, #31
    return (mask & (1UL << pin_number)) ? true : false;
    73e2:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    73e4:	f013 0f01 	tst.w	r3, #1
    73e8:	d01b      	beq.n	7422 <pinctrl_configure_pins+0x4ce>
    *p_pin = pin_number & 0x1F;
    73ea:	f00a 0b1f 	and.w	fp, sl, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    73ee:	ea5f 135a 	movs.w	r3, sl, lsr #5
    73f2:	d025      	beq.n	7440 <pinctrl_configure_pins+0x4ec>
    73f4:	bb3b      	cbnz	r3, 7446 <pinctrl_configure_pins+0x4f2>
            NRFX_ASSERT(0);
    73f6:	f8df a278 	ldr.w	sl, [pc, #632]	; 7670 <pinctrl_configure_pins+0x71c>
    73fa:	f44f 7313 	mov.w	r3, #588	; 0x24c
    73fe:	4652      	mov	r2, sl
    7400:	499c      	ldr	r1, [pc, #624]	; (7674 <pinctrl_configure_pins+0x720>)
    7402:	489d      	ldr	r0, [pc, #628]	; (7678 <pinctrl_configure_pins+0x724>)
    7404:	f007 fcd5 	bl	edb2 <assert_print>
    7408:	f44f 7113 	mov.w	r1, #588	; 0x24c
    740c:	4650      	mov	r0, sl
    740e:	f007 fcc9 	bl	eda4 <assert_post_action>
        case 0: return NRF_P0;
    7412:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    7416:	e017      	b.n	7448 <pinctrl_configure_pins+0x4f4>
            mask = P0_FEATURE_PINS_PRESENT;
    7418:	f04f 33ff 	mov.w	r3, #4294967295
    741c:	e7df      	b.n	73de <pinctrl_configure_pins+0x48a>
    switch (port)
    741e:	2300      	movs	r3, #0
    7420:	e7dd      	b.n	73de <pinctrl_configure_pins+0x48a>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7422:	f8df b24c 	ldr.w	fp, [pc, #588]	; 7670 <pinctrl_configure_pins+0x71c>
    7426:	f240 2347 	movw	r3, #583	; 0x247
    742a:	465a      	mov	r2, fp
    742c:	4993      	ldr	r1, [pc, #588]	; (767c <pinctrl_configure_pins+0x728>)
    742e:	4892      	ldr	r0, [pc, #584]	; (7678 <pinctrl_configure_pins+0x724>)
    7430:	f007 fcbf 	bl	edb2 <assert_print>
    7434:	f240 2147 	movw	r1, #583	; 0x247
    7438:	4658      	mov	r0, fp
    743a:	f007 fcb3 	bl	eda4 <assert_post_action>
    743e:	e7d4      	b.n	73ea <pinctrl_configure_pins+0x496>
        case 0: return NRF_P0;
    7440:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    7444:	e000      	b.n	7448 <pinctrl_configure_pins+0x4f4>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7446:	4a8e      	ldr	r2, [pc, #568]	; (7680 <pinctrl_configure_pins+0x72c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    7448:	2301      	movs	r3, #1
    744a:	fa03 f30b 	lsl.w	r3, r3, fp
    p_reg->OUTSET = set_mask;
    744e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    7452:	e7b6      	b.n	73c2 <pinctrl_configure_pins+0x46e>
		case NRF_FUN_PWM_OUT1:
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    7454:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7458:	f8c8 3564 	str.w	r3, [r8, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    745c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    7460:	f003 0a3f 	and.w	sl, r3, #63	; 0x3f
    7464:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    7468:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    746c:	d145      	bne.n	74fa <pinctrl_configure_pins+0x5a6>
    switch (port)
    746e:	ea5f 135a 	movs.w	r3, sl, lsr #5
    7472:	d01f      	beq.n	74b4 <pinctrl_configure_pins+0x560>
    7474:	b10b      	cbz	r3, 747a <pinctrl_configure_pins+0x526>
            mask = P1_FEATURE_PINS_PRESENT;
    7476:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    747a:	f00a 031f 	and.w	r3, sl, #31
    return (mask & (1UL << pin_number)) ? true : false;
    747e:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7480:	f012 0f01 	tst.w	r2, #1
    7484:	d019      	beq.n	74ba <pinctrl_configure_pins+0x566>
    *p_pin = pin_number & 0x1F;
    7486:	f00a 0b1f 	and.w	fp, sl, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    748a:	ea5f 135a 	movs.w	r3, sl, lsr #5
    748e:	d023      	beq.n	74d8 <pinctrl_configure_pins+0x584>
    7490:	bb2b      	cbnz	r3, 74de <pinctrl_configure_pins+0x58a>
            NRFX_ASSERT(0);
    7492:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 7670 <pinctrl_configure_pins+0x71c>
    7496:	f44f 7313 	mov.w	r3, #588	; 0x24c
    749a:	4652      	mov	r2, sl
    749c:	4975      	ldr	r1, [pc, #468]	; (7674 <pinctrl_configure_pins+0x720>)
    749e:	4876      	ldr	r0, [pc, #472]	; (7678 <pinctrl_configure_pins+0x724>)
    74a0:	f007 fc87 	bl	edb2 <assert_print>
    74a4:	f44f 7113 	mov.w	r1, #588	; 0x24c
    74a8:	4650      	mov	r0, sl
    74aa:	f007 fc7b 	bl	eda4 <assert_post_action>
        case 0: return NRF_P0;
    74ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    74b2:	e015      	b.n	74e0 <pinctrl_configure_pins+0x58c>
            mask = P0_FEATURE_PINS_PRESENT;
    74b4:	f04f 32ff 	mov.w	r2, #4294967295
    74b8:	e7df      	b.n	747a <pinctrl_configure_pins+0x526>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    74ba:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 7670 <pinctrl_configure_pins+0x71c>
    74be:	f240 2347 	movw	r3, #583	; 0x247
    74c2:	465a      	mov	r2, fp
    74c4:	496d      	ldr	r1, [pc, #436]	; (767c <pinctrl_configure_pins+0x728>)
    74c6:	486c      	ldr	r0, [pc, #432]	; (7678 <pinctrl_configure_pins+0x724>)
    74c8:	f007 fc73 	bl	edb2 <assert_print>
    74cc:	f240 2147 	movw	r1, #583	; 0x247
    74d0:	4658      	mov	r0, fp
    74d2:	f007 fc67 	bl	eda4 <assert_post_action>
    74d6:	e7d6      	b.n	7486 <pinctrl_configure_pins+0x532>
        case 0: return NRF_P0;
    74d8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    74dc:	e000      	b.n	74e0 <pinctrl_configure_pins+0x58c>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    74de:	4a68      	ldr	r2, [pc, #416]	; (7680 <pinctrl_configure_pins+0x72c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    74e0:	2301      	movs	r3, #1
    74e2:	fa03 f30b 	lsl.w	r3, r3, fp
    p_reg->OUTCLR = clr_mask;
    74e6:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    74ea:	4633      	mov	r3, r6
    74ec:	2201      	movs	r2, #1
    74ee:	4611      	mov	r1, r2
    74f0:	f855 0009 	ldr.w	r0, [r5, r9]
    74f4:	f7ff fcce 	bl	6e94 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    74f8:	e581      	b.n	6ffe <pinctrl_configure_pins+0xaa>
    switch (port)
    74fa:	ea5f 135a 	movs.w	r3, sl, lsr #5
    74fe:	d01f      	beq.n	7540 <pinctrl_configure_pins+0x5ec>
    7500:	b30b      	cbz	r3, 7546 <pinctrl_configure_pins+0x5f2>
            mask = P1_FEATURE_PINS_PRESENT;
    7502:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    7506:	f00a 021f 	and.w	r2, sl, #31
    return (mask & (1UL << pin_number)) ? true : false;
    750a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    750c:	f013 0f01 	tst.w	r3, #1
    7510:	d01b      	beq.n	754a <pinctrl_configure_pins+0x5f6>
    *p_pin = pin_number & 0x1F;
    7512:	f00a 0b1f 	and.w	fp, sl, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7516:	ea5f 135a 	movs.w	r3, sl, lsr #5
    751a:	d025      	beq.n	7568 <pinctrl_configure_pins+0x614>
    751c:	bb3b      	cbnz	r3, 756e <pinctrl_configure_pins+0x61a>
            NRFX_ASSERT(0);
    751e:	f8df a150 	ldr.w	sl, [pc, #336]	; 7670 <pinctrl_configure_pins+0x71c>
    7522:	f44f 7313 	mov.w	r3, #588	; 0x24c
    7526:	4652      	mov	r2, sl
    7528:	4952      	ldr	r1, [pc, #328]	; (7674 <pinctrl_configure_pins+0x720>)
    752a:	4853      	ldr	r0, [pc, #332]	; (7678 <pinctrl_configure_pins+0x724>)
    752c:	f007 fc41 	bl	edb2 <assert_print>
    7530:	f44f 7113 	mov.w	r1, #588	; 0x24c
    7534:	4650      	mov	r0, sl
    7536:	f007 fc35 	bl	eda4 <assert_post_action>
        case 0: return NRF_P0;
    753a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    753e:	e017      	b.n	7570 <pinctrl_configure_pins+0x61c>
            mask = P0_FEATURE_PINS_PRESENT;
    7540:	f04f 33ff 	mov.w	r3, #4294967295
    7544:	e7df      	b.n	7506 <pinctrl_configure_pins+0x5b2>
    switch (port)
    7546:	2300      	movs	r3, #0
    7548:	e7dd      	b.n	7506 <pinctrl_configure_pins+0x5b2>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    754a:	f8df b124 	ldr.w	fp, [pc, #292]	; 7670 <pinctrl_configure_pins+0x71c>
    754e:	f240 2347 	movw	r3, #583	; 0x247
    7552:	465a      	mov	r2, fp
    7554:	4949      	ldr	r1, [pc, #292]	; (767c <pinctrl_configure_pins+0x728>)
    7556:	4848      	ldr	r0, [pc, #288]	; (7678 <pinctrl_configure_pins+0x724>)
    7558:	f007 fc2b 	bl	edb2 <assert_print>
    755c:	f240 2147 	movw	r1, #583	; 0x247
    7560:	4658      	mov	r0, fp
    7562:	f007 fc1f 	bl	eda4 <assert_post_action>
    7566:	e7d4      	b.n	7512 <pinctrl_configure_pins+0x5be>
        case 0: return NRF_P0;
    7568:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    756c:	e000      	b.n	7570 <pinctrl_configure_pins+0x61c>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    756e:	4a44      	ldr	r2, [pc, #272]	; (7680 <pinctrl_configure_pins+0x72c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    7570:	2301      	movs	r3, #1
    7572:	fa03 f30b 	lsl.w	r3, r3, fp
    p_reg->OUTSET = set_mask;
    7576:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    757a:	e7b6      	b.n	74ea <pinctrl_configure_pins+0x596>
		case NRF_FUN_PWM_OUT2:
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    757c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7580:	f8c8 3568 	str.w	r3, [r8, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    7584:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    7588:	f003 0a3f 	and.w	sl, r3, #63	; 0x3f
    758c:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    7590:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    7594:	d145      	bne.n	7622 <pinctrl_configure_pins+0x6ce>
    switch (port)
    7596:	ea5f 135a 	movs.w	r3, sl, lsr #5
    759a:	d01f      	beq.n	75dc <pinctrl_configure_pins+0x688>
    759c:	b10b      	cbz	r3, 75a2 <pinctrl_configure_pins+0x64e>
            mask = P1_FEATURE_PINS_PRESENT;
    759e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    75a2:	f00a 031f 	and.w	r3, sl, #31
    return (mask & (1UL << pin_number)) ? true : false;
    75a6:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    75a8:	f012 0f01 	tst.w	r2, #1
    75ac:	d019      	beq.n	75e2 <pinctrl_configure_pins+0x68e>
    *p_pin = pin_number & 0x1F;
    75ae:	f00a 0b1f 	and.w	fp, sl, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    75b2:	ea5f 135a 	movs.w	r3, sl, lsr #5
    75b6:	d023      	beq.n	7600 <pinctrl_configure_pins+0x6ac>
    75b8:	bb2b      	cbnz	r3, 7606 <pinctrl_configure_pins+0x6b2>
            NRFX_ASSERT(0);
    75ba:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 7670 <pinctrl_configure_pins+0x71c>
    75be:	f44f 7313 	mov.w	r3, #588	; 0x24c
    75c2:	4652      	mov	r2, sl
    75c4:	492b      	ldr	r1, [pc, #172]	; (7674 <pinctrl_configure_pins+0x720>)
    75c6:	482c      	ldr	r0, [pc, #176]	; (7678 <pinctrl_configure_pins+0x724>)
    75c8:	f007 fbf3 	bl	edb2 <assert_print>
    75cc:	f44f 7113 	mov.w	r1, #588	; 0x24c
    75d0:	4650      	mov	r0, sl
    75d2:	f007 fbe7 	bl	eda4 <assert_post_action>
        case 0: return NRF_P0;
    75d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    75da:	e015      	b.n	7608 <pinctrl_configure_pins+0x6b4>
            mask = P0_FEATURE_PINS_PRESENT;
    75dc:	f04f 32ff 	mov.w	r2, #4294967295
    75e0:	e7df      	b.n	75a2 <pinctrl_configure_pins+0x64e>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    75e2:	f8df b08c 	ldr.w	fp, [pc, #140]	; 7670 <pinctrl_configure_pins+0x71c>
    75e6:	f240 2347 	movw	r3, #583	; 0x247
    75ea:	465a      	mov	r2, fp
    75ec:	4923      	ldr	r1, [pc, #140]	; (767c <pinctrl_configure_pins+0x728>)
    75ee:	4822      	ldr	r0, [pc, #136]	; (7678 <pinctrl_configure_pins+0x724>)
    75f0:	f007 fbdf 	bl	edb2 <assert_print>
    75f4:	f240 2147 	movw	r1, #583	; 0x247
    75f8:	4658      	mov	r0, fp
    75fa:	f007 fbd3 	bl	eda4 <assert_post_action>
    75fe:	e7d6      	b.n	75ae <pinctrl_configure_pins+0x65a>
        case 0: return NRF_P0;
    7600:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    7604:	e000      	b.n	7608 <pinctrl_configure_pins+0x6b4>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7606:	4a1e      	ldr	r2, [pc, #120]	; (7680 <pinctrl_configure_pins+0x72c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    7608:	2301      	movs	r3, #1
    760a:	fa03 f30b 	lsl.w	r3, r3, fp
    p_reg->OUTCLR = clr_mask;
    760e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    7612:	4633      	mov	r3, r6
    7614:	2201      	movs	r2, #1
    7616:	4611      	mov	r1, r2
    7618:	f855 0009 	ldr.w	r0, [r5, r9]
    761c:	f7ff fc3a 	bl	6e94 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    7620:	e4ed      	b.n	6ffe <pinctrl_configure_pins+0xaa>
    switch (port)
    7622:	ea5f 135a 	movs.w	r3, sl, lsr #5
    7626:	d01f      	beq.n	7668 <pinctrl_configure_pins+0x714>
    7628:	b363      	cbz	r3, 7684 <pinctrl_configure_pins+0x730>
            mask = P1_FEATURE_PINS_PRESENT;
    762a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    762e:	f00a 021f 	and.w	r2, sl, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7632:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7634:	f013 0f01 	tst.w	r3, #1
    7638:	d026      	beq.n	7688 <pinctrl_configure_pins+0x734>
    *p_pin = pin_number & 0x1F;
    763a:	f00a 0b1f 	and.w	fp, sl, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    763e:	ea5f 135a 	movs.w	r3, sl, lsr #5
    7642:	d030      	beq.n	76a6 <pinctrl_configure_pins+0x752>
    7644:	bb93      	cbnz	r3, 76ac <pinctrl_configure_pins+0x758>
            NRFX_ASSERT(0);
    7646:	f8df a028 	ldr.w	sl, [pc, #40]	; 7670 <pinctrl_configure_pins+0x71c>
    764a:	f44f 7313 	mov.w	r3, #588	; 0x24c
    764e:	4652      	mov	r2, sl
    7650:	4908      	ldr	r1, [pc, #32]	; (7674 <pinctrl_configure_pins+0x720>)
    7652:	4809      	ldr	r0, [pc, #36]	; (7678 <pinctrl_configure_pins+0x724>)
    7654:	f007 fbad 	bl	edb2 <assert_print>
    7658:	f44f 7113 	mov.w	r1, #588	; 0x24c
    765c:	4650      	mov	r0, sl
    765e:	f007 fba1 	bl	eda4 <assert_post_action>
        case 0: return NRF_P0;
    7662:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    7666:	e022      	b.n	76ae <pinctrl_configure_pins+0x75a>
            mask = P0_FEATURE_PINS_PRESENT;
    7668:	f04f 33ff 	mov.w	r3, #4294967295
    766c:	e7df      	b.n	762e <pinctrl_configure_pins+0x6da>
    766e:	bf00      	nop
    7670:	000113f4 	.word	0x000113f4
    7674:	00011934 	.word	0x00011934
    7678:	00010450 	.word	0x00010450
    767c:	00011428 	.word	0x00011428
    7680:	50000300 	.word	0x50000300
    switch (port)
    7684:	2300      	movs	r3, #0
    7686:	e7d2      	b.n	762e <pinctrl_configure_pins+0x6da>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7688:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 7888 <pinctrl_configure_pins+0x934>
    768c:	f240 2347 	movw	r3, #583	; 0x247
    7690:	465a      	mov	r2, fp
    7692:	497e      	ldr	r1, [pc, #504]	; (788c <pinctrl_configure_pins+0x938>)
    7694:	487e      	ldr	r0, [pc, #504]	; (7890 <pinctrl_configure_pins+0x93c>)
    7696:	f007 fb8c 	bl	edb2 <assert_print>
    769a:	f240 2147 	movw	r1, #583	; 0x247
    769e:	4658      	mov	r0, fp
    76a0:	f007 fb80 	bl	eda4 <assert_post_action>
    76a4:	e7c9      	b.n	763a <pinctrl_configure_pins+0x6e6>
        case 0: return NRF_P0;
    76a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    76aa:	e000      	b.n	76ae <pinctrl_configure_pins+0x75a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    76ac:	4a79      	ldr	r2, [pc, #484]	; (7894 <pinctrl_configure_pins+0x940>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    76ae:	2301      	movs	r3, #1
    76b0:	fa03 f30b 	lsl.w	r3, r3, fp
    p_reg->OUTSET = set_mask;
    76b4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    76b8:	e7ab      	b.n	7612 <pinctrl_configure_pins+0x6be>
		case NRF_FUN_PWM_OUT3:
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    76ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    76be:	f8c8 356c 	str.w	r3, [r8, #1388]	; 0x56c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    76c2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    76c6:	f003 0a3f 	and.w	sl, r3, #63	; 0x3f
    76ca:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    76ce:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    76d2:	d145      	bne.n	7760 <pinctrl_configure_pins+0x80c>
    switch (port)
    76d4:	ea5f 135a 	movs.w	r3, sl, lsr #5
    76d8:	d01f      	beq.n	771a <pinctrl_configure_pins+0x7c6>
    76da:	b10b      	cbz	r3, 76e0 <pinctrl_configure_pins+0x78c>
            mask = P1_FEATURE_PINS_PRESENT;
    76dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    76e0:	f00a 031f 	and.w	r3, sl, #31
    return (mask & (1UL << pin_number)) ? true : false;
    76e4:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    76e6:	f012 0f01 	tst.w	r2, #1
    76ea:	d019      	beq.n	7720 <pinctrl_configure_pins+0x7cc>
    *p_pin = pin_number & 0x1F;
    76ec:	f00a 0b1f 	and.w	fp, sl, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    76f0:	ea5f 135a 	movs.w	r3, sl, lsr #5
    76f4:	d023      	beq.n	773e <pinctrl_configure_pins+0x7ea>
    76f6:	bb2b      	cbnz	r3, 7744 <pinctrl_configure_pins+0x7f0>
            NRFX_ASSERT(0);
    76f8:	f8df a18c 	ldr.w	sl, [pc, #396]	; 7888 <pinctrl_configure_pins+0x934>
    76fc:	f44f 7313 	mov.w	r3, #588	; 0x24c
    7700:	4652      	mov	r2, sl
    7702:	4965      	ldr	r1, [pc, #404]	; (7898 <pinctrl_configure_pins+0x944>)
    7704:	4862      	ldr	r0, [pc, #392]	; (7890 <pinctrl_configure_pins+0x93c>)
    7706:	f007 fb54 	bl	edb2 <assert_print>
    770a:	f44f 7113 	mov.w	r1, #588	; 0x24c
    770e:	4650      	mov	r0, sl
    7710:	f007 fb48 	bl	eda4 <assert_post_action>
        case 0: return NRF_P0;
    7714:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    7718:	e015      	b.n	7746 <pinctrl_configure_pins+0x7f2>
            mask = P0_FEATURE_PINS_PRESENT;
    771a:	f04f 32ff 	mov.w	r2, #4294967295
    771e:	e7df      	b.n	76e0 <pinctrl_configure_pins+0x78c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7720:	f8df b164 	ldr.w	fp, [pc, #356]	; 7888 <pinctrl_configure_pins+0x934>
    7724:	f240 2347 	movw	r3, #583	; 0x247
    7728:	465a      	mov	r2, fp
    772a:	4958      	ldr	r1, [pc, #352]	; (788c <pinctrl_configure_pins+0x938>)
    772c:	4858      	ldr	r0, [pc, #352]	; (7890 <pinctrl_configure_pins+0x93c>)
    772e:	f007 fb40 	bl	edb2 <assert_print>
    7732:	f240 2147 	movw	r1, #583	; 0x247
    7736:	4658      	mov	r0, fp
    7738:	f007 fb34 	bl	eda4 <assert_post_action>
    773c:	e7d6      	b.n	76ec <pinctrl_configure_pins+0x798>
        case 0: return NRF_P0;
    773e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    7742:	e000      	b.n	7746 <pinctrl_configure_pins+0x7f2>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7744:	4a53      	ldr	r2, [pc, #332]	; (7894 <pinctrl_configure_pins+0x940>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    7746:	2301      	movs	r3, #1
    7748:	fa03 f30b 	lsl.w	r3, r3, fp
    p_reg->OUTCLR = clr_mask;
    774c:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    7750:	4633      	mov	r3, r6
    7752:	2201      	movs	r2, #1
    7754:	4611      	mov	r1, r2
    7756:	f855 0009 	ldr.w	r0, [r5, r9]
    775a:	f7ff fb9b 	bl	6e94 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    775e:	e44e      	b.n	6ffe <pinctrl_configure_pins+0xaa>
    switch (port)
    7760:	ea5f 135a 	movs.w	r3, sl, lsr #5
    7764:	d01f      	beq.n	77a6 <pinctrl_configure_pins+0x852>
    7766:	b30b      	cbz	r3, 77ac <pinctrl_configure_pins+0x858>
            mask = P1_FEATURE_PINS_PRESENT;
    7768:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    776c:	f00a 021f 	and.w	r2, sl, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7770:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7772:	f013 0f01 	tst.w	r3, #1
    7776:	d01b      	beq.n	77b0 <pinctrl_configure_pins+0x85c>
    *p_pin = pin_number & 0x1F;
    7778:	f00a 0b1f 	and.w	fp, sl, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    777c:	ea5f 135a 	movs.w	r3, sl, lsr #5
    7780:	d025      	beq.n	77ce <pinctrl_configure_pins+0x87a>
    7782:	bb3b      	cbnz	r3, 77d4 <pinctrl_configure_pins+0x880>
            NRFX_ASSERT(0);
    7784:	f8df a100 	ldr.w	sl, [pc, #256]	; 7888 <pinctrl_configure_pins+0x934>
    7788:	f44f 7313 	mov.w	r3, #588	; 0x24c
    778c:	4652      	mov	r2, sl
    778e:	4942      	ldr	r1, [pc, #264]	; (7898 <pinctrl_configure_pins+0x944>)
    7790:	483f      	ldr	r0, [pc, #252]	; (7890 <pinctrl_configure_pins+0x93c>)
    7792:	f007 fb0e 	bl	edb2 <assert_print>
    7796:	f44f 7113 	mov.w	r1, #588	; 0x24c
    779a:	4650      	mov	r0, sl
    779c:	f007 fb02 	bl	eda4 <assert_post_action>
        case 0: return NRF_P0;
    77a0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    77a4:	e017      	b.n	77d6 <pinctrl_configure_pins+0x882>
            mask = P0_FEATURE_PINS_PRESENT;
    77a6:	f04f 33ff 	mov.w	r3, #4294967295
    77aa:	e7df      	b.n	776c <pinctrl_configure_pins+0x818>
    switch (port)
    77ac:	2300      	movs	r3, #0
    77ae:	e7dd      	b.n	776c <pinctrl_configure_pins+0x818>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    77b0:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 7888 <pinctrl_configure_pins+0x934>
    77b4:	f240 2347 	movw	r3, #583	; 0x247
    77b8:	465a      	mov	r2, fp
    77ba:	4934      	ldr	r1, [pc, #208]	; (788c <pinctrl_configure_pins+0x938>)
    77bc:	4834      	ldr	r0, [pc, #208]	; (7890 <pinctrl_configure_pins+0x93c>)
    77be:	f007 faf8 	bl	edb2 <assert_print>
    77c2:	f240 2147 	movw	r1, #583	; 0x247
    77c6:	4658      	mov	r0, fp
    77c8:	f007 faec 	bl	eda4 <assert_post_action>
    77cc:	e7d4      	b.n	7778 <pinctrl_configure_pins+0x824>
        case 0: return NRF_P0;
    77ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    77d2:	e000      	b.n	77d6 <pinctrl_configure_pins+0x882>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    77d4:	4a2f      	ldr	r2, [pc, #188]	; (7894 <pinctrl_configure_pins+0x940>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    77d6:	2301      	movs	r3, #1
    77d8:	fa03 f30b 	lsl.w	r3, r3, fp
    p_reg->OUTSET = set_mask;
    77dc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    77e0:	e7b6      	b.n	7750 <pinctrl_configure_pins+0x7fc>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
#endif /* defined(NRF_PSEL_QDEC) */
#if defined(NRF_PSEL_QSPI)
		case NRF_FUN_QSPI_SCK:
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
    77e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    77e6:	f8c8 3524 	str.w	r3, [r8, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    77ea:	4633      	mov	r3, r6
    77ec:	2201      	movs	r2, #1
    77ee:	2100      	movs	r1, #0
    77f0:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    77f4:	f7ff fb4e 	bl	6e94 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    77f8:	e401      	b.n	6ffe <pinctrl_configure_pins+0xaa>
		case NRF_FUN_QSPI_CSN:
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
    77fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    77fe:	f8c8 3528 	str.w	r3, [r8, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7802:	4633      	mov	r3, r6
    7804:	2201      	movs	r2, #1
    7806:	2100      	movs	r1, #0
    7808:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    780c:	f7ff fb42 	bl	6e94 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    7810:	f7ff bbf5 	b.w	6ffe <pinctrl_configure_pins+0xaa>
		case NRF_FUN_QSPI_IO0:
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
    7814:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7818:	f8c8 3530 	str.w	r3, [r8, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    781c:	4633      	mov	r3, r6
    781e:	2201      	movs	r2, #1
    7820:	2100      	movs	r1, #0
    7822:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    7826:	f7ff fb35 	bl	6e94 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    782a:	f7ff bbe8 	b.w	6ffe <pinctrl_configure_pins+0xaa>
		case NRF_FUN_QSPI_IO1:
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
    782e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7832:	f8c8 3534 	str.w	r3, [r8, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7836:	4633      	mov	r3, r6
    7838:	2201      	movs	r2, #1
    783a:	2100      	movs	r1, #0
    783c:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    7840:	f7ff fb28 	bl	6e94 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    7844:	f7ff bbdb 	b.w	6ffe <pinctrl_configure_pins+0xaa>
		case NRF_FUN_QSPI_IO2:
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
    7848:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    784c:	f8c8 3538 	str.w	r3, [r8, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7850:	4633      	mov	r3, r6
    7852:	2201      	movs	r2, #1
    7854:	2100      	movs	r1, #0
    7856:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    785a:	f7ff fb1b 	bl	6e94 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    785e:	f7ff bbce 	b.w	6ffe <pinctrl_configure_pins+0xaa>
		case NRF_FUN_QSPI_IO3:
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
    7862:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7866:	f8c8 353c 	str.w	r3, [r8, #1340]	; 0x53c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    786a:	4633      	mov	r3, r6
    786c:	2201      	movs	r2, #1
    786e:	2100      	movs	r1, #0
    7870:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    7874:	f7ff fb0e 	bl	6e94 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    7878:	f7ff bbc1 	b.w	6ffe <pinctrl_configure_pins+0xaa>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    787c:	2000      	movs	r0, #0
    787e:	e001      	b.n	7884 <pinctrl_configure_pins+0x930>
		switch (NRF_GET_FUN(pins[i])) {
    7880:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    7884:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7888:	000113f4 	.word	0x000113f4
    788c:	00011428 	.word	0x00011428
    7890:	00010450 	.word	0x00010450
    7894:	50000300 	.word	0x50000300
    7898:	00011934 	.word	0x00011934

0000789c <z_impl_gpio_pin_configure>:
				 gpio_flags_t flags);

static inline int z_impl_gpio_pin_configure(const struct device *port,
					    gpio_pin_t pin,
					    gpio_flags_t flags)
{
    789c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    78a0:	4605      	mov	r5, r0
    78a2:	460e      	mov	r6, r1
    78a4:	4614      	mov	r4, r2
	const struct gpio_driver_api *api =
    78a6:	f8d0 a008 	ldr.w	sl, [r0, #8]
		(const struct gpio_driver_api *)port->api;
	__unused const struct gpio_driver_config *const cfg =
    78aa:	f8d0 b004 	ldr.w	fp, [r0, #4]
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
    78ae:	f8d0 8010 	ldr.w	r8, [r0, #16]
		(struct gpio_driver_data *)port->data;

	__ASSERT((flags & GPIO_INT_MASK) == 0,
    78b2:	f012 6ffc 	tst.w	r2, #132120576	; 0x7e00000
    78b6:	d136      	bne.n	7926 <z_impl_gpio_pin_configure+0x8a>
		 "Interrupt flags are not supported");

	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
    78b8:	f004 0330 	and.w	r3, r4, #48	; 0x30
    78bc:	2b30      	cmp	r3, #48	; 0x30
    78be:	d043      	beq.n	7948 <z_impl_gpio_pin_configure+0xac>
		 (GPIO_PULL_UP | GPIO_PULL_DOWN),
		 "Pull Up and Pull Down should not be enabled simultaneously");

	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
    78c0:	f004 1302 	and.w	r3, r4, #131074	; 0x20002
    78c4:	2b02      	cmp	r3, #2
    78c6:	d050      	beq.n	796a <z_impl_gpio_pin_configure+0xce>
		 "Output needs to be enabled for 'Open Drain', 'Open Source' "
		 "mode to be supported");

	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
    78c8:	f004 0306 	and.w	r3, r4, #6
    78cc:	2b04      	cmp	r3, #4
    78ce:	d05d      	beq.n	798c <z_impl_gpio_pin_configure+0xf0>
			(flags & GPIO_LINE_OPEN_DRAIN) == 0);

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
    78d0:	f414 2740 	ands.w	r7, r4, #786432	; 0xc0000
    78d4:	d002      	beq.n	78dc <z_impl_gpio_pin_configure+0x40>
    78d6:	f414 3f00 	tst.w	r4, #131072	; 0x20000
    78da:	d065      	beq.n	79a8 <z_impl_gpio_pin_configure+0x10c>
		 || (flags & GPIO_OUTPUT) != 0,
		 "Output needs to be enabled to be initialized low or high");

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
    78dc:	f5b7 2f40 	cmp.w	r7, #786432	; 0xc0000
    78e0:	d074      	beq.n	79cc <z_impl_gpio_pin_configure+0x130>
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    78e2:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
    78e6:	d005      	beq.n	78f4 <z_impl_gpio_pin_configure+0x58>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    78e8:	b127      	cbz	r7, 78f4 <z_impl_gpio_pin_configure+0x58>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    78ea:	f014 0f01 	tst.w	r4, #1
    78ee:	d001      	beq.n	78f4 <z_impl_gpio_pin_configure+0x58>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    78f0:	f484 2440 	eor.w	r4, r4, #786432	; 0xc0000
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    78f4:	f424 1980 	bic.w	r9, r4, #1048576	; 0x100000

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    78f8:	f8db 3000 	ldr.w	r3, [fp]
    78fc:	2701      	movs	r7, #1
    78fe:	40b7      	lsls	r7, r6
    7900:	423b      	tst	r3, r7
    7902:	d075      	beq.n	79f0 <z_impl_gpio_pin_configure+0x154>
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    7904:	f014 0f01 	tst.w	r4, #1
    7908:	f000 8084 	beq.w	7a14 <z_impl_gpio_pin_configure+0x178>
		data->invert |= (gpio_port_pins_t)BIT(pin);
    790c:	f8d8 3000 	ldr.w	r3, [r8]
    7910:	433b      	orrs	r3, r7
    7912:	f8c8 3000 	str.w	r3, [r8]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
    7916:	f8da 3000 	ldr.w	r3, [sl]
    791a:	464a      	mov	r2, r9
    791c:	4631      	mov	r1, r6
    791e:	4628      	mov	r0, r5
    7920:	4798      	blx	r3
}
    7922:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__ASSERT((flags & GPIO_INT_MASK) == 0,
    7926:	4f3f      	ldr	r7, [pc, #252]	; (7a24 <z_impl_gpio_pin_configure+0x188>)
    7928:	f44f 732f 	mov.w	r3, #700	; 0x2bc
    792c:	463a      	mov	r2, r7
    792e:	493e      	ldr	r1, [pc, #248]	; (7a28 <z_impl_gpio_pin_configure+0x18c>)
    7930:	483e      	ldr	r0, [pc, #248]	; (7a2c <z_impl_gpio_pin_configure+0x190>)
    7932:	f007 fa3e 	bl	edb2 <assert_print>
    7936:	483e      	ldr	r0, [pc, #248]	; (7a30 <z_impl_gpio_pin_configure+0x194>)
    7938:	f007 fa3b 	bl	edb2 <assert_print>
    793c:	f44f 712f 	mov.w	r1, #700	; 0x2bc
    7940:	4638      	mov	r0, r7
    7942:	f007 fa2f 	bl	eda4 <assert_post_action>
    7946:	e7b7      	b.n	78b8 <z_impl_gpio_pin_configure+0x1c>
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
    7948:	4f36      	ldr	r7, [pc, #216]	; (7a24 <z_impl_gpio_pin_configure+0x188>)
    794a:	f240 23bf 	movw	r3, #703	; 0x2bf
    794e:	463a      	mov	r2, r7
    7950:	4938      	ldr	r1, [pc, #224]	; (7a34 <z_impl_gpio_pin_configure+0x198>)
    7952:	4836      	ldr	r0, [pc, #216]	; (7a2c <z_impl_gpio_pin_configure+0x190>)
    7954:	f007 fa2d 	bl	edb2 <assert_print>
    7958:	4837      	ldr	r0, [pc, #220]	; (7a38 <z_impl_gpio_pin_configure+0x19c>)
    795a:	f007 fa2a 	bl	edb2 <assert_print>
    795e:	f240 21bf 	movw	r1, #703	; 0x2bf
    7962:	4638      	mov	r0, r7
    7964:	f007 fa1e 	bl	eda4 <assert_post_action>
    7968:	e7aa      	b.n	78c0 <z_impl_gpio_pin_configure+0x24>
	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
    796a:	4f2e      	ldr	r7, [pc, #184]	; (7a24 <z_impl_gpio_pin_configure+0x188>)
    796c:	f240 23c3 	movw	r3, #707	; 0x2c3
    7970:	463a      	mov	r2, r7
    7972:	4932      	ldr	r1, [pc, #200]	; (7a3c <z_impl_gpio_pin_configure+0x1a0>)
    7974:	482d      	ldr	r0, [pc, #180]	; (7a2c <z_impl_gpio_pin_configure+0x190>)
    7976:	f007 fa1c 	bl	edb2 <assert_print>
    797a:	4831      	ldr	r0, [pc, #196]	; (7a40 <z_impl_gpio_pin_configure+0x1a4>)
    797c:	f007 fa19 	bl	edb2 <assert_print>
    7980:	f240 21c3 	movw	r1, #707	; 0x2c3
    7984:	4638      	mov	r0, r7
    7986:	f007 fa0d 	bl	eda4 <assert_post_action>
    798a:	e79d      	b.n	78c8 <z_impl_gpio_pin_configure+0x2c>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
    798c:	4f25      	ldr	r7, [pc, #148]	; (7a24 <z_impl_gpio_pin_configure+0x188>)
    798e:	f240 23c7 	movw	r3, #711	; 0x2c7
    7992:	463a      	mov	r2, r7
    7994:	492b      	ldr	r1, [pc, #172]	; (7a44 <z_impl_gpio_pin_configure+0x1a8>)
    7996:	4825      	ldr	r0, [pc, #148]	; (7a2c <z_impl_gpio_pin_configure+0x190>)
    7998:	f007 fa0b 	bl	edb2 <assert_print>
    799c:	f240 21c7 	movw	r1, #711	; 0x2c7
    79a0:	4638      	mov	r0, r7
    79a2:	f007 f9ff 	bl	eda4 <assert_post_action>
    79a6:	e793      	b.n	78d0 <z_impl_gpio_pin_configure+0x34>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
    79a8:	f8df 9078 	ldr.w	r9, [pc, #120]	; 7a24 <z_impl_gpio_pin_configure+0x188>
    79ac:	f240 23ca 	movw	r3, #714	; 0x2ca
    79b0:	464a      	mov	r2, r9
    79b2:	4925      	ldr	r1, [pc, #148]	; (7a48 <z_impl_gpio_pin_configure+0x1ac>)
    79b4:	481d      	ldr	r0, [pc, #116]	; (7a2c <z_impl_gpio_pin_configure+0x190>)
    79b6:	f007 f9fc 	bl	edb2 <assert_print>
    79ba:	4824      	ldr	r0, [pc, #144]	; (7a4c <z_impl_gpio_pin_configure+0x1b0>)
    79bc:	f007 f9f9 	bl	edb2 <assert_print>
    79c0:	f240 21ca 	movw	r1, #714	; 0x2ca
    79c4:	4648      	mov	r0, r9
    79c6:	f007 f9ed 	bl	eda4 <assert_post_action>
    79ca:	e787      	b.n	78dc <z_impl_gpio_pin_configure+0x40>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
    79cc:	f8df 9054 	ldr.w	r9, [pc, #84]	; 7a24 <z_impl_gpio_pin_configure+0x188>
    79d0:	f240 23ce 	movw	r3, #718	; 0x2ce
    79d4:	464a      	mov	r2, r9
    79d6:	491e      	ldr	r1, [pc, #120]	; (7a50 <z_impl_gpio_pin_configure+0x1b4>)
    79d8:	4814      	ldr	r0, [pc, #80]	; (7a2c <z_impl_gpio_pin_configure+0x190>)
    79da:	f007 f9ea 	bl	edb2 <assert_print>
    79de:	481d      	ldr	r0, [pc, #116]	; (7a54 <z_impl_gpio_pin_configure+0x1b8>)
    79e0:	f007 f9e7 	bl	edb2 <assert_print>
    79e4:	f240 21ce 	movw	r1, #718	; 0x2ce
    79e8:	4648      	mov	r0, r9
    79ea:	f007 f9db 	bl	eda4 <assert_post_action>
    79ee:	e778      	b.n	78e2 <z_impl_gpio_pin_configure+0x46>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    79f0:	f8df b030 	ldr.w	fp, [pc, #48]	; 7a24 <z_impl_gpio_pin_configure+0x188>
    79f4:	f240 23da 	movw	r3, #730	; 0x2da
    79f8:	465a      	mov	r2, fp
    79fa:	4917      	ldr	r1, [pc, #92]	; (7a58 <z_impl_gpio_pin_configure+0x1bc>)
    79fc:	480b      	ldr	r0, [pc, #44]	; (7a2c <z_impl_gpio_pin_configure+0x190>)
    79fe:	f007 f9d8 	bl	edb2 <assert_print>
    7a02:	4816      	ldr	r0, [pc, #88]	; (7a5c <z_impl_gpio_pin_configure+0x1c0>)
    7a04:	f007 f9d5 	bl	edb2 <assert_print>
    7a08:	f240 21da 	movw	r1, #730	; 0x2da
    7a0c:	4658      	mov	r0, fp
    7a0e:	f007 f9c9 	bl	eda4 <assert_post_action>
    7a12:	e777      	b.n	7904 <z_impl_gpio_pin_configure+0x68>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    7a14:	f8d8 3000 	ldr.w	r3, [r8]
    7a18:	ea23 0307 	bic.w	r3, r3, r7
    7a1c:	f8c8 3000 	str.w	r3, [r8]
    7a20:	e779      	b.n	7916 <z_impl_gpio_pin_configure+0x7a>
    7a22:	bf00      	nop
    7a24:	000116fc 	.word	0x000116fc
    7a28:	00011730 	.word	0x00011730
    7a2c:	00010450 	.word	0x00010450
    7a30:	00011790 	.word	0x00011790
    7a34:	000117b4 	.word	0x000117b4
    7a38:	000117f0 	.word	0x000117f0
    7a3c:	00011830 	.word	0x00011830
    7a40:	00011868 	.word	0x00011868
    7a44:	000118bc 	.word	0x000118bc
    7a48:	000118f0 	.word	0x000118f0
    7a4c:	00011938 	.word	0x00011938
    7a50:	00011974 	.word	0x00011974
    7a54:	000119b8 	.word	0x000119b8
    7a58:	000119e4 	.word	0x000119e4
    7a5c:	00011a24 	.word	0x00011a24

00007a60 <z_impl_gpio_pin_interrupt_configure>:
{
    7a60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7a64:	4605      	mov	r5, r0
    7a66:	460e      	mov	r6, r1
    7a68:	4614      	mov	r4, r2
	const struct gpio_driver_api *api =
    7a6a:	f8d0 8008 	ldr.w	r8, [r0, #8]
	__unused const struct gpio_driver_config *const cfg =
    7a6e:	f8d0 a004 	ldr.w	sl, [r0, #4]
	const struct gpio_driver_data *const data =
    7a72:	f8d0 9010 	ldr.w	r9, [r0, #16]
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
    7a76:	f402 07c0 	and.w	r7, r2, #6291456	; 0x600000
    7a7a:	f5b7 0fc0 	cmp.w	r7, #6291456	; 0x600000
    7a7e:	d024      	beq.n	7aca <z_impl_gpio_pin_interrupt_configure+0x6a>
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
    7a80:	b3af      	cbz	r7, 7aee <z_impl_gpio_pin_interrupt_configure+0x8e>
	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
    7a82:	f004 63e8 	and.w	r3, r4, #121634816	; 0x7400000
    7a86:	f1b3 6fc8 	cmp.w	r3, #104857600	; 0x6400000
    7a8a:	d041      	beq.n	7b10 <z_impl_gpio_pin_interrupt_configure+0xb0>
	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
    7a8c:	f004 63c8 	and.w	r3, r4, #104857600	; 0x6400000
    7a90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    7a94:	d04d      	beq.n	7b32 <z_impl_gpio_pin_interrupt_configure+0xd2>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    7a96:	f8da 3000 	ldr.w	r3, [sl]
    7a9a:	2701      	movs	r7, #1
    7a9c:	40b7      	lsls	r7, r6
    7a9e:	423b      	tst	r3, r7
    7aa0:	d058      	beq.n	7b54 <z_impl_gpio_pin_interrupt_configure+0xf4>
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    7aa2:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
    7aa6:	d005      	beq.n	7ab4 <z_impl_gpio_pin_interrupt_configure+0x54>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    7aa8:	f8d9 3000 	ldr.w	r3, [r9]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    7aac:	421f      	tst	r7, r3
    7aae:	d001      	beq.n	7ab4 <z_impl_gpio_pin_interrupt_configure+0x54>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
    7ab0:	f084 64c0 	eor.w	r4, r4, #100663296	; 0x6000000
	return api->pin_interrupt_configure(port, pin, mode, trig);
    7ab4:	f8d8 7018 	ldr.w	r7, [r8, #24]
    7ab8:	f004 63c0 	and.w	r3, r4, #100663296	; 0x6000000
    7abc:	f004 72b0 	and.w	r2, r4, #23068672	; 0x1600000
    7ac0:	4631      	mov	r1, r6
    7ac2:	4628      	mov	r0, r5
    7ac4:	47b8      	blx	r7
}
    7ac6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
    7aca:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 7b78 <z_impl_gpio_pin_interrupt_configure+0x118>
    7ace:	f240 2369 	movw	r3, #617	; 0x269
    7ad2:	465a      	mov	r2, fp
    7ad4:	4929      	ldr	r1, [pc, #164]	; (7b7c <z_impl_gpio_pin_interrupt_configure+0x11c>)
    7ad6:	482a      	ldr	r0, [pc, #168]	; (7b80 <z_impl_gpio_pin_interrupt_configure+0x120>)
    7ad8:	f007 f96b 	bl	edb2 <assert_print>
    7adc:	4829      	ldr	r0, [pc, #164]	; (7b84 <z_impl_gpio_pin_interrupt_configure+0x124>)
    7ade:	f007 f968 	bl	edb2 <assert_print>
    7ae2:	f240 2169 	movw	r1, #617	; 0x269
    7ae6:	4658      	mov	r0, fp
    7ae8:	f007 f95c 	bl	eda4 <assert_post_action>
    7aec:	e7c8      	b.n	7a80 <z_impl_gpio_pin_interrupt_configure+0x20>
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
    7aee:	4f22      	ldr	r7, [pc, #136]	; (7b78 <z_impl_gpio_pin_interrupt_configure+0x118>)
    7af0:	f240 236d 	movw	r3, #621	; 0x26d
    7af4:	463a      	mov	r2, r7
    7af6:	4924      	ldr	r1, [pc, #144]	; (7b88 <z_impl_gpio_pin_interrupt_configure+0x128>)
    7af8:	4821      	ldr	r0, [pc, #132]	; (7b80 <z_impl_gpio_pin_interrupt_configure+0x120>)
    7afa:	f007 f95a 	bl	edb2 <assert_print>
    7afe:	4823      	ldr	r0, [pc, #140]	; (7b8c <z_impl_gpio_pin_interrupt_configure+0x12c>)
    7b00:	f007 f957 	bl	edb2 <assert_print>
    7b04:	f240 216d 	movw	r1, #621	; 0x26d
    7b08:	4638      	mov	r0, r7
    7b0a:	f007 f94b 	bl	eda4 <assert_post_action>
    7b0e:	e7b8      	b.n	7a82 <z_impl_gpio_pin_interrupt_configure+0x22>
	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
    7b10:	4f19      	ldr	r7, [pc, #100]	; (7b78 <z_impl_gpio_pin_interrupt_configure+0x118>)
    7b12:	f44f 731c 	mov.w	r3, #624	; 0x270
    7b16:	463a      	mov	r2, r7
    7b18:	491d      	ldr	r1, [pc, #116]	; (7b90 <z_impl_gpio_pin_interrupt_configure+0x130>)
    7b1a:	4819      	ldr	r0, [pc, #100]	; (7b80 <z_impl_gpio_pin_interrupt_configure+0x120>)
    7b1c:	f007 f949 	bl	edb2 <assert_print>
    7b20:	481c      	ldr	r0, [pc, #112]	; (7b94 <z_impl_gpio_pin_interrupt_configure+0x134>)
    7b22:	f007 f946 	bl	edb2 <assert_print>
    7b26:	f44f 711c 	mov.w	r1, #624	; 0x270
    7b2a:	4638      	mov	r0, r7
    7b2c:	f007 f93a 	bl	eda4 <assert_post_action>
    7b30:	e7ac      	b.n	7a8c <z_impl_gpio_pin_interrupt_configure+0x2c>
	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
    7b32:	4f11      	ldr	r7, [pc, #68]	; (7b78 <z_impl_gpio_pin_interrupt_configure+0x118>)
    7b34:	f240 2377 	movw	r3, #631	; 0x277
    7b38:	463a      	mov	r2, r7
    7b3a:	4917      	ldr	r1, [pc, #92]	; (7b98 <z_impl_gpio_pin_interrupt_configure+0x138>)
    7b3c:	4810      	ldr	r0, [pc, #64]	; (7b80 <z_impl_gpio_pin_interrupt_configure+0x120>)
    7b3e:	f007 f938 	bl	edb2 <assert_print>
    7b42:	4816      	ldr	r0, [pc, #88]	; (7b9c <z_impl_gpio_pin_interrupt_configure+0x13c>)
    7b44:	f007 f935 	bl	edb2 <assert_print>
    7b48:	f240 2177 	movw	r1, #631	; 0x277
    7b4c:	4638      	mov	r0, r7
    7b4e:	f007 f929 	bl	eda4 <assert_post_action>
    7b52:	e7a0      	b.n	7a96 <z_impl_gpio_pin_interrupt_configure+0x36>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    7b54:	f8df a020 	ldr.w	sl, [pc, #32]	; 7b78 <z_impl_gpio_pin_interrupt_configure+0x118>
    7b58:	f44f 731f 	mov.w	r3, #636	; 0x27c
    7b5c:	4652      	mov	r2, sl
    7b5e:	4910      	ldr	r1, [pc, #64]	; (7ba0 <z_impl_gpio_pin_interrupt_configure+0x140>)
    7b60:	4807      	ldr	r0, [pc, #28]	; (7b80 <z_impl_gpio_pin_interrupt_configure+0x120>)
    7b62:	f007 f926 	bl	edb2 <assert_print>
    7b66:	480f      	ldr	r0, [pc, #60]	; (7ba4 <z_impl_gpio_pin_interrupt_configure+0x144>)
    7b68:	f007 f923 	bl	edb2 <assert_print>
    7b6c:	f44f 711f 	mov.w	r1, #636	; 0x27c
    7b70:	4650      	mov	r0, sl
    7b72:	f007 f917 	bl	eda4 <assert_post_action>
    7b76:	e794      	b.n	7aa2 <z_impl_gpio_pin_interrupt_configure+0x42>
    7b78:	000116fc 	.word	0x000116fc
    7b7c:	00011a38 	.word	0x00011a38
    7b80:	00010450 	.word	0x00010450
    7b84:	00011a7c 	.word	0x00011a7c
    7b88:	00011aa8 	.word	0x00011aa8
    7b8c:	00011ad4 	.word	0x00011ad4
    7b90:	00011b00 	.word	0x00011b00
    7b94:	00011b84 	.word	0x00011b84
    7b98:	00011bd8 	.word	0x00011bd8
    7b9c:	00011c24 	.word	0x00011c24
    7ba0:	000119e4 	.word	0x000119e4
    7ba4:	00011a24 	.word	0x00011a24

00007ba8 <callback_ctrl>:
static struct k_spinlock lock;
static sys_slist_t button_handlers;
static struct k_mutex button_handler_mut;

static int callback_ctrl(bool enable)
{
    7ba8:	b538      	push	{r3, r4, r5, lr}
	gpio_flags_t flags = enable ? GPIO_INT_LEVEL_ACTIVE : GPIO_INT_DISABLE;
    7baa:	b120      	cbz	r0, 7bb6 <callback_ctrl+0xe>
    7bac:	f04f 6598 	mov.w	r5, #79691776	; 0x4c00000
	int err = 0;

	/* This must be done with irqs disabled to avoid pin callback
	 * being fired before others are still not activated.
	 */
	for (size_t i = 0; (i < ARRAY_SIZE(buttons)) && !err; i++) {
    7bb0:	2400      	movs	r4, #0
	int err = 0;
    7bb2:	4620      	mov	r0, r4
	for (size_t i = 0; (i < ARRAY_SIZE(buttons)) && !err; i++) {
    7bb4:	e00c      	b.n	7bd0 <callback_ctrl+0x28>
	gpio_flags_t flags = enable ? GPIO_INT_LEVEL_ACTIVE : GPIO_INT_DISABLE;
    7bb6:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
    7bba:	e7f9      	b.n	7bb0 <callback_ctrl+0x8>
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
    7bbc:	4b07      	ldr	r3, [pc, #28]	; (7bdc <callback_ctrl+0x34>)
    7bbe:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
    7bc2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    7bc6:	7919      	ldrb	r1, [r3, #4]
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
    7bc8:	462a      	mov	r2, r5
    7bca:	f7ff ff49 	bl	7a60 <z_impl_gpio_pin_interrupt_configure>
	for (size_t i = 0; (i < ARRAY_SIZE(buttons)) && !err; i++) {
    7bce:	3401      	adds	r4, #1
    7bd0:	2c03      	cmp	r4, #3
    7bd2:	d801      	bhi.n	7bd8 <callback_ctrl+0x30>
    7bd4:	2800      	cmp	r0, #0
    7bd6:	d0f1      	beq.n	7bbc <callback_ctrl+0x14>
		err = gpio_pin_interrupt_configure_dt(&buttons[i], flags);
	}

	return err;
}
    7bd8:	bd38      	pop	{r3, r4, r5, pc}
    7bda:	bf00      	nop
    7bdc:	00011dac 	.word	0x00011dac

00007be0 <get_buttons>:

static uint32_t get_buttons(void)
{
    7be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7be4:	b088      	sub	sp, #32
	uint32_t ret = 0;
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
    7be6:	2400      	movs	r4, #0
	uint32_t ret = 0;
    7be8:	4627      	mov	r7, r4
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
    7bea:	e03c      	b.n	7c66 <get_buttons+0x86>
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	gpio_port_value_t value;
	int ret;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    7bec:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 7cbc <get_buttons+0xdc>
    7bf0:	f240 43cc 	movw	r3, #1228	; 0x4cc
    7bf4:	4642      	mov	r2, r8
    7bf6:	4932      	ldr	r1, [pc, #200]	; (7cc0 <get_buttons+0xe0>)
    7bf8:	4832      	ldr	r0, [pc, #200]	; (7cc4 <get_buttons+0xe4>)
    7bfa:	f007 f8da 	bl	edb2 <assert_print>
    7bfe:	4832      	ldr	r0, [pc, #200]	; (7cc8 <get_buttons+0xe8>)
    7c00:	f007 f8d7 	bl	edb2 <assert_print>
    7c04:	f240 41cc 	movw	r1, #1228	; 0x4cc
    7c08:	4640      	mov	r0, r8
    7c0a:	f007 f8cb 	bl	eda4 <assert_post_action>
    7c0e:	e038      	b.n	7c82 <get_buttons+0xa2>
		int val;

		val = gpio_pin_get_dt(&buttons[i]);
		if (val < 0) {
			LOG_ERR("Cannot read gpio pin");
    7c10:	4b2e      	ldr	r3, [pc, #184]	; (7ccc <get_buttons+0xec>)
    7c12:	9307      	str	r3, [sp, #28]
    7c14:	2302      	movs	r3, #2
    7c16:	f88d 3004 	strb.w	r3, [sp, #4]
    7c1a:	2700      	movs	r7, #0
    7c1c:	f88d 7005 	strb.w	r7, [sp, #5]
    7c20:	f88d 7006 	strb.w	r7, [sp, #6]
    7c24:	f88d 7007 	strb.w	r7, [sp, #7]
    7c28:	9b01      	ldr	r3, [sp, #4]
    7c2a:	9306      	str	r3, [sp, #24]
    7c2c:	4639      	mov	r1, r7
    7c2e:	f367 0100 	bfi	r1, r7, #0, #1
    7c32:	f367 0141 	bfi	r1, r7, #1, #1
    7c36:	f367 0182 	bfi	r1, r7, #2, #1
    7c3a:	f367 01c5 	bfi	r1, r7, #3, #3
    7c3e:	2301      	movs	r3, #1
    7c40:	f363 1188 	bfi	r1, r3, #6, #3
    7c44:	2308      	movs	r3, #8
    7c46:	f363 2152 	bfi	r1, r3, #9, #10
    7c4a:	f367 41de 	bfi	r1, r7, #19, #12
    7c4e:	f367 71df 	bfi	r1, r7, #31, #1
    7c52:	463b      	mov	r3, r7
    7c54:	aa06      	add	r2, sp, #24
    7c56:	481e      	ldr	r0, [pc, #120]	; (7cd0 <get_buttons+0xf0>)
    7c58:	f7fb fbc8 	bl	33ec <z_impl_z_log_msg_static_create>
			ret |= 1U << i;
		}
	}

	return ret;
}
    7c5c:	4638      	mov	r0, r7
    7c5e:	b008      	add	sp, #32
    7c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
    7c64:	3401      	adds	r4, #1
    7c66:	2c03      	cmp	r4, #3
    7c68:	d8f8      	bhi.n	7c5c <get_buttons+0x7c>
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_get()
 */
static inline int gpio_pin_get_dt(const struct gpio_dt_spec *spec)
{
	return gpio_pin_get(spec->port, spec->pin);
    7c6a:	4a1a      	ldr	r2, [pc, #104]	; (7cd4 <get_buttons+0xf4>)
    7c6c:	f852 5034 	ldr.w	r5, [r2, r4, lsl #3]
    7c70:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
    7c74:	7912      	ldrb	r2, [r2, #4]
	__unused const struct gpio_driver_config *const cfg =
    7c76:	686b      	ldr	r3, [r5, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    7c78:	681b      	ldr	r3, [r3, #0]
    7c7a:	2601      	movs	r6, #1
    7c7c:	4096      	lsls	r6, r2
    7c7e:	4233      	tst	r3, r6
    7c80:	d0b4      	beq.n	7bec <get_buttons+0xc>
	const struct gpio_driver_data *const data =
    7c82:	f8d5 8010 	ldr.w	r8, [r5, #16]
	const struct gpio_driver_api *api =
    7c86:	68ab      	ldr	r3, [r5, #8]
	return api->port_get_raw(port, value);
    7c88:	685b      	ldr	r3, [r3, #4]
    7c8a:	a901      	add	r1, sp, #4
    7c8c:	4628      	mov	r0, r5
    7c8e:	4798      	blx	r3
	if (ret == 0) {
    7c90:	4602      	mov	r2, r0
    7c92:	b920      	cbnz	r0, 7c9e <get_buttons+0xbe>
		*value ^= data->invert;
    7c94:	f8d8 1000 	ldr.w	r1, [r8]
    7c98:	9b01      	ldr	r3, [sp, #4]
    7c9a:	404b      	eors	r3, r1
    7c9c:	9301      	str	r3, [sp, #4]
	if (ret == 0) {
    7c9e:	b922      	cbnz	r2, 7caa <get_buttons+0xca>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    7ca0:	9b01      	ldr	r3, [sp, #4]
    7ca2:	421e      	tst	r6, r3
    7ca4:	bf14      	ite	ne
    7ca6:	2201      	movne	r2, #1
    7ca8:	2200      	moveq	r2, #0
		if (val < 0) {
    7caa:	2a00      	cmp	r2, #0
    7cac:	dbb0      	blt.n	7c10 <get_buttons+0x30>
		if (val) {
    7cae:	2a00      	cmp	r2, #0
    7cb0:	d0d8      	beq.n	7c64 <get_buttons+0x84>
			ret |= 1U << i;
    7cb2:	2301      	movs	r3, #1
    7cb4:	40a3      	lsls	r3, r4
    7cb6:	431f      	orrs	r7, r3
    7cb8:	e7d4      	b.n	7c64 <get_buttons+0x84>
    7cba:	bf00      	nop
    7cbc:	000116fc 	.word	0x000116fc
    7cc0:	000119e4 	.word	0x000119e4
    7cc4:	00010450 	.word	0x00010450
    7cc8:	00011a24 	.word	0x00011a24
    7ccc:	00011c6c 	.word	0x00011c6c
    7cd0:	00010134 	.word	0x00010134
    7cd4:	00011dac 	.word	0x00011dac

00007cd8 <button_handlers_call>:

static void button_handlers_call(uint32_t button_state, uint32_t has_changed)
{
    7cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7cda:	4606      	mov	r6, r0
    7cdc:	460f      	mov	r7, r1
	struct button_handler *handler;

	if (button_handler_cb != NULL) {
    7cde:	4b11      	ldr	r3, [pc, #68]	; (7d24 <button_handlers_call+0x4c>)
    7ce0:	681b      	ldr	r3, [r3, #0]
    7ce2:	b103      	cbz	r3, 7ce6 <button_handlers_call+0xe>
		button_handler_cb(button_state, has_changed);
    7ce4:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
    7ce6:	f04f 32ff 	mov.w	r2, #4294967295
    7cea:	f04f 33ff 	mov.w	r3, #4294967295
    7cee:	480e      	ldr	r0, [pc, #56]	; (7d28 <button_handlers_call+0x50>)
    7cf0:	f003 fd58 	bl	b7a4 <z_impl_k_mutex_lock>
	return list->head;
    7cf4:	4b0d      	ldr	r3, [pc, #52]	; (7d2c <button_handlers_call+0x54>)
    7cf6:	681c      	ldr	r4, [r3, #0]
	}

	if (IS_ENABLED(CONFIG_DK_LIBRARY_DYNAMIC_BUTTON_HANDLERS)) {
		k_mutex_lock(&button_handler_mut, K_FOREVER);
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
    7cf8:	b114      	cbz	r4, 7d00 <button_handlers_call+0x28>
    7cfa:	3c04      	subs	r4, #4
    7cfc:	e000      	b.n	7d00 <button_handlers_call+0x28>
    7cfe:	462c      	mov	r4, r5
    7d00:	b15c      	cbz	r4, 7d1a <button_handlers_call+0x42>
			handler->cb(button_state, has_changed);
    7d02:	4625      	mov	r5, r4
    7d04:	f855 3b04 	ldr.w	r3, [r5], #4
    7d08:	4639      	mov	r1, r7
    7d0a:	4630      	mov	r0, r6
    7d0c:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    7d0e:	2d00      	cmp	r5, #0
    7d10:	d0f5      	beq.n	7cfe <button_handlers_call+0x26>
	return node->next;
    7d12:	6864      	ldr	r4, [r4, #4]
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
    7d14:	b10c      	cbz	r4, 7d1a <button_handlers_call+0x42>
    7d16:	3c04      	subs	r4, #4
    7d18:	e7f2      	b.n	7d00 <button_handlers_call+0x28>
	return z_impl_k_mutex_unlock(mutex);
    7d1a:	4803      	ldr	r0, [pc, #12]	; (7d28 <button_handlers_call+0x50>)
    7d1c:	f003 fe62 	bl	b9e4 <z_impl_k_mutex_unlock>
		}
		k_mutex_unlock(&button_handler_mut);
	}
}
    7d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7d22:	bf00      	nop
    7d24:	20001000 	.word	0x20001000
    7d28:	20001004 	.word	0x20001004
    7d2c:	20001018 	.word	0x20001018

00007d30 <button_pressed>:
	return dk_set_leds_state(DK_NO_LEDS_MSK, DK_ALL_LEDS_MSK);
}

static void button_pressed(const struct device *gpio_dev, struct gpio_callback *cb,
		    uint32_t pins)
{
    7d30:	b530      	push	{r4, r5, lr}
    7d32:	b089      	sub	sp, #36	; 0x24
	__asm__ volatile(
    7d34:	f04f 0320 	mov.w	r3, #32
    7d38:	f3ef 8411 	mrs	r4, BASEPRI
    7d3c:	f383 8812 	msr	BASEPRI_MAX, r3
    7d40:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7d44:	4839      	ldr	r0, [pc, #228]	; (7e2c <button_pressed+0xfc>)
    7d46:	f003 faed 	bl	b324 <z_spin_lock_valid>
    7d4a:	b1e8      	cbz	r0, 7d88 <button_pressed+0x58>
	z_spin_lock_set_owner(l);
    7d4c:	4837      	ldr	r0, [pc, #220]	; (7e2c <button_pressed+0xfc>)
    7d4e:	f003 fb09 	bl	b364 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Disable GPIO interrupt */
	int err = callback_ctrl(false);
    7d52:	2000      	movs	r0, #0
    7d54:	f7ff ff28 	bl	7ba8 <callback_ctrl>

	if (err) {
    7d58:	bb30      	cbnz	r0, 7da8 <button_pressed+0x78>
		LOG_ERR("Cannot disable callbacks");
	}

	switch (state) {
    7d5a:	4b35      	ldr	r3, [pc, #212]	; (7e30 <button_pressed+0x100>)
    7d5c:	781b      	ldrb	r3, [r3, #0]
    7d5e:	2b00      	cmp	r3, #0
    7d60:	d148      	bne.n	7df4 <button_pressed+0xc4>
	case STATE_WAITING:
		state = STATE_SCANNING;
    7d62:	4b33      	ldr	r3, [pc, #204]	; (7e30 <button_pressed+0x100>)
    7d64:	2201      	movs	r2, #1
    7d66:	701a      	strb	r2, [r3, #0]
		k_work_reschedule(&buttons_scan, K_MSEC(1));
    7d68:	2221      	movs	r2, #33	; 0x21
    7d6a:	2300      	movs	r3, #0
    7d6c:	4831      	ldr	r0, [pc, #196]	; (7e34 <button_pressed+0x104>)
    7d6e:	f004 fb91 	bl	c494 <k_work_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7d72:	482e      	ldr	r0, [pc, #184]	; (7e2c <button_pressed+0xfc>)
    7d74:	f003 fae6 	bl	b344 <z_spin_unlock_valid>
    7d78:	2800      	cmp	r0, #0
    7d7a:	d047      	beq.n	7e0c <button_pressed+0xdc>
	__asm__ volatile(
    7d7c:	f384 8811 	msr	BASEPRI, r4
    7d80:	f3bf 8f6f 	isb	sy
		__ASSERT_NO_MSG(false);
		break;
	}

	k_spin_unlock(&lock, key);
}
    7d84:	b009      	add	sp, #36	; 0x24
    7d86:	bd30      	pop	{r4, r5, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7d88:	4d2b      	ldr	r5, [pc, #172]	; (7e38 <button_pressed+0x108>)
    7d8a:	238e      	movs	r3, #142	; 0x8e
    7d8c:	462a      	mov	r2, r5
    7d8e:	492b      	ldr	r1, [pc, #172]	; (7e3c <button_pressed+0x10c>)
    7d90:	482b      	ldr	r0, [pc, #172]	; (7e40 <button_pressed+0x110>)
    7d92:	f007 f80e 	bl	edb2 <assert_print>
    7d96:	4925      	ldr	r1, [pc, #148]	; (7e2c <button_pressed+0xfc>)
    7d98:	482a      	ldr	r0, [pc, #168]	; (7e44 <button_pressed+0x114>)
    7d9a:	f007 f80a 	bl	edb2 <assert_print>
    7d9e:	218e      	movs	r1, #142	; 0x8e
    7da0:	4628      	mov	r0, r5
    7da2:	f006 ffff 	bl	eda4 <assert_post_action>
    7da6:	e7d1      	b.n	7d4c <button_pressed+0x1c>
		LOG_ERR("Cannot disable callbacks");
    7da8:	4b27      	ldr	r3, [pc, #156]	; (7e48 <button_pressed+0x118>)
    7daa:	9307      	str	r3, [sp, #28]
    7dac:	2302      	movs	r3, #2
    7dae:	f88d 3004 	strb.w	r3, [sp, #4]
    7db2:	2300      	movs	r3, #0
    7db4:	f88d 3005 	strb.w	r3, [sp, #5]
    7db8:	f88d 3006 	strb.w	r3, [sp, #6]
    7dbc:	f88d 3007 	strb.w	r3, [sp, #7]
    7dc0:	9a01      	ldr	r2, [sp, #4]
    7dc2:	9206      	str	r2, [sp, #24]
    7dc4:	4619      	mov	r1, r3
    7dc6:	f363 0100 	bfi	r1, r3, #0, #1
    7dca:	f363 0141 	bfi	r1, r3, #1, #1
    7dce:	f363 0182 	bfi	r1, r3, #2, #1
    7dd2:	f363 01c5 	bfi	r1, r3, #3, #3
    7dd6:	2201      	movs	r2, #1
    7dd8:	f362 1188 	bfi	r1, r2, #6, #3
    7ddc:	2208      	movs	r2, #8
    7dde:	f362 2152 	bfi	r1, r2, #9, #10
    7de2:	f363 41de 	bfi	r1, r3, #19, #12
    7de6:	f363 71df 	bfi	r1, r3, #31, #1
    7dea:	aa06      	add	r2, sp, #24
    7dec:	4817      	ldr	r0, [pc, #92]	; (7e4c <button_pressed+0x11c>)
    7dee:	f7fb fafd 	bl	33ec <z_impl_z_log_msg_static_create>
    7df2:	e7b2      	b.n	7d5a <button_pressed+0x2a>
		__ASSERT_NO_MSG(false);
    7df4:	4d16      	ldr	r5, [pc, #88]	; (7e50 <button_pressed+0x120>)
    7df6:	23ba      	movs	r3, #186	; 0xba
    7df8:	462a      	mov	r2, r5
    7dfa:	4916      	ldr	r1, [pc, #88]	; (7e54 <button_pressed+0x124>)
    7dfc:	4810      	ldr	r0, [pc, #64]	; (7e40 <button_pressed+0x110>)
    7dfe:	f006 ffd8 	bl	edb2 <assert_print>
    7e02:	21ba      	movs	r1, #186	; 0xba
    7e04:	4628      	mov	r0, r5
    7e06:	f006 ffcd 	bl	eda4 <assert_post_action>
		break;
    7e0a:	e7b2      	b.n	7d72 <button_pressed+0x42>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7e0c:	4d0a      	ldr	r5, [pc, #40]	; (7e38 <button_pressed+0x108>)
    7e0e:	23b9      	movs	r3, #185	; 0xb9
    7e10:	462a      	mov	r2, r5
    7e12:	4911      	ldr	r1, [pc, #68]	; (7e58 <button_pressed+0x128>)
    7e14:	480a      	ldr	r0, [pc, #40]	; (7e40 <button_pressed+0x110>)
    7e16:	f006 ffcc 	bl	edb2 <assert_print>
    7e1a:	4904      	ldr	r1, [pc, #16]	; (7e2c <button_pressed+0xfc>)
    7e1c:	480f      	ldr	r0, [pc, #60]	; (7e5c <button_pressed+0x12c>)
    7e1e:	f006 ffc8 	bl	edb2 <assert_print>
    7e22:	21b9      	movs	r1, #185	; 0xb9
    7e24:	4628      	mov	r0, r5
    7e26:	f006 ffbd 	bl	eda4 <assert_post_action>
    7e2a:	e7a7      	b.n	7d7c <button_pressed+0x4c>
    7e2c:	20001034 	.word	0x20001034
    7e30:	200012d2 	.word	0x200012d2
    7e34:	20000710 	.word	0x20000710
    7e38:	000105e8 	.word	0x000105e8
    7e3c:	00010648 	.word	0x00010648
    7e40:	00010450 	.word	0x00010450
    7e44:	00010660 	.word	0x00010660
    7e48:	00011c84 	.word	0x00011c84
    7e4c:	00010134 	.word	0x00010134
    7e50:	00011ca0 	.word	0x00011ca0
    7e54:	00011934 	.word	0x00011934
    7e58:	00010618 	.word	0x00010618
    7e5c:	00010630 	.word	0x00010630

00007e60 <buttons_scan_fn>:
{
    7e60:	b570      	push	{r4, r5, r6, lr}
    7e62:	b088      	sub	sp, #32
	button_scan = get_buttons();
    7e64:	f7ff febc 	bl	7be0 <get_buttons>
    7e68:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    7e6a:	4b4f      	ldr	r3, [pc, #316]	; (7fa8 <buttons_scan_fn+0x148>)
    7e6c:	f3bf 8f5b 	dmb	ish
    7e70:	e853 2f00 	ldrex	r2, [r3]
    7e74:	e843 4100 	strex	r1, r4, [r3]
    7e78:	2900      	cmp	r1, #0
    7e7a:	d1f9      	bne.n	7e70 <buttons_scan_fn+0x10>
    7e7c:	f3bf 8f5b 	dmb	ish
	if (!initial_run) {
    7e80:	4b4a      	ldr	r3, [pc, #296]	; (7fac <buttons_scan_fn+0x14c>)
    7e82:	781b      	ldrb	r3, [r3, #0]
    7e84:	b943      	cbnz	r3, 7e98 <buttons_scan_fn+0x38>
		if (button_scan != last_button_scan) {
    7e86:	4b4a      	ldr	r3, [pc, #296]	; (7fb0 <buttons_scan_fn+0x150>)
    7e88:	6819      	ldr	r1, [r3, #0]
    7e8a:	42a1      	cmp	r1, r4
    7e8c:	d007      	beq.n	7e9e <buttons_scan_fn+0x3e>
			button_handlers_call(button_scan, has_changed);
    7e8e:	4061      	eors	r1, r4
    7e90:	4620      	mov	r0, r4
    7e92:	f7ff ff21 	bl	7cd8 <button_handlers_call>
    7e96:	e002      	b.n	7e9e <buttons_scan_fn+0x3e>
		initial_run = false;
    7e98:	4b44      	ldr	r3, [pc, #272]	; (7fac <buttons_scan_fn+0x14c>)
    7e9a:	2200      	movs	r2, #0
    7e9c:	701a      	strb	r2, [r3, #0]
	last_button_scan = button_scan;
    7e9e:	4b44      	ldr	r3, [pc, #272]	; (7fb0 <buttons_scan_fn+0x150>)
    7ea0:	601c      	str	r4, [r3, #0]
	if (button_scan != 0) {
    7ea2:	b13c      	cbz	r4, 7eb4 <buttons_scan_fn+0x54>
		k_work_reschedule(&buttons_scan,
    7ea4:	f44f 72a4 	mov.w	r2, #328	; 0x148
    7ea8:	2300      	movs	r3, #0
    7eaa:	4842      	ldr	r0, [pc, #264]	; (7fb4 <buttons_scan_fn+0x154>)
    7eac:	f004 faf2 	bl	c494 <k_work_reschedule>
}
    7eb0:	b008      	add	sp, #32
    7eb2:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
    7eb4:	f04f 0320 	mov.w	r3, #32
    7eb8:	f3ef 8511 	mrs	r5, BASEPRI
    7ebc:	f383 8812 	msr	BASEPRI_MAX, r3
    7ec0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7ec4:	483c      	ldr	r0, [pc, #240]	; (7fb8 <buttons_scan_fn+0x158>)
    7ec6:	f003 fa2d 	bl	b324 <z_spin_lock_valid>
    7eca:	2800      	cmp	r0, #0
    7ecc:	d043      	beq.n	7f56 <buttons_scan_fn+0xf6>
	z_spin_lock_set_owner(l);
    7ece:	483a      	ldr	r0, [pc, #232]	; (7fb8 <buttons_scan_fn+0x158>)
    7ed0:	f003 fa48 	bl	b364 <z_spin_lock_set_owner>
		switch (state) {
    7ed4:	4b39      	ldr	r3, [pc, #228]	; (7fbc <buttons_scan_fn+0x15c>)
    7ed6:	781b      	ldrb	r3, [r3, #0]
    7ed8:	2b01      	cmp	r3, #1
    7eda:	d04c      	beq.n	7f76 <buttons_scan_fn+0x116>
			__ASSERT_NO_MSG(false);
    7edc:	4c38      	ldr	r4, [pc, #224]	; (7fc0 <buttons_scan_fn+0x160>)
    7ede:	238a      	movs	r3, #138	; 0x8a
    7ee0:	4622      	mov	r2, r4
    7ee2:	4938      	ldr	r1, [pc, #224]	; (7fc4 <buttons_scan_fn+0x164>)
    7ee4:	4838      	ldr	r0, [pc, #224]	; (7fc8 <buttons_scan_fn+0x168>)
    7ee6:	f006 ff64 	bl	edb2 <assert_print>
    7eea:	218a      	movs	r1, #138	; 0x8a
    7eec:	4620      	mov	r0, r4
    7eee:	f006 ff59 	bl	eda4 <assert_post_action>
		int err = 0;
    7ef2:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7ef4:	4830      	ldr	r0, [pc, #192]	; (7fb8 <buttons_scan_fn+0x158>)
    7ef6:	f003 fa25 	bl	b344 <z_spin_unlock_valid>
    7efa:	2800      	cmp	r0, #0
    7efc:	d043      	beq.n	7f86 <buttons_scan_fn+0x126>
	__asm__ volatile(
    7efe:	f385 8811 	msr	BASEPRI, r5
    7f02:	f3bf 8f6f 	isb	sy
		if (err) {
    7f06:	2c00      	cmp	r4, #0
    7f08:	d0d2      	beq.n	7eb0 <buttons_scan_fn+0x50>
			LOG_ERR("Cannot enable callbacks");
    7f0a:	4b30      	ldr	r3, [pc, #192]	; (7fcc <buttons_scan_fn+0x16c>)
    7f0c:	9307      	str	r3, [sp, #28]
    7f0e:	2302      	movs	r3, #2
    7f10:	f88d 3004 	strb.w	r3, [sp, #4]
    7f14:	2300      	movs	r3, #0
    7f16:	f88d 3005 	strb.w	r3, [sp, #5]
    7f1a:	f88d 3006 	strb.w	r3, [sp, #6]
    7f1e:	f88d 3007 	strb.w	r3, [sp, #7]
    7f22:	9a01      	ldr	r2, [sp, #4]
    7f24:	9206      	str	r2, [sp, #24]
    7f26:	4619      	mov	r1, r3
    7f28:	f363 0100 	bfi	r1, r3, #0, #1
    7f2c:	f363 0141 	bfi	r1, r3, #1, #1
    7f30:	f363 0182 	bfi	r1, r3, #2, #1
    7f34:	f363 01c5 	bfi	r1, r3, #3, #3
    7f38:	2201      	movs	r2, #1
    7f3a:	f362 1188 	bfi	r1, r2, #6, #3
    7f3e:	2208      	movs	r2, #8
    7f40:	f362 2152 	bfi	r1, r2, #9, #10
    7f44:	f363 41de 	bfi	r1, r3, #19, #12
    7f48:	f363 71df 	bfi	r1, r3, #31, #1
    7f4c:	aa06      	add	r2, sp, #24
    7f4e:	4820      	ldr	r0, [pc, #128]	; (7fd0 <buttons_scan_fn+0x170>)
    7f50:	f7fb fa4c 	bl	33ec <z_impl_z_log_msg_static_create>
}
    7f54:	e7ac      	b.n	7eb0 <buttons_scan_fn+0x50>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7f56:	4c1f      	ldr	r4, [pc, #124]	; (7fd4 <buttons_scan_fn+0x174>)
    7f58:	238e      	movs	r3, #142	; 0x8e
    7f5a:	4622      	mov	r2, r4
    7f5c:	491e      	ldr	r1, [pc, #120]	; (7fd8 <buttons_scan_fn+0x178>)
    7f5e:	481a      	ldr	r0, [pc, #104]	; (7fc8 <buttons_scan_fn+0x168>)
    7f60:	f006 ff27 	bl	edb2 <assert_print>
    7f64:	4914      	ldr	r1, [pc, #80]	; (7fb8 <buttons_scan_fn+0x158>)
    7f66:	481d      	ldr	r0, [pc, #116]	; (7fdc <buttons_scan_fn+0x17c>)
    7f68:	f006 ff23 	bl	edb2 <assert_print>
    7f6c:	218e      	movs	r1, #142	; 0x8e
    7f6e:	4620      	mov	r0, r4
    7f70:	f006 ff18 	bl	eda4 <assert_post_action>
    7f74:	e7ab      	b.n	7ece <buttons_scan_fn+0x6e>
			state = STATE_WAITING;
    7f76:	4b11      	ldr	r3, [pc, #68]	; (7fbc <buttons_scan_fn+0x15c>)
    7f78:	2200      	movs	r2, #0
    7f7a:	701a      	strb	r2, [r3, #0]
			err = callback_ctrl(true);
    7f7c:	2001      	movs	r0, #1
    7f7e:	f7ff fe13 	bl	7ba8 <callback_ctrl>
    7f82:	4604      	mov	r4, r0
			break;
    7f84:	e7b6      	b.n	7ef4 <buttons_scan_fn+0x94>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7f86:	4e13      	ldr	r6, [pc, #76]	; (7fd4 <buttons_scan_fn+0x174>)
    7f88:	23b9      	movs	r3, #185	; 0xb9
    7f8a:	4632      	mov	r2, r6
    7f8c:	4914      	ldr	r1, [pc, #80]	; (7fe0 <buttons_scan_fn+0x180>)
    7f8e:	480e      	ldr	r0, [pc, #56]	; (7fc8 <buttons_scan_fn+0x168>)
    7f90:	f006 ff0f 	bl	edb2 <assert_print>
    7f94:	4908      	ldr	r1, [pc, #32]	; (7fb8 <buttons_scan_fn+0x158>)
    7f96:	4813      	ldr	r0, [pc, #76]	; (7fe4 <buttons_scan_fn+0x184>)
    7f98:	f006 ff0b 	bl	edb2 <assert_print>
    7f9c:	21b9      	movs	r1, #185	; 0xb9
    7f9e:	4630      	mov	r0, r6
    7fa0:	f006 ff00 	bl	eda4 <assert_post_action>
    7fa4:	e7ab      	b.n	7efe <buttons_scan_fn+0x9e>
    7fa6:	bf00      	nop
    7fa8:	20001038 	.word	0x20001038
    7fac:	2000018c 	.word	0x2000018c
    7fb0:	2000102c 	.word	0x2000102c
    7fb4:	20000710 	.word	0x20000710
    7fb8:	20001034 	.word	0x20001034
    7fbc:	200012d2 	.word	0x200012d2
    7fc0:	00011ca0 	.word	0x00011ca0
    7fc4:	00011934 	.word	0x00011934
    7fc8:	00010450 	.word	0x00010450
    7fcc:	00011ce0 	.word	0x00011ce0
    7fd0:	00010134 	.word	0x00010134
    7fd4:	000105e8 	.word	0x000105e8
    7fd8:	00010648 	.word	0x00010648
    7fdc:	00010660 	.word	0x00010660
    7fe0:	00010618 	.word	0x00010618
    7fe4:	00010630 	.word	0x00010630

00007fe8 <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7fe8:	f3bf 8f5b 	dmb	ish
    7fec:	4b06      	ldr	r3, [pc, #24]	; (8008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8>)
    7fee:	681b      	ldr	r3, [r3, #0]
    7ff0:	f3bf 8f5b 	dmb	ish
void dk_read_buttons(uint32_t *button_state, uint32_t *has_changed)
{
	static uint32_t last_state;
	uint32_t current_state = atomic_get(&my_buttons);

	if (button_state != NULL) {
    7ff4:	b100      	cbz	r0, 7ff8 <dk_read_buttons+0x10>
		*button_state = current_state;
    7ff6:	6003      	str	r3, [r0, #0]
	}

	if (has_changed != NULL) {
    7ff8:	b119      	cbz	r1, 8002 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2>
		*has_changed = (current_state ^ last_state);
    7ffa:	4a04      	ldr	r2, [pc, #16]	; (800c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>)
    7ffc:	6812      	ldr	r2, [r2, #0]
    7ffe:	405a      	eors	r2, r3
    8000:	600a      	str	r2, [r1, #0]
	}

	last_state = current_state;
    8002:	4a02      	ldr	r2, [pc, #8]	; (800c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>)
    8004:	6013      	str	r3, [r2, #0]
}
    8006:	4770      	bx	lr
    8008:	20001038 	.word	0x20001038
    800c:	20001030 	.word	0x20001030

00008010 <dk_buttons_init>:
{
    8010:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8014:	b095      	sub	sp, #84	; 0x54
	button_handler_cb = button_handler;
    8016:	4b82      	ldr	r3, [pc, #520]	; (8220 <dk_buttons_init+0x210>)
    8018:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
    801a:	4882      	ldr	r0, [pc, #520]	; (8224 <dk_buttons_init+0x214>)
    801c:	f007 fe9d 	bl	fd5a <z_impl_k_mutex_init>
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
    8020:	2400      	movs	r4, #0
    8022:	e00f      	b.n	8044 <dk_buttons_init+0x34>
			GPIO_PULL_UP : GPIO_PULL_DOWN;
    8024:	2220      	movs	r2, #32
		err = gpio_pin_configure_dt(&buttons[i], GPIO_INPUT | flags);
    8026:	4980      	ldr	r1, [pc, #512]	; (8228 <dk_buttons_init+0x218>)
    8028:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
    802c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
	return gpio_pin_configure(spec->port,
    8030:	f851 0034 	ldr.w	r0, [r1, r4, lsl #3]
    8034:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
    8036:	88db      	ldrh	r3, [r3, #6]
	return gpio_pin_configure(spec->port,
    8038:	431a      	orrs	r2, r3
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
    803a:	f7ff fc2f 	bl	789c <z_impl_gpio_pin_configure>
		if (err) {
    803e:	4605      	mov	r5, r0
    8040:	b958      	cbnz	r0, 805a <dk_buttons_init+0x4a>
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
    8042:	3401      	adds	r4, #1
    8044:	2c03      	cmp	r4, #3
    8046:	d82e      	bhi.n	80a6 <dk_buttons_init+0x96>
			buttons[i].dt_flags & GPIO_ACTIVE_LOW ?
    8048:	4b77      	ldr	r3, [pc, #476]	; (8228 <dk_buttons_init+0x218>)
    804a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    804e:	88db      	ldrh	r3, [r3, #6]
			GPIO_PULL_UP : GPIO_PULL_DOWN;
    8050:	f013 0f01 	tst.w	r3, #1
    8054:	d0e6      	beq.n	8024 <dk_buttons_init+0x14>
    8056:	2210      	movs	r2, #16
    8058:	e7e5      	b.n	8026 <dk_buttons_init+0x16>
			LOG_ERR("Cannot configure button gpio");
    805a:	4b74      	ldr	r3, [pc, #464]	; (822c <dk_buttons_init+0x21c>)
    805c:	9313      	str	r3, [sp, #76]	; 0x4c
    805e:	2302      	movs	r3, #2
    8060:	f88d 3004 	strb.w	r3, [sp, #4]
    8064:	2300      	movs	r3, #0
    8066:	f88d 3005 	strb.w	r3, [sp, #5]
    806a:	f88d 3006 	strb.w	r3, [sp, #6]
    806e:	f88d 3007 	strb.w	r3, [sp, #7]
    8072:	9a01      	ldr	r2, [sp, #4]
    8074:	9212      	str	r2, [sp, #72]	; 0x48
    8076:	4619      	mov	r1, r3
    8078:	f363 0100 	bfi	r1, r3, #0, #1
    807c:	f363 0141 	bfi	r1, r3, #1, #1
    8080:	f363 0182 	bfi	r1, r3, #2, #1
    8084:	f363 01c5 	bfi	r1, r3, #3, #3
    8088:	2201      	movs	r2, #1
    808a:	f362 1188 	bfi	r1, r2, #6, #3
    808e:	2208      	movs	r2, #8
    8090:	f362 2152 	bfi	r1, r2, #9, #10
    8094:	f363 41de 	bfi	r1, r3, #19, #12
    8098:	f363 71df 	bfi	r1, r3, #31, #1
    809c:	aa12      	add	r2, sp, #72	; 0x48
    809e:	4864      	ldr	r0, [pc, #400]	; (8230 <dk_buttons_init+0x220>)
    80a0:	f7fb f9a4 	bl	33ec <z_impl_z_log_msg_static_create>
			return err;
    80a4:	e0b8      	b.n	8218 <dk_buttons_init+0x208>
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
    80a6:	2400      	movs	r4, #0
	uint32_t pin_mask = 0;
    80a8:	4626      	mov	r6, r4
    80aa:	e011      	b.n	80d0 <dk_buttons_init+0xc0>
	return api->pin_interrupt_configure(port, pin, mode, trig);
    80ac:	f8d8 8018 	ldr.w	r8, [r8, #24]
    80b0:	2300      	movs	r3, #0
    80b2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    80b6:	4639      	mov	r1, r7
    80b8:	4628      	mov	r0, r5
    80ba:	47c0      	blx	r8
		if (err) {
    80bc:	4605      	mov	r5, r0
    80be:	bb48      	cbnz	r0, 8114 <dk_buttons_init+0x104>
		pin_mask |= BIT(buttons[i].pin);
    80c0:	4b59      	ldr	r3, [pc, #356]	; (8228 <dk_buttons_init+0x218>)
    80c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    80c6:	791a      	ldrb	r2, [r3, #4]
    80c8:	2301      	movs	r3, #1
    80ca:	4093      	lsls	r3, r2
    80cc:	431e      	orrs	r6, r3
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
    80ce:	3401      	adds	r4, #1
    80d0:	2c03      	cmp	r4, #3
    80d2:	d845      	bhi.n	8160 <dk_buttons_init+0x150>
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
    80d4:	4b54      	ldr	r3, [pc, #336]	; (8228 <dk_buttons_init+0x218>)
    80d6:	f853 5034 	ldr.w	r5, [r3, r4, lsl #3]
    80da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    80de:	791f      	ldrb	r7, [r3, #4]
	const struct gpio_driver_api *api =
    80e0:	f8d5 8008 	ldr.w	r8, [r5, #8]
	__unused const struct gpio_driver_config *const cfg =
    80e4:	686b      	ldr	r3, [r5, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    80e6:	681a      	ldr	r2, [r3, #0]
    80e8:	2301      	movs	r3, #1
    80ea:	40bb      	lsls	r3, r7
    80ec:	421a      	tst	r2, r3
    80ee:	d1dd      	bne.n	80ac <dk_buttons_init+0x9c>
    80f0:	f8df 9140 	ldr.w	r9, [pc, #320]	; 8234 <dk_buttons_init+0x224>
    80f4:	f44f 731f 	mov.w	r3, #636	; 0x27c
    80f8:	464a      	mov	r2, r9
    80fa:	494f      	ldr	r1, [pc, #316]	; (8238 <dk_buttons_init+0x228>)
    80fc:	484f      	ldr	r0, [pc, #316]	; (823c <dk_buttons_init+0x22c>)
    80fe:	f006 fe58 	bl	edb2 <assert_print>
    8102:	484f      	ldr	r0, [pc, #316]	; (8240 <dk_buttons_init+0x230>)
    8104:	f006 fe55 	bl	edb2 <assert_print>
    8108:	f44f 711f 	mov.w	r1, #636	; 0x27c
    810c:	4648      	mov	r0, r9
    810e:	f006 fe49 	bl	eda4 <assert_post_action>
    8112:	e7cb      	b.n	80ac <dk_buttons_init+0x9c>
			LOG_ERR("Cannot disable callbacks()");
    8114:	4b4b      	ldr	r3, [pc, #300]	; (8244 <dk_buttons_init+0x234>)
    8116:	930d      	str	r3, [sp, #52]	; 0x34
    8118:	2302      	movs	r3, #2
    811a:	f88d 3004 	strb.w	r3, [sp, #4]
    811e:	2300      	movs	r3, #0
    8120:	f88d 3005 	strb.w	r3, [sp, #5]
    8124:	f88d 3006 	strb.w	r3, [sp, #6]
    8128:	f88d 3007 	strb.w	r3, [sp, #7]
    812c:	9a01      	ldr	r2, [sp, #4]
    812e:	920c      	str	r2, [sp, #48]	; 0x30
    8130:	4619      	mov	r1, r3
    8132:	f363 0100 	bfi	r1, r3, #0, #1
    8136:	f363 0141 	bfi	r1, r3, #1, #1
    813a:	f363 0182 	bfi	r1, r3, #2, #1
    813e:	f363 01c5 	bfi	r1, r3, #3, #3
    8142:	2201      	movs	r2, #1
    8144:	f362 1188 	bfi	r1, r2, #6, #3
    8148:	2208      	movs	r2, #8
    814a:	f362 2152 	bfi	r1, r2, #9, #10
    814e:	f363 41de 	bfi	r1, r3, #19, #12
    8152:	f363 71df 	bfi	r1, r3, #31, #1
    8156:	aa0c      	add	r2, sp, #48	; 0x30
    8158:	4835      	ldr	r0, [pc, #212]	; (8230 <dk_buttons_init+0x220>)
    815a:	f7fb f947 	bl	33ec <z_impl_z_log_msg_static_create>
			return err;
    815e:	e05b      	b.n	8218 <dk_buttons_init+0x208>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    8160:	4b39      	ldr	r3, [pc, #228]	; (8248 <dk_buttons_init+0x238>)
    8162:	4a3a      	ldr	r2, [pc, #232]	; (824c <dk_buttons_init+0x23c>)
    8164:	605a      	str	r2, [r3, #4]
	callback->pin_mask = pin_mask;
    8166:	609e      	str	r6, [r3, #8]
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
    8168:	2400      	movs	r4, #0
    816a:	2c03      	cmp	r4, #3
    816c:	d835      	bhi.n	81da <dk_buttons_init+0x1ca>
		err = gpio_add_callback(buttons[i].port, &gpio_cb);
    816e:	4b2e      	ldr	r3, [pc, #184]	; (8228 <dk_buttons_init+0x218>)
    8170:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(const struct device *port,
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
    8174:	6883      	ldr	r3, [r0, #8]
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    8176:	69db      	ldr	r3, [r3, #28]
    8178:	b133      	cbz	r3, 8188 <dk_buttons_init+0x178>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    817a:	2201      	movs	r2, #1
    817c:	4932      	ldr	r1, [pc, #200]	; (8248 <dk_buttons_init+0x238>)
    817e:	4798      	blx	r3
    8180:	4605      	mov	r5, r0
		if (err) {
    8182:	b925      	cbnz	r5, 818e <dk_buttons_init+0x17e>
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
    8184:	3401      	adds	r4, #1
    8186:	e7f0      	b.n	816a <dk_buttons_init+0x15a>
		return -ENOTSUP;
    8188:	f06f 0585 	mvn.w	r5, #133	; 0x85
    818c:	e7f9      	b.n	8182 <dk_buttons_init+0x172>
			LOG_ERR("Cannot add callback");
    818e:	4b30      	ldr	r3, [pc, #192]	; (8250 <dk_buttons_init+0x240>)
    8190:	9307      	str	r3, [sp, #28]
    8192:	2302      	movs	r3, #2
    8194:	f88d 3004 	strb.w	r3, [sp, #4]
    8198:	2300      	movs	r3, #0
    819a:	f88d 3005 	strb.w	r3, [sp, #5]
    819e:	f88d 3006 	strb.w	r3, [sp, #6]
    81a2:	f88d 3007 	strb.w	r3, [sp, #7]
    81a6:	9a01      	ldr	r2, [sp, #4]
    81a8:	9206      	str	r2, [sp, #24]
    81aa:	4619      	mov	r1, r3
    81ac:	f363 0100 	bfi	r1, r3, #0, #1
    81b0:	f363 0141 	bfi	r1, r3, #1, #1
    81b4:	f363 0182 	bfi	r1, r3, #2, #1
    81b8:	f363 01c5 	bfi	r1, r3, #3, #3
    81bc:	2201      	movs	r2, #1
    81be:	f362 1188 	bfi	r1, r2, #6, #3
    81c2:	2208      	movs	r2, #8
    81c4:	f362 2152 	bfi	r1, r2, #9, #10
    81c8:	f363 41de 	bfi	r1, r3, #19, #12
    81cc:	f363 71df 	bfi	r1, r3, #31, #1
    81d0:	aa06      	add	r2, sp, #24
    81d2:	4817      	ldr	r0, [pc, #92]	; (8230 <dk_buttons_init+0x220>)
    81d4:	f7fb f90a 	bl	33ec <z_impl_z_log_msg_static_create>
			return err;
    81d8:	e01e      	b.n	8218 <dk_buttons_init+0x208>
	k_work_init_delayable(&buttons_scan, buttons_scan_fn);
    81da:	4c1e      	ldr	r4, [pc, #120]	; (8254 <dk_buttons_init+0x244>)
    81dc:	491e      	ldr	r1, [pc, #120]	; (8258 <dk_buttons_init+0x248>)
    81de:	4620      	mov	r0, r4
    81e0:	f004 f832 	bl	c248 <k_work_init_delayable>
	state = STATE_SCANNING;
    81e4:	4b1d      	ldr	r3, [pc, #116]	; (825c <dk_buttons_init+0x24c>)
    81e6:	2201      	movs	r2, #1
    81e8:	701a      	strb	r2, [r3, #0]
	k_work_schedule(&buttons_scan, K_NO_WAIT);
    81ea:	2200      	movs	r2, #0
    81ec:	2300      	movs	r3, #0
    81ee:	4620      	mov	r0, r4
    81f0:	f004 f8d0 	bl	c394 <k_work_schedule>
	dk_read_buttons(NULL, NULL);
    81f4:	2100      	movs	r1, #0
    81f6:	4608      	mov	r0, r1
    81f8:	f7ff fef6 	bl	7fe8 <dk_read_buttons>
	atomic_set(&my_buttons, (atomic_val_t)get_buttons());
    81fc:	f7ff fcf0 	bl	7be0 <get_buttons>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    8200:	4b17      	ldr	r3, [pc, #92]	; (8260 <dk_buttons_init+0x250>)
    8202:	f3bf 8f5b 	dmb	ish
    8206:	e853 2f00 	ldrex	r2, [r3]
    820a:	e843 0100 	strex	r1, r0, [r3]
    820e:	2900      	cmp	r1, #0
    8210:	d1f9      	bne.n	8206 <dk_buttons_init+0x1f6>
    8212:	f3bf 8f5b 	dmb	ish
	return 0;
    8216:	2500      	movs	r5, #0
}
    8218:	4628      	mov	r0, r5
    821a:	b015      	add	sp, #84	; 0x54
    821c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    8220:	20001000 	.word	0x20001000
    8224:	20001004 	.word	0x20001004
    8228:	00011dac 	.word	0x00011dac
    822c:	00011cf8 	.word	0x00011cf8
    8230:	00010134 	.word	0x00010134
    8234:	000116fc 	.word	0x000116fc
    8238:	000119e4 	.word	0x000119e4
    823c:	00010450 	.word	0x00010450
    8240:	00011a24 	.word	0x00011a24
    8244:	00011d18 	.word	0x00011d18
    8248:	20001020 	.word	0x20001020
    824c:	00007d31 	.word	0x00007d31
    8250:	00011d34 	.word	0x00011d34
    8254:	20000710 	.word	0x20000710
    8258:	00007e61 	.word	0x00007e61
    825c:	200012d2 	.word	0x200012d2
    8260:	20001038 	.word	0x20001038

00008264 <dk_set_leds_state>:
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
{
    8264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8268:	b089      	sub	sp, #36	; 0x24
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
    826a:	f030 030f 	bics.w	r3, r0, #15
    826e:	f040 8091 	bne.w	8394 <dk_set_leds_state+0x130>
    8272:	4681      	mov	r9, r0
    8274:	468b      	mov	fp, r1
    8276:	f031 040f 	bics.w	r4, r1, #15
    827a:	d02d      	beq.n	82d8 <dk_set_leds_state+0x74>
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
    827c:	f06f 0515 	mvn.w	r5, #21
    8280:	e084      	b.n	838c <dk_set_leds_state+0x128>

	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
		int val, err;

		if (BIT(i) & leds_on_mask) {
			val = 1;
    8282:	f04f 0801 	mov.w	r8, #1
    8286:	e035      	b.n	82f4 <dk_set_leds_state+0x90>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    8288:	f240 5325 	movw	r3, #1317	; 0x525
    828c:	4a43      	ldr	r2, [pc, #268]	; (839c <dk_set_leds_state+0x138>)
    828e:	4944      	ldr	r1, [pc, #272]	; (83a0 <dk_set_leds_state+0x13c>)
    8290:	4844      	ldr	r0, [pc, #272]	; (83a4 <dk_set_leds_state+0x140>)
    8292:	f006 fd8e 	bl	edb2 <assert_print>
    8296:	4844      	ldr	r0, [pc, #272]	; (83a8 <dk_set_leds_state+0x144>)
    8298:	f006 fd8b 	bl	edb2 <assert_print>
    829c:	f240 5125 	movw	r1, #1317	; 0x525
    82a0:	483e      	ldr	r0, [pc, #248]	; (839c <dk_set_leds_state+0x138>)
    82a2:	f006 fd7f 	bl	eda4 <assert_post_action>
    82a6:	e033      	b.n	8310 <dk_set_leds_state+0xac>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    82a8:	4e3c      	ldr	r6, [pc, #240]	; (839c <dk_set_leds_state+0x138>)
    82aa:	f240 43fc 	movw	r3, #1276	; 0x4fc
    82ae:	4632      	mov	r2, r6
    82b0:	493b      	ldr	r1, [pc, #236]	; (83a0 <dk_set_leds_state+0x13c>)
    82b2:	483c      	ldr	r0, [pc, #240]	; (83a4 <dk_set_leds_state+0x140>)
    82b4:	f006 fd7d 	bl	edb2 <assert_print>
    82b8:	483b      	ldr	r0, [pc, #236]	; (83a8 <dk_set_leds_state+0x144>)
    82ba:	f006 fd7a 	bl	edb2 <assert_print>
    82be:	f240 41fc 	movw	r1, #1276	; 0x4fc
    82c2:	4630      	mov	r0, r6
    82c4:	f006 fd6e 	bl	eda4 <assert_post_action>
    82c8:	e02f      	b.n	832a <dk_set_leds_state+0xc6>
	const struct gpio_driver_api *api =
    82ca:	68ab      	ldr	r3, [r5, #8]
	return api->port_clear_bits_raw(port, pins);
    82cc:	691b      	ldr	r3, [r3, #16]
    82ce:	4639      	mov	r1, r7
    82d0:	4628      	mov	r0, r5
    82d2:	4798      	blx	r3
		} else {
			continue;
		}

		err = gpio_pin_set_dt(&leds[i], val);
		if (err) {
    82d4:	bb90      	cbnz	r0, 833c <dk_set_leds_state+0xd8>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
    82d6:	3401      	adds	r4, #1
    82d8:	2c03      	cmp	r4, #3
    82da:	d856      	bhi.n	838a <dk_set_leds_state+0x126>
		if (BIT(i) & leds_on_mask) {
    82dc:	fa29 f304 	lsr.w	r3, r9, r4
    82e0:	f013 0f01 	tst.w	r3, #1
    82e4:	d1cd      	bne.n	8282 <dk_set_leds_state+0x1e>
		} else if (BIT(i) & leds_off_mask) {
    82e6:	fa2b f304 	lsr.w	r3, fp, r4
    82ea:	f013 0f01 	tst.w	r3, #1
    82ee:	d0f2      	beq.n	82d6 <dk_set_leds_state+0x72>
			val = 0;
    82f0:	f04f 0800 	mov.w	r8, #0
	return gpio_pin_set(spec->port, spec->pin, value);
    82f4:	4b2d      	ldr	r3, [pc, #180]	; (83ac <dk_set_leds_state+0x148>)
    82f6:	f853 5034 	ldr.w	r5, [r3, r4, lsl #3]
    82fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    82fe:	791f      	ldrb	r7, [r3, #4]
	__unused const struct gpio_driver_config *const cfg =
    8300:	686b      	ldr	r3, [r5, #4]
	const struct gpio_driver_data *const data =
    8302:	f8d5 a010 	ldr.w	sl, [r5, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    8306:	681b      	ldr	r3, [r3, #0]
    8308:	2601      	movs	r6, #1
    830a:	40be      	lsls	r6, r7
    830c:	4233      	tst	r3, r6
    830e:	d0bb      	beq.n	8288 <dk_set_leds_state+0x24>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    8310:	f8da 3000 	ldr.w	r3, [sl]
    8314:	421e      	tst	r6, r3
    8316:	d001      	beq.n	831c <dk_set_leds_state+0xb8>
		value = (value != 0) ? 0 : 1;
    8318:	f088 0801 	eor.w	r8, r8, #1
	__unused const struct gpio_driver_config *const cfg =
    831c:	686b      	ldr	r3, [r5, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    831e:	681b      	ldr	r3, [r3, #0]
    8320:	2201      	movs	r2, #1
    8322:	fa02 f707 	lsl.w	r7, r2, r7
    8326:	423b      	tst	r3, r7
    8328:	d0be      	beq.n	82a8 <dk_set_leds_state+0x44>
	if (value != 0)	{
    832a:	f1b8 0f00 	cmp.w	r8, #0
    832e:	d0cc      	beq.n	82ca <dk_set_leds_state+0x66>
	const struct gpio_driver_api *api =
    8330:	68ab      	ldr	r3, [r5, #8]
	return api->port_set_bits_raw(port, pins);
    8332:	68db      	ldr	r3, [r3, #12]
    8334:	4639      	mov	r1, r7
    8336:	4628      	mov	r0, r5
    8338:	4798      	blx	r3
    833a:	e7cb      	b.n	82d4 <dk_set_leds_state+0x70>
			LOG_ERR("Cannot write LED gpio");
    833c:	4605      	mov	r5, r0
    833e:	4b1c      	ldr	r3, [pc, #112]	; (83b0 <dk_set_leds_state+0x14c>)
    8340:	9307      	str	r3, [sp, #28]
    8342:	2302      	movs	r3, #2
    8344:	f88d 3004 	strb.w	r3, [sp, #4]
    8348:	2300      	movs	r3, #0
    834a:	f88d 3005 	strb.w	r3, [sp, #5]
    834e:	f88d 3006 	strb.w	r3, [sp, #6]
    8352:	f88d 3007 	strb.w	r3, [sp, #7]
    8356:	9a01      	ldr	r2, [sp, #4]
    8358:	9206      	str	r2, [sp, #24]
    835a:	4619      	mov	r1, r3
    835c:	f363 0100 	bfi	r1, r3, #0, #1
    8360:	f363 0141 	bfi	r1, r3, #1, #1
    8364:	f363 0182 	bfi	r1, r3, #2, #1
    8368:	f363 01c5 	bfi	r1, r3, #3, #3
    836c:	2201      	movs	r2, #1
    836e:	f362 1188 	bfi	r1, r2, #6, #3
    8372:	2208      	movs	r2, #8
    8374:	f362 2152 	bfi	r1, r2, #9, #10
    8378:	f363 41de 	bfi	r1, r3, #19, #12
    837c:	f363 71df 	bfi	r1, r3, #31, #1
    8380:	aa06      	add	r2, sp, #24
    8382:	480c      	ldr	r0, [pc, #48]	; (83b4 <dk_set_leds_state+0x150>)
    8384:	f7fb f832 	bl	33ec <z_impl_z_log_msg_static_create>
			return err;
    8388:	e000      	b.n	838c <dk_set_leds_state+0x128>
		}
	}

	return 0;
    838a:	2500      	movs	r5, #0
}
    838c:	4628      	mov	r0, r5
    838e:	b009      	add	sp, #36	; 0x24
    8390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EINVAL;
    8394:	f06f 0515 	mvn.w	r5, #21
    8398:	e7f8      	b.n	838c <dk_set_leds_state+0x128>
    839a:	bf00      	nop
    839c:	000116fc 	.word	0x000116fc
    83a0:	000119e4 	.word	0x000119e4
    83a4:	00010450 	.word	0x00010450
    83a8:	00011a24 	.word	0x00011a24
    83ac:	00011dcc 	.word	0x00011dcc
    83b0:	00011d48 	.word	0x00011d48
    83b4:	00010134 	.word	0x00010134

000083b8 <dk_leds_init>:
{
    83b8:	b530      	push	{r4, r5, lr}
    83ba:	b089      	sub	sp, #36	; 0x24
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
    83bc:	2400      	movs	r4, #0
    83be:	2c03      	cmp	r4, #3
    83c0:	d834      	bhi.n	842c <dk_leds_init+0x74>
		err = gpio_pin_configure_dt(&leds[i], GPIO_OUTPUT);
    83c2:	4a1e      	ldr	r2, [pc, #120]	; (843c <dk_leds_init+0x84>)
    83c4:	eb02 03c4 	add.w	r3, r2, r4, lsl #3
	return gpio_pin_configure(spec->port,
    83c8:	f852 0034 	ldr.w	r0, [r2, r4, lsl #3]
    83cc:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
    83ce:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
    83d0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    83d4:	f7ff fa62 	bl	789c <z_impl_gpio_pin_configure>
		if (err) {
    83d8:	4605      	mov	r5, r0
    83da:	b908      	cbnz	r0, 83e0 <dk_leds_init+0x28>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
    83dc:	3401      	adds	r4, #1
    83de:	e7ee      	b.n	83be <dk_leds_init+0x6>
			LOG_ERR("Cannot configure LED gpio");
    83e0:	4b17      	ldr	r3, [pc, #92]	; (8440 <dk_leds_init+0x88>)
    83e2:	9307      	str	r3, [sp, #28]
    83e4:	2302      	movs	r3, #2
    83e6:	f88d 3004 	strb.w	r3, [sp, #4]
    83ea:	2300      	movs	r3, #0
    83ec:	f88d 3005 	strb.w	r3, [sp, #5]
    83f0:	f88d 3006 	strb.w	r3, [sp, #6]
    83f4:	f88d 3007 	strb.w	r3, [sp, #7]
    83f8:	9a01      	ldr	r2, [sp, #4]
    83fa:	9206      	str	r2, [sp, #24]
    83fc:	4619      	mov	r1, r3
    83fe:	f363 0100 	bfi	r1, r3, #0, #1
    8402:	f363 0141 	bfi	r1, r3, #1, #1
    8406:	f363 0182 	bfi	r1, r3, #2, #1
    840a:	f363 01c5 	bfi	r1, r3, #3, #3
    840e:	2201      	movs	r2, #1
    8410:	f362 1188 	bfi	r1, r2, #6, #3
    8414:	2208      	movs	r2, #8
    8416:	f362 2152 	bfi	r1, r2, #9, #10
    841a:	f363 41de 	bfi	r1, r3, #19, #12
    841e:	f363 71df 	bfi	r1, r3, #31, #1
    8422:	aa06      	add	r2, sp, #24
    8424:	4807      	ldr	r0, [pc, #28]	; (8444 <dk_leds_init+0x8c>)
    8426:	f7fa ffe1 	bl	33ec <z_impl_z_log_msg_static_create>
			return err;
    842a:	e004      	b.n	8436 <dk_leds_init+0x7e>
	return dk_set_leds_state(DK_NO_LEDS_MSK, DK_ALL_LEDS_MSK);
    842c:	210f      	movs	r1, #15
    842e:	2000      	movs	r0, #0
    8430:	f7ff ff18 	bl	8264 <dk_set_leds_state>
    8434:	4605      	mov	r5, r0
}
    8436:	4628      	mov	r0, r5
    8438:	b009      	add	sp, #36	; 0x24
    843a:	bd30      	pop	{r4, r5, pc}
    843c:	00011dcc 	.word	0x00011dcc
    8440:	00011d60 	.word	0x00011d60
    8444:	00010134 	.word	0x00010134

00008448 <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
    8448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    844c:	b08e      	sub	sp, #56	; 0x38
	int err;

	if (led_idx >= ARRAY_SIZE(leds)) {
    844e:	2803      	cmp	r0, #3
    8450:	d82e      	bhi.n	84b0 <dk_set_led+0x68>
    8452:	460f      	mov	r7, r1
		LOG_ERR("LED index out of the range");
		return -EINVAL;
	}
	err = gpio_pin_set_dt(&leds[led_idx], val);
    8454:	460e      	mov	r6, r1
	return gpio_pin_set(spec->port, spec->pin, value);
    8456:	4b52      	ldr	r3, [pc, #328]	; (85a0 <dk_set_led+0x158>)
    8458:	f853 4030 	ldr.w	r4, [r3, r0, lsl #3]
    845c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    8460:	f890 8004 	ldrb.w	r8, [r0, #4]
	__unused const struct gpio_driver_config *const cfg =
    8464:	6863      	ldr	r3, [r4, #4]
	const struct gpio_driver_data *const data =
    8466:	f8d4 9010 	ldr.w	r9, [r4, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    846a:	681b      	ldr	r3, [r3, #0]
    846c:	2501      	movs	r5, #1
    846e:	fa05 f508 	lsl.w	r5, r5, r8
    8472:	422b      	tst	r3, r5
    8474:	d044      	beq.n	8500 <dk_set_led+0xb8>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    8476:	f8d9 3000 	ldr.w	r3, [r9]
    847a:	421d      	tst	r5, r3
    847c:	d002      	beq.n	8484 <dk_set_led+0x3c>
		value = (value != 0) ? 0 : 1;
    847e:	fab7 f687 	clz	r6, r7
    8482:	0976      	lsrs	r6, r6, #5
	__unused const struct gpio_driver_config *const cfg =
    8484:	6863      	ldr	r3, [r4, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    8486:	681b      	ldr	r3, [r3, #0]
    8488:	2201      	movs	r2, #1
    848a:	fa02 f808 	lsl.w	r8, r2, r8
    848e:	ea13 0f08 	tst.w	r3, r8
    8492:	d047      	beq.n	8524 <dk_set_led+0xdc>
	if (value != 0)	{
    8494:	2e00      	cmp	r6, #0
    8496:	d056      	beq.n	8546 <dk_set_led+0xfe>
	const struct gpio_driver_api *api =
    8498:	68a3      	ldr	r3, [r4, #8]
	return api->port_set_bits_raw(port, pins);
    849a:	68db      	ldr	r3, [r3, #12]
    849c:	4641      	mov	r1, r8
    849e:	4620      	mov	r0, r4
    84a0:	4798      	blx	r3
    84a2:	4604      	mov	r4, r0
	if (err) {
    84a4:	2c00      	cmp	r4, #0
    84a6:	d155      	bne.n	8554 <dk_set_led+0x10c>
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
    84a8:	4620      	mov	r0, r4
    84aa:	b00e      	add	sp, #56	; 0x38
    84ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		LOG_ERR("LED index out of the range");
    84b0:	4b3c      	ldr	r3, [pc, #240]	; (85a4 <dk_set_led+0x15c>)
    84b2:	930d      	str	r3, [sp, #52]	; 0x34
    84b4:	2302      	movs	r3, #2
    84b6:	f88d 3004 	strb.w	r3, [sp, #4]
    84ba:	2300      	movs	r3, #0
    84bc:	f88d 3005 	strb.w	r3, [sp, #5]
    84c0:	f88d 3006 	strb.w	r3, [sp, #6]
    84c4:	f88d 3007 	strb.w	r3, [sp, #7]
    84c8:	9a01      	ldr	r2, [sp, #4]
    84ca:	920c      	str	r2, [sp, #48]	; 0x30
    84cc:	4619      	mov	r1, r3
    84ce:	f363 0100 	bfi	r1, r3, #0, #1
    84d2:	f363 0141 	bfi	r1, r3, #1, #1
    84d6:	f363 0182 	bfi	r1, r3, #2, #1
    84da:	f363 01c5 	bfi	r1, r3, #3, #3
    84de:	2201      	movs	r2, #1
    84e0:	f362 1188 	bfi	r1, r2, #6, #3
    84e4:	2208      	movs	r2, #8
    84e6:	f362 2152 	bfi	r1, r2, #9, #10
    84ea:	f363 41de 	bfi	r1, r3, #19, #12
    84ee:	f363 71df 	bfi	r1, r3, #31, #1
    84f2:	aa0c      	add	r2, sp, #48	; 0x30
    84f4:	482c      	ldr	r0, [pc, #176]	; (85a8 <dk_set_led+0x160>)
    84f6:	f7fa ff79 	bl	33ec <z_impl_z_log_msg_static_create>
		return -EINVAL;
    84fa:	f06f 0415 	mvn.w	r4, #21
    84fe:	e7d3      	b.n	84a8 <dk_set_led+0x60>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    8500:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 85ac <dk_set_led+0x164>
    8504:	f240 5325 	movw	r3, #1317	; 0x525
    8508:	4652      	mov	r2, sl
    850a:	4929      	ldr	r1, [pc, #164]	; (85b0 <dk_set_led+0x168>)
    850c:	4829      	ldr	r0, [pc, #164]	; (85b4 <dk_set_led+0x16c>)
    850e:	f006 fc50 	bl	edb2 <assert_print>
    8512:	4829      	ldr	r0, [pc, #164]	; (85b8 <dk_set_led+0x170>)
    8514:	f006 fc4d 	bl	edb2 <assert_print>
    8518:	f240 5125 	movw	r1, #1317	; 0x525
    851c:	4650      	mov	r0, sl
    851e:	f006 fc41 	bl	eda4 <assert_post_action>
    8522:	e7a8      	b.n	8476 <dk_set_led+0x2e>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    8524:	4d21      	ldr	r5, [pc, #132]	; (85ac <dk_set_led+0x164>)
    8526:	f240 43fc 	movw	r3, #1276	; 0x4fc
    852a:	462a      	mov	r2, r5
    852c:	4920      	ldr	r1, [pc, #128]	; (85b0 <dk_set_led+0x168>)
    852e:	4821      	ldr	r0, [pc, #132]	; (85b4 <dk_set_led+0x16c>)
    8530:	f006 fc3f 	bl	edb2 <assert_print>
    8534:	4820      	ldr	r0, [pc, #128]	; (85b8 <dk_set_led+0x170>)
    8536:	f006 fc3c 	bl	edb2 <assert_print>
    853a:	f240 41fc 	movw	r1, #1276	; 0x4fc
    853e:	4628      	mov	r0, r5
    8540:	f006 fc30 	bl	eda4 <assert_post_action>
    8544:	e7a6      	b.n	8494 <dk_set_led+0x4c>
	const struct gpio_driver_api *api =
    8546:	68a3      	ldr	r3, [r4, #8]
	return api->port_clear_bits_raw(port, pins);
    8548:	691b      	ldr	r3, [r3, #16]
    854a:	4641      	mov	r1, r8
    854c:	4620      	mov	r0, r4
    854e:	4798      	blx	r3
    8550:	4604      	mov	r4, r0
    8552:	e7a7      	b.n	84a4 <dk_set_led+0x5c>
		LOG_ERR("Cannot write LED gpio");
    8554:	4b19      	ldr	r3, [pc, #100]	; (85bc <dk_set_led+0x174>)
    8556:	9307      	str	r3, [sp, #28]
    8558:	2302      	movs	r3, #2
    855a:	f88d 3004 	strb.w	r3, [sp, #4]
    855e:	2300      	movs	r3, #0
    8560:	f88d 3005 	strb.w	r3, [sp, #5]
    8564:	f88d 3006 	strb.w	r3, [sp, #6]
    8568:	f88d 3007 	strb.w	r3, [sp, #7]
    856c:	9a01      	ldr	r2, [sp, #4]
    856e:	9206      	str	r2, [sp, #24]
    8570:	4619      	mov	r1, r3
    8572:	f363 0100 	bfi	r1, r3, #0, #1
    8576:	f363 0141 	bfi	r1, r3, #1, #1
    857a:	f363 0182 	bfi	r1, r3, #2, #1
    857e:	f363 01c5 	bfi	r1, r3, #3, #3
    8582:	2201      	movs	r2, #1
    8584:	f362 1188 	bfi	r1, r2, #6, #3
    8588:	2208      	movs	r2, #8
    858a:	f362 2152 	bfi	r1, r2, #9, #10
    858e:	f363 41de 	bfi	r1, r3, #19, #12
    8592:	f363 71df 	bfi	r1, r3, #31, #1
    8596:	aa06      	add	r2, sp, #24
    8598:	4803      	ldr	r0, [pc, #12]	; (85a8 <dk_set_led+0x160>)
    859a:	f7fa ff27 	bl	33ec <z_impl_z_log_msg_static_create>
    859e:	e783      	b.n	84a8 <dk_set_led+0x60>
    85a0:	00011dcc 	.word	0x00011dcc
    85a4:	00011d7c 	.word	0x00011d7c
    85a8:	00010134 	.word	0x00010134
    85ac:	000116fc 	.word	0x000116fc
    85b0:	000119e4 	.word	0x000119e4
    85b4:	00010450 	.word	0x00010450
    85b8:	00011a24 	.word	0x00011a24
    85bc:	00011d48 	.word	0x00011d48

000085c0 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    85c0:	b510      	push	{r4, lr}
    85c2:	b088      	sub	sp, #32
	z_impl_log_panic();
    85c4:	f7fa fd92 	bl	30ec <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    85c8:	4b14      	ldr	r3, [pc, #80]	; (861c <k_sys_fatal_error_handler+0x5c>)
    85ca:	9307      	str	r3, [sp, #28]
    85cc:	2302      	movs	r3, #2
    85ce:	f88d 3004 	strb.w	r3, [sp, #4]
    85d2:	2400      	movs	r4, #0
    85d4:	f88d 4005 	strb.w	r4, [sp, #5]
    85d8:	f88d 4006 	strb.w	r4, [sp, #6]
    85dc:	f88d 4007 	strb.w	r4, [sp, #7]
    85e0:	9b01      	ldr	r3, [sp, #4]
    85e2:	9306      	str	r3, [sp, #24]
    85e4:	4621      	mov	r1, r4
    85e6:	f364 0100 	bfi	r1, r4, #0, #1
    85ea:	f364 0141 	bfi	r1, r4, #1, #1
    85ee:	f364 0182 	bfi	r1, r4, #2, #1
    85f2:	f364 01c5 	bfi	r1, r4, #3, #3
    85f6:	2301      	movs	r3, #1
    85f8:	f363 1188 	bfi	r1, r3, #6, #3
    85fc:	2308      	movs	r3, #8
    85fe:	f363 2152 	bfi	r1, r3, #9, #10
    8602:	f364 41de 	bfi	r1, r4, #19, #12
    8606:	f364 71df 	bfi	r1, r4, #31, #1
    860a:	4623      	mov	r3, r4
    860c:	aa06      	add	r2, sp, #24
    860e:	4804      	ldr	r0, [pc, #16]	; (8620 <k_sys_fatal_error_handler+0x60>)
    8610:	f7fa feec 	bl	33ec <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
    8614:	4620      	mov	r0, r4
    8616:	f7fd f917 	bl	5848 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    861a:	bf00      	nop
    861c:	00011dec 	.word	0x00011dec
    8620:	0001013c 	.word	0x0001013c

00008624 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    8624:	4b02      	ldr	r3, [pc, #8]	; (8630 <nvmc_wait+0xc>)
    8626:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    862a:	2b00      	cmp	r3, #0
    862c:	d0fa      	beq.n	8624 <nvmc_wait>
}
    862e:	4770      	bx	lr
    8630:	4001e000 	.word	0x4001e000

00008634 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
    8634:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    8636:	4b03      	ldr	r3, [pc, #12]	; (8644 <nvmc_config+0x10>)
    8638:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
    863c:	f7ff fff2 	bl	8624 <nvmc_wait>
}
    8640:	bd08      	pop	{r3, pc}
    8642:	bf00      	nop
    8644:	4001e000 	.word	0x4001e000

00008648 <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    8648:	4b01      	ldr	r3, [pc, #4]	; (8650 <SystemCoreClockUpdate+0x8>)
    864a:	4a02      	ldr	r2, [pc, #8]	; (8654 <SystemCoreClockUpdate+0xc>)
    864c:	601a      	str	r2, [r3, #0]
}
    864e:	4770      	bx	lr
    8650:	200000a0 	.word	0x200000a0
    8654:	03d09000 	.word	0x03d09000

00008658 <SystemInit>:

void SystemInit(void)
{
    8658:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    865a:	f007 f9c7 	bl	f9ec <nrf52_errata_36>
    865e:	b140      	cbz	r0, 8672 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    8660:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8664:	2200      	movs	r2, #0
    8666:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    866a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    866e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    8672:	f007 f9c5 	bl	fa00 <nrf52_errata_66>
    8676:	2800      	cmp	r0, #0
    8678:	d046      	beq.n	8708 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    867a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    867e:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    8682:	4b59      	ldr	r3, [pc, #356]	; (87e8 <SystemInit+0x190>)
    8684:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    8688:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    868c:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    8690:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    8694:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    8698:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    869c:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    86a0:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    86a4:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    86a8:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    86ac:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    86b0:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    86b4:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    86b8:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    86bc:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    86c0:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    86c4:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    86c8:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    86cc:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    86d0:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    86d4:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    86d8:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    86dc:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    86e0:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    86e4:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    86e8:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    86ec:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    86f0:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    86f4:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    86f8:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    86fc:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    8700:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    8704:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    8708:	f007 f984 	bl	fa14 <nrf52_errata_98>
    870c:	b118      	cbz	r0, 8716 <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    870e:	4b37      	ldr	r3, [pc, #220]	; (87ec <SystemInit+0x194>)
    8710:	4a37      	ldr	r2, [pc, #220]	; (87f0 <SystemInit+0x198>)
    8712:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    8716:	f007 f990 	bl	fa3a <nrf52_errata_103>
    871a:	b118      	cbz	r0, 8724 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    871c:	4b35      	ldr	r3, [pc, #212]	; (87f4 <SystemInit+0x19c>)
    871e:	22fb      	movs	r2, #251	; 0xfb
    8720:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    8724:	f007 f99c 	bl	fa60 <nrf52_errata_115>
    8728:	b170      	cbz	r0, 8748 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    872a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    872e:	f8d1 3ee4 	ldr.w	r3, [r1, #3812]	; 0xee4
    8732:	f023 030f 	bic.w	r3, r3, #15
    8736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    873a:	f8d2 2258 	ldr.w	r2, [r2, #600]	; 0x258
    873e:	f002 020f 	and.w	r2, r2, #15
    8742:	4313      	orrs	r3, r2
    8744:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    8748:	f007 f99d 	bl	fa86 <nrf52_errata_120>
    874c:	b120      	cbz	r0, 8758 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    874e:	4b2a      	ldr	r3, [pc, #168]	; (87f8 <SystemInit+0x1a0>)
    8750:	f44f 7200 	mov.w	r2, #512	; 0x200
    8754:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    8758:	f007 f9a8 	bl	faac <nrf52_errata_136>
    875c:	b160      	cbz	r0, 8778 <SystemInit+0x120>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    875e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8762:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    8766:	f013 0f01 	tst.w	r3, #1
    876a:	d005      	beq.n	8778 <SystemInit+0x120>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    876c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8770:	f06f 0201 	mvn.w	r2, #1
    8774:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    8778:	f007 f9a2 	bl	fac0 <nrf52_configuration_249>
    877c:	b138      	cbz	r0, 878e <SystemInit+0x136>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    877e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    8782:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    8786:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    878a:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    878e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    8792:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    8796:	2b00      	cmp	r3, #0
    8798:	db08      	blt.n	87ac <SystemInit+0x154>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    879a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    879e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    87a2:	2b00      	cmp	r3, #0
    87a4:	db02      	blt.n	87ac <SystemInit+0x154>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
    87a6:	f7ff ff4f 	bl	8648 <SystemCoreClockUpdate>
}
    87aa:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    87ac:	2001      	movs	r0, #1
    87ae:	f7ff ff41 	bl	8634 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    87b2:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    87b6:	2512      	movs	r5, #18
    87b8:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
    87bc:	f7ff ff32 	bl	8624 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    87c0:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
    87c4:	f7ff ff2e 	bl	8624 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    87c8:	2000      	movs	r0, #0
    87ca:	f7ff ff33 	bl	8634 <nvmc_config>
  __ASM volatile ("dsb 0xF":::"memory");
    87ce:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    87d2:	490a      	ldr	r1, [pc, #40]	; (87fc <SystemInit+0x1a4>)
    87d4:	68ca      	ldr	r2, [r1, #12]
    87d6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    87da:	4b09      	ldr	r3, [pc, #36]	; (8800 <SystemInit+0x1a8>)
    87dc:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    87de:	60cb      	str	r3, [r1, #12]
    87e0:	f3bf 8f4f 	dsb	sy
    __NOP();
    87e4:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    87e6:	e7fd      	b.n	87e4 <SystemInit+0x18c>
    87e8:	4000c000 	.word	0x4000c000
    87ec:	40005000 	.word	0x40005000
    87f0:	00038148 	.word	0x00038148
    87f4:	4000f000 	.word	0x4000f000
    87f8:	40029000 	.word	0x40029000
    87fc:	e000ed00 	.word	0xe000ed00
    8800:	05fa0004 	.word	0x05fa0004

00008804 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    8804:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    8806:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    8808:	fab4 f384 	clz	r3, r4
    880c:	f1c3 031f 	rsb	r3, r3, #31
    8810:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
    8814:	2b00      	cmp	r3, #0
    8816:	db16      	blt.n	8846 <nrfx_flag32_alloc+0x42>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    8818:	2201      	movs	r2, #1
    881a:	fa02 f303 	lsl.w	r3, r2, r3
    881e:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    8822:	f3bf 8f5b 	dmb	ish
    8826:	e850 2f00 	ldrex	r2, [r0]
    882a:	42a2      	cmp	r2, r4
    882c:	d104      	bne.n	8838 <nrfx_flag32_alloc+0x34>
    882e:	e840 3e00 	strex	lr, r3, [r0]
    8832:	f1be 0f00 	cmp.w	lr, #0
    8836:	d1f6      	bne.n	8826 <nrfx_flag32_alloc+0x22>
    8838:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    883c:	d1e3      	bne.n	8806 <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    883e:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
    8842:	4802      	ldr	r0, [pc, #8]	; (884c <nrfx_flag32_alloc+0x48>)
}
    8844:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
    8846:	4802      	ldr	r0, [pc, #8]	; (8850 <nrfx_flag32_alloc+0x4c>)
    8848:	e7fc      	b.n	8844 <nrfx_flag32_alloc+0x40>
    884a:	bf00      	nop
    884c:	0bad0000 	.word	0x0bad0000
    8850:	0bad0002 	.word	0x0bad0002

00008854 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    8854:	6803      	ldr	r3, [r0, #0]
    8856:	40cb      	lsrs	r3, r1
    8858:	f013 0f01 	tst.w	r3, #1
    885c:	d115      	bne.n	888a <nrfx_flag32_free+0x36>
{
    885e:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    8860:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    8862:	2301      	movs	r3, #1
    8864:	408b      	lsls	r3, r1
    8866:	4313      	orrs	r3, r2
    8868:	f3bf 8f5b 	dmb	ish
    886c:	e850 cf00 	ldrex	ip, [r0]
    8870:	4594      	cmp	ip, r2
    8872:	d104      	bne.n	887e <nrfx_flag32_free+0x2a>
    8874:	e840 3e00 	strex	lr, r3, [r0]
    8878:	f1be 0f00 	cmp.w	lr, #0
    887c:	d1f6      	bne.n	886c <nrfx_flag32_free+0x18>
    887e:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    8882:	d1ed      	bne.n	8860 <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
    8884:	4802      	ldr	r0, [pc, #8]	; (8890 <nrfx_flag32_free+0x3c>)
}
    8886:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
    888a:	4802      	ldr	r0, [pc, #8]	; (8894 <nrfx_flag32_free+0x40>)
}
    888c:	4770      	bx	lr
    888e:	bf00      	nop
    8890:	0bad0000 	.word	0x0bad0000
    8894:	0bad0004 	.word	0x0bad0004

00008898 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    8898:	b5f0      	push	{r4, r5, r6, r7, lr}
    889a:	b083      	sub	sp, #12
    switch (domain)
    889c:	4605      	mov	r5, r0
    889e:	b168      	cbz	r0, 88bc <clock_stop+0x24>
    88a0:	2801      	cmp	r0, #1
    88a2:	d020      	beq.n	88e6 <clock_stop+0x4e>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    88a4:	4c3d      	ldr	r4, [pc, #244]	; (899c <clock_stop+0x104>)
    88a6:	23d8      	movs	r3, #216	; 0xd8
    88a8:	4622      	mov	r2, r4
    88aa:	493d      	ldr	r1, [pc, #244]	; (89a0 <clock_stop+0x108>)
    88ac:	483d      	ldr	r0, [pc, #244]	; (89a4 <clock_stop+0x10c>)
    88ae:	f006 fa80 	bl	edb2 <assert_print>
    88b2:	21d8      	movs	r1, #216	; 0xd8
    88b4:	4620      	mov	r0, r4
    88b6:	f006 fa75 	bl	eda4 <assert_post_action>
            return;
    88ba:	e068      	b.n	898e <clock_stop+0xf6>
    p_reg->INTENCLR = mask;
    88bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    88c0:	2202      	movs	r2, #2
    88c2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    88c6:	2200      	movs	r2, #0
    88c8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    88cc:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    88d0:	2201      	movs	r2, #1
    88d2:	60da      	str	r2, [r3, #12]
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    88d4:	2301      	movs	r3, #1
    88d6:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    88da:	429d      	cmp	r5, r3
    88dc:	d00f      	beq.n	88fe <clock_stop+0x66>
    88de:	2600      	movs	r6, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    88e0:	f242 7410 	movw	r4, #10000	; 0x2710
    88e4:	e029      	b.n	893a <clock_stop+0xa2>
    p_reg->INTENCLR = mask;
    88e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    88ea:	2201      	movs	r2, #1
    88ec:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    88f0:	2100      	movs	r1, #0
    88f2:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    88f6:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    88fa:	605a      	str	r2, [r3, #4]
}
    88fc:	e7ea      	b.n	88d4 <clock_stop+0x3c>
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    88fe:	f10d 0607 	add.w	r6, sp, #7
    8902:	e7ed      	b.n	88e0 <clock_stop+0x48>
            if (p_clk_src != NULL)
    8904:	b136      	cbz	r6, 8914 <clock_stop+0x7c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    8906:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    890a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    890e:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    8912:	6033      	str	r3, [r6, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    8914:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8918:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    891c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    8920:	d12f      	bne.n	8982 <clock_stop+0xea>
    return false;
    8922:	2300      	movs	r3, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    8924:	b38b      	cbz	r3, 898a <clock_stop+0xf2>
    8926:	b11e      	cbz	r6, 8930 <clock_stop+0x98>
    8928:	f89d 3007 	ldrb.w	r3, [sp, #7]
    892c:	2b01      	cmp	r3, #1
    892e:	d12c      	bne.n	898a <clock_stop+0xf2>
    8930:	2001      	movs	r0, #1
    8932:	f007 f8d8 	bl	fae6 <nrfx_busy_wait>
    8936:	3c01      	subs	r4, #1
    8938:	d027      	beq.n	898a <clock_stop+0xf2>
    switch (domain)
    893a:	2d00      	cmp	r5, #0
    893c:	d0e2      	beq.n	8904 <clock_stop+0x6c>
    893e:	2d01      	cmp	r5, #1
    8940:	d00e      	beq.n	8960 <clock_stop+0xc8>
            NRFX_ASSERT(0);
    8942:	4f19      	ldr	r7, [pc, #100]	; (89a8 <clock_stop+0x110>)
    8944:	f44f 734f 	mov.w	r3, #828	; 0x33c
    8948:	463a      	mov	r2, r7
    894a:	4915      	ldr	r1, [pc, #84]	; (89a0 <clock_stop+0x108>)
    894c:	4815      	ldr	r0, [pc, #84]	; (89a4 <clock_stop+0x10c>)
    894e:	f006 fa30 	bl	edb2 <assert_print>
    8952:	f44f 714f 	mov.w	r1, #828	; 0x33c
    8956:	4638      	mov	r0, r7
    8958:	f006 fa24 	bl	eda4 <assert_post_action>
            return false;
    895c:	2300      	movs	r3, #0
    895e:	e7e1      	b.n	8924 <clock_stop+0x8c>
            if (p_clk_src != NULL)
    8960:	b136      	cbz	r6, 8970 <clock_stop+0xd8>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    8962:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8966:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    896a:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    896e:	7033      	strb	r3, [r6, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    8970:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8974:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    8978:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    897c:	d103      	bne.n	8986 <clock_stop+0xee>
    return false;
    897e:	2300      	movs	r3, #0
    8980:	e7d0      	b.n	8924 <clock_stop+0x8c>
                return true;
    8982:	2301      	movs	r3, #1
    8984:	e7ce      	b.n	8924 <clock_stop+0x8c>
                return true;
    8986:	2301      	movs	r3, #1
    8988:	e7cc      	b.n	8924 <clock_stop+0x8c>
    {
        NRFX_LOG_ERROR("Failed to stop clock domain: %d.", domain);
    }

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    898a:	2d01      	cmp	r5, #1
    898c:	d001      	beq.n	8992 <clock_stop+0xfa>
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    898e:	b003      	add	sp, #12
    8990:	bdf0      	pop	{r4, r5, r6, r7, pc}
            m_clock_cb.hfclk_started = false;
    8992:	4b06      	ldr	r3, [pc, #24]	; (89ac <clock_stop+0x114>)
    8994:	2200      	movs	r2, #0
    8996:	715a      	strb	r2, [r3, #5]
    8998:	e7f9      	b.n	898e <clock_stop+0xf6>
    899a:	bf00      	nop
    899c:	00011e0c 	.word	0x00011e0c
    89a0:	00011934 	.word	0x00011934
    89a4:	00010450 	.word	0x00010450
    89a8:	00011e4c 	.word	0x00011e4c
    89ac:	2000103c 	.word	0x2000103c

000089b0 <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    89b0:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(event_handler);
    89b2:	4604      	mov	r4, r0
    89b4:	b150      	cbz	r0, 89cc <nrfx_clock_init+0x1c>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    89b6:	4b0d      	ldr	r3, [pc, #52]	; (89ec <nrfx_clock_init+0x3c>)
    89b8:	791b      	ldrb	r3, [r3, #4]
    89ba:	b9ab      	cbnz	r3, 89e8 <nrfx_clock_init+0x38>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    89bc:	4b0b      	ldr	r3, [pc, #44]	; (89ec <nrfx_clock_init+0x3c>)
    89be:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    89c0:	2201      	movs	r2, #1
    89c2:	711a      	strb	r2, [r3, #4]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        m_clock_cb.hfclk_started = false;
    89c4:	2200      	movs	r2, #0
    89c6:	715a      	strb	r2, [r3, #5]
    nrfx_err_t err_code = NRFX_SUCCESS;
    89c8:	4809      	ldr	r0, [pc, #36]	; (89f0 <nrfx_clock_init+0x40>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    89ca:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(event_handler);
    89cc:	4d09      	ldr	r5, [pc, #36]	; (89f4 <nrfx_clock_init+0x44>)
    89ce:	f240 1315 	movw	r3, #277	; 0x115
    89d2:	462a      	mov	r2, r5
    89d4:	4908      	ldr	r1, [pc, #32]	; (89f8 <nrfx_clock_init+0x48>)
    89d6:	4809      	ldr	r0, [pc, #36]	; (89fc <nrfx_clock_init+0x4c>)
    89d8:	f006 f9eb 	bl	edb2 <assert_print>
    89dc:	f240 1115 	movw	r1, #277	; 0x115
    89e0:	4628      	mov	r0, r5
    89e2:	f006 f9df 	bl	eda4 <assert_post_action>
    89e6:	e7e6      	b.n	89b6 <nrfx_clock_init+0x6>
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    89e8:	4805      	ldr	r0, [pc, #20]	; (8a00 <nrfx_clock_init+0x50>)
    return err_code;
    89ea:	e7ee      	b.n	89ca <nrfx_clock_init+0x1a>
    89ec:	2000103c 	.word	0x2000103c
    89f0:	0bad0000 	.word	0x0bad0000
    89f4:	00011e0c 	.word	0x00011e0c
    89f8:	00011e80 	.word	0x00011e80
    89fc:	00010450 	.word	0x00010450
    8a00:	0bad000c 	.word	0x0bad000c

00008a04 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    8a04:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    8a06:	4b0f      	ldr	r3, [pc, #60]	; (8a44 <nrfx_clock_enable+0x40>)
    8a08:	791b      	ldrb	r3, [r3, #4]
    8a0a:	b153      	cbz	r3, 8a22 <nrfx_clock_enable+0x1e>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    8a0c:	2000      	movs	r0, #0
    8a0e:	f7fb fc2d 	bl	426c <arch_irq_is_enabled>
    8a12:	b1a0      	cbz	r0, 8a3e <nrfx_clock_enable+0x3a>
    nrfx_power_clock_irq_init();
    nrf_clock_lf_src_set(NRF_CLOCK, clock_initial_lfclksrc_get());
    8a14:	f007 f86b 	bl	faee <clock_initial_lfclksrc_get>
    p_reg->LFCLKSRC = (uint32_t)(source);
    8a18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8a1c:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    8a20:	bd10      	pop	{r4, pc}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    8a22:	4c09      	ldr	r4, [pc, #36]	; (8a48 <nrfx_clock_enable+0x44>)
    8a24:	f44f 7397 	mov.w	r3, #302	; 0x12e
    8a28:	4622      	mov	r2, r4
    8a2a:	4908      	ldr	r1, [pc, #32]	; (8a4c <nrfx_clock_enable+0x48>)
    8a2c:	4808      	ldr	r0, [pc, #32]	; (8a50 <nrfx_clock_enable+0x4c>)
    8a2e:	f006 f9c0 	bl	edb2 <assert_print>
    8a32:	f44f 7197 	mov.w	r1, #302	; 0x12e
    8a36:	4620      	mov	r0, r4
    8a38:	f006 f9b4 	bl	eda4 <assert_post_action>
    8a3c:	e7e6      	b.n	8a0c <nrfx_clock_enable+0x8>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    8a3e:	f7fb fc07 	bl	4250 <arch_irq_enable>
    8a42:	e7e7      	b.n	8a14 <nrfx_clock_enable+0x10>
    8a44:	2000103c 	.word	0x2000103c
    8a48:	00011e0c 	.word	0x00011e0c
    8a4c:	00011e90 	.word	0x00011e90
    8a50:	00010450 	.word	0x00010450

00008a54 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    8a54:	b530      	push	{r4, r5, lr}
    8a56:	b083      	sub	sp, #12
    8a58:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    8a5a:	4b34      	ldr	r3, [pc, #208]	; (8b2c <nrfx_clock_start+0xd8>)
    8a5c:	791b      	ldrb	r3, [r3, #4]
    8a5e:	b183      	cbz	r3, 8a82 <nrfx_clock_start+0x2e>
    switch (domain)
    8a60:	b1ec      	cbz	r4, 8a9e <nrfx_clock_start+0x4a>
    8a62:	2c01      	cmp	r4, #1
    8a64:	d055      	beq.n	8b12 <nrfx_clock_start+0xbe>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    8a66:	4c32      	ldr	r4, [pc, #200]	; (8b30 <nrfx_clock_start+0xdc>)
    8a68:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
    8a6c:	4622      	mov	r2, r4
    8a6e:	4931      	ldr	r1, [pc, #196]	; (8b34 <nrfx_clock_start+0xe0>)
    8a70:	4831      	ldr	r0, [pc, #196]	; (8b38 <nrfx_clock_start+0xe4>)
    8a72:	f006 f99e 	bl	edb2 <assert_print>
    8a76:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
    8a7a:	4620      	mov	r0, r4
    8a7c:	f006 f992 	bl	eda4 <assert_post_action>
            break;
    }
}
    8a80:	e052      	b.n	8b28 <nrfx_clock_start+0xd4>
    NRFX_ASSERT(m_clock_cb.module_initialized);
    8a82:	4d2b      	ldr	r5, [pc, #172]	; (8b30 <nrfx_clock_start+0xdc>)
    8a84:	f44f 73b4 	mov.w	r3, #360	; 0x168
    8a88:	462a      	mov	r2, r5
    8a8a:	492c      	ldr	r1, [pc, #176]	; (8b3c <nrfx_clock_start+0xe8>)
    8a8c:	482a      	ldr	r0, [pc, #168]	; (8b38 <nrfx_clock_start+0xe4>)
    8a8e:	f006 f990 	bl	edb2 <assert_print>
    8a92:	f44f 71b4 	mov.w	r1, #360	; 0x168
    8a96:	4628      	mov	r0, r5
    8a98:	f006 f984 	bl	eda4 <assert_post_action>
    8a9c:	e7e0      	b.n	8a60 <nrfx_clock_start+0xc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    8a9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    8aa2:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    8aa6:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    8aaa:	9301      	str	r3, [sp, #4]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    8aac:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    8ab0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    8ab4:	d117      	bne.n	8ae6 <nrfx_clock_start+0x92>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    8ab6:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    8aba:	f013 0f01 	tst.w	r3, #1
    8abe:	d116      	bne.n	8aee <nrfx_clock_start+0x9a>
                    lfclksrc = clock_initial_lfclksrc_get();
    8ac0:	f007 f815 	bl	faee <clock_initial_lfclksrc_get>
    8ac4:	9001      	str	r0, [sp, #4]
    p_reg->LFCLKSRC = (uint32_t)(source);
    8ac6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8aca:	9a01      	ldr	r2, [sp, #4]
    8acc:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8ad0:	2200      	movs	r2, #0
    8ad2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    8ad6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    8ada:	2202      	movs	r2, #2
    8adc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8ae0:	2201      	movs	r2, #1
    8ae2:	609a      	str	r2, [r3, #8]
}
    8ae4:	e020      	b.n	8b28 <nrfx_clock_start+0xd4>
                    (void)clock_lfclksrc_tweak(&lfclksrc);
    8ae6:	a801      	add	r0, sp, #4
    8ae8:	f007 f803 	bl	faf2 <clock_lfclksrc_tweak>
    8aec:	e7eb      	b.n	8ac6 <nrfx_clock_start+0x72>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    8aee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8af2:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    8af6:	f003 0303 	and.w	r3, r3, #3
                    lfclksrc = nrf_clock_lf_srccopy_get(NRF_CLOCK);
    8afa:	9301      	str	r3, [sp, #4]
                    if (clock_lfclksrc_tweak(&lfclksrc))
    8afc:	a801      	add	r0, sp, #4
    8afe:	f006 fff8 	bl	faf2 <clock_lfclksrc_tweak>
    8b02:	2800      	cmp	r0, #0
    8b04:	d0df      	beq.n	8ac6 <nrfx_clock_start+0x72>
    p_reg->INTENSET = mask;
    8b06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8b0a:	2202      	movs	r2, #2
    8b0c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
    8b10:	e00a      	b.n	8b28 <nrfx_clock_start+0xd4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8b12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8b16:	2200      	movs	r2, #0
    8b18:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    8b1c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    8b20:	2201      	movs	r2, #1
    8b22:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8b26:	601a      	str	r2, [r3, #0]
}
    8b28:	b003      	add	sp, #12
    8b2a:	bd30      	pop	{r4, r5, pc}
    8b2c:	2000103c 	.word	0x2000103c
    8b30:	00011e0c 	.word	0x00011e0c
    8b34:	00011934 	.word	0x00011934
    8b38:	00010450 	.word	0x00010450
    8b3c:	00011e90 	.word	0x00011e90

00008b40 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    8b40:	b538      	push	{r3, r4, r5, lr}
    8b42:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    8b44:	4b0a      	ldr	r3, [pc, #40]	; (8b70 <nrfx_clock_stop+0x30>)
    8b46:	791b      	ldrb	r3, [r3, #4]
    8b48:	b11b      	cbz	r3, 8b52 <nrfx_clock_stop+0x12>
    clock_stop(domain);
    8b4a:	4620      	mov	r0, r4
    8b4c:	f7ff fea4 	bl	8898 <clock_stop>
}
    8b50:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    8b52:	4d08      	ldr	r5, [pc, #32]	; (8b74 <nrfx_clock_stop+0x34>)
    8b54:	f240 13ad 	movw	r3, #429	; 0x1ad
    8b58:	462a      	mov	r2, r5
    8b5a:	4907      	ldr	r1, [pc, #28]	; (8b78 <nrfx_clock_stop+0x38>)
    8b5c:	4807      	ldr	r0, [pc, #28]	; (8b7c <nrfx_clock_stop+0x3c>)
    8b5e:	f006 f928 	bl	edb2 <assert_print>
    8b62:	f240 11ad 	movw	r1, #429	; 0x1ad
    8b66:	4628      	mov	r0, r5
    8b68:	f006 f91c 	bl	eda4 <assert_post_action>
    8b6c:	e7ed      	b.n	8b4a <nrfx_clock_stop+0xa>
    8b6e:	bf00      	nop
    8b70:	2000103c 	.word	0x2000103c
    8b74:	00011e0c 	.word	0x00011e0c
    8b78:	00011e90 	.word	0x00011e90
    8b7c:	00010450 	.word	0x00010450

00008b80 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    8b80:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    8b82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8b86:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    8b8a:	b18b      	cbz	r3, 8bb0 <nrfx_power_clock_irq_handler+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8b8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8b90:	2200      	movs	r2, #0
    8b92:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    8b96:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    8b9a:	2201      	movs	r2, #1
    8b9c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    8ba0:	4b15      	ldr	r3, [pc, #84]	; (8bf8 <nrfx_power_clock_irq_handler+0x78>)
    8ba2:	795b      	ldrb	r3, [r3, #5]
    8ba4:	b923      	cbnz	r3, 8bb0 <nrfx_power_clock_irq_handler+0x30>
        {
            m_clock_cb.hfclk_started = true;
    8ba6:	4b14      	ldr	r3, [pc, #80]	; (8bf8 <nrfx_power_clock_irq_handler+0x78>)
    8ba8:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    8baa:	681b      	ldr	r3, [r3, #0]
    8bac:	2000      	movs	r0, #0
    8bae:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    8bb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8bb4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    8bb8:	b19b      	cbz	r3, 8be2 <nrfx_power_clock_irq_handler+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8bba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8bbe:	2200      	movs	r2, #0
    8bc0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    8bc4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    8bc8:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    8bcc:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    8bd0:	f012 0f03 	tst.w	r2, #3
    8bd4:	d106      	bne.n	8be4 <nrfx_power_clock_irq_handler+0x64>
    p_reg->LFCLKSRC = (uint32_t)(source);
    8bd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8bda:	2201      	movs	r2, #1
    8bdc:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8be0:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    8be2:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
    8be4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8be8:	2202      	movs	r2, #2
    8bea:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    8bee:	4b02      	ldr	r3, [pc, #8]	; (8bf8 <nrfx_power_clock_irq_handler+0x78>)
    8bf0:	681b      	ldr	r3, [r3, #0]
    8bf2:	2001      	movs	r0, #1
    8bf4:	4798      	blx	r3
}
    8bf6:	e7f4      	b.n	8be2 <nrfx_power_clock_irq_handler+0x62>
    8bf8:	2000103c 	.word	0x2000103c

00008bfc <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    8bfc:	3008      	adds	r0, #8
    8bfe:	4b03      	ldr	r3, [pc, #12]	; (8c0c <pin_in_use+0x10>)
    8c00:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    8c04:	f000 0001 	and.w	r0, r0, #1
    8c08:	4770      	bx	lr
    8c0a:	bf00      	nop
    8c0c:	200000a4 	.word	0x200000a4

00008c10 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    8c10:	3008      	adds	r0, #8
    8c12:	4b03      	ldr	r3, [pc, #12]	; (8c20 <pin_in_use_by_te+0x10>)
    8c14:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    8c18:	f3c0 1040 	ubfx	r0, r0, #5, #1
    8c1c:	4770      	bx	lr
    8c1e:	bf00      	nop
    8c20:	200000a4 	.word	0x200000a4

00008c24 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    8c24:	3008      	adds	r0, #8
    8c26:	4b04      	ldr	r3, [pc, #16]	; (8c38 <pin_has_trigger+0x14>)
    8c28:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    8c2c:	f010 001c 	ands.w	r0, r0, #28
    8c30:	bf18      	it	ne
    8c32:	2001      	movne	r0, #1
    8c34:	4770      	bx	lr
    8c36:	bf00      	nop
    8c38:	200000a4 	.word	0x200000a4

00008c3c <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    8c3c:	3008      	adds	r0, #8
    8c3e:	4b03      	ldr	r3, [pc, #12]	; (8c4c <pin_is_output+0x10>)
    8c40:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    8c44:	f3c0 0040 	ubfx	r0, r0, #1, #1
    8c48:	4770      	bx	lr
    8c4a:	bf00      	nop
    8c4c:	200000a4 	.word	0x200000a4

00008c50 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    8c50:	3008      	adds	r0, #8
    8c52:	4b02      	ldr	r3, [pc, #8]	; (8c5c <pin_te_get+0xc>)
    8c54:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    8c58:	0b40      	lsrs	r0, r0, #13
    8c5a:	4770      	bx	lr
    8c5c:	200000a4 	.word	0x200000a4

00008c60 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    8c60:	2200      	movs	r2, #0
    8c62:	e004      	b.n	8c6e <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    8c64:	f04f 33ff 	mov.w	r3, #4294967295
    8c68:	4283      	cmp	r3, r0
    8c6a:	d00f      	beq.n	8c8c <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    8c6c:	3201      	adds	r2, #1
    8c6e:	2a2f      	cmp	r2, #47	; 0x2f
    8c70:	d80a      	bhi.n	8c88 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    8c72:	f102 0308 	add.w	r3, r2, #8
    8c76:	4906      	ldr	r1, [pc, #24]	; (8c90 <handler_in_use+0x30>)
    8c78:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    8c7c:	f413 7f80 	tst.w	r3, #256	; 0x100
    8c80:	d0f0      	beq.n	8c64 <handler_in_use+0x4>
    8c82:	f3c3 2343 	ubfx	r3, r3, #9, #4
    8c86:	e7ef      	b.n	8c68 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    8c88:	2000      	movs	r0, #0
    8c8a:	4770      	bx	lr
            return true;
    8c8c:	2001      	movs	r0, #1
}
    8c8e:	4770      	bx	lr
    8c90:	200000a4 	.word	0x200000a4

00008c94 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    8c94:	2300      	movs	r3, #0
    8c96:	b113      	cbz	r3, 8c9e <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    8c98:	f04f 30ff 	mov.w	r0, #4294967295
}
    8c9c:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    8c9e:	4a07      	ldr	r2, [pc, #28]	; (8cbc <find_handler+0x28>)
    8ca0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    8ca4:	4282      	cmp	r2, r0
    8ca6:	d001      	beq.n	8cac <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    8ca8:	3301      	adds	r3, #1
    8caa:	e7f4      	b.n	8c96 <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    8cac:	4a03      	ldr	r2, [pc, #12]	; (8cbc <find_handler+0x28>)
    8cae:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    8cb2:	6852      	ldr	r2, [r2, #4]
    8cb4:	428a      	cmp	r2, r1
    8cb6:	d1f7      	bne.n	8ca8 <find_handler+0x14>
            return i;
    8cb8:	4618      	mov	r0, r3
    8cba:	4770      	bx	lr
    8cbc:	200000a4 	.word	0x200000a4

00008cc0 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    8cc0:	3008      	adds	r0, #8
    8cc2:	4b06      	ldr	r3, [pc, #24]	; (8cdc <channel_handler_get+0x1c>)
    8cc4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    8cc8:	f410 7f80 	tst.w	r0, #256	; 0x100
    8ccc:	d004      	beq.n	8cd8 <channel_handler_get+0x18>
    8cce:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    8cd2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    8cd6:	4770      	bx	lr
        return NULL;
    8cd8:	2000      	movs	r0, #0
}
    8cda:	4770      	bx	lr
    8cdc:	200000a4 	.word	0x200000a4

00008ce0 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    8ce0:	b570      	push	{r4, r5, r6, lr}
    8ce2:	4604      	mov	r4, r0
    8ce4:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    8ce6:	f7ff ffeb 	bl	8cc0 <channel_handler_get>

    if (handler)
    8cea:	b120      	cbz	r0, 8cf6 <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    8cec:	6806      	ldr	r6, [r0, #0]
    8cee:	6842      	ldr	r2, [r0, #4]
    8cf0:	4629      	mov	r1, r5
    8cf2:	4620      	mov	r0, r4
    8cf4:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    8cf6:	4b04      	ldr	r3, [pc, #16]	; (8d08 <call_handler+0x28>)
    8cf8:	689b      	ldr	r3, [r3, #8]
    8cfa:	b123      	cbz	r3, 8d06 <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    8cfc:	4a02      	ldr	r2, [pc, #8]	; (8d08 <call_handler+0x28>)
    8cfe:	68d2      	ldr	r2, [r2, #12]
    8d00:	4629      	mov	r1, r5
    8d02:	4620      	mov	r0, r4
    8d04:	4798      	blx	r3
    }
}
    8d06:	bd70      	pop	{r4, r5, r6, pc}
    8d08:	200000a4 	.word	0x200000a4

00008d0c <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    8d0c:	f100 0208 	add.w	r2, r0, #8
    8d10:	4b16      	ldr	r3, [pc, #88]	; (8d6c <release_handler+0x60>)
    8d12:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    8d16:	f413 7f80 	tst.w	r3, #256	; 0x100
    8d1a:	d026      	beq.n	8d6a <release_handler+0x5e>
{
    8d1c:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    8d1e:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    8d22:	4610      	mov	r0, r2
    8d24:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    8d28:	4a10      	ldr	r2, [pc, #64]	; (8d6c <release_handler+0x60>)
    8d2a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    8d2e:	4620      	mov	r0, r4
    8d30:	f7ff ff96 	bl	8c60 <handler_in_use>
    8d34:	b100      	cbz	r0, 8d38 <release_handler+0x2c>
}
    8d36:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    8d38:	480c      	ldr	r0, [pc, #48]	; (8d6c <release_handler+0x60>)
    8d3a:	2300      	movs	r3, #0
    8d3c:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    8d40:	4621      	mov	r1, r4
    8d42:	3074      	adds	r0, #116	; 0x74
    8d44:	f7ff fd86 	bl	8854 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    8d48:	4b09      	ldr	r3, [pc, #36]	; (8d70 <release_handler+0x64>)
    8d4a:	4298      	cmp	r0, r3
    8d4c:	d0f3      	beq.n	8d36 <release_handler+0x2a>
    8d4e:	4c09      	ldr	r4, [pc, #36]	; (8d74 <release_handler+0x68>)
    8d50:	f44f 7399 	mov.w	r3, #306	; 0x132
    8d54:	4622      	mov	r2, r4
    8d56:	4908      	ldr	r1, [pc, #32]	; (8d78 <release_handler+0x6c>)
    8d58:	4808      	ldr	r0, [pc, #32]	; (8d7c <release_handler+0x70>)
    8d5a:	f006 f82a 	bl	edb2 <assert_print>
    8d5e:	f44f 7199 	mov.w	r1, #306	; 0x132
    8d62:	4620      	mov	r0, r4
    8d64:	f006 f81e 	bl	eda4 <assert_post_action>
    8d68:	e7e5      	b.n	8d36 <release_handler+0x2a>
    8d6a:	4770      	bx	lr
    8d6c:	200000a4 	.word	0x200000a4
    8d70:	0bad0000 	.word	0x0bad0000
    8d74:	00011eb0 	.word	0x00011eb0
    8d78:	00011478 	.word	0x00011478
    8d7c:	00010450 	.word	0x00010450

00008d80 <pin_handler_trigger_uninit>:
{
    8d80:	b510      	push	{r4, lr}
    8d82:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    8d84:	f7ff ff44 	bl	8c10 <pin_in_use_by_te>
    8d88:	b140      	cbz	r0, 8d9c <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    8d8a:	4620      	mov	r0, r4
    8d8c:	f7ff ff60 	bl	8c50 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    8d90:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    8d94:	4b06      	ldr	r3, [pc, #24]	; (8db0 <pin_handler_trigger_uninit+0x30>)
    8d96:	2200      	movs	r2, #0
    8d98:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    8d9c:	4620      	mov	r0, r4
    8d9e:	f7ff ffb5 	bl	8d0c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    8da2:	3408      	adds	r4, #8
    8da4:	4b03      	ldr	r3, [pc, #12]	; (8db4 <pin_handler_trigger_uninit+0x34>)
    8da6:	2200      	movs	r2, #0
    8da8:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    8dac:	bd10      	pop	{r4, pc}
    8dae:	bf00      	nop
    8db0:	40006000 	.word	0x40006000
    8db4:	200000a4 	.word	0x200000a4

00008db8 <pin_handler_set>:
{
    8db8:	b570      	push	{r4, r5, r6, lr}
    8dba:	b082      	sub	sp, #8
    8dbc:	4606      	mov	r6, r0
    8dbe:	460c      	mov	r4, r1
    8dc0:	4615      	mov	r5, r2
    release_handler(pin);
    8dc2:	f7ff ffa3 	bl	8d0c <release_handler>
    if (!handler)
    8dc6:	b324      	cbz	r4, 8e12 <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    8dc8:	4629      	mov	r1, r5
    8dca:	4620      	mov	r0, r4
    8dcc:	f7ff ff62 	bl	8c94 <find_handler>
    if (handler_id < 0)
    8dd0:	1e03      	subs	r3, r0, #0
    8dd2:	db13      	blt.n	8dfc <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    8dd4:	4a10      	ldr	r2, [pc, #64]	; (8e18 <pin_handler_set+0x60>)
    8dd6:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    8dda:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    8dde:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    8de0:	025b      	lsls	r3, r3, #9
    8de2:	b29b      	uxth	r3, r3
    8de4:	f106 0008 	add.w	r0, r6, #8
    8de8:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
    8dec:	430b      	orrs	r3, r1
    8dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    8df2:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
    8df6:	4809      	ldr	r0, [pc, #36]	; (8e1c <pin_handler_set+0x64>)
}
    8df8:	b002      	add	sp, #8
    8dfa:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    8dfc:	f10d 0107 	add.w	r1, sp, #7
    8e00:	4807      	ldr	r0, [pc, #28]	; (8e20 <pin_handler_set+0x68>)
    8e02:	f7ff fcff 	bl	8804 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    8e06:	4b05      	ldr	r3, [pc, #20]	; (8e1c <pin_handler_set+0x64>)
    8e08:	4298      	cmp	r0, r3
    8e0a:	d1f5      	bne.n	8df8 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    8e0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8e10:	e7e0      	b.n	8dd4 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    8e12:	4802      	ldr	r0, [pc, #8]	; (8e1c <pin_handler_set+0x64>)
    8e14:	e7f0      	b.n	8df8 <pin_handler_set+0x40>
    8e16:	bf00      	nop
    8e18:	200000a4 	.word	0x200000a4
    8e1c:	0bad0000 	.word	0x0bad0000
    8e20:	20000118 	.word	0x20000118

00008e24 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    8e24:	b538      	push	{r3, r4, r5, lr}
    8e26:	4604      	mov	r4, r0
    while (mask)
    8e28:	e018      	b.n	8e5c <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
    8e2a:	fa94 f3a4 	rbit	r3, r4
    8e2e:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    8e32:	2201      	movs	r2, #1
    8e34:	409a      	lsls	r2, r3
    8e36:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    8e3a:	4a0a      	ldr	r2, [pc, #40]	; (8e64 <gpiote_evt_handle+0x40>)
    8e3c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    8e40:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    8e44:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    8e48:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    8e4c:	f3c0 4001 	ubfx	r0, r0, #16, #2
    8e50:	f006 fe7b 	bl	fb4a <gpiote_polarity_to_trigger>
    8e54:	4601      	mov	r1, r0
    8e56:	4628      	mov	r0, r5
    8e58:	f7ff ff42 	bl	8ce0 <call_handler>
    while (mask)
    8e5c:	2c00      	cmp	r4, #0
    8e5e:	d1e4      	bne.n	8e2a <gpiote_evt_handle+0x6>
    }
}
    8e60:	bd38      	pop	{r3, r4, r5, pc}
    8e62:	bf00      	nop
    8e64:	40006000 	.word	0x40006000

00008e68 <latch_pending_read_and_check>:
{
    8e68:	b082      	sub	sp, #8
    8e6a:	4684      	mov	ip, r0
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    8e6c:	4b11      	ldr	r3, [pc, #68]	; (8eb4 <latch_pending_read_and_check+0x4c>)
    8e6e:	e893 0003 	ldmia.w	r3, {r0, r1}
    8e72:	ab02      	add	r3, sp, #8
    8e74:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    8e78:	4660      	mov	r0, ip
    8e7a:	2300      	movs	r3, #0
    8e7c:	e00b      	b.n	8e96 <latch_pending_read_and_check+0x2e>
        *p_masks = gpio_regs[i]->LATCH;
    8e7e:	aa02      	add	r2, sp, #8
    8e80:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    8e84:	f852 2c08 	ldr.w	r2, [r2, #-8]
    8e88:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    8e8c:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    8e90:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    8e94:	3301      	adds	r3, #1
    8e96:	2b01      	cmp	r3, #1
    8e98:	d9f1      	bls.n	8e7e <latch_pending_read_and_check+0x16>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    8e9a:	2300      	movs	r3, #0
    8e9c:	2b01      	cmp	r3, #1
    8e9e:	d804      	bhi.n	8eaa <latch_pending_read_and_check+0x42>
        if (latch[port_idx])
    8ea0:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
    8ea4:	b922      	cbnz	r2, 8eb0 <latch_pending_read_and_check+0x48>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    8ea6:	3301      	adds	r3, #1
    8ea8:	e7f8      	b.n	8e9c <latch_pending_read_and_check+0x34>
    return false;
    8eaa:	2000      	movs	r0, #0
}
    8eac:	b002      	add	sp, #8
    8eae:	4770      	bx	lr
            return true;
    8eb0:	2001      	movs	r0, #1
    8eb2:	e7fb      	b.n	8eac <latch_pending_read_and_check+0x44>
    8eb4:	000101e0 	.word	0x000101e0

00008eb8 <next_sense_cond_call_handler>:
{
    8eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8ebc:	4604      	mov	r4, r0
    8ebe:	460d      	mov	r5, r1
    8ec0:	4616      	mov	r6, r2
    if (is_level(trigger))
    8ec2:	4608      	mov	r0, r1
    8ec4:	f006 fe43 	bl	fb4e <is_level>
    8ec8:	bb60      	cbnz	r0, 8f24 <next_sense_cond_call_handler+0x6c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    8eca:	2e02      	cmp	r6, #2
    8ecc:	f000 80f5 	beq.w	90ba <next_sense_cond_call_handler+0x202>
    8ed0:	f04f 0802 	mov.w	r8, #2
    switch (port)
    8ed4:	0963      	lsrs	r3, r4, #5
    8ed6:	f000 80f3 	beq.w	90c0 <next_sense_cond_call_handler+0x208>
    8eda:	2b01      	cmp	r3, #1
    8edc:	f040 80f3 	bne.w	90c6 <next_sense_cond_call_handler+0x20e>
            mask = P1_FEATURE_PINS_PRESENT;
    8ee0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    8ee4:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    8ee8:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8eea:	f013 0f01 	tst.w	r3, #1
    8eee:	f000 80ec 	beq.w	90ca <next_sense_cond_call_handler+0x212>
    *p_pin = pin_number & 0x1F;
    8ef2:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8ef6:	0963      	lsrs	r3, r4, #5
    8ef8:	f000 80f5 	beq.w	90e6 <next_sense_cond_call_handler+0x22e>
    8efc:	2b01      	cmp	r3, #1
    8efe:	f000 80f5 	beq.w	90ec <next_sense_cond_call_handler+0x234>
            NRFX_ASSERT(0);
    8f02:	f8df 9224 	ldr.w	r9, [pc, #548]	; 9128 <next_sense_cond_call_handler+0x270>
    8f06:	f44f 7313 	mov.w	r3, #588	; 0x24c
    8f0a:	464a      	mov	r2, r9
    8f0c:	4987      	ldr	r1, [pc, #540]	; (912c <next_sense_cond_call_handler+0x274>)
    8f0e:	4888      	ldr	r0, [pc, #544]	; (9130 <next_sense_cond_call_handler+0x278>)
    8f10:	f005 ff4f 	bl	edb2 <assert_print>
    8f14:	f44f 7113 	mov.w	r1, #588	; 0x24c
    8f18:	4648      	mov	r0, r9
    8f1a:	f005 ff43 	bl	eda4 <assert_post_action>
        case 0: return NRF_P0;
    8f1e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    8f22:	e0e4      	b.n	90ee <next_sense_cond_call_handler+0x236>
        call_handler(pin, trigger);
    8f24:	4629      	mov	r1, r5
    8f26:	4620      	mov	r0, r4
    8f28:	f7ff feda 	bl	8ce0 <call_handler>
    switch (port)
    8f2c:	0963      	lsrs	r3, r4, #5
    8f2e:	d01f      	beq.n	8f70 <next_sense_cond_call_handler+0xb8>
    8f30:	2b01      	cmp	r3, #1
    8f32:	d120      	bne.n	8f76 <next_sense_cond_call_handler+0xbe>
            mask = P1_FEATURE_PINS_PRESENT;
    8f34:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    8f38:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    8f3c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8f3e:	f013 0f01 	tst.w	r3, #1
    8f42:	d01a      	beq.n	8f7a <next_sense_cond_call_handler+0xc2>
    *p_pin = pin_number & 0x1F;
    8f44:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8f48:	0963      	lsrs	r3, r4, #5
    8f4a:	d024      	beq.n	8f96 <next_sense_cond_call_handler+0xde>
    8f4c:	2b01      	cmp	r3, #1
    8f4e:	d025      	beq.n	8f9c <next_sense_cond_call_handler+0xe4>
            NRFX_ASSERT(0);
    8f50:	4f75      	ldr	r7, [pc, #468]	; (9128 <next_sense_cond_call_handler+0x270>)
    8f52:	f44f 7313 	mov.w	r3, #588	; 0x24c
    8f56:	463a      	mov	r2, r7
    8f58:	4974      	ldr	r1, [pc, #464]	; (912c <next_sense_cond_call_handler+0x274>)
    8f5a:	4875      	ldr	r0, [pc, #468]	; (9130 <next_sense_cond_call_handler+0x278>)
    8f5c:	f005 ff29 	bl	edb2 <assert_print>
    8f60:	f44f 7113 	mov.w	r1, #588	; 0x24c
    8f64:	4638      	mov	r0, r7
    8f66:	f005 ff1d 	bl	eda4 <assert_post_action>
        case 0: return NRF_P0;
    8f6a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    8f6e:	e016      	b.n	8f9e <next_sense_cond_call_handler+0xe6>
            mask = P0_FEATURE_PINS_PRESENT;
    8f70:	f04f 33ff 	mov.w	r3, #4294967295
    8f74:	e7e0      	b.n	8f38 <next_sense_cond_call_handler+0x80>
    switch (port)
    8f76:	2300      	movs	r3, #0
    8f78:	e7de      	b.n	8f38 <next_sense_cond_call_handler+0x80>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8f7a:	4d6b      	ldr	r5, [pc, #428]	; (9128 <next_sense_cond_call_handler+0x270>)
    8f7c:	f240 2347 	movw	r3, #583	; 0x247
    8f80:	462a      	mov	r2, r5
    8f82:	496c      	ldr	r1, [pc, #432]	; (9134 <next_sense_cond_call_handler+0x27c>)
    8f84:	486a      	ldr	r0, [pc, #424]	; (9130 <next_sense_cond_call_handler+0x278>)
    8f86:	f005 ff14 	bl	edb2 <assert_print>
    8f8a:	f240 2147 	movw	r1, #583	; 0x247
    8f8e:	4628      	mov	r0, r5
    8f90:	f005 ff08 	bl	eda4 <assert_post_action>
    8f94:	e7d6      	b.n	8f44 <next_sense_cond_call_handler+0x8c>
        case 0: return NRF_P0;
    8f96:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    8f9a:	e000      	b.n	8f9e <next_sense_cond_call_handler+0xe6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8f9c:	4b66      	ldr	r3, [pc, #408]	; (9138 <next_sense_cond_call_handler+0x280>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    8f9e:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    8fa2:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    8fa6:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
    8faa:	429e      	cmp	r6, r3
    8fac:	f040 80af 	bne.w	910e <next_sense_cond_call_handler+0x256>
    switch (port)
    8fb0:	0963      	lsrs	r3, r4, #5
    8fb2:	d01f      	beq.n	8ff4 <next_sense_cond_call_handler+0x13c>
    8fb4:	2b01      	cmp	r3, #1
    8fb6:	d120      	bne.n	8ffa <next_sense_cond_call_handler+0x142>
            mask = P1_FEATURE_PINS_PRESENT;
    8fb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    8fbc:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    8fc0:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8fc2:	f013 0f01 	tst.w	r3, #1
    8fc6:	d01a      	beq.n	8ffe <next_sense_cond_call_handler+0x146>
    *p_pin = pin_number & 0x1F;
    8fc8:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8fcc:	0963      	lsrs	r3, r4, #5
    8fce:	d024      	beq.n	901a <next_sense_cond_call_handler+0x162>
    8fd0:	2b01      	cmp	r3, #1
    8fd2:	d025      	beq.n	9020 <next_sense_cond_call_handler+0x168>
            NRFX_ASSERT(0);
    8fd4:	4f54      	ldr	r7, [pc, #336]	; (9128 <next_sense_cond_call_handler+0x270>)
    8fd6:	f44f 7313 	mov.w	r3, #588	; 0x24c
    8fda:	463a      	mov	r2, r7
    8fdc:	4953      	ldr	r1, [pc, #332]	; (912c <next_sense_cond_call_handler+0x274>)
    8fde:	4854      	ldr	r0, [pc, #336]	; (9130 <next_sense_cond_call_handler+0x278>)
    8fe0:	f005 fee7 	bl	edb2 <assert_print>
    8fe4:	f44f 7113 	mov.w	r1, #588	; 0x24c
    8fe8:	4638      	mov	r0, r7
    8fea:	f005 fedb 	bl	eda4 <assert_post_action>
        case 0: return NRF_P0;
    8fee:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    8ff2:	e016      	b.n	9022 <next_sense_cond_call_handler+0x16a>
            mask = P0_FEATURE_PINS_PRESENT;
    8ff4:	f04f 33ff 	mov.w	r3, #4294967295
    8ff8:	e7e0      	b.n	8fbc <next_sense_cond_call_handler+0x104>
    switch (port)
    8ffa:	2300      	movs	r3, #0
    8ffc:	e7de      	b.n	8fbc <next_sense_cond_call_handler+0x104>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8ffe:	4d4a      	ldr	r5, [pc, #296]	; (9128 <next_sense_cond_call_handler+0x270>)
    9000:	f240 2347 	movw	r3, #583	; 0x247
    9004:	462a      	mov	r2, r5
    9006:	494b      	ldr	r1, [pc, #300]	; (9134 <next_sense_cond_call_handler+0x27c>)
    9008:	4849      	ldr	r0, [pc, #292]	; (9130 <next_sense_cond_call_handler+0x278>)
    900a:	f005 fed2 	bl	edb2 <assert_print>
    900e:	f240 2147 	movw	r1, #583	; 0x247
    9012:	4628      	mov	r0, r5
    9014:	f005 fec6 	bl	eda4 <assert_post_action>
    9018:	e7d6      	b.n	8fc8 <next_sense_cond_call_handler+0x110>
        case 0: return NRF_P0;
    901a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    901e:	e000      	b.n	9022 <next_sense_cond_call_handler+0x16a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9020:	4945      	ldr	r1, [pc, #276]	; (9138 <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    9022:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    9026:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    902a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    902e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    switch (port)
    9032:	0963      	lsrs	r3, r4, #5
    9034:	d01f      	beq.n	9076 <next_sense_cond_call_handler+0x1be>
    9036:	2b01      	cmp	r3, #1
    9038:	d120      	bne.n	907c <next_sense_cond_call_handler+0x1c4>
            mask = P1_FEATURE_PINS_PRESENT;
    903a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    903e:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    9042:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9044:	f013 0f01 	tst.w	r3, #1
    9048:	d01a      	beq.n	9080 <next_sense_cond_call_handler+0x1c8>
    *p_pin = pin_number & 0x1F;
    904a:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    904e:	0964      	lsrs	r4, r4, #5
    9050:	d024      	beq.n	909c <next_sense_cond_call_handler+0x1e4>
    9052:	2c01      	cmp	r4, #1
    9054:	d025      	beq.n	90a2 <next_sense_cond_call_handler+0x1ea>
            NRFX_ASSERT(0);
    9056:	4c34      	ldr	r4, [pc, #208]	; (9128 <next_sense_cond_call_handler+0x270>)
    9058:	f44f 7313 	mov.w	r3, #588	; 0x24c
    905c:	4622      	mov	r2, r4
    905e:	4933      	ldr	r1, [pc, #204]	; (912c <next_sense_cond_call_handler+0x274>)
    9060:	4833      	ldr	r0, [pc, #204]	; (9130 <next_sense_cond_call_handler+0x278>)
    9062:	f005 fea6 	bl	edb2 <assert_print>
    9066:	f44f 7113 	mov.w	r1, #588	; 0x24c
    906a:	4620      	mov	r0, r4
    906c:	f005 fe9a 	bl	eda4 <assert_post_action>
        case 0: return NRF_P0;
    9070:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    9074:	e016      	b.n	90a4 <next_sense_cond_call_handler+0x1ec>
            mask = P0_FEATURE_PINS_PRESENT;
    9076:	f04f 33ff 	mov.w	r3, #4294967295
    907a:	e7e0      	b.n	903e <next_sense_cond_call_handler+0x186>
    switch (port)
    907c:	2300      	movs	r3, #0
    907e:	e7de      	b.n	903e <next_sense_cond_call_handler+0x186>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9080:	4d29      	ldr	r5, [pc, #164]	; (9128 <next_sense_cond_call_handler+0x270>)
    9082:	f240 2347 	movw	r3, #583	; 0x247
    9086:	462a      	mov	r2, r5
    9088:	492a      	ldr	r1, [pc, #168]	; (9134 <next_sense_cond_call_handler+0x27c>)
    908a:	4829      	ldr	r0, [pc, #164]	; (9130 <next_sense_cond_call_handler+0x278>)
    908c:	f005 fe91 	bl	edb2 <assert_print>
    9090:	f240 2147 	movw	r1, #583	; 0x247
    9094:	4628      	mov	r0, r5
    9096:	f005 fe85 	bl	eda4 <assert_post_action>
    909a:	e7d6      	b.n	904a <next_sense_cond_call_handler+0x192>
        case 0: return NRF_P0;
    909c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    90a0:	e000      	b.n	90a4 <next_sense_cond_call_handler+0x1ec>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    90a2:	4925      	ldr	r1, [pc, #148]	; (9138 <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    90a4:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    90a8:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    90ac:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    90b0:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    90b4:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
    90b8:	e029      	b.n	910e <next_sense_cond_call_handler+0x256>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    90ba:	f04f 0803 	mov.w	r8, #3
    90be:	e709      	b.n	8ed4 <next_sense_cond_call_handler+0x1c>
            mask = P0_FEATURE_PINS_PRESENT;
    90c0:	f04f 33ff 	mov.w	r3, #4294967295
    90c4:	e70e      	b.n	8ee4 <next_sense_cond_call_handler+0x2c>
    switch (port)
    90c6:	2300      	movs	r3, #0
    90c8:	e70c      	b.n	8ee4 <next_sense_cond_call_handler+0x2c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    90ca:	4f17      	ldr	r7, [pc, #92]	; (9128 <next_sense_cond_call_handler+0x270>)
    90cc:	f240 2347 	movw	r3, #583	; 0x247
    90d0:	463a      	mov	r2, r7
    90d2:	4918      	ldr	r1, [pc, #96]	; (9134 <next_sense_cond_call_handler+0x27c>)
    90d4:	4816      	ldr	r0, [pc, #88]	; (9130 <next_sense_cond_call_handler+0x278>)
    90d6:	f005 fe6c 	bl	edb2 <assert_print>
    90da:	f240 2147 	movw	r1, #583	; 0x247
    90de:	4638      	mov	r0, r7
    90e0:	f005 fe60 	bl	eda4 <assert_post_action>
    90e4:	e705      	b.n	8ef2 <next_sense_cond_call_handler+0x3a>
        case 0: return NRF_P0;
    90e6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    90ea:	e000      	b.n	90ee <next_sense_cond_call_handler+0x236>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    90ec:	4912      	ldr	r1, [pc, #72]	; (9138 <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    90ee:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
    90f2:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    90f6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    90fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    90fe:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    9102:	2d03      	cmp	r5, #3
    9104:	d007      	beq.n	9116 <next_sense_cond_call_handler+0x25e>
    9106:	2e02      	cmp	r6, #2
    9108:	d003      	beq.n	9112 <next_sense_cond_call_handler+0x25a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    910a:	2e03      	cmp	r6, #3
    910c:	d008      	beq.n	9120 <next_sense_cond_call_handler+0x268>
}
    910e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    9112:	2d01      	cmp	r5, #1
    9114:	d1f9      	bne.n	910a <next_sense_cond_call_handler+0x252>
            call_handler(pin, trigger);
    9116:	4629      	mov	r1, r5
    9118:	4620      	mov	r0, r4
    911a:	f7ff fde1 	bl	8ce0 <call_handler>
}
    911e:	e7f6      	b.n	910e <next_sense_cond_call_handler+0x256>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    9120:	2d02      	cmp	r5, #2
    9122:	d1f4      	bne.n	910e <next_sense_cond_call_handler+0x256>
    9124:	e7f7      	b.n	9116 <next_sense_cond_call_handler+0x25e>
    9126:	bf00      	nop
    9128:	000113f4 	.word	0x000113f4
    912c:	00011934 	.word	0x00011934
    9130:	00010450 	.word	0x00010450
    9134:	00011428 	.word	0x00011428
    9138:	50000300 	.word	0x50000300

0000913c <port_event_handle>:
{
    913c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9140:	b084      	sub	sp, #16
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    9142:	4a65      	ldr	r2, [pc, #404]	; (92d8 <port_event_handle+0x19c>)
    9144:	466b      	mov	r3, sp
    9146:	e892 0003 	ldmia.w	r2, {r0, r1}
    914a:	e883 0003 	stmia.w	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    914e:	2300      	movs	r3, #0
    9150:	a802      	add	r0, sp, #8
    9152:	e00b      	b.n	916c <port_event_handle+0x30>
        *p_masks = gpio_regs[i]->LATCH;
    9154:	aa04      	add	r2, sp, #16
    9156:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    915a:	f852 2c10 	ldr.w	r2, [r2, #-16]
    915e:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    9162:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    9166:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    916a:	3301      	adds	r3, #1
    916c:	2b01      	cmp	r3, #1
    916e:	d9f1      	bls.n	9154 <port_event_handle+0x18>
    9170:	e0ad      	b.n	92ce <port_event_handle+0x192>
            mask = P0_FEATURE_PINS_PRESENT;
    9172:	f04f 33ff 	mov.w	r3, #4294967295
    9176:	e07f      	b.n	9278 <port_event_handle+0x13c>
    switch (port)
    9178:	2300      	movs	r3, #0
    917a:	e07d      	b.n	9278 <port_event_handle+0x13c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    917c:	4f57      	ldr	r7, [pc, #348]	; (92dc <port_event_handle+0x1a0>)
    917e:	f240 2347 	movw	r3, #583	; 0x247
    9182:	463a      	mov	r2, r7
    9184:	4956      	ldr	r1, [pc, #344]	; (92e0 <port_event_handle+0x1a4>)
    9186:	4857      	ldr	r0, [pc, #348]	; (92e4 <port_event_handle+0x1a8>)
    9188:	f005 fe13 	bl	edb2 <assert_print>
    918c:	f240 2147 	movw	r1, #583	; 0x247
    9190:	4638      	mov	r0, r7
    9192:	f005 fe07 	bl	eda4 <assert_post_action>
    9196:	e076      	b.n	9286 <port_event_handle+0x14a>
        case 0: return NRF_P0;
    9198:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    919c:	e000      	b.n	91a0 <port_event_handle+0x64>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    919e:	4b52      	ldr	r3, [pc, #328]	; (92e8 <port_event_handle+0x1ac>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    91a0:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    91a4:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
                next_sense_cond_call_handler(pin, trigger, sense);
    91a8:	f3c2 4201 	ubfx	r2, r2, #16, #2
    91ac:	4631      	mov	r1, r6
    91ae:	4620      	mov	r0, r4
    91b0:	f7ff fe82 	bl	8eb8 <next_sense_cond_call_handler>
    switch (port)
    91b4:	0963      	lsrs	r3, r4, #5
    91b6:	d01f      	beq.n	91f8 <port_event_handle+0xbc>
    91b8:	2b01      	cmp	r3, #1
    91ba:	d120      	bne.n	91fe <port_event_handle+0xc2>
            mask = P1_FEATURE_PINS_PRESENT;
    91bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    91c0:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    91c4:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    91c6:	f013 0f01 	tst.w	r3, #1
    91ca:	d01a      	beq.n	9202 <port_event_handle+0xc6>
    *p_pin = pin_number & 0x1F;
    91cc:	f004 061f 	and.w	r6, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    91d0:	0964      	lsrs	r4, r4, #5
    91d2:	d024      	beq.n	921e <port_event_handle+0xe2>
    91d4:	2c01      	cmp	r4, #1
    91d6:	d025      	beq.n	9224 <port_event_handle+0xe8>
            NRFX_ASSERT(0);
    91d8:	4c40      	ldr	r4, [pc, #256]	; (92dc <port_event_handle+0x1a0>)
    91da:	f44f 7313 	mov.w	r3, #588	; 0x24c
    91de:	4622      	mov	r2, r4
    91e0:	4942      	ldr	r1, [pc, #264]	; (92ec <port_event_handle+0x1b0>)
    91e2:	4840      	ldr	r0, [pc, #256]	; (92e4 <port_event_handle+0x1a8>)
    91e4:	f005 fde5 	bl	edb2 <assert_print>
    91e8:	f44f 7113 	mov.w	r1, #588	; 0x24c
    91ec:	4620      	mov	r0, r4
    91ee:	f005 fdd9 	bl	eda4 <assert_post_action>
        case 0: return NRF_P0;
    91f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    91f6:	e016      	b.n	9226 <port_event_handle+0xea>
            mask = P0_FEATURE_PINS_PRESENT;
    91f8:	f04f 33ff 	mov.w	r3, #4294967295
    91fc:	e7e0      	b.n	91c0 <port_event_handle+0x84>
    switch (port)
    91fe:	2300      	movs	r3, #0
    9200:	e7de      	b.n	91c0 <port_event_handle+0x84>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9202:	4e36      	ldr	r6, [pc, #216]	; (92dc <port_event_handle+0x1a0>)
    9204:	f240 2347 	movw	r3, #583	; 0x247
    9208:	4632      	mov	r2, r6
    920a:	4935      	ldr	r1, [pc, #212]	; (92e0 <port_event_handle+0x1a4>)
    920c:	4835      	ldr	r0, [pc, #212]	; (92e4 <port_event_handle+0x1a8>)
    920e:	f005 fdd0 	bl	edb2 <assert_print>
    9212:	f240 2147 	movw	r1, #583	; 0x247
    9216:	4630      	mov	r0, r6
    9218:	f005 fdc4 	bl	eda4 <assert_post_action>
    921c:	e7d6      	b.n	91cc <port_event_handle+0x90>
        case 0: return NRF_P0;
    921e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    9222:	e000      	b.n	9226 <port_event_handle+0xea>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9224:	4a30      	ldr	r2, [pc, #192]	; (92e8 <port_event_handle+0x1ac>)
    reg->LATCH = (1 << pin_number);
    9226:	2301      	movs	r3, #1
    9228:	40b3      	lsls	r3, r6
    922a:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
            while (latch[i])
    922e:	ab04      	add	r3, sp, #16
    9230:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    9234:	f853 4c08 	ldr.w	r4, [r3, #-8]
    9238:	2c00      	cmp	r4, #0
    923a:	d03b      	beq.n	92b4 <port_event_handle+0x178>
                uint32_t pin = NRF_CTZ(latch[i]);
    923c:	fa94 f4a4 	rbit	r4, r4
    9240:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    9244:	eb04 1445 	add.w	r4, r4, r5, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    9248:	f104 0208 	add.w	r2, r4, #8
    924c:	4b28      	ldr	r3, [pc, #160]	; (92f0 <port_event_handle+0x1b4>)
    924e:	f833 6012 	ldrh.w	r6, [r3, r2, lsl #1]
    9252:	f3c6 0682 	ubfx	r6, r6, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    9256:	08e1      	lsrs	r1, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
    9258:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    925c:	a802      	add	r0, sp, #8
    925e:	2301      	movs	r3, #1
    9260:	fa03 f202 	lsl.w	r2, r3, r2
    9264:	5c43      	ldrb	r3, [r0, r1]
    9266:	ea23 0302 	bic.w	r3, r3, r2
    926a:	5443      	strb	r3, [r0, r1]
    switch (port)
    926c:	0963      	lsrs	r3, r4, #5
    926e:	d080      	beq.n	9172 <port_event_handle+0x36>
    9270:	2b01      	cmp	r3, #1
    9272:	d181      	bne.n	9178 <port_event_handle+0x3c>
            mask = P1_FEATURE_PINS_PRESENT;
    9274:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    9278:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    927c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    927e:	f013 0f01 	tst.w	r3, #1
    9282:	f43f af7b 	beq.w	917c <port_event_handle+0x40>
    *p_pin = pin_number & 0x1F;
    9286:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    928a:	0963      	lsrs	r3, r4, #5
    928c:	d084      	beq.n	9198 <port_event_handle+0x5c>
    928e:	2b01      	cmp	r3, #1
    9290:	d085      	beq.n	919e <port_event_handle+0x62>
            NRFX_ASSERT(0);
    9292:	f8df 8048 	ldr.w	r8, [pc, #72]	; 92dc <port_event_handle+0x1a0>
    9296:	f44f 7313 	mov.w	r3, #588	; 0x24c
    929a:	4642      	mov	r2, r8
    929c:	4913      	ldr	r1, [pc, #76]	; (92ec <port_event_handle+0x1b0>)
    929e:	4811      	ldr	r0, [pc, #68]	; (92e4 <port_event_handle+0x1a8>)
    92a0:	f005 fd87 	bl	edb2 <assert_print>
    92a4:	f44f 7113 	mov.w	r1, #588	; 0x24c
    92a8:	4640      	mov	r0, r8
    92aa:	f005 fd7b 	bl	eda4 <assert_post_action>
        case 0: return NRF_P0;
    92ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    92b2:	e775      	b.n	91a0 <port_event_handle+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    92b4:	3501      	adds	r5, #1
    92b6:	2d01      	cmp	r5, #1
    92b8:	d9b9      	bls.n	922e <port_event_handle+0xf2>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    92ba:	4b0e      	ldr	r3, [pc, #56]	; (92f4 <port_event_handle+0x1b8>)
    92bc:	2200      	movs	r2, #0
    92be:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    92c2:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    } while (latch_pending_read_and_check(latch));
    92c6:	a802      	add	r0, sp, #8
    92c8:	f7ff fdce 	bl	8e68 <latch_pending_read_and_check>
    92cc:	b108      	cbz	r0, 92d2 <port_event_handle+0x196>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    92ce:	2500      	movs	r5, #0
    92d0:	e7f1      	b.n	92b6 <port_event_handle+0x17a>
}
    92d2:	b004      	add	sp, #16
    92d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    92d8:	000101e0 	.word	0x000101e0
    92dc:	000113f4 	.word	0x000113f4
    92e0:	00011428 	.word	0x00011428
    92e4:	00010450 	.word	0x00010450
    92e8:	50000300 	.word	0x50000300
    92ec:	00011934 	.word	0x00011934
    92f0:	200000a4 	.word	0x200000a4
    92f4:	40006000 	.word	0x40006000

000092f8 <nrfx_gpiote_input_configure>:
{
    92f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    92fc:	4604      	mov	r4, r0
    92fe:	4615      	mov	r5, r2
    9300:	461e      	mov	r6, r3
    if (p_input_config)
    9302:	2900      	cmp	r1, #0
    9304:	d064      	beq.n	93d0 <nrfx_gpiote_input_configure+0xd8>
    9306:	4688      	mov	r8, r1
        if (pin_is_task_output(pin))
    9308:	f006 fc09 	bl	fb1e <pin_is_task_output>
    930c:	2800      	cmp	r0, #0
    930e:	f040 80cd 	bne.w	94ac <nrfx_gpiote_input_configure+0x1b4>
    switch (port)
    9312:	0963      	lsrs	r3, r4, #5
    9314:	d020      	beq.n	9358 <nrfx_gpiote_input_configure+0x60>
    9316:	2b01      	cmp	r3, #1
    9318:	d121      	bne.n	935e <nrfx_gpiote_input_configure+0x66>
            mask = P1_FEATURE_PINS_PRESENT;
    931a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    931e:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    9322:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9324:	f013 0f01 	tst.w	r3, #1
    9328:	d01b      	beq.n	9362 <nrfx_gpiote_input_configure+0x6a>
    *p_pin = pin_number & 0x1F;
    932a:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    932e:	0963      	lsrs	r3, r4, #5
    9330:	d025      	beq.n	937e <nrfx_gpiote_input_configure+0x86>
    9332:	2b01      	cmp	r3, #1
    9334:	d026      	beq.n	9384 <nrfx_gpiote_input_configure+0x8c>
            NRFX_ASSERT(0);
    9336:	f8df 9184 	ldr.w	r9, [pc, #388]	; 94bc <nrfx_gpiote_input_configure+0x1c4>
    933a:	f44f 7313 	mov.w	r3, #588	; 0x24c
    933e:	464a      	mov	r2, r9
    9340:	495f      	ldr	r1, [pc, #380]	; (94c0 <nrfx_gpiote_input_configure+0x1c8>)
    9342:	4860      	ldr	r0, [pc, #384]	; (94c4 <nrfx_gpiote_input_configure+0x1cc>)
    9344:	f005 fd35 	bl	edb2 <assert_print>
    9348:	f44f 7113 	mov.w	r1, #588	; 0x24c
    934c:	4648      	mov	r0, r9
    934e:	f005 fd29 	bl	eda4 <assert_post_action>
        case 0: return NRF_P0;
    9352:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    9356:	e016      	b.n	9386 <nrfx_gpiote_input_configure+0x8e>
            mask = P0_FEATURE_PINS_PRESENT;
    9358:	f04f 33ff 	mov.w	r3, #4294967295
    935c:	e7df      	b.n	931e <nrfx_gpiote_input_configure+0x26>
    switch (port)
    935e:	2300      	movs	r3, #0
    9360:	e7dd      	b.n	931e <nrfx_gpiote_input_configure+0x26>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9362:	4f56      	ldr	r7, [pc, #344]	; (94bc <nrfx_gpiote_input_configure+0x1c4>)
    9364:	f240 2347 	movw	r3, #583	; 0x247
    9368:	463a      	mov	r2, r7
    936a:	4957      	ldr	r1, [pc, #348]	; (94c8 <nrfx_gpiote_input_configure+0x1d0>)
    936c:	4855      	ldr	r0, [pc, #340]	; (94c4 <nrfx_gpiote_input_configure+0x1cc>)
    936e:	f005 fd20 	bl	edb2 <assert_print>
    9372:	f240 2147 	movw	r1, #583	; 0x247
    9376:	4638      	mov	r0, r7
    9378:	f005 fd14 	bl	eda4 <assert_post_action>
    937c:	e7d5      	b.n	932a <nrfx_gpiote_input_configure+0x32>
        case 0: return NRF_P0;
    937e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    9382:	e000      	b.n	9386 <nrfx_gpiote_input_configure+0x8e>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9384:	4951      	ldr	r1, [pc, #324]	; (94cc <nrfx_gpiote_input_configure+0x1d4>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    9386:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
    938a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    938e:	f1b8 0f00 	cmp.w	r8, #0
    9392:	d03f      	beq.n	9414 <nrfx_gpiote_input_configure+0x11c>
    9394:	220c      	movs	r2, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    9396:	f042 0203 	orr.w	r2, r2, #3
    cnf &= ~to_update;
    939a:	ea23 0302 	bic.w	r3, r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    939e:	f1b8 0f00 	cmp.w	r8, #0
    93a2:	d039      	beq.n	9418 <nrfx_gpiote_input_configure+0x120>
    93a4:	f898 2000 	ldrb.w	r2, [r8]
    93a8:	0092      	lsls	r2, r2, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    93aa:	4313      	orrs	r3, r2
    reg->PIN_CNF[pin_number] = cnf;
    93ac:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    93b0:	f841 3027 	str.w	r3, [r1, r7, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    93b4:	4a46      	ldr	r2, [pc, #280]	; (94d0 <nrfx_gpiote_input_configure+0x1d8>)
    93b6:	f104 0108 	add.w	r1, r4, #8
    93ba:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    93be:	f023 0302 	bic.w	r3, r3, #2
    93c2:	b29b      	uxth	r3, r3
    93c4:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    93c8:	f043 0301 	orr.w	r3, r3, #1
    93cc:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    93d0:	b1bd      	cbz	r5, 9402 <nrfx_gpiote_input_configure+0x10a>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    93d2:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    93d4:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
    93d8:	4620      	mov	r0, r4
    93da:	f7ff fc2f 	bl	8c3c <pin_is_output>
    93de:	b1e8      	cbz	r0, 941c <nrfx_gpiote_input_configure+0x124>
            if (use_evt)
    93e0:	f1b8 0f00 	cmp.w	r8, #0
    93e4:	d164      	bne.n	94b0 <nrfx_gpiote_input_configure+0x1b8>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    93e6:	4a3a      	ldr	r2, [pc, #232]	; (94d0 <nrfx_gpiote_input_configure+0x1d8>)
    93e8:	f104 0108 	add.w	r1, r4, #8
    93ec:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    93f0:	f023 031c 	bic.w	r3, r3, #28
    93f4:	b29b      	uxth	r3, r3
    93f6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    93fa:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    93fe:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    9402:	2e00      	cmp	r6, #0
    9404:	d058      	beq.n	94b8 <nrfx_gpiote_input_configure+0x1c0>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    9406:	6872      	ldr	r2, [r6, #4]
    9408:	6831      	ldr	r1, [r6, #0]
    940a:	4620      	mov	r0, r4
    940c:	f7ff fcd4 	bl	8db8 <pin_handler_set>
}
    9410:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    9414:	2200      	movs	r2, #0
    9416:	e7be      	b.n	9396 <nrfx_gpiote_input_configure+0x9e>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    9418:	2200      	movs	r2, #0
    941a:	e7c6      	b.n	93aa <nrfx_gpiote_input_configure+0xb2>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    941c:	4a2c      	ldr	r2, [pc, #176]	; (94d0 <nrfx_gpiote_input_configure+0x1d8>)
    941e:	f104 0108 	add.w	r1, r4, #8
    9422:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    9426:	f023 0320 	bic.w	r3, r3, #32
    942a:	04db      	lsls	r3, r3, #19
    942c:	0cdb      	lsrs	r3, r3, #19
    942e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
    9432:	f1b8 0f00 	cmp.w	r8, #0
    9436:	d0d6      	beq.n	93e6 <nrfx_gpiote_input_configure+0xee>
                if (!edge)
    9438:	2f03      	cmp	r7, #3
    943a:	d83b      	bhi.n	94b4 <nrfx_gpiote_input_configure+0x1bc>
                uint8_t ch = *p_trigger_config->p_in_channel;
    943c:	686b      	ldr	r3, [r5, #4]
    943e:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    9440:	b937      	cbnz	r7, 9450 <nrfx_gpiote_input_configure+0x158>
    p_reg->CONFIG[idx] = 0;
    9442:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    9446:	4b23      	ldr	r3, [pc, #140]	; (94d4 <nrfx_gpiote_input_configure+0x1dc>)
    9448:	2200      	movs	r2, #0
    944a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    944e:	e7ca      	b.n	93e6 <nrfx_gpiote_input_configure+0xee>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    9450:	4638      	mov	r0, r7
    9452:	f006 fb7b 	bl	fb4c <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    9456:	4b1f      	ldr	r3, [pc, #124]	; (94d4 <nrfx_gpiote_input_configure+0x1dc>)
    9458:	f505 72a2 	add.w	r2, r5, #324	; 0x144
    945c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    9460:	f021 0103 	bic.w	r1, r1, #3
    9464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    9468:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    946c:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    9470:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    9474:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    9478:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
    947c:	0221      	lsls	r1, r4, #8
    947e:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    9482:	0400      	lsls	r0, r0, #16
    9484:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    9488:	4301      	orrs	r1, r0
    948a:	ea4c 0101 	orr.w	r1, ip, r1
    948e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    9492:	036b      	lsls	r3, r5, #13
    9494:	b29b      	uxth	r3, r3
    9496:	4a0e      	ldr	r2, [pc, #56]	; (94d0 <nrfx_gpiote_input_configure+0x1d8>)
    9498:	f104 0108 	add.w	r1, r4, #8
    949c:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
    94a0:	4303      	orrs	r3, r0
    94a2:	f043 0320 	orr.w	r3, r3, #32
    94a6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    94aa:	e79c      	b.n	93e6 <nrfx_gpiote_input_configure+0xee>
            return NRFX_ERROR_INVALID_PARAM;
    94ac:	480a      	ldr	r0, [pc, #40]	; (94d8 <nrfx_gpiote_input_configure+0x1e0>)
    94ae:	e7af      	b.n	9410 <nrfx_gpiote_input_configure+0x118>
                return NRFX_ERROR_INVALID_PARAM;
    94b0:	4809      	ldr	r0, [pc, #36]	; (94d8 <nrfx_gpiote_input_configure+0x1e0>)
    94b2:	e7ad      	b.n	9410 <nrfx_gpiote_input_configure+0x118>
                    return NRFX_ERROR_INVALID_PARAM;
    94b4:	4808      	ldr	r0, [pc, #32]	; (94d8 <nrfx_gpiote_input_configure+0x1e0>)
    94b6:	e7ab      	b.n	9410 <nrfx_gpiote_input_configure+0x118>
        err = NRFX_SUCCESS;
    94b8:	4808      	ldr	r0, [pc, #32]	; (94dc <nrfx_gpiote_input_configure+0x1e4>)
    94ba:	e7a9      	b.n	9410 <nrfx_gpiote_input_configure+0x118>
    94bc:	000113f4 	.word	0x000113f4
    94c0:	00011934 	.word	0x00011934
    94c4:	00010450 	.word	0x00010450
    94c8:	00011428 	.word	0x00011428
    94cc:	50000300 	.word	0x50000300
    94d0:	200000a4 	.word	0x200000a4
    94d4:	40006000 	.word	0x40006000
    94d8:	0bad0004 	.word	0x0bad0004
    94dc:	0bad0000 	.word	0x0bad0000

000094e0 <nrfx_gpiote_output_configure>:
{
    94e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    94e4:	4604      	mov	r4, r0
    94e6:	4615      	mov	r5, r2
    if (p_config)
    94e8:	2900      	cmp	r1, #0
    94ea:	f000 8086 	beq.w	95fa <nrfx_gpiote_output_configure+0x11a>
    94ee:	460f      	mov	r7, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    94f0:	f006 fb24 	bl	fb3c <pin_is_input>
    94f4:	b128      	cbz	r0, 9502 <nrfx_gpiote_output_configure+0x22>
    94f6:	4620      	mov	r0, r4
    94f8:	f7ff fb8a 	bl	8c10 <pin_in_use_by_te>
    94fc:	2800      	cmp	r0, #0
    94fe:	f040 80ce 	bne.w	969e <nrfx_gpiote_output_configure+0x1be>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    9502:	4620      	mov	r0, r4
    9504:	f7ff fb8e 	bl	8c24 <pin_has_trigger>
    9508:	b118      	cbz	r0, 9512 <nrfx_gpiote_output_configure+0x32>
    950a:	787b      	ldrb	r3, [r7, #1]
    950c:	2b01      	cmp	r3, #1
    950e:	f000 80c8 	beq.w	96a2 <nrfx_gpiote_output_configure+0x1c2>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    9512:	f107 0901 	add.w	r9, r7, #1
    9516:	f107 0802 	add.w	r8, r7, #2
    switch (port)
    951a:	0963      	lsrs	r3, r4, #5
    951c:	d020      	beq.n	9560 <nrfx_gpiote_output_configure+0x80>
    951e:	2b01      	cmp	r3, #1
    9520:	d121      	bne.n	9566 <nrfx_gpiote_output_configure+0x86>
            mask = P1_FEATURE_PINS_PRESENT;
    9522:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    9526:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    952a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    952c:	f013 0f01 	tst.w	r3, #1
    9530:	d01b      	beq.n	956a <nrfx_gpiote_output_configure+0x8a>
    *p_pin = pin_number & 0x1F;
    9532:	f004 061f 	and.w	r6, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9536:	0963      	lsrs	r3, r4, #5
    9538:	d025      	beq.n	9586 <nrfx_gpiote_output_configure+0xa6>
    953a:	2b01      	cmp	r3, #1
    953c:	d026      	beq.n	958c <nrfx_gpiote_output_configure+0xac>
            NRFX_ASSERT(0);
    953e:	f8df a170 	ldr.w	sl, [pc, #368]	; 96b0 <nrfx_gpiote_output_configure+0x1d0>
    9542:	f44f 7313 	mov.w	r3, #588	; 0x24c
    9546:	4652      	mov	r2, sl
    9548:	495a      	ldr	r1, [pc, #360]	; (96b4 <nrfx_gpiote_output_configure+0x1d4>)
    954a:	485b      	ldr	r0, [pc, #364]	; (96b8 <nrfx_gpiote_output_configure+0x1d8>)
    954c:	f005 fc31 	bl	edb2 <assert_print>
    9550:	f44f 7113 	mov.w	r1, #588	; 0x24c
    9554:	4650      	mov	r0, sl
    9556:	f005 fc25 	bl	eda4 <assert_post_action>
        case 0: return NRF_P0;
    955a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    955e:	e016      	b.n	958e <nrfx_gpiote_output_configure+0xae>
            mask = P0_FEATURE_PINS_PRESENT;
    9560:	f04f 33ff 	mov.w	r3, #4294967295
    9564:	e7df      	b.n	9526 <nrfx_gpiote_output_configure+0x46>
    switch (port)
    9566:	2300      	movs	r3, #0
    9568:	e7dd      	b.n	9526 <nrfx_gpiote_output_configure+0x46>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    956a:	4e51      	ldr	r6, [pc, #324]	; (96b0 <nrfx_gpiote_output_configure+0x1d0>)
    956c:	f240 2347 	movw	r3, #583	; 0x247
    9570:	4632      	mov	r2, r6
    9572:	4952      	ldr	r1, [pc, #328]	; (96bc <nrfx_gpiote_output_configure+0x1dc>)
    9574:	4850      	ldr	r0, [pc, #320]	; (96b8 <nrfx_gpiote_output_configure+0x1d8>)
    9576:	f005 fc1c 	bl	edb2 <assert_print>
    957a:	f240 2147 	movw	r1, #583	; 0x247
    957e:	4630      	mov	r0, r6
    9580:	f005 fc10 	bl	eda4 <assert_post_action>
    9584:	e7d5      	b.n	9532 <nrfx_gpiote_output_configure+0x52>
        case 0: return NRF_P0;
    9586:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    958a:	e000      	b.n	958e <nrfx_gpiote_output_configure+0xae>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    958c:	4a4c      	ldr	r2, [pc, #304]	; (96c0 <nrfx_gpiote_output_configure+0x1e0>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    958e:	f506 73e0 	add.w	r3, r6, #448	; 0x1c0
    9592:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    9596:	f1b9 0f00 	cmp.w	r9, #0
    959a:	d04b      	beq.n	9634 <nrfx_gpiote_output_configure+0x154>
    959c:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    959e:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    95a2:	f1b8 0f00 	cmp.w	r8, #0
    95a6:	d047      	beq.n	9638 <nrfx_gpiote_output_configure+0x158>
    95a8:	200c      	movs	r0, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    95aa:	4303      	orrs	r3, r0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    95ac:	2f00      	cmp	r7, #0
    95ae:	d045      	beq.n	963c <nrfx_gpiote_output_configure+0x15c>
    95b0:	f44f 60e0 	mov.w	r0, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    95b4:	4303      	orrs	r3, r0
    cnf &= ~to_update;
    95b6:	ea21 0103 	bic.w	r1, r1, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    95ba:	f1b9 0f00 	cmp.w	r9, #0
    95be:	d03f      	beq.n	9640 <nrfx_gpiote_output_configure+0x160>
    95c0:	787b      	ldrb	r3, [r7, #1]
    95c2:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    95c4:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    95c8:	f1b8 0f00 	cmp.w	r8, #0
    95cc:	d03a      	beq.n	9644 <nrfx_gpiote_output_configure+0x164>
    95ce:	78b8      	ldrb	r0, [r7, #2]
    95d0:	0080      	lsls	r0, r0, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    95d2:	4303      	orrs	r3, r0
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    95d4:	2f00      	cmp	r7, #0
    95d6:	d037      	beq.n	9648 <nrfx_gpiote_output_configure+0x168>
    95d8:	7838      	ldrb	r0, [r7, #0]
    95da:	0200      	lsls	r0, r0, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    95dc:	4303      	orrs	r3, r0
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    95de:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
    95e0:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    95e4:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    95e8:	4a36      	ldr	r2, [pc, #216]	; (96c4 <nrfx_gpiote_output_configure+0x1e4>)
    95ea:	f104 0108 	add.w	r1, r4, #8
    95ee:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    95f2:	f043 0303 	orr.w	r3, r3, #3
    95f6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    95fa:	2d00      	cmp	r5, #0
    95fc:	d053      	beq.n	96a6 <nrfx_gpiote_output_configure+0x1c6>
        if (pin_is_input(pin))
    95fe:	4620      	mov	r0, r4
    9600:	f006 fa9c 	bl	fb3c <pin_is_input>
    9604:	2800      	cmp	r0, #0
    9606:	d150      	bne.n	96aa <nrfx_gpiote_output_configure+0x1ca>
        uint32_t ch = p_task_config->task_ch;
    9608:	782b      	ldrb	r3, [r5, #0]
    p_reg->CONFIG[idx] = 0;
    960a:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    960e:	4a2e      	ldr	r2, [pc, #184]	; (96c8 <nrfx_gpiote_output_configure+0x1e8>)
    9610:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    9614:	492b      	ldr	r1, [pc, #172]	; (96c4 <nrfx_gpiote_output_configure+0x1e4>)
    9616:	f104 0008 	add.w	r0, r4, #8
    961a:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
    961e:	f022 0220 	bic.w	r2, r2, #32
    9622:	04d2      	lsls	r2, r2, #19
    9624:	0cd2      	lsrs	r2, r2, #19
    9626:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    962a:	786a      	ldrb	r2, [r5, #1]
    962c:	b972      	cbnz	r2, 964c <nrfx_gpiote_output_configure+0x16c>
    return NRFX_SUCCESS;
    962e:	4827      	ldr	r0, [pc, #156]	; (96cc <nrfx_gpiote_output_configure+0x1ec>)
}
    9630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    9634:	2300      	movs	r3, #0
    9636:	e7b2      	b.n	959e <nrfx_gpiote_output_configure+0xbe>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    9638:	2000      	movs	r0, #0
    963a:	e7b6      	b.n	95aa <nrfx_gpiote_output_configure+0xca>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    963c:	2000      	movs	r0, #0
    963e:	e7b9      	b.n	95b4 <nrfx_gpiote_output_configure+0xd4>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    9640:	2300      	movs	r3, #0
    9642:	e7bf      	b.n	95c4 <nrfx_gpiote_output_configure+0xe4>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    9644:	2000      	movs	r0, #0
    9646:	e7c4      	b.n	95d2 <nrfx_gpiote_output_configure+0xf2>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    9648:	2000      	movs	r0, #0
    964a:	e7c7      	b.n	95dc <nrfx_gpiote_output_configure+0xfc>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    964c:	78af      	ldrb	r7, [r5, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    964e:	481e      	ldr	r0, [pc, #120]	; (96c8 <nrfx_gpiote_output_configure+0x1e8>)
    9650:	f503 75a2 	add.w	r5, r3, #324	; 0x144
    9654:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
    9658:	f421 1199 	bic.w	r1, r1, #1253376	; 0x132000
    965c:	f421 51f8 	bic.w	r1, r1, #7936	; 0x1f00
    9660:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    9664:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
    9668:	0221      	lsls	r1, r4, #8
    966a:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    966e:	0412      	lsls	r2, r2, #16
    9670:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    9674:	430a      	orrs	r2, r1
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    9676:	0539      	lsls	r1, r7, #20
    9678:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    967c:	430a      	orrs	r2, r1
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    967e:	4332      	orrs	r2, r6
    9680:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    9684:	035b      	lsls	r3, r3, #13
    9686:	b29b      	uxth	r3, r3
    9688:	4a0e      	ldr	r2, [pc, #56]	; (96c4 <nrfx_gpiote_output_configure+0x1e4>)
    968a:	3408      	adds	r4, #8
    968c:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
    9690:	430b      	orrs	r3, r1
    9692:	f043 0320 	orr.w	r3, r3, #32
    9696:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
    969a:	480c      	ldr	r0, [pc, #48]	; (96cc <nrfx_gpiote_output_configure+0x1ec>)
    969c:	e7c8      	b.n	9630 <nrfx_gpiote_output_configure+0x150>
    969e:	480c      	ldr	r0, [pc, #48]	; (96d0 <nrfx_gpiote_output_configure+0x1f0>)
    96a0:	e7c6      	b.n	9630 <nrfx_gpiote_output_configure+0x150>
    96a2:	480b      	ldr	r0, [pc, #44]	; (96d0 <nrfx_gpiote_output_configure+0x1f0>)
    96a4:	e7c4      	b.n	9630 <nrfx_gpiote_output_configure+0x150>
    96a6:	4809      	ldr	r0, [pc, #36]	; (96cc <nrfx_gpiote_output_configure+0x1ec>)
    96a8:	e7c2      	b.n	9630 <nrfx_gpiote_output_configure+0x150>
            return NRFX_ERROR_INVALID_PARAM;
    96aa:	4809      	ldr	r0, [pc, #36]	; (96d0 <nrfx_gpiote_output_configure+0x1f0>)
    96ac:	e7c0      	b.n	9630 <nrfx_gpiote_output_configure+0x150>
    96ae:	bf00      	nop
    96b0:	000113f4 	.word	0x000113f4
    96b4:	00011934 	.word	0x00011934
    96b8:	00010450 	.word	0x00010450
    96bc:	00011428 	.word	0x00011428
    96c0:	50000300 	.word	0x50000300
    96c4:	200000a4 	.word	0x200000a4
    96c8:	40006000 	.word	0x40006000
    96cc:	0bad0000 	.word	0x0bad0000
    96d0:	0bad0004 	.word	0x0bad0004

000096d4 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    96d4:	4b01      	ldr	r3, [pc, #4]	; (96dc <nrfx_gpiote_global_callback_set+0x8>)
    96d6:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    96d8:	60d9      	str	r1, [r3, #12]
}
    96da:	4770      	bx	lr
    96dc:	200000a4 	.word	0x200000a4

000096e0 <nrfx_gpiote_channel_get>:
{
    96e0:	b570      	push	{r4, r5, r6, lr}
    96e2:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    96e4:	460d      	mov	r5, r1
    96e6:	b159      	cbz	r1, 9700 <nrfx_gpiote_channel_get+0x20>
    if (pin_in_use_by_te(pin))
    96e8:	4620      	mov	r0, r4
    96ea:	f7ff fa91 	bl	8c10 <pin_in_use_by_te>
    96ee:	b1a8      	cbz	r0, 971c <nrfx_gpiote_channel_get+0x3c>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    96f0:	3408      	adds	r4, #8
    96f2:	4b0b      	ldr	r3, [pc, #44]	; (9720 <nrfx_gpiote_channel_get+0x40>)
    96f4:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    96f8:	0b5b      	lsrs	r3, r3, #13
    96fa:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    96fc:	4809      	ldr	r0, [pc, #36]	; (9724 <nrfx_gpiote_channel_get+0x44>)
}
    96fe:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(p_channel);
    9700:	4e09      	ldr	r6, [pc, #36]	; (9728 <nrfx_gpiote_channel_get+0x48>)
    9702:	f240 2335 	movw	r3, #565	; 0x235
    9706:	4632      	mov	r2, r6
    9708:	4908      	ldr	r1, [pc, #32]	; (972c <nrfx_gpiote_channel_get+0x4c>)
    970a:	4809      	ldr	r0, [pc, #36]	; (9730 <nrfx_gpiote_channel_get+0x50>)
    970c:	f005 fb51 	bl	edb2 <assert_print>
    9710:	f240 2135 	movw	r1, #565	; 0x235
    9714:	4630      	mov	r0, r6
    9716:	f005 fb45 	bl	eda4 <assert_post_action>
    971a:	e7e5      	b.n	96e8 <nrfx_gpiote_channel_get+0x8>
        return NRFX_ERROR_INVALID_PARAM;
    971c:	4805      	ldr	r0, [pc, #20]	; (9734 <nrfx_gpiote_channel_get+0x54>)
    971e:	e7ee      	b.n	96fe <nrfx_gpiote_channel_get+0x1e>
    9720:	200000a4 	.word	0x200000a4
    9724:	0bad0000 	.word	0x0bad0000
    9728:	00011eb0 	.word	0x00011eb0
    972c:	00011ef0 	.word	0x00011ef0
    9730:	00010450 	.word	0x00010450
    9734:	0bad0004 	.word	0x0bad0004

00009738 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    9738:	4b10      	ldr	r3, [pc, #64]	; (977c <nrfx_gpiote_init+0x44>)
    973a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    973e:	b10b      	cbz	r3, 9744 <nrfx_gpiote_init+0xc>
        return err_code;
    9740:	480f      	ldr	r0, [pc, #60]	; (9780 <nrfx_gpiote_init+0x48>)
}
    9742:	4770      	bx	lr
{
    9744:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    9746:	4c0d      	ldr	r4, [pc, #52]	; (977c <nrfx_gpiote_init+0x44>)
    9748:	2260      	movs	r2, #96	; 0x60
    974a:	2100      	movs	r1, #0
    974c:	f104 0010 	add.w	r0, r4, #16
    9750:	f005 fd85 	bl	f25e <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    9754:	2006      	movs	r0, #6
    9756:	f7fa fd7b 	bl	4250 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    975a:	4b0a      	ldr	r3, [pc, #40]	; (9784 <nrfx_gpiote_init+0x4c>)
    975c:	2200      	movs	r2, #0
    975e:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    9762:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    9766:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    976a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    976e:	2301      	movs	r3, #1
    9770:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    9774:	6763      	str	r3, [r4, #116]	; 0x74
    return err_code;
    9776:	4804      	ldr	r0, [pc, #16]	; (9788 <nrfx_gpiote_init+0x50>)
}
    9778:	bd10      	pop	{r4, pc}
    977a:	bf00      	nop
    977c:	200000a4 	.word	0x200000a4
    9780:	0bad0005 	.word	0x0bad0005
    9784:	40006000 	.word	0x40006000
    9788:	0bad0000 	.word	0x0bad0000

0000978c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    978c:	4b03      	ldr	r3, [pc, #12]	; (979c <nrfx_gpiote_is_init+0x10>)
    978e:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    9792:	3800      	subs	r0, #0
    9794:	bf18      	it	ne
    9796:	2001      	movne	r0, #1
    9798:	4770      	bx	lr
    979a:	bf00      	nop
    979c:	200000a4 	.word	0x200000a4

000097a0 <nrfx_gpiote_channel_free>:
{
    97a0:	b508      	push	{r3, lr}
    97a2:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    97a4:	4801      	ldr	r0, [pc, #4]	; (97ac <nrfx_gpiote_channel_free+0xc>)
    97a6:	f7ff f855 	bl	8854 <nrfx_flag32_free>
}
    97aa:	bd08      	pop	{r3, pc}
    97ac:	20000114 	.word	0x20000114

000097b0 <nrfx_gpiote_channel_alloc>:
{
    97b0:	b508      	push	{r3, lr}
    97b2:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    97b4:	4801      	ldr	r0, [pc, #4]	; (97bc <nrfx_gpiote_channel_alloc+0xc>)
    97b6:	f7ff f825 	bl	8804 <nrfx_flag32_alloc>
}
    97ba:	bd08      	pop	{r3, pc}
    97bc:	20000114 	.word	0x20000114

000097c0 <nrfx_gpiote_trigger_enable>:
{
    97c0:	b570      	push	{r4, r5, r6, lr}
    97c2:	4604      	mov	r4, r0
    97c4:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    97c6:	f7ff fa2d 	bl	8c24 <pin_has_trigger>
    97ca:	b1b8      	cbz	r0, 97fc <nrfx_gpiote_trigger_enable+0x3c>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    97cc:	4620      	mov	r0, r4
    97ce:	f7ff fa1f 	bl	8c10 <pin_in_use_by_te>
    97d2:	b118      	cbz	r0, 97dc <nrfx_gpiote_trigger_enable+0x1c>
    97d4:	4620      	mov	r0, r4
    97d6:	f006 f9b1 	bl	fb3c <pin_is_input>
    97da:	b9e8      	cbnz	r0, 9818 <nrfx_gpiote_trigger_enable+0x58>
        NRFX_ASSERT(int_enable);
    97dc:	2d00      	cmp	r5, #0
    97de:	d04c      	beq.n	987a <nrfx_gpiote_trigger_enable+0xba>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    97e0:	f104 0308 	add.w	r3, r4, #8
    97e4:	4a70      	ldr	r2, [pc, #448]	; (99a8 <nrfx_gpiote_trigger_enable+0x1e8>)
    97e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    97ea:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    97ee:	2b04      	cmp	r3, #4
    97f0:	f000 8092 	beq.w	9918 <nrfx_gpiote_trigger_enable+0x158>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    97f4:	2b05      	cmp	r3, #5
    97f6:	d14e      	bne.n	9896 <nrfx_gpiote_trigger_enable+0xd6>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    97f8:	2602      	movs	r6, #2
    97fa:	e08e      	b.n	991a <nrfx_gpiote_trigger_enable+0x15a>
    NRFX_ASSERT(pin_has_trigger(pin));
    97fc:	4e6b      	ldr	r6, [pc, #428]	; (99ac <nrfx_gpiote_trigger_enable+0x1ec>)
    97fe:	f240 33df 	movw	r3, #991	; 0x3df
    9802:	4632      	mov	r2, r6
    9804:	496a      	ldr	r1, [pc, #424]	; (99b0 <nrfx_gpiote_trigger_enable+0x1f0>)
    9806:	486b      	ldr	r0, [pc, #428]	; (99b4 <nrfx_gpiote_trigger_enable+0x1f4>)
    9808:	f005 fad3 	bl	edb2 <assert_print>
    980c:	f240 31df 	movw	r1, #991	; 0x3df
    9810:	4630      	mov	r0, r6
    9812:	f005 fac7 	bl	eda4 <assert_post_action>
    9816:	e7d9      	b.n	97cc <nrfx_gpiote_trigger_enable+0xc>
        uint8_t ch = pin_te_get(pin);
    9818:	4620      	mov	r0, r4
    981a:	f7ff fa19 	bl	8c50 <pin_te_get>
    981e:	4604      	mov	r4, r0
}
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    9820:	2807      	cmp	r0, #7
    9822:	d81c      	bhi.n	985e <nrfx_gpiote_trigger_enable+0x9e>
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    9824:	00a3      	lsls	r3, r4, #2
    9826:	f503 7380 	add.w	r3, r3, #256	; 0x100
    982a:	b29b      	uxth	r3, r3
    return ((uint32_t)p_reg + event);
    982c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    9830:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    9834:	2200      	movs	r2, #0
    9836:	601a      	str	r2, [r3, #0]
    9838:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    983a:	4a5f      	ldr	r2, [pc, #380]	; (99b8 <nrfx_gpiote_trigger_enable+0x1f8>)
    983c:	f504 71a2 	add.w	r1, r4, #324	; 0x144
    9840:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    9844:	f043 0301 	orr.w	r3, r3, #1
    9848:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    984c:	2d00      	cmp	r5, #0
    984e:	f000 80a9 	beq.w	99a4 <nrfx_gpiote_trigger_enable+0x1e4>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    9852:	2001      	movs	r0, #1
    9854:	fa00 f404 	lsl.w	r4, r0, r4
    p_reg->INTENSET = mask;
    9858:	f8c2 4304 	str.w	r4, [r2, #772]	; 0x304
}
    985c:	e0a2      	b.n	99a4 <nrfx_gpiote_trigger_enable+0x1e4>
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    985e:	4e57      	ldr	r6, [pc, #348]	; (99bc <nrfx_gpiote_trigger_enable+0x1fc>)
    9860:	f44f 7323 	mov.w	r3, #652	; 0x28c
    9864:	4632      	mov	r2, r6
    9866:	4956      	ldr	r1, [pc, #344]	; (99c0 <nrfx_gpiote_trigger_enable+0x200>)
    9868:	4852      	ldr	r0, [pc, #328]	; (99b4 <nrfx_gpiote_trigger_enable+0x1f4>)
    986a:	f005 faa2 	bl	edb2 <assert_print>
    986e:	f44f 7123 	mov.w	r1, #652	; 0x28c
    9872:	4630      	mov	r0, r6
    9874:	f005 fa96 	bl	eda4 <assert_post_action>
    9878:	e7d4      	b.n	9824 <nrfx_gpiote_trigger_enable+0x64>
        NRFX_ASSERT(int_enable);
    987a:	4d4c      	ldr	r5, [pc, #304]	; (99ac <nrfx_gpiote_trigger_enable+0x1ec>)
    987c:	f240 33ee 	movw	r3, #1006	; 0x3ee
    9880:	462a      	mov	r2, r5
    9882:	4950      	ldr	r1, [pc, #320]	; (99c4 <nrfx_gpiote_trigger_enable+0x204>)
    9884:	484b      	ldr	r0, [pc, #300]	; (99b4 <nrfx_gpiote_trigger_enable+0x1f4>)
    9886:	f005 fa94 	bl	edb2 <assert_print>
    988a:	f240 31ee 	movw	r1, #1006	; 0x3ee
    988e:	4628      	mov	r0, r5
    9890:	f005 fa88 	bl	eda4 <assert_post_action>
    9894:	e7a4      	b.n	97e0 <nrfx_gpiote_trigger_enable+0x20>
    switch (port)
    9896:	0963      	lsrs	r3, r4, #5
    9898:	d01f      	beq.n	98da <nrfx_gpiote_trigger_enable+0x11a>
    989a:	2b01      	cmp	r3, #1
    989c:	d120      	bne.n	98e0 <nrfx_gpiote_trigger_enable+0x120>
            mask = P1_FEATURE_PINS_PRESENT;
    989e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    98a2:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    98a6:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    98a8:	f013 0f01 	tst.w	r3, #1
    98ac:	d01a      	beq.n	98e4 <nrfx_gpiote_trigger_enable+0x124>
    *p_pin = pin_number & 0x1F;
    98ae:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    98b2:	0963      	lsrs	r3, r4, #5
    98b4:	d024      	beq.n	9900 <nrfx_gpiote_trigger_enable+0x140>
    98b6:	2b01      	cmp	r3, #1
    98b8:	d025      	beq.n	9906 <nrfx_gpiote_trigger_enable+0x146>
            NRFX_ASSERT(0);
    98ba:	4e43      	ldr	r6, [pc, #268]	; (99c8 <nrfx_gpiote_trigger_enable+0x208>)
    98bc:	f44f 7313 	mov.w	r3, #588	; 0x24c
    98c0:	4632      	mov	r2, r6
    98c2:	4942      	ldr	r1, [pc, #264]	; (99cc <nrfx_gpiote_trigger_enable+0x20c>)
    98c4:	483b      	ldr	r0, [pc, #236]	; (99b4 <nrfx_gpiote_trigger_enable+0x1f4>)
    98c6:	f005 fa74 	bl	edb2 <assert_print>
    98ca:	f44f 7113 	mov.w	r1, #588	; 0x24c
    98ce:	4630      	mov	r0, r6
    98d0:	f005 fa68 	bl	eda4 <assert_post_action>
        case 0: return NRF_P0;
    98d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    98d8:	e016      	b.n	9908 <nrfx_gpiote_trigger_enable+0x148>
            mask = P0_FEATURE_PINS_PRESENT;
    98da:	f04f 33ff 	mov.w	r3, #4294967295
    98de:	e7e0      	b.n	98a2 <nrfx_gpiote_trigger_enable+0xe2>
    switch (port)
    98e0:	2300      	movs	r3, #0
    98e2:	e7de      	b.n	98a2 <nrfx_gpiote_trigger_enable+0xe2>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    98e4:	4d38      	ldr	r5, [pc, #224]	; (99c8 <nrfx_gpiote_trigger_enable+0x208>)
    98e6:	f240 2347 	movw	r3, #583	; 0x247
    98ea:	462a      	mov	r2, r5
    98ec:	4938      	ldr	r1, [pc, #224]	; (99d0 <nrfx_gpiote_trigger_enable+0x210>)
    98ee:	4831      	ldr	r0, [pc, #196]	; (99b4 <nrfx_gpiote_trigger_enable+0x1f4>)
    98f0:	f005 fa5f 	bl	edb2 <assert_print>
    98f4:	f240 2147 	movw	r1, #583	; 0x247
    98f8:	4628      	mov	r0, r5
    98fa:	f005 fa53 	bl	eda4 <assert_post_action>
    98fe:	e7d6      	b.n	98ae <nrfx_gpiote_trigger_enable+0xee>
        case 0: return NRF_P0;
    9900:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    9904:	e000      	b.n	9908 <nrfx_gpiote_trigger_enable+0x148>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9906:	4b33      	ldr	r3, [pc, #204]	; (99d4 <nrfx_gpiote_trigger_enable+0x214>)
    return p_reg->IN;
    9908:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    990c:	40eb      	lsrs	r3, r5
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    990e:	f013 0f01 	tst.w	r3, #1
    9912:	d024      	beq.n	995e <nrfx_gpiote_trigger_enable+0x19e>
    9914:	2603      	movs	r6, #3
    9916:	e000      	b.n	991a <nrfx_gpiote_trigger_enable+0x15a>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    9918:	2603      	movs	r6, #3
    switch (port)
    991a:	0963      	lsrs	r3, r4, #5
    991c:	d021      	beq.n	9962 <nrfx_gpiote_trigger_enable+0x1a2>
    991e:	2b01      	cmp	r3, #1
    9920:	d122      	bne.n	9968 <nrfx_gpiote_trigger_enable+0x1a8>
            mask = P1_FEATURE_PINS_PRESENT;
    9922:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    9926:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    992a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    992c:	f013 0f01 	tst.w	r3, #1
    9930:	d01c      	beq.n	996c <nrfx_gpiote_trigger_enable+0x1ac>
    *p_pin = pin_number & 0x1F;
    9932:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9936:	0964      	lsrs	r4, r4, #5
    9938:	d026      	beq.n	9988 <nrfx_gpiote_trigger_enable+0x1c8>
    993a:	2c01      	cmp	r4, #1
    993c:	d027      	beq.n	998e <nrfx_gpiote_trigger_enable+0x1ce>
            NRFX_ASSERT(0);
    993e:	4c22      	ldr	r4, [pc, #136]	; (99c8 <nrfx_gpiote_trigger_enable+0x208>)
    9940:	f44f 7313 	mov.w	r3, #588	; 0x24c
    9944:	4622      	mov	r2, r4
    9946:	4921      	ldr	r1, [pc, #132]	; (99cc <nrfx_gpiote_trigger_enable+0x20c>)
    9948:	481a      	ldr	r0, [pc, #104]	; (99b4 <nrfx_gpiote_trigger_enable+0x1f4>)
    994a:	f005 fa32 	bl	edb2 <assert_print>
    994e:	f44f 7113 	mov.w	r1, #588	; 0x24c
    9952:	4620      	mov	r0, r4
    9954:	f005 fa26 	bl	eda4 <assert_post_action>
        case 0: return NRF_P0;
    9958:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    995c:	e018      	b.n	9990 <nrfx_gpiote_trigger_enable+0x1d0>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    995e:	2602      	movs	r6, #2
    9960:	e7db      	b.n	991a <nrfx_gpiote_trigger_enable+0x15a>
            mask = P0_FEATURE_PINS_PRESENT;
    9962:	f04f 33ff 	mov.w	r3, #4294967295
    9966:	e7de      	b.n	9926 <nrfx_gpiote_trigger_enable+0x166>
    switch (port)
    9968:	2300      	movs	r3, #0
    996a:	e7dc      	b.n	9926 <nrfx_gpiote_trigger_enable+0x166>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    996c:	4d16      	ldr	r5, [pc, #88]	; (99c8 <nrfx_gpiote_trigger_enable+0x208>)
    996e:	f240 2347 	movw	r3, #583	; 0x247
    9972:	462a      	mov	r2, r5
    9974:	4916      	ldr	r1, [pc, #88]	; (99d0 <nrfx_gpiote_trigger_enable+0x210>)
    9976:	480f      	ldr	r0, [pc, #60]	; (99b4 <nrfx_gpiote_trigger_enable+0x1f4>)
    9978:	f005 fa1b 	bl	edb2 <assert_print>
    997c:	f240 2147 	movw	r1, #583	; 0x247
    9980:	4628      	mov	r0, r5
    9982:	f005 fa0f 	bl	eda4 <assert_post_action>
    9986:	e7d4      	b.n	9932 <nrfx_gpiote_trigger_enable+0x172>
        case 0: return NRF_P0;
    9988:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    998c:	e000      	b.n	9990 <nrfx_gpiote_trigger_enable+0x1d0>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    998e:	4911      	ldr	r1, [pc, #68]	; (99d4 <nrfx_gpiote_trigger_enable+0x214>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    9990:	f505 72e0 	add.w	r2, r5, #448	; 0x1c0
    9994:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    9998:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    999c:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    99a0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    99a4:	bd70      	pop	{r4, r5, r6, pc}
    99a6:	bf00      	nop
    99a8:	200000a4 	.word	0x200000a4
    99ac:	00011eb0 	.word	0x00011eb0
    99b0:	00011f40 	.word	0x00011f40
    99b4:	00010450 	.word	0x00010450
    99b8:	40006000 	.word	0x40006000
    99bc:	00011efc 	.word	0x00011efc
    99c0:	00011f34 	.word	0x00011f34
    99c4:	00011f58 	.word	0x00011f58
    99c8:	000113f4 	.word	0x000113f4
    99cc:	00011934 	.word	0x00011934
    99d0:	00011428 	.word	0x00011428
    99d4:	50000300 	.word	0x50000300

000099d8 <nrfx_gpiote_trigger_disable>:
{
    99d8:	b538      	push	{r3, r4, r5, lr}
    99da:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    99dc:	f7ff f918 	bl	8c10 <pin_in_use_by_te>
    99e0:	b1a0      	cbz	r0, 9a0c <nrfx_gpiote_trigger_disable+0x34>
    99e2:	4620      	mov	r0, r4
    99e4:	f006 f8aa 	bl	fb3c <pin_is_input>
    99e8:	b180      	cbz	r0, 9a0c <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    99ea:	4620      	mov	r0, r4
    99ec:	f7ff f930 	bl	8c50 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    99f0:	2201      	movs	r2, #1
    99f2:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    99f4:	4b26      	ldr	r3, [pc, #152]	; (9a90 <nrfx_gpiote_trigger_disable+0xb8>)
    99f6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    99fa:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    99fe:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    9a02:	f022 0203 	bic.w	r2, r2, #3
    9a06:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    9a0a:	e040      	b.n	9a8e <nrfx_gpiote_trigger_disable+0xb6>
    switch (port)
    9a0c:	0963      	lsrs	r3, r4, #5
    9a0e:	d01f      	beq.n	9a50 <nrfx_gpiote_trigger_disable+0x78>
    9a10:	2b01      	cmp	r3, #1
    9a12:	d120      	bne.n	9a56 <nrfx_gpiote_trigger_disable+0x7e>
            mask = P1_FEATURE_PINS_PRESENT;
    9a14:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    9a18:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    9a1c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9a1e:	f013 0f01 	tst.w	r3, #1
    9a22:	d01a      	beq.n	9a5a <nrfx_gpiote_trigger_disable+0x82>
    *p_pin = pin_number & 0x1F;
    9a24:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9a28:	0964      	lsrs	r4, r4, #5
    9a2a:	d024      	beq.n	9a76 <nrfx_gpiote_trigger_disable+0x9e>
    9a2c:	2c01      	cmp	r4, #1
    9a2e:	d025      	beq.n	9a7c <nrfx_gpiote_trigger_disable+0xa4>
            NRFX_ASSERT(0);
    9a30:	4c18      	ldr	r4, [pc, #96]	; (9a94 <nrfx_gpiote_trigger_disable+0xbc>)
    9a32:	f44f 7313 	mov.w	r3, #588	; 0x24c
    9a36:	4622      	mov	r2, r4
    9a38:	4917      	ldr	r1, [pc, #92]	; (9a98 <nrfx_gpiote_trigger_disable+0xc0>)
    9a3a:	4818      	ldr	r0, [pc, #96]	; (9a9c <nrfx_gpiote_trigger_disable+0xc4>)
    9a3c:	f005 f9b9 	bl	edb2 <assert_print>
    9a40:	f44f 7113 	mov.w	r1, #588	; 0x24c
    9a44:	4620      	mov	r0, r4
    9a46:	f005 f9ad 	bl	eda4 <assert_post_action>
        case 0: return NRF_P0;
    9a4a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    9a4e:	e016      	b.n	9a7e <nrfx_gpiote_trigger_disable+0xa6>
            mask = P0_FEATURE_PINS_PRESENT;
    9a50:	f04f 33ff 	mov.w	r3, #4294967295
    9a54:	e7e0      	b.n	9a18 <nrfx_gpiote_trigger_disable+0x40>
    switch (port)
    9a56:	2300      	movs	r3, #0
    9a58:	e7de      	b.n	9a18 <nrfx_gpiote_trigger_disable+0x40>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9a5a:	4d0e      	ldr	r5, [pc, #56]	; (9a94 <nrfx_gpiote_trigger_disable+0xbc>)
    9a5c:	f240 2347 	movw	r3, #583	; 0x247
    9a60:	462a      	mov	r2, r5
    9a62:	490f      	ldr	r1, [pc, #60]	; (9aa0 <nrfx_gpiote_trigger_disable+0xc8>)
    9a64:	480d      	ldr	r0, [pc, #52]	; (9a9c <nrfx_gpiote_trigger_disable+0xc4>)
    9a66:	f005 f9a4 	bl	edb2 <assert_print>
    9a6a:	f240 2147 	movw	r1, #583	; 0x247
    9a6e:	4628      	mov	r0, r5
    9a70:	f005 f998 	bl	eda4 <assert_post_action>
    9a74:	e7d6      	b.n	9a24 <nrfx_gpiote_trigger_disable+0x4c>
        case 0: return NRF_P0;
    9a76:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    9a7a:	e000      	b.n	9a7e <nrfx_gpiote_trigger_disable+0xa6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9a7c:	4909      	ldr	r1, [pc, #36]	; (9aa4 <nrfx_gpiote_trigger_disable+0xcc>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    9a7e:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    9a82:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    9a86:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    9a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9a8e:	bd38      	pop	{r3, r4, r5, pc}
    9a90:	40006000 	.word	0x40006000
    9a94:	000113f4 	.word	0x000113f4
    9a98:	00011934 	.word	0x00011934
    9a9c:	00010450 	.word	0x00010450
    9aa0:	00011428 	.word	0x00011428
    9aa4:	50000300 	.word	0x50000300

00009aa8 <nrfx_gpiote_pin_uninit>:
{
    9aa8:	b538      	push	{r3, r4, r5, lr}
    9aaa:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    9aac:	f7ff f8a6 	bl	8bfc <pin_in_use>
    9ab0:	b908      	cbnz	r0, 9ab6 <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    9ab2:	4824      	ldr	r0, [pc, #144]	; (9b44 <nrfx_gpiote_pin_uninit+0x9c>)
}
    9ab4:	bd38      	pop	{r3, r4, r5, pc}
    nrfx_gpiote_trigger_disable(pin);
    9ab6:	4620      	mov	r0, r4
    9ab8:	f7ff ff8e 	bl	99d8 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    9abc:	4620      	mov	r0, r4
    9abe:	f7ff f95f 	bl	8d80 <pin_handler_trigger_uninit>
    switch (port)
    9ac2:	0963      	lsrs	r3, r4, #5
    9ac4:	d01f      	beq.n	9b06 <nrfx_gpiote_pin_uninit+0x5e>
    9ac6:	2b01      	cmp	r3, #1
    9ac8:	d120      	bne.n	9b0c <nrfx_gpiote_pin_uninit+0x64>
            mask = P1_FEATURE_PINS_PRESENT;
    9aca:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    9ace:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    9ad2:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9ad4:	f013 0f01 	tst.w	r3, #1
    9ad8:	d01a      	beq.n	9b10 <nrfx_gpiote_pin_uninit+0x68>
    *p_pin = pin_number & 0x1F;
    9ada:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9ade:	0964      	lsrs	r4, r4, #5
    9ae0:	d024      	beq.n	9b2c <nrfx_gpiote_pin_uninit+0x84>
    9ae2:	2c01      	cmp	r4, #1
    9ae4:	d025      	beq.n	9b32 <nrfx_gpiote_pin_uninit+0x8a>
            NRFX_ASSERT(0);
    9ae6:	4c18      	ldr	r4, [pc, #96]	; (9b48 <nrfx_gpiote_pin_uninit+0xa0>)
    9ae8:	f44f 7313 	mov.w	r3, #588	; 0x24c
    9aec:	4622      	mov	r2, r4
    9aee:	4917      	ldr	r1, [pc, #92]	; (9b4c <nrfx_gpiote_pin_uninit+0xa4>)
    9af0:	4817      	ldr	r0, [pc, #92]	; (9b50 <nrfx_gpiote_pin_uninit+0xa8>)
    9af2:	f005 f95e 	bl	edb2 <assert_print>
    9af6:	f44f 7113 	mov.w	r1, #588	; 0x24c
    9afa:	4620      	mov	r0, r4
    9afc:	f005 f952 	bl	eda4 <assert_post_action>
        case 0: return NRF_P0;
    9b00:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    9b04:	e016      	b.n	9b34 <nrfx_gpiote_pin_uninit+0x8c>
            mask = P0_FEATURE_PINS_PRESENT;
    9b06:	f04f 33ff 	mov.w	r3, #4294967295
    9b0a:	e7e0      	b.n	9ace <nrfx_gpiote_pin_uninit+0x26>
    switch (port)
    9b0c:	2300      	movs	r3, #0
    9b0e:	e7de      	b.n	9ace <nrfx_gpiote_pin_uninit+0x26>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9b10:	4d0d      	ldr	r5, [pc, #52]	; (9b48 <nrfx_gpiote_pin_uninit+0xa0>)
    9b12:	f240 2347 	movw	r3, #583	; 0x247
    9b16:	462a      	mov	r2, r5
    9b18:	490e      	ldr	r1, [pc, #56]	; (9b54 <nrfx_gpiote_pin_uninit+0xac>)
    9b1a:	480d      	ldr	r0, [pc, #52]	; (9b50 <nrfx_gpiote_pin_uninit+0xa8>)
    9b1c:	f005 f949 	bl	edb2 <assert_print>
    9b20:	f240 2147 	movw	r1, #583	; 0x247
    9b24:	4628      	mov	r0, r5
    9b26:	f005 f93d 	bl	eda4 <assert_post_action>
    9b2a:	e7d6      	b.n	9ada <nrfx_gpiote_pin_uninit+0x32>
        case 0: return NRF_P0;
    9b2c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    9b30:	e000      	b.n	9b34 <nrfx_gpiote_pin_uninit+0x8c>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9b32:	4b09      	ldr	r3, [pc, #36]	; (9b58 <nrfx_gpiote_pin_uninit+0xb0>)
    reg->PIN_CNF[pin_number] = cnf;
    9b34:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    9b38:	2202      	movs	r2, #2
    9b3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    return NRFX_SUCCESS;
    9b3e:	4807      	ldr	r0, [pc, #28]	; (9b5c <nrfx_gpiote_pin_uninit+0xb4>)
}
    9b40:	e7b8      	b.n	9ab4 <nrfx_gpiote_pin_uninit+0xc>
    9b42:	bf00      	nop
    9b44:	0bad0004 	.word	0x0bad0004
    9b48:	000113f4 	.word	0x000113f4
    9b4c:	00011934 	.word	0x00011934
    9b50:	00010450 	.word	0x00010450
    9b54:	00011428 	.word	0x00011428
    9b58:	50000300 	.word	0x50000300
    9b5c:	0bad0000 	.word	0x0bad0000

00009b60 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    9b60:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    9b62:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    9b64:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    9b68:	2100      	movs	r1, #0
    uint32_t status = 0;
    9b6a:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    9b6c:	e003      	b.n	9b76 <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    9b6e:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    9b70:	3304      	adds	r3, #4
    9b72:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    9b74:	3101      	adds	r1, #1
    9b76:	2907      	cmp	r1, #7
    9b78:	d814      	bhi.n	9ba4 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9b7a:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    9b7e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    9b82:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    9b84:	2a00      	cmp	r2, #0
    9b86:	d0f2      	beq.n	9b6e <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    9b88:	4a0c      	ldr	r2, [pc, #48]	; (9bbc <nrfx_gpiote_irq_handler+0x5c>)
    9b8a:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    9b8e:	4210      	tst	r0, r2
    9b90:	d0ed      	beq.n	9b6e <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    9b92:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    9b96:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    9b9a:	2500      	movs	r5, #0
    9b9c:	6015      	str	r5, [r2, #0]
    9b9e:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    9ba0:	4304      	orrs	r4, r0
    9ba2:	e7e4      	b.n	9b6e <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9ba4:	4b05      	ldr	r3, [pc, #20]	; (9bbc <nrfx_gpiote_irq_handler+0x5c>)
    9ba6:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    9baa:	b91b      	cbnz	r3, 9bb4 <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    9bac:	4620      	mov	r0, r4
    9bae:	f7ff f939 	bl	8e24 <gpiote_evt_handle>
}
    9bb2:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    9bb4:	f7ff fac2 	bl	913c <port_event_handle>
    9bb8:	e7f8      	b.n	9bac <nrfx_gpiote_irq_handler+0x4c>
    9bba:	bf00      	nop
    9bbc:	40006000 	.word	0x40006000

00009bc0 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    9bc0:	b508      	push	{r3, lr}
    9bc2:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    9bc4:	4801      	ldr	r0, [pc, #4]	; (9bcc <nrfx_ppi_channel_alloc+0xc>)
    9bc6:	f7fe fe1d 	bl	8804 <nrfx_flag32_alloc>
}
    9bca:	bd08      	pop	{r3, pc}
    9bcc:	20000120 	.word	0x20000120

00009bd0 <configure_pins>:
} pwm_control_block_t;
static pwm_control_block_t m_cb[NRFX_PWM_ENABLED_COUNT];

static void configure_pins(nrfx_pwm_t const *        p_instance,
                           nrfx_pwm_config_t const * p_config)
{
    9bd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9bd4:	b085      	sub	sp, #20
    9bd6:	4607      	mov	r7, r0
    9bd8:	460e      	mov	r6, r1
    // Nothing to do here if both GPIO configuration and pin selection are
    // to be skipped (the pin numbers may be then even not specified).
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
    9bda:	7b0b      	ldrb	r3, [r1, #12]
    9bdc:	2b00      	cmp	r3, #0
    9bde:	f000 80e9 	beq.w	9db4 <configure_pins+0x1e4>
    9be2:	7b4b      	ldrb	r3, [r1, #13]
    9be4:	2b00      	cmp	r3, #0
    9be6:	f040 80f8 	bne.w	9dda <configure_pins+0x20a>
    9bea:	2400      	movs	r4, #0
    9bec:	e0a8      	b.n	9d40 <configure_pins+0x170>
            mask = P0_FEATURE_PINS_PRESENT;
    9bee:	f04f 33ff 	mov.w	r3, #4294967295
    9bf2:	e0c0      	b.n	9d76 <configure_pins+0x1a6>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9bf4:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 9de0 <configure_pins+0x210>
    9bf8:	f240 2347 	movw	r3, #583	; 0x247
    9bfc:	464a      	mov	r2, r9
    9bfe:	4979      	ldr	r1, [pc, #484]	; (9de4 <configure_pins+0x214>)
    9c00:	4879      	ldr	r0, [pc, #484]	; (9de8 <configure_pins+0x218>)
    9c02:	f005 f8d6 	bl	edb2 <assert_print>
    9c06:	f240 2147 	movw	r1, #583	; 0x247
    9c0a:	4648      	mov	r0, r9
    9c0c:	f005 f8ca 	bl	eda4 <assert_post_action>
    9c10:	e0b8      	b.n	9d84 <configure_pins+0x1b4>
        case 0: return NRF_P0;
    9c12:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    9c16:	e000      	b.n	9c1a <configure_pins+0x4a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9c18:	4a74      	ldr	r2, [pc, #464]	; (9dec <configure_pins+0x21c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    9c1a:	2301      	movs	r3, #1
    9c1c:	fa03 f309 	lsl.w	r3, r3, r9
    p_reg->OUTCLR = clr_mask;
    9c20:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
            out_pins[i]   = output_pin & ~NRFX_PWM_PIN_INVERTED;

            if (!p_config->skip_gpio_cfg)
            {
                nrf_gpio_pin_write(out_pins[i], inverted ? 1 : 0);
                nrf_gpio_cfg_output(out_pins[i]);
    9c24:	ab04      	add	r3, sp, #16
    9c26:	eb03 0888 	add.w	r8, r3, r8, lsl #2
    9c2a:	f858 5c10 	ldr.w	r5, [r8, #-16]
    switch (port)
    9c2e:	096b      	lsrs	r3, r5, #5
    9c30:	d05f      	beq.n	9cf2 <configure_pins+0x122>
    9c32:	2b01      	cmp	r3, #1
    9c34:	d160      	bne.n	9cf8 <configure_pins+0x128>
            mask = P1_FEATURE_PINS_PRESENT;
    9c36:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    9c3a:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    9c3e:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9c40:	f013 0f01 	tst.w	r3, #1
    9c44:	d05a      	beq.n	9cfc <configure_pins+0x12c>
    *p_pin = pin_number & 0x1F;
    9c46:	f005 081f 	and.w	r8, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9c4a:	096d      	lsrs	r5, r5, #5
    9c4c:	d065      	beq.n	9d1a <configure_pins+0x14a>
    9c4e:	2d01      	cmp	r5, #1
    9c50:	d066      	beq.n	9d20 <configure_pins+0x150>
            NRFX_ASSERT(0);
    9c52:	4d63      	ldr	r5, [pc, #396]	; (9de0 <configure_pins+0x210>)
    9c54:	f44f 7313 	mov.w	r3, #588	; 0x24c
    9c58:	462a      	mov	r2, r5
    9c5a:	4965      	ldr	r1, [pc, #404]	; (9df0 <configure_pins+0x220>)
    9c5c:	4862      	ldr	r0, [pc, #392]	; (9de8 <configure_pins+0x218>)
    9c5e:	f005 f8a8 	bl	edb2 <assert_print>
    9c62:	f44f 7113 	mov.w	r1, #588	; 0x24c
    9c66:	4628      	mov	r0, r5
    9c68:	f005 f89c 	bl	eda4 <assert_post_action>
        case 0: return NRF_P0;
    9c6c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    9c70:	e057      	b.n	9d22 <configure_pins+0x152>
    switch (port)
    9c72:	096b      	lsrs	r3, r5, #5
    9c74:	d01f      	beq.n	9cb6 <configure_pins+0xe6>
    9c76:	2b01      	cmp	r3, #1
    9c78:	d120      	bne.n	9cbc <configure_pins+0xec>
            mask = P1_FEATURE_PINS_PRESENT;
    9c7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    9c7e:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    9c82:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9c84:	f013 0f01 	tst.w	r3, #1
    9c88:	d01a      	beq.n	9cc0 <configure_pins+0xf0>
    *p_pin = pin_number & 0x1F;
    9c8a:	f005 091f 	and.w	r9, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9c8e:	096b      	lsrs	r3, r5, #5
    9c90:	d025      	beq.n	9cde <configure_pins+0x10e>
    9c92:	2b01      	cmp	r3, #1
    9c94:	d026      	beq.n	9ce4 <configure_pins+0x114>
            NRFX_ASSERT(0);
    9c96:	4d52      	ldr	r5, [pc, #328]	; (9de0 <configure_pins+0x210>)
    9c98:	f44f 7313 	mov.w	r3, #588	; 0x24c
    9c9c:	462a      	mov	r2, r5
    9c9e:	4954      	ldr	r1, [pc, #336]	; (9df0 <configure_pins+0x220>)
    9ca0:	4851      	ldr	r0, [pc, #324]	; (9de8 <configure_pins+0x218>)
    9ca2:	f005 f886 	bl	edb2 <assert_print>
    9ca6:	f44f 7113 	mov.w	r1, #588	; 0x24c
    9caa:	4628      	mov	r0, r5
    9cac:	f005 f87a 	bl	eda4 <assert_post_action>
        case 0: return NRF_P0;
    9cb0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    9cb4:	e017      	b.n	9ce6 <configure_pins+0x116>
            mask = P0_FEATURE_PINS_PRESENT;
    9cb6:	f04f 33ff 	mov.w	r3, #4294967295
    9cba:	e7e0      	b.n	9c7e <configure_pins+0xae>
    switch (port)
    9cbc:	2300      	movs	r3, #0
    9cbe:	e7de      	b.n	9c7e <configure_pins+0xae>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9cc0:	f8df 911c 	ldr.w	r9, [pc, #284]	; 9de0 <configure_pins+0x210>
    9cc4:	f240 2347 	movw	r3, #583	; 0x247
    9cc8:	464a      	mov	r2, r9
    9cca:	4946      	ldr	r1, [pc, #280]	; (9de4 <configure_pins+0x214>)
    9ccc:	4846      	ldr	r0, [pc, #280]	; (9de8 <configure_pins+0x218>)
    9cce:	f005 f870 	bl	edb2 <assert_print>
    9cd2:	f240 2147 	movw	r1, #583	; 0x247
    9cd6:	4648      	mov	r0, r9
    9cd8:	f005 f864 	bl	eda4 <assert_post_action>
    9cdc:	e7d5      	b.n	9c8a <configure_pins+0xba>
        case 0: return NRF_P0;
    9cde:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    9ce2:	e000      	b.n	9ce6 <configure_pins+0x116>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9ce4:	4a41      	ldr	r2, [pc, #260]	; (9dec <configure_pins+0x21c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    9ce6:	2301      	movs	r3, #1
    9ce8:	fa03 f309 	lsl.w	r3, r3, r9
    p_reg->OUTSET = set_mask;
    9cec:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    9cf0:	e798      	b.n	9c24 <configure_pins+0x54>
            mask = P0_FEATURE_PINS_PRESENT;
    9cf2:	f04f 33ff 	mov.w	r3, #4294967295
    9cf6:	e7a0      	b.n	9c3a <configure_pins+0x6a>
    switch (port)
    9cf8:	2300      	movs	r3, #0
    9cfa:	e79e      	b.n	9c3a <configure_pins+0x6a>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9cfc:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 9de0 <configure_pins+0x210>
    9d00:	f240 2347 	movw	r3, #583	; 0x247
    9d04:	4642      	mov	r2, r8
    9d06:	4937      	ldr	r1, [pc, #220]	; (9de4 <configure_pins+0x214>)
    9d08:	4837      	ldr	r0, [pc, #220]	; (9de8 <configure_pins+0x218>)
    9d0a:	f005 f852 	bl	edb2 <assert_print>
    9d0e:	f240 2147 	movw	r1, #583	; 0x247
    9d12:	4640      	mov	r0, r8
    9d14:	f005 f846 	bl	eda4 <assert_post_action>
    9d18:	e795      	b.n	9c46 <configure_pins+0x76>
        case 0: return NRF_P0;
    9d1a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    9d1e:	e000      	b.n	9d22 <configure_pins+0x152>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9d20:	4b32      	ldr	r3, [pc, #200]	; (9dec <configure_pins+0x21c>)
    reg->PIN_CNF[pin_number] = cnf;
    9d22:	f508 78e0 	add.w	r8, r8, #448	; 0x1c0
    9d26:	2203      	movs	r2, #3
    9d28:	f843 2028 	str.w	r2, [r3, r8, lsl #2]
}
    9d2c:	e006      	b.n	9d3c <configure_pins+0x16c>
            }
        }
        else
        {
            out_pins[i] = NRF_PWM_PIN_NOT_CONNECTED;
    9d2e:	f04f 32ff 	mov.w	r2, #4294967295
    9d32:	ab04      	add	r3, sp, #16
    9d34:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    9d38:	f843 2c10 	str.w	r2, [r3, #-16]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
    9d3c:	3401      	adds	r4, #1
    9d3e:	b2e4      	uxtb	r4, r4
    9d40:	2c03      	cmp	r4, #3
    9d42:	d839      	bhi.n	9db8 <configure_pins+0x1e8>
        uint8_t output_pin = p_config->output_pins[i];
    9d44:	46a0      	mov	r8, r4
    9d46:	5d33      	ldrb	r3, [r6, r4]
        if (output_pin != NRFX_PWM_PIN_NOT_USED)
    9d48:	2bff      	cmp	r3, #255	; 0xff
    9d4a:	d0f0      	beq.n	9d2e <configure_pins+0x15e>
            bool inverted = output_pin &  NRFX_PWM_PIN_INVERTED;
    9d4c:	09da      	lsrs	r2, r3, #7
            out_pins[i]   = output_pin & ~NRFX_PWM_PIN_INVERTED;
    9d4e:	f023 0580 	bic.w	r5, r3, #128	; 0x80
    9d52:	ab04      	add	r3, sp, #16
    9d54:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    9d58:	f843 5c10 	str.w	r5, [r3, #-16]
            if (!p_config->skip_gpio_cfg)
    9d5c:	7b33      	ldrb	r3, [r6, #12]
    9d5e:	2b00      	cmp	r3, #0
    9d60:	d1ec      	bne.n	9d3c <configure_pins+0x16c>
                nrf_gpio_pin_write(out_pins[i], inverted ? 1 : 0);
    9d62:	4613      	mov	r3, r2
    if (value == 0)
    9d64:	2a00      	cmp	r2, #0
    9d66:	d184      	bne.n	9c72 <configure_pins+0xa2>
    switch (port)
    9d68:	096a      	lsrs	r2, r5, #5
    9d6a:	f43f af40 	beq.w	9bee <configure_pins+0x1e>
    9d6e:	2a01      	cmp	r2, #1
    9d70:	d101      	bne.n	9d76 <configure_pins+0x1a6>
            mask = P1_FEATURE_PINS_PRESENT;
    9d72:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    9d76:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    9d7a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9d7c:	f013 0f01 	tst.w	r3, #1
    9d80:	f43f af38 	beq.w	9bf4 <configure_pins+0x24>
    *p_pin = pin_number & 0x1F;
    9d84:	f005 091f 	and.w	r9, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9d88:	096b      	lsrs	r3, r5, #5
    9d8a:	f43f af42 	beq.w	9c12 <configure_pins+0x42>
    9d8e:	2b01      	cmp	r3, #1
    9d90:	f43f af42 	beq.w	9c18 <configure_pins+0x48>
            NRFX_ASSERT(0);
    9d94:	4d12      	ldr	r5, [pc, #72]	; (9de0 <configure_pins+0x210>)
    9d96:	f44f 7313 	mov.w	r3, #588	; 0x24c
    9d9a:	462a      	mov	r2, r5
    9d9c:	4914      	ldr	r1, [pc, #80]	; (9df0 <configure_pins+0x220>)
    9d9e:	4812      	ldr	r0, [pc, #72]	; (9de8 <configure_pins+0x218>)
    9da0:	f005 f807 	bl	edb2 <assert_print>
    9da4:	f44f 7113 	mov.w	r1, #588	; 0x24c
    9da8:	4628      	mov	r0, r5
    9daa:	f004 fffb 	bl	eda4 <assert_post_action>
        case 0: return NRF_P0;
    9dae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    9db2:	e732      	b.n	9c1a <configure_pins+0x4a>
    9db4:	2400      	movs	r4, #0
    9db6:	e7c3      	b.n	9d40 <configure_pins+0x170>
        }
    }

    if (!p_config->skip_psel_cfg)
    9db8:	7b73      	ldrb	r3, [r6, #13]
    9dba:	b973      	cbnz	r3, 9dda <configure_pins+0x20a>
    {
        nrf_pwm_pins_set(p_instance->p_registers, out_pins);
    9dbc:	6838      	ldr	r0, [r7, #0]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
    9dbe:	e00a      	b.n	9dd6 <configure_pins+0x206>
        p_reg->PSEL.OUT[i] = out_pins[i];
    9dc0:	aa04      	add	r2, sp, #16
    9dc2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    9dc6:	f852 1c10 	ldr.w	r1, [r2, #-16]
    9dca:	f503 72ac 	add.w	r2, r3, #344	; 0x158
    9dce:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
    9dd2:	3301      	adds	r3, #1
    9dd4:	b2db      	uxtb	r3, r3
    9dd6:	2b03      	cmp	r3, #3
    9dd8:	d9f2      	bls.n	9dc0 <configure_pins+0x1f0>
    }
}
    9dda:	b005      	add	sp, #20
    9ddc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    9de0:	000113f4 	.word	0x000113f4
    9de4:	00011428 	.word	0x00011428
    9de8:	00010450 	.word	0x00010450
    9dec:	50000300 	.word	0x50000300
    9df0:	00011934 	.word	0x00011934

00009df4 <nrfx_pwm_init>:

nrfx_err_t nrfx_pwm_init(nrfx_pwm_t const *        p_instance,
                         nrfx_pwm_config_t const * p_config,
                         nrfx_pwm_handler_t        handler,
                         void *                    p_context)
{
    9df4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9df8:	4604      	mov	r4, r0
    9dfa:	4690      	mov	r8, r2
    9dfc:	461f      	mov	r7, r3
    NRFX_ASSERT(p_config);
    9dfe:	460e      	mov	r6, r1
    9e00:	b151      	cbz	r1, 9e18 <nrfx_pwm_init+0x24>

    nrfx_err_t err_code;

    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    9e02:	7925      	ldrb	r5, [r4, #4]

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    9e04:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    9e08:	493d      	ldr	r1, [pc, #244]	; (9f00 <nrfx_pwm_init+0x10c>)
    9e0a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    9e0e:	7a0b      	ldrb	r3, [r1, #8]
    9e10:	b173      	cbz	r3, 9e30 <nrfx_pwm_init+0x3c>
    {
        err_code = NRFX_ERROR_INVALID_STATE;
        NRFX_LOG_WARNING("Function: %s, error code: %s.",
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    9e12:	483c      	ldr	r0, [pc, #240]	; (9f04 <nrfx_pwm_init+0x110>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    9e14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    NRFX_ASSERT(p_config);
    9e18:	4d3b      	ldr	r5, [pc, #236]	; (9f08 <nrfx_pwm_init+0x114>)
    9e1a:	238c      	movs	r3, #140	; 0x8c
    9e1c:	462a      	mov	r2, r5
    9e1e:	493b      	ldr	r1, [pc, #236]	; (9f0c <nrfx_pwm_init+0x118>)
    9e20:	483b      	ldr	r0, [pc, #236]	; (9f10 <nrfx_pwm_init+0x11c>)
    9e22:	f004 ffc6 	bl	edb2 <assert_print>
    9e26:	218c      	movs	r1, #140	; 0x8c
    9e28:	4628      	mov	r0, r5
    9e2a:	f004 ffbb 	bl	eda4 <assert_post_action>
    9e2e:	e7e8      	b.n	9e02 <nrfx_pwm_init+0xe>
    p_cb->handler = handler;
    9e30:	4a33      	ldr	r2, [pc, #204]	; (9f00 <nrfx_pwm_init+0x10c>)
    9e32:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    9e36:	eb02 0381 	add.w	r3, r2, r1, lsl #2
    9e3a:	f842 8021 	str.w	r8, [r2, r1, lsl #2]
    p_cb->p_context = p_context;
    9e3e:	605f      	str	r7, [r3, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    9e40:	7b32      	ldrb	r2, [r6, #12]
    9e42:	729a      	strb	r2, [r3, #10]
    configure_pins(p_instance, p_config);
    9e44:	4631      	mov	r1, r6
    9e46:	4620      	mov	r0, r4
    9e48:	f7ff fec2 	bl	9bd0 <configure_pins>
    nrf_pwm_enable(p_instance->p_registers);
    9e4c:	6823      	ldr	r3, [r4, #0]
    p_reg->ENABLE = (PWM_ENABLE_ENABLE_Enabled << PWM_ENABLE_ENABLE_Pos);
    9e4e:	2201      	movs	r2, #1
    9e50:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    nrf_pwm_configure(p_instance->p_registers,
    9e54:	6827      	ldr	r7, [r4, #0]
    9e56:	f896 a005 	ldrb.w	sl, [r6, #5]
    9e5a:	f896 9006 	ldrb.w	r9, [r6, #6]
    9e5e:	f8b6 8008 	ldrh.w	r8, [r6, #8]
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);
    9e62:	f9b6 3008 	ldrsh.w	r3, [r6, #8]
    9e66:	2b00      	cmp	r3, #0
    9e68:	db3b      	blt.n	9ee2 <nrfx_pwm_init+0xee>
    p_reg->PRESCALER  = base_clock;
    9e6a:	f8c7 a50c 	str.w	sl, [r7, #1292]	; 0x50c
    p_reg->MODE       = mode;
    9e6e:	f8c7 9504 	str.w	r9, [r7, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
    9e72:	f8c7 8508 	str.w	r8, [r7, #1288]	; 0x508
    nrf_pwm_decoder_set(p_instance->p_registers,
    9e76:	6822      	ldr	r2, [r4, #0]
    9e78:	7ab3      	ldrb	r3, [r6, #10]
    9e7a:	7af1      	ldrb	r1, [r6, #11]

NRF_STATIC_INLINE void nrf_pwm_decoder_set(NRF_PWM_Type *     p_reg,
                                           nrf_pwm_dec_load_t dec_load,
                                           nrf_pwm_dec_step_t dec_step)
{
    p_reg->DECODER = ((uint32_t)dec_load << PWM_DECODER_LOAD_Pos) |
    9e7c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    9e80:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    nrf_pwm_shorts_set(p_instance->p_registers, 0);
    9e84:	6822      	ldr	r2, [r4, #0]
    p_reg->SHORTS = mask;
    9e86:	2300      	movs	r3, #0
    9e88:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    nrf_pwm_int_set(p_instance->p_registers, 0);
    9e8c:	6822      	ldr	r2, [r4, #0]
    p_reg->INTEN = mask;
    9e8e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_LOOPSDONE);
    9e92:	6822      	ldr	r2, [r4, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9e94:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
    9e98:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_SEQEND0);
    9e9c:	6822      	ldr	r2, [r4, #0]
    9e9e:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
    9ea2:	f8d2 2110 	ldr.w	r2, [r2, #272]	; 0x110
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_SEQEND1);
    9ea6:	6822      	ldr	r2, [r4, #0]
    9ea8:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
    9eac:	f8d2 2114 	ldr.w	r2, [r2, #276]	; 0x114
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_STOPPED);
    9eb0:	6822      	ldr	r2, [r4, #0]
    9eb2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    9eb6:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    if (p_cb->handler)
    9eba:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    9ebe:	4a10      	ldr	r2, [pc, #64]	; (9f00 <nrfx_pwm_init+0x10c>)
    9ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ec4:	b123      	cbz	r3, 9ed0 <nrfx_pwm_init+0xdc>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_registers));
    9ec6:	6820      	ldr	r0, [r4, #0]
    9ec8:	f340 3007 	sbfx	r0, r0, #12, #8
    9ecc:	f7fa f9c0 	bl	4250 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    9ed0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    9ed4:	4b0a      	ldr	r3, [pc, #40]	; (9f00 <nrfx_pwm_init+0x10c>)
    9ed6:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    9eda:	2301      	movs	r3, #1
    9edc:	722b      	strb	r3, [r5, #8]
    return err_code;
    9ede:	480d      	ldr	r0, [pc, #52]	; (9f14 <nrfx_pwm_init+0x120>)
    9ee0:	e798      	b.n	9e14 <nrfx_pwm_init+0x20>
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);
    9ee2:	f8df b034 	ldr.w	fp, [pc, #52]	; 9f18 <nrfx_pwm_init+0x124>
    9ee6:	f44f 7327 	mov.w	r3, #668	; 0x29c
    9eea:	465a      	mov	r2, fp
    9eec:	490b      	ldr	r1, [pc, #44]	; (9f1c <nrfx_pwm_init+0x128>)
    9eee:	4808      	ldr	r0, [pc, #32]	; (9f10 <nrfx_pwm_init+0x11c>)
    9ef0:	f004 ff5f 	bl	edb2 <assert_print>
    9ef4:	f44f 7127 	mov.w	r1, #668	; 0x29c
    9ef8:	4658      	mov	r0, fp
    9efa:	f004 ff53 	bl	eda4 <assert_post_action>
    9efe:	e7b4      	b.n	9e6a <nrfx_pwm_init+0x76>
    9f00:	20001044 	.word	0x20001044
    9f04:	0bad0005 	.word	0x0bad0005
    9f08:	00011f64 	.word	0x00011f64
    9f0c:	00011fa0 	.word	0x00011fa0
    9f10:	00010450 	.word	0x00010450
    9f14:	0bad0000 	.word	0x0bad0000
    9f18:	000114f0 	.word	0x000114f0
    9f1c:	00011548 	.word	0x00011548

00009f20 <nrfx_pwm_simple_playback>:

uint32_t nrfx_pwm_simple_playback(nrfx_pwm_t const *         p_instance,
                                  nrf_pwm_sequence_t const * p_sequence,
                                  uint16_t                   playback_count,
                                  uint32_t                   flags)
{
    9f20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9f24:	4605      	mov	r5, r0
    9f26:	460c      	mov	r4, r1
    9f28:	4617      	mov	r7, r2
    9f2a:	461e      	mov	r6, r3
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    9f2c:	7903      	ldrb	r3, [r0, #4]
    9f2e:	4ab4      	ldr	r2, [pc, #720]	; (a200 <nrfx_pwm_simple_playback+0x2e0>)
    9f30:	eb03 0843 	add.w	r8, r3, r3, lsl #1
    9f34:	eb02 0888 	add.w	r8, r2, r8, lsl #2
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    9f38:	f898 3008 	ldrb.w	r3, [r8, #8]
    9f3c:	2b00      	cmp	r3, #0
    9f3e:	d06d      	beq.n	a01c <nrfx_pwm_simple_playback+0xfc>
    NRFX_ASSERT(playback_count > 0);
    9f40:	2f00      	cmp	r7, #0
    9f42:	d07a      	beq.n	a03a <nrfx_pwm_simple_playback+0x11a>
    NRFX_ASSERT(nrfx_is_in_ram(p_sequence->values.p_raw));
    9f44:	6823      	ldr	r3, [r4, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    9f46:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    9f4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    9f4e:	f040 8083 	bne.w	a058 <nrfx_pwm_simple_playback+0x138>

    // To take advantage of the looping mechanism, we need to use both sequences
    // (single sequence can be played back only once).
    nrf_pwm_sequence_set(p_instance->p_registers, 0, p_sequence);
    9f52:	f8d5 9000 	ldr.w	r9, [r5]
    NRFX_ASSERT(p_seq != NULL);
    9f56:	2c00      	cmp	r4, #0
    9f58:	f000 808d 	beq.w	a076 <nrfx_pwm_simple_playback+0x156>
    nrf_pwm_seq_ptr_set(      p_reg, seq_id, p_seq->values.p_raw);
    9f5c:	f8d4 a000 	ldr.w	sl, [r4]
    NRFX_ASSERT(p_values != NULL);
    9f60:	f1ba 0f00 	cmp.w	sl, #0
    9f64:	f000 8096 	beq.w	a094 <nrfx_pwm_simple_playback+0x174>
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
    9f68:	f8c9 a520 	str.w	sl, [r9, #1312]	; 0x520
    nrf_pwm_seq_cnt_set(      p_reg, seq_id, p_seq->length);
    9f6c:	f8b4 a004 	ldrh.w	sl, [r4, #4]
    NRFX_ASSERT(length != 0);
    9f70:	f1ba 0f00 	cmp.w	sl, #0
    9f74:	f000 809d 	beq.w	a0b2 <nrfx_pwm_simple_playback+0x192>
    NRFX_ASSERT(length <= PWM_SEQ_CNT_CNT_Msk);
    9f78:	f41a 4f00 	tst.w	sl, #32768	; 0x8000
    9f7c:	f040 80a8 	bne.w	a0d0 <nrfx_pwm_simple_playback+0x1b0>
    p_reg->SEQ[seq_id].CNT = length;
    9f80:	f8c9 a524 	str.w	sl, [r9, #1316]	; 0x524
    nrf_pwm_seq_refresh_set(  p_reg, seq_id, p_seq->repeats);
    9f84:	f8d4 a008 	ldr.w	sl, [r4, #8]
    NRFX_ASSERT(refresh <= PWM_SEQ_REFRESH_CNT_Msk);
    9f88:	f1ba 7f80 	cmp.w	sl, #16777216	; 0x1000000
    9f8c:	f080 80af 	bcs.w	a0ee <nrfx_pwm_simple_playback+0x1ce>
    p_reg->SEQ[seq_id].REFRESH  = refresh;
    9f90:	f8c9 a528 	str.w	sl, [r9, #1320]	; 0x528
    nrf_pwm_seq_end_delay_set(p_reg, seq_id, p_seq->end_delay);
    9f94:	f8d4 a00c 	ldr.w	sl, [r4, #12]
    NRFX_ASSERT(end_delay <= PWM_SEQ_ENDDELAY_CNT_Msk);
    9f98:	f1ba 7f80 	cmp.w	sl, #16777216	; 0x1000000
    9f9c:	f080 80b6 	bcs.w	a10c <nrfx_pwm_simple_playback+0x1ec>
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
    9fa0:	f8c9 a52c 	str.w	sl, [r9, #1324]	; 0x52c
    nrf_pwm_sequence_set(p_instance->p_registers, 1, p_sequence);
    9fa4:	f8d5 9000 	ldr.w	r9, [r5]
    NRFX_ASSERT(p_seq != NULL);
    9fa8:	2c00      	cmp	r4, #0
    9faa:	f000 80be 	beq.w	a12a <nrfx_pwm_simple_playback+0x20a>
    nrf_pwm_seq_ptr_set(      p_reg, seq_id, p_seq->values.p_raw);
    9fae:	f8d4 a000 	ldr.w	sl, [r4]
    NRFX_ASSERT(p_values != NULL);
    9fb2:	f1ba 0f00 	cmp.w	sl, #0
    9fb6:	f000 80c7 	beq.w	a148 <nrfx_pwm_simple_playback+0x228>
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
    9fba:	f8c9 a540 	str.w	sl, [r9, #1344]	; 0x540
    nrf_pwm_seq_cnt_set(      p_reg, seq_id, p_seq->length);
    9fbe:	f8b4 a004 	ldrh.w	sl, [r4, #4]
    NRFX_ASSERT(length != 0);
    9fc2:	f1ba 0f00 	cmp.w	sl, #0
    9fc6:	f000 80ce 	beq.w	a166 <nrfx_pwm_simple_playback+0x246>
    NRFX_ASSERT(length <= PWM_SEQ_CNT_CNT_Msk);
    9fca:	f41a 4f00 	tst.w	sl, #32768	; 0x8000
    9fce:	f040 80d9 	bne.w	a184 <nrfx_pwm_simple_playback+0x264>
    p_reg->SEQ[seq_id].CNT = length;
    9fd2:	f8c9 a544 	str.w	sl, [r9, #1348]	; 0x544
    nrf_pwm_seq_refresh_set(  p_reg, seq_id, p_seq->repeats);
    9fd6:	f8d4 a008 	ldr.w	sl, [r4, #8]
    NRFX_ASSERT(refresh <= PWM_SEQ_REFRESH_CNT_Msk);
    9fda:	f1ba 7f80 	cmp.w	sl, #16777216	; 0x1000000
    9fde:	f080 80e0 	bcs.w	a1a2 <nrfx_pwm_simple_playback+0x282>
    p_reg->SEQ[seq_id].REFRESH  = refresh;
    9fe2:	f8c9 a548 	str.w	sl, [r9, #1352]	; 0x548
    nrf_pwm_seq_end_delay_set(p_reg, seq_id, p_seq->end_delay);
    9fe6:	68e4      	ldr	r4, [r4, #12]
    NRFX_ASSERT(end_delay <= PWM_SEQ_ENDDELAY_CNT_Msk);
    9fe8:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    9fec:	f080 80e8 	bcs.w	a1c0 <nrfx_pwm_simple_playback+0x2a0>
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
    9ff0:	f8c9 454c 	str.w	r4, [r9, #1356]	; 0x54c
    bool odd = (playback_count & 1);
    9ff4:	f007 0301 	and.w	r3, r7, #1
    nrf_pwm_loop_set(p_instance->p_registers,
    9ff8:	6829      	ldr	r1, [r5, #0]
    9ffa:	eb03 0757 	add.w	r7, r3, r7, lsr #1
}

NRF_STATIC_INLINE void nrf_pwm_loop_set(NRF_PWM_Type * p_reg,
                                        uint16_t       loop_count)
{
    p_reg->LOOP = loop_count;
    9ffe:	f8c1 7514 	str.w	r7, [r1, #1300]	; 0x514
        (playback_count / 2) + (odd ? 1 : 0));

    uint32_t shorts_mask;
    if (flags & NRFX_PWM_FLAG_STOP)
    a002:	f016 0f01 	tst.w	r6, #1
    a006:	f040 80ea 	bne.w	a1de <nrfx_pwm_simple_playback+0x2be>
    {
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    }
    else if (flags & NRFX_PWM_FLAG_LOOP)
    a00a:	f016 0202 	ands.w	r2, r6, #2
    a00e:	f000 80e7 	beq.w	a1e0 <nrfx_pwm_simple_playback+0x2c0>
    {
        shorts_mask = odd ? NRF_PWM_SHORT_LOOPSDONE_SEQSTART1_MASK
                          : NRF_PWM_SHORT_LOOPSDONE_SEQSTART0_MASK;
    a012:	2b00      	cmp	r3, #0
    a014:	f000 80f0 	beq.w	a1f8 <nrfx_pwm_simple_playback+0x2d8>
    a018:	2208      	movs	r2, #8
    a01a:	e0e1      	b.n	a1e0 <nrfx_pwm_simple_playback+0x2c0>
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    a01c:	f8df 91e4 	ldr.w	r9, [pc, #484]	; a204 <nrfx_pwm_simple_playback+0x2e4>
    a020:	f44f 7396 	mov.w	r3, #300	; 0x12c
    a024:	464a      	mov	r2, r9
    a026:	4978      	ldr	r1, [pc, #480]	; (a208 <nrfx_pwm_simple_playback+0x2e8>)
    a028:	4878      	ldr	r0, [pc, #480]	; (a20c <nrfx_pwm_simple_playback+0x2ec>)
    a02a:	f004 fec2 	bl	edb2 <assert_print>
    a02e:	f44f 7196 	mov.w	r1, #300	; 0x12c
    a032:	4648      	mov	r0, r9
    a034:	f004 feb6 	bl	eda4 <assert_post_action>
    a038:	e782      	b.n	9f40 <nrfx_pwm_simple_playback+0x20>
    NRFX_ASSERT(playback_count > 0);
    a03a:	f8df 91c8 	ldr.w	r9, [pc, #456]	; a204 <nrfx_pwm_simple_playback+0x2e4>
    a03e:	f240 132d 	movw	r3, #301	; 0x12d
    a042:	464a      	mov	r2, r9
    a044:	4972      	ldr	r1, [pc, #456]	; (a210 <nrfx_pwm_simple_playback+0x2f0>)
    a046:	4871      	ldr	r0, [pc, #452]	; (a20c <nrfx_pwm_simple_playback+0x2ec>)
    a048:	f004 feb3 	bl	edb2 <assert_print>
    a04c:	f240 112d 	movw	r1, #301	; 0x12d
    a050:	4648      	mov	r0, r9
    a052:	f004 fea7 	bl	eda4 <assert_post_action>
    a056:	e775      	b.n	9f44 <nrfx_pwm_simple_playback+0x24>
    NRFX_ASSERT(nrfx_is_in_ram(p_sequence->values.p_raw));
    a058:	f8df 91a8 	ldr.w	r9, [pc, #424]	; a204 <nrfx_pwm_simple_playback+0x2e4>
    a05c:	f44f 7397 	mov.w	r3, #302	; 0x12e
    a060:	464a      	mov	r2, r9
    a062:	496c      	ldr	r1, [pc, #432]	; (a214 <nrfx_pwm_simple_playback+0x2f4>)
    a064:	4869      	ldr	r0, [pc, #420]	; (a20c <nrfx_pwm_simple_playback+0x2ec>)
    a066:	f004 fea4 	bl	edb2 <assert_print>
    a06a:	f44f 7197 	mov.w	r1, #302	; 0x12e
    a06e:	4648      	mov	r0, r9
    a070:	f004 fe98 	bl	eda4 <assert_post_action>
    a074:	e76d      	b.n	9f52 <nrfx_pwm_simple_playback+0x32>
    NRFX_ASSERT(p_seq != NULL);
    a076:	f8df a1a0 	ldr.w	sl, [pc, #416]	; a218 <nrfx_pwm_simple_playback+0x2f8>
    a07a:	f240 23a7 	movw	r3, #679	; 0x2a7
    a07e:	4652      	mov	r2, sl
    a080:	4966      	ldr	r1, [pc, #408]	; (a21c <nrfx_pwm_simple_playback+0x2fc>)
    a082:	4862      	ldr	r0, [pc, #392]	; (a20c <nrfx_pwm_simple_playback+0x2ec>)
    a084:	f004 fe95 	bl	edb2 <assert_print>
    a088:	f240 21a7 	movw	r1, #679	; 0x2a7
    a08c:	4650      	mov	r0, sl
    a08e:	f004 fe89 	bl	eda4 <assert_post_action>
    a092:	e763      	b.n	9f5c <nrfx_pwm_simple_playback+0x3c>
    NRFX_ASSERT(p_values != NULL);
    a094:	f8df b180 	ldr.w	fp, [pc, #384]	; a218 <nrfx_pwm_simple_playback+0x2f8>
    a098:	f44f 732d 	mov.w	r3, #692	; 0x2b4
    a09c:	465a      	mov	r2, fp
    a09e:	4960      	ldr	r1, [pc, #384]	; (a220 <nrfx_pwm_simple_playback+0x300>)
    a0a0:	485a      	ldr	r0, [pc, #360]	; (a20c <nrfx_pwm_simple_playback+0x2ec>)
    a0a2:	f004 fe86 	bl	edb2 <assert_print>
    a0a6:	f44f 712d 	mov.w	r1, #692	; 0x2b4
    a0aa:	4658      	mov	r0, fp
    a0ac:	f004 fe7a 	bl	eda4 <assert_post_action>
    a0b0:	e75a      	b.n	9f68 <nrfx_pwm_simple_playback+0x48>
    NRFX_ASSERT(length != 0);
    a0b2:	f8df b164 	ldr.w	fp, [pc, #356]	; a218 <nrfx_pwm_simple_playback+0x2f8>
    a0b6:	f240 23bd 	movw	r3, #701	; 0x2bd
    a0ba:	465a      	mov	r2, fp
    a0bc:	4959      	ldr	r1, [pc, #356]	; (a224 <nrfx_pwm_simple_playback+0x304>)
    a0be:	4853      	ldr	r0, [pc, #332]	; (a20c <nrfx_pwm_simple_playback+0x2ec>)
    a0c0:	f004 fe77 	bl	edb2 <assert_print>
    a0c4:	f240 21bd 	movw	r1, #701	; 0x2bd
    a0c8:	4658      	mov	r0, fp
    a0ca:	f004 fe6b 	bl	eda4 <assert_post_action>
    a0ce:	e753      	b.n	9f78 <nrfx_pwm_simple_playback+0x58>
    NRFX_ASSERT(length <= PWM_SEQ_CNT_CNT_Msk);
    a0d0:	f8df b144 	ldr.w	fp, [pc, #324]	; a218 <nrfx_pwm_simple_playback+0x2f8>
    a0d4:	f240 23be 	movw	r3, #702	; 0x2be
    a0d8:	465a      	mov	r2, fp
    a0da:	4953      	ldr	r1, [pc, #332]	; (a228 <nrfx_pwm_simple_playback+0x308>)
    a0dc:	484b      	ldr	r0, [pc, #300]	; (a20c <nrfx_pwm_simple_playback+0x2ec>)
    a0de:	f004 fe68 	bl	edb2 <assert_print>
    a0e2:	f240 21be 	movw	r1, #702	; 0x2be
    a0e6:	4658      	mov	r0, fp
    a0e8:	f004 fe5c 	bl	eda4 <assert_post_action>
    a0ec:	e748      	b.n	9f80 <nrfx_pwm_simple_playback+0x60>
    NRFX_ASSERT(refresh <= PWM_SEQ_REFRESH_CNT_Msk);
    a0ee:	f8df b128 	ldr.w	fp, [pc, #296]	; a218 <nrfx_pwm_simple_playback+0x2f8>
    a0f2:	f240 23c7 	movw	r3, #711	; 0x2c7
    a0f6:	465a      	mov	r2, fp
    a0f8:	494c      	ldr	r1, [pc, #304]	; (a22c <nrfx_pwm_simple_playback+0x30c>)
    a0fa:	4844      	ldr	r0, [pc, #272]	; (a20c <nrfx_pwm_simple_playback+0x2ec>)
    a0fc:	f004 fe59 	bl	edb2 <assert_print>
    a100:	f240 21c7 	movw	r1, #711	; 0x2c7
    a104:	4658      	mov	r0, fp
    a106:	f004 fe4d 	bl	eda4 <assert_post_action>
    a10a:	e741      	b.n	9f90 <nrfx_pwm_simple_playback+0x70>
    NRFX_ASSERT(end_delay <= PWM_SEQ_ENDDELAY_CNT_Msk);
    a10c:	f8df b108 	ldr.w	fp, [pc, #264]	; a218 <nrfx_pwm_simple_playback+0x2f8>
    a110:	f44f 7334 	mov.w	r3, #720	; 0x2d0
    a114:	465a      	mov	r2, fp
    a116:	4946      	ldr	r1, [pc, #280]	; (a230 <nrfx_pwm_simple_playback+0x310>)
    a118:	483c      	ldr	r0, [pc, #240]	; (a20c <nrfx_pwm_simple_playback+0x2ec>)
    a11a:	f004 fe4a 	bl	edb2 <assert_print>
    a11e:	f44f 7134 	mov.w	r1, #720	; 0x2d0
    a122:	4658      	mov	r0, fp
    a124:	f004 fe3e 	bl	eda4 <assert_post_action>
    a128:	e73a      	b.n	9fa0 <nrfx_pwm_simple_playback+0x80>
    NRFX_ASSERT(p_seq != NULL);
    a12a:	f8df a0ec 	ldr.w	sl, [pc, #236]	; a218 <nrfx_pwm_simple_playback+0x2f8>
    a12e:	f240 23a7 	movw	r3, #679	; 0x2a7
    a132:	4652      	mov	r2, sl
    a134:	4939      	ldr	r1, [pc, #228]	; (a21c <nrfx_pwm_simple_playback+0x2fc>)
    a136:	4835      	ldr	r0, [pc, #212]	; (a20c <nrfx_pwm_simple_playback+0x2ec>)
    a138:	f004 fe3b 	bl	edb2 <assert_print>
    a13c:	f240 21a7 	movw	r1, #679	; 0x2a7
    a140:	4650      	mov	r0, sl
    a142:	f004 fe2f 	bl	eda4 <assert_post_action>
    a146:	e732      	b.n	9fae <nrfx_pwm_simple_playback+0x8e>
    NRFX_ASSERT(p_values != NULL);
    a148:	f8df b0cc 	ldr.w	fp, [pc, #204]	; a218 <nrfx_pwm_simple_playback+0x2f8>
    a14c:	f44f 732d 	mov.w	r3, #692	; 0x2b4
    a150:	465a      	mov	r2, fp
    a152:	4933      	ldr	r1, [pc, #204]	; (a220 <nrfx_pwm_simple_playback+0x300>)
    a154:	482d      	ldr	r0, [pc, #180]	; (a20c <nrfx_pwm_simple_playback+0x2ec>)
    a156:	f004 fe2c 	bl	edb2 <assert_print>
    a15a:	f44f 712d 	mov.w	r1, #692	; 0x2b4
    a15e:	4658      	mov	r0, fp
    a160:	f004 fe20 	bl	eda4 <assert_post_action>
    a164:	e729      	b.n	9fba <nrfx_pwm_simple_playback+0x9a>
    NRFX_ASSERT(length != 0);
    a166:	f8df b0b0 	ldr.w	fp, [pc, #176]	; a218 <nrfx_pwm_simple_playback+0x2f8>
    a16a:	f240 23bd 	movw	r3, #701	; 0x2bd
    a16e:	465a      	mov	r2, fp
    a170:	492c      	ldr	r1, [pc, #176]	; (a224 <nrfx_pwm_simple_playback+0x304>)
    a172:	4826      	ldr	r0, [pc, #152]	; (a20c <nrfx_pwm_simple_playback+0x2ec>)
    a174:	f004 fe1d 	bl	edb2 <assert_print>
    a178:	f240 21bd 	movw	r1, #701	; 0x2bd
    a17c:	4658      	mov	r0, fp
    a17e:	f004 fe11 	bl	eda4 <assert_post_action>
    a182:	e722      	b.n	9fca <nrfx_pwm_simple_playback+0xaa>
    NRFX_ASSERT(length <= PWM_SEQ_CNT_CNT_Msk);
    a184:	f8df b090 	ldr.w	fp, [pc, #144]	; a218 <nrfx_pwm_simple_playback+0x2f8>
    a188:	f240 23be 	movw	r3, #702	; 0x2be
    a18c:	465a      	mov	r2, fp
    a18e:	4926      	ldr	r1, [pc, #152]	; (a228 <nrfx_pwm_simple_playback+0x308>)
    a190:	481e      	ldr	r0, [pc, #120]	; (a20c <nrfx_pwm_simple_playback+0x2ec>)
    a192:	f004 fe0e 	bl	edb2 <assert_print>
    a196:	f240 21be 	movw	r1, #702	; 0x2be
    a19a:	4658      	mov	r0, fp
    a19c:	f004 fe02 	bl	eda4 <assert_post_action>
    a1a0:	e717      	b.n	9fd2 <nrfx_pwm_simple_playback+0xb2>
    NRFX_ASSERT(refresh <= PWM_SEQ_REFRESH_CNT_Msk);
    a1a2:	f8df b074 	ldr.w	fp, [pc, #116]	; a218 <nrfx_pwm_simple_playback+0x2f8>
    a1a6:	f240 23c7 	movw	r3, #711	; 0x2c7
    a1aa:	465a      	mov	r2, fp
    a1ac:	491f      	ldr	r1, [pc, #124]	; (a22c <nrfx_pwm_simple_playback+0x30c>)
    a1ae:	4817      	ldr	r0, [pc, #92]	; (a20c <nrfx_pwm_simple_playback+0x2ec>)
    a1b0:	f004 fdff 	bl	edb2 <assert_print>
    a1b4:	f240 21c7 	movw	r1, #711	; 0x2c7
    a1b8:	4658      	mov	r0, fp
    a1ba:	f004 fdf3 	bl	eda4 <assert_post_action>
    a1be:	e710      	b.n	9fe2 <nrfx_pwm_simple_playback+0xc2>
    NRFX_ASSERT(end_delay <= PWM_SEQ_ENDDELAY_CNT_Msk);
    a1c0:	f8df a054 	ldr.w	sl, [pc, #84]	; a218 <nrfx_pwm_simple_playback+0x2f8>
    a1c4:	f44f 7334 	mov.w	r3, #720	; 0x2d0
    a1c8:	4652      	mov	r2, sl
    a1ca:	4919      	ldr	r1, [pc, #100]	; (a230 <nrfx_pwm_simple_playback+0x310>)
    a1cc:	480f      	ldr	r0, [pc, #60]	; (a20c <nrfx_pwm_simple_playback+0x2ec>)
    a1ce:	f004 fdf0 	bl	edb2 <assert_print>
    a1d2:	f44f 7134 	mov.w	r1, #720	; 0x2d0
    a1d6:	4650      	mov	r0, sl
    a1d8:	f004 fde4 	bl	eda4 <assert_post_action>
    a1dc:	e708      	b.n	9ff0 <nrfx_pwm_simple_playback+0xd0>
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    a1de:	2210      	movs	r2, #16
    }
    else
    {
        shorts_mask = 0;
    }
    nrf_pwm_shorts_set(p_instance->p_registers, shorts_mask);
    a1e0:	6829      	ldr	r1, [r5, #0]
    p_reg->SHORTS = mask;
    a1e2:	f8c1 2200 	str.w	r2, [r1, #512]	; 0x200
                  __func__,
                  p_sequence->length);
    NRFX_LOG_DEBUG("Sequence data:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_sequence->values.p_raw,
                           p_sequence->length * sizeof(uint16_t));
    return start_playback(p_instance, p_cb, flags,
    a1e6:	b2f2      	uxtb	r2, r6
    a1e8:	b143      	cbz	r3, a1fc <nrfx_pwm_simple_playback+0x2dc>
    a1ea:	230c      	movs	r3, #12
    a1ec:	4641      	mov	r1, r8
    a1ee:	4628      	mov	r0, r5
    a1f0:	f005 fcb2 	bl	fb58 <start_playback>
        odd ? NRF_PWM_TASK_SEQSTART1 : NRF_PWM_TASK_SEQSTART0);
}
    a1f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                          : NRF_PWM_SHORT_LOOPSDONE_SEQSTART0_MASK;
    a1f8:	2204      	movs	r2, #4
    a1fa:	e7f1      	b.n	a1e0 <nrfx_pwm_simple_playback+0x2c0>
    return start_playback(p_instance, p_cb, flags,
    a1fc:	2308      	movs	r3, #8
    a1fe:	e7f5      	b.n	a1ec <nrfx_pwm_simple_playback+0x2cc>
    a200:	20001044 	.word	0x20001044
    a204:	00011f64 	.word	0x00011f64
    a208:	00011fac 	.word	0x00011fac
    a20c:	00010450 	.word	0x00010450
    a210:	00011fd8 	.word	0x00011fd8
    a214:	00011fec 	.word	0x00011fec
    a218:	000114f0 	.word	0x000114f0
    a21c:	00012018 	.word	0x00012018
    a220:	00012030 	.word	0x00012030
    a224:	00012048 	.word	0x00012048
    a228:	00012054 	.word	0x00012054
    a22c:	00012074 	.word	0x00012074
    a230:	00012098 	.word	0x00012098

0000a234 <nrfx_pwm_is_stopped>:
    return ret_val;
}


bool nrfx_pwm_is_stopped(nrfx_pwm_t const * p_instance)
{
    a234:	b570      	push	{r4, r5, r6, lr}
    a236:	4605      	mov	r5, r0
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    a238:	7904      	ldrb	r4, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    a23a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    a23e:	4b15      	ldr	r3, [pc, #84]	; (a294 <nrfx_pwm_is_stopped+0x60>)
    a240:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    a244:	7a1b      	ldrb	r3, [r3, #8]
    a246:	b1ab      	cbz	r3, a274 <nrfx_pwm_is_stopped+0x40>

    bool ret_val = false;

    // If the event handler is used (interrupts are enabled), the state will
    // be changed in interrupt handler when the STOPPED event occurs.
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    a248:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    a24c:	4a11      	ldr	r2, [pc, #68]	; (a294 <nrfx_pwm_is_stopped+0x60>)
    a24e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    a252:	7a1b      	ldrb	r3, [r3, #8]
    a254:	b2db      	uxtb	r3, r3
    a256:	2b02      	cmp	r3, #2
    a258:	d01a      	beq.n	a290 <nrfx_pwm_is_stopped+0x5c>
    {
        ret_val = true;
    a25a:	2001      	movs	r0, #1
    }
    // If interrupts are disabled, we must check the STOPPED event here.
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
    a25c:	682b      	ldr	r3, [r5, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a25e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    a262:	b133      	cbz	r3, a272 <nrfx_pwm_is_stopped+0x3e>
    {
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    a264:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    a268:	4b0a      	ldr	r3, [pc, #40]	; (a294 <nrfx_pwm_is_stopped+0x60>)
    a26a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    a26e:	2001      	movs	r0, #1
    a270:	7220      	strb	r0, [r4, #8]
        ret_val = true;
    }

    NRFX_LOG_INFO("%s returned %d.", __func__, ret_val);
    return ret_val;
}
    a272:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    a274:	4e08      	ldr	r6, [pc, #32]	; (a298 <nrfx_pwm_is_stopped+0x64>)
    a276:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
    a27a:	4632      	mov	r2, r6
    a27c:	4907      	ldr	r1, [pc, #28]	; (a29c <nrfx_pwm_is_stopped+0x68>)
    a27e:	4808      	ldr	r0, [pc, #32]	; (a2a0 <nrfx_pwm_is_stopped+0x6c>)
    a280:	f004 fd97 	bl	edb2 <assert_print>
    a284:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    a288:	4630      	mov	r0, r6
    a28a:	f004 fd8b 	bl	eda4 <assert_post_action>
    a28e:	e7db      	b.n	a248 <nrfx_pwm_is_stopped+0x14>
    bool ret_val = false;
    a290:	2000      	movs	r0, #0
    a292:	e7e3      	b.n	a25c <nrfx_pwm_is_stopped+0x28>
    a294:	20001044 	.word	0x20001044
    a298:	00011f64 	.word	0x00011f64
    a29c:	00011fac 	.word	0x00011fac
    a2a0:	00010450 	.word	0x00010450

0000a2a4 <nrfx_pwm_stop>:
{
    a2a4:	b570      	push	{r4, r5, r6, lr}
    a2a6:	4604      	mov	r4, r0
    a2a8:	460d      	mov	r5, r1
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
    a2aa:	7903      	ldrb	r3, [r0, #4]
    a2ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    a2b0:	4a14      	ldr	r2, [pc, #80]	; (a304 <nrfx_pwm_stop+0x60>)
    a2b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    a2b6:	7a1b      	ldrb	r3, [r3, #8]
    a2b8:	b1ab      	cbz	r3, a2e6 <nrfx_pwm_stop+0x42>
    nrf_pwm_shorts_set(p_instance->p_registers, 0);
    a2ba:	6823      	ldr	r3, [r4, #0]
    p_reg->SHORTS = mask;
    a2bc:	2200      	movs	r2, #0
    a2be:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    nrf_pwm_task_trigger(p_instance->p_registers, NRF_PWM_TASK_STOP);
    a2c2:	6823      	ldr	r3, [r4, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a2c4:	2201      	movs	r2, #1
    a2c6:	605a      	str	r2, [r3, #4]
    if (nrfx_pwm_is_stopped(p_instance))
    a2c8:	4620      	mov	r0, r4
    a2ca:	f7ff ffb3 	bl	a234 <nrfx_pwm_is_stopped>
    a2ce:	4603      	mov	r3, r0
    a2d0:	b938      	cbnz	r0, a2e2 <nrfx_pwm_stop+0x3e>
            if (nrfx_pwm_is_stopped(p_instance))
    a2d2:	4620      	mov	r0, r4
    a2d4:	f7ff ffae 	bl	a234 <nrfx_pwm_is_stopped>
    a2d8:	4603      	mov	r3, r0
    a2da:	b910      	cbnz	r0, a2e2 <nrfx_pwm_stop+0x3e>
        } while (wait_until_stopped);
    a2dc:	2d00      	cmp	r5, #0
    a2de:	d1f8      	bne.n	a2d2 <nrfx_pwm_stop+0x2e>
    bool ret_val = false;
    a2e0:	462b      	mov	r3, r5
}
    a2e2:	4618      	mov	r0, r3
    a2e4:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
    a2e6:	4e08      	ldr	r6, [pc, #32]	; (a308 <nrfx_pwm_stop+0x64>)
    a2e8:	f240 1385 	movw	r3, #389	; 0x185
    a2ec:	4632      	mov	r2, r6
    a2ee:	4907      	ldr	r1, [pc, #28]	; (a30c <nrfx_pwm_stop+0x68>)
    a2f0:	4807      	ldr	r0, [pc, #28]	; (a310 <nrfx_pwm_stop+0x6c>)
    a2f2:	f004 fd5e 	bl	edb2 <assert_print>
    a2f6:	f240 1185 	movw	r1, #389	; 0x185
    a2fa:	4630      	mov	r0, r6
    a2fc:	f004 fd52 	bl	eda4 <assert_post_action>
    a300:	e7db      	b.n	a2ba <nrfx_pwm_stop+0x16>
    a302:	bf00      	nop
    a304:	20001044 	.word	0x20001044
    a308:	00011f64 	.word	0x00011f64
    a30c:	000120bc 	.word	0x000120bc
    a310:	00010450 	.word	0x00010450

0000a314 <twi_process_error>:
} twim_control_block_t;

static twim_control_block_t m_cb[NRFX_TWIM_ENABLED_COUNT];

static nrfx_err_t twi_process_error(uint32_t errorsrc)
{
    a314:	4603      	mov	r3, r0
    nrfx_err_t ret = NRFX_ERROR_INTERNAL;

    if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
    a316:	f010 0f01 	tst.w	r0, #1
    a31a:	d108      	bne.n	a32e <twi_process_error+0x1a>
    nrfx_err_t ret = NRFX_ERROR_INTERNAL;
    a31c:	4806      	ldr	r0, [pc, #24]	; (a338 <twi_process_error+0x24>)
    {
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    }

    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
    a31e:	f013 0f02 	tst.w	r3, #2
    a322:	d000      	beq.n	a326 <twi_process_error+0x12>
    {
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    a324:	4805      	ldr	r0, [pc, #20]	; (a33c <twi_process_error+0x28>)
    }

    if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
    a326:	f013 0f04 	tst.w	r3, #4
    a32a:	d102      	bne.n	a332 <twi_process_error+0x1e>
    {
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    }

    return ret;
}
    a32c:	4770      	bx	lr
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    a32e:	4804      	ldr	r0, [pc, #16]	; (a340 <twi_process_error+0x2c>)
    a330:	e7f5      	b.n	a31e <twi_process_error+0xa>
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    a332:	4804      	ldr	r0, [pc, #16]	; (a344 <twi_process_error+0x30>)
    return ret;
    a334:	e7fa      	b.n	a32c <twi_process_error+0x18>
    a336:	bf00      	nop
    a338:	0bad0001 	.word	0x0bad0001
    a33c:	0bae0001 	.word	0x0bae0001
    a340:	0bae0000 	.word	0x0bae0000
    a344:	0bae0002 	.word	0x0bae0002

0000a348 <twim_xfer>:
}
static nrfx_err_t twim_xfer(twim_control_block_t        * p_cb,
                            NRF_TWIM_Type               * p_twim,
                            nrfx_twim_xfer_desc_t const * p_xfer_desc,
                            uint32_t                      flags)
{
    a348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a34c:	4605      	mov	r5, r0
    a34e:	460c      	mov	r4, r1
    a350:	4616      	mov	r6, r2
    a352:	461f      	mov	r7, r3
    nrfx_err_t err_code = NRFX_SUCCESS;
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    p_cb->error = false;
    a354:	2300      	movs	r3, #0
    a356:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e

    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
    a35a:	6853      	ldr	r3, [r2, #4]
    a35c:	b133      	cbz	r3, a36c <twim_xfer+0x24>
    a35e:	68d3      	ldr	r3, [r2, #12]
    a360:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    a364:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    a368:	f040 8167 	bne.w	a63a <twim_xfer+0x2f2>
}

NRF_STATIC_INLINE void nrf_twim_int_disable(NRF_TWIM_Type * p_reg,
                                            uint32_t mask)
{
    p_reg->INTENCLR = mask;
    a36c:	4bb7      	ldr	r3, [pc, #732]	; (a64c <twim_xfer+0x304>)
    a36e:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    /* Block TWI interrupts to ensure that function is not interrupted by TWI interrupt. */
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    if (p_cb->busy)
    a372:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
    a376:	f003 08ff 	and.w	r8, r3, #255	; 0xff
    a37a:	2b00      	cmp	r3, #0
    a37c:	d136      	bne.n	a3ec <twim_xfer+0xa4>
        return err_code;
    }
    else
    {
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
    a37e:	f017 0f14 	tst.w	r7, #20
    a382:	bf0c      	ite	eq
    a384:	2301      	moveq	r3, #1
    a386:	2300      	movne	r3, #0
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
    a388:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    }

    p_cb->xfer_desc = *p_xfer_desc;
    a38c:	f105 0c0c 	add.w	ip, r5, #12
    a390:	46b6      	mov	lr, r6
    a392:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    a396:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    a39a:	f8de 3000 	ldr.w	r3, [lr]
    a39e:	f8cc 3000 	str.w	r3, [ip]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
    a3a2:	f3c7 1300 	ubfx	r3, r7, #4, #1
    a3a6:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    p_cb->flags = flags;
    a3aa:	622f      	str	r7, [r5, #32]
    nrf_twim_address_set(p_twim, p_xfer_desc->address);
    a3ac:	7873      	ldrb	r3, [r6, #1]
}

NRF_STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                            uint8_t address)
{
    p_reg->ADDRESS = address;
    a3ae:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a3b2:	2300      	movs	r3, #0
    a3b4:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    a3b8:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    a3bc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    a3c0:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    a3c4:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
    a3c8:	f8d4 2160 	ldr.w	r2, [r4, #352]	; 0x160
    a3cc:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    a3d0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_STOPPED);
    nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_ERROR);
    nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_LASTTX);
    nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_SUSPENDED);

    twim_list_enable_handle(p_twim, flags);
    a3d4:	4639      	mov	r1, r7
    a3d6:	4620      	mov	r0, r4
    a3d8:	f005 fc2a 	bl	fc30 <twim_list_enable_handle>
    switch (p_xfer_desc->type)
    a3dc:	7833      	ldrb	r3, [r6, #0]
    a3de:	2b03      	cmp	r3, #3
    a3e0:	f200 80de 	bhi.w	a5a0 <twim_xfer+0x258>
    a3e4:	e8df f003 	tbb	[pc, r3]
    a3e8:	086dca8b 	.word	0x086dca8b
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    a3ec:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
    a3ee:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
        return err_code;
    a3f2:	f8df 925c 	ldr.w	r9, [pc, #604]	; a650 <twim_xfer+0x308>
    a3f6:	e0b7      	b.n	a568 <twim_xfer+0x220>
    {
    case NRFX_TWIM_XFER_TXTX:
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_REPEATED_XFER));
    a3f8:	f017 0f10 	tst.w	r7, #16
    a3fc:	d134      	bne.n	a468 <twim_xfer+0x120>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_HOLD_XFER));
    a3fe:	f017 0f08 	tst.w	r7, #8
    a402:	d140      	bne.n	a486 <twim_xfer+0x13e>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER));
    a404:	f017 0f04 	tst.w	r7, #4
    a408:	d14c      	bne.n	a4a4 <twim_xfer+0x15c>
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    a40a:	6933      	ldr	r3, [r6, #16]
    a40c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    a410:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    a414:	f040 8114 	bne.w	a640 <twim_xfer+0x2f8>
}

NRF_STATIC_INLINE void nrf_twim_shorts_set(NRF_TWIM_Type * p_reg,
                                           uint32_t mask)
{
    p_reg->SHORTS = mask;
    a418:	f44f 7380 	mov.w	r3, #256	; 0x100
    a41c:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
                             __func__,
                             NRFX_LOG_ERROR_STRING_GET(err_code));
            return err_code;
        }
        nrf_twim_shorts_set(p_twim, NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK);
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    a420:	68f2      	ldr	r2, [r6, #12]
    a422:	6873      	ldr	r3, [r6, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    a424:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    a428:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a42c:	2300      	movs	r3, #0
    a42e:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
    a432:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a436:	2301      	movs	r3, #1
    a438:	6223      	str	r3, [r4, #32]
    a43a:	60a3      	str	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a43c:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_TXSTARTED);
        nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_RESUME);
        nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_STARTTX);
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
    a440:	2b00      	cmp	r3, #0
    a442:	d0fb      	beq.n	a43c <twim_xfer+0xf4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a444:	2300      	movs	r3, #0
    a446:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
    a44a:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
        {}
        NRFX_LOG_DEBUG("TWIM: Event: %s.", EVT_TO_STR_TWIM(NRF_TWIM_EVENT_TXSTARTED));
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_TXSTARTED);
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    a44e:	6932      	ldr	r2, [r6, #16]
    a450:	68b3      	ldr	r3, [r6, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    a452:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    a456:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    a45a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    a45e:	60ab      	str	r3, [r5, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    a460:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
    a462:	f8df 91f0 	ldr.w	r9, [pc, #496]	; a654 <twim_xfer+0x30c>
        break;
    a466:	e05f      	b.n	a528 <twim_xfer+0x1e0>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_REPEATED_XFER));
    a468:	f8df 91ec 	ldr.w	r9, [pc, #492]	; a658 <twim_xfer+0x310>
    a46c:	f240 13dd 	movw	r3, #477	; 0x1dd
    a470:	464a      	mov	r2, r9
    a472:	497a      	ldr	r1, [pc, #488]	; (a65c <twim_xfer+0x314>)
    a474:	487a      	ldr	r0, [pc, #488]	; (a660 <twim_xfer+0x318>)
    a476:	f004 fc9c 	bl	edb2 <assert_print>
    a47a:	f240 11dd 	movw	r1, #477	; 0x1dd
    a47e:	4648      	mov	r0, r9
    a480:	f004 fc90 	bl	eda4 <assert_post_action>
    a484:	e7bb      	b.n	a3fe <twim_xfer+0xb6>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_HOLD_XFER));
    a486:	f8df 91d0 	ldr.w	r9, [pc, #464]	; a658 <twim_xfer+0x310>
    a48a:	f44f 73ef 	mov.w	r3, #478	; 0x1de
    a48e:	464a      	mov	r2, r9
    a490:	4974      	ldr	r1, [pc, #464]	; (a664 <twim_xfer+0x31c>)
    a492:	4873      	ldr	r0, [pc, #460]	; (a660 <twim_xfer+0x318>)
    a494:	f004 fc8d 	bl	edb2 <assert_print>
    a498:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    a49c:	4648      	mov	r0, r9
    a49e:	f004 fc81 	bl	eda4 <assert_post_action>
    a4a2:	e7af      	b.n	a404 <twim_xfer+0xbc>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER));
    a4a4:	f8df 91b0 	ldr.w	r9, [pc, #432]	; a658 <twim_xfer+0x310>
    a4a8:	f240 13df 	movw	r3, #479	; 0x1df
    a4ac:	464a      	mov	r2, r9
    a4ae:	496e      	ldr	r1, [pc, #440]	; (a668 <twim_xfer+0x320>)
    a4b0:	486b      	ldr	r0, [pc, #428]	; (a660 <twim_xfer+0x318>)
    a4b2:	f004 fc7e 	bl	edb2 <assert_print>
    a4b6:	f240 11df 	movw	r1, #479	; 0x1df
    a4ba:	4648      	mov	r0, r9
    a4bc:	f004 fc72 	bl	eda4 <assert_post_action>
    a4c0:	e7a3      	b.n	a40a <twim_xfer+0xc2>
    case NRFX_TWIM_XFER_TXRX:
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    a4c2:	68f2      	ldr	r2, [r6, #12]
    a4c4:	6873      	ldr	r3, [r6, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    a4c6:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    a4ca:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    a4ce:	6933      	ldr	r3, [r6, #16]
    a4d0:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
    a4d4:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    a4d8:	f040 80b5 	bne.w	a646 <twim_xfer+0x2fe>
            NRFX_LOG_WARNING("Function: %s, error code: %s.",
                             __func__,
                             NRFX_LOG_ERROR_STRING_GET(err_code));
            return err_code;
        }
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    a4dc:	68b2      	ldr	r2, [r6, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    a4de:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    a4e2:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    a4e6:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    a4ea:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        nrf_twim_shorts_set(p_twim, NRF_TWIM_SHORT_LASTTX_STARTRX_MASK |
                                    NRF_TWIM_SHORT_LASTRX_STOP_MASK);
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    a4ee:	2302      	movs	r3, #2
    a4f0:	60ab      	str	r3, [r5, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a4f2:	2301      	movs	r3, #1
    a4f4:	6223      	str	r3, [r4, #32]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    a4f6:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
    a4f8:	f8df 9158 	ldr.w	r9, [pc, #344]	; a654 <twim_xfer+0x30c>
}
    a4fc:	e014      	b.n	a528 <twim_xfer+0x1e0>
        nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_RESUME);
        break;
    case NRFX_TWIM_XFER_TX:
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    a4fe:	68f2      	ldr	r2, [r6, #12]
    a500:	6873      	ldr	r3, [r6, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    a502:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    a506:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
    a50a:	f017 0f20 	tst.w	r7, #32
    a50e:	d02e      	beq.n	a56e <twim_xfer+0x226>
    p_reg->SHORTS = mask;
    a510:	f44f 7380 	mov.w	r3, #256	; 0x100
    a514:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        {
            nrf_twim_shorts_set(p_twim, NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK);
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    a518:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    a51c:	60ab      	str	r3, [r5, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a51e:	2301      	movs	r3, #1
    a520:	6223      	str	r3, [r4, #32]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    a522:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
    a524:	f8df 912c 	ldr.w	r9, [pc, #300]	; a654 <twim_xfer+0x30c>
    default:
        err_code = NRFX_ERROR_INVALID_PARAM;
        break;
    }

    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
    a528:	f017 0f08 	tst.w	r7, #8
    a52c:	d107      	bne.n	a53e <twim_xfer+0x1f6>
    a52e:	7832      	ldrb	r2, [r6, #0]
    a530:	2a03      	cmp	r2, #3
    a532:	d004      	beq.n	a53e <twim_xfer+0x1f6>
    a534:	2201      	movs	r2, #1
    a536:	50e2      	str	r2, [r4, r3]
    {
        nrf_twim_task_trigger(p_twim, start_task);
        if (p_xfer_desc->primary_length == 0)
    a538:	6873      	ldr	r3, [r6, #4]
    a53a:	b903      	cbnz	r3, a53e <twim_xfer+0x1f6>
    a53c:	6162      	str	r2, [r4, #20]
        {
            nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_STOP);
        }
    }

    if (p_cb->handler)
    a53e:	682b      	ldr	r3, [r5, #0]
    a540:	b393      	cbz	r3, a5a8 <twim_xfer+0x260>
    {
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
    a542:	f017 0f04 	tst.w	r7, #4
    a546:	d001      	beq.n	a54c <twim_xfer+0x204>
        {
            p_cb->int_mask = 0;
    a548:	2300      	movs	r3, #0
    a54a:	60ab      	str	r3, [r5, #8]
        }

        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
    a54c:	f017 0f40 	tst.w	r7, #64	; 0x40
    a550:	d103      	bne.n	a55a <twim_xfer+0x212>
        {
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
    a552:	68ab      	ldr	r3, [r5, #8]
    a554:	f043 0302 	orr.w	r3, r3, #2
    a558:	60ab      	str	r3, [r5, #8]
        }

        // Interrupts for ERROR are implicitly enabled, regardless of driver configuration.
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
    a55a:	68ab      	ldr	r3, [r5, #8]
    a55c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    a560:	60ab      	str	r3, [r5, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    a562:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
    a564:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
                err_code = NRFX_ERROR_INTERNAL;
            }
        }
    }
    return err_code;
}
    a568:	4648      	mov	r0, r9
    a56a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    p_reg->SHORTS = mask;
    a56e:	f44f 7300 	mov.w	r3, #512	; 0x200
    a572:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    a576:	2302      	movs	r3, #2
    a578:	60ab      	str	r3, [r5, #8]
    a57a:	e7d0      	b.n	a51e <twim_xfer+0x1d6>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    a57c:	68f2      	ldr	r2, [r6, #12]
    a57e:	6873      	ldr	r3, [r6, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    a580:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    a584:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    a588:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    a58c:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    a590:	2302      	movs	r3, #2
    a592:	60ab      	str	r3, [r5, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a594:	2301      	movs	r3, #1
    a596:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
    a598:	2300      	movs	r3, #0
    nrfx_err_t err_code = NRFX_SUCCESS;
    a59a:	f8df 90b8 	ldr.w	r9, [pc, #184]	; a654 <twim_xfer+0x30c>
}
    a59e:	e7c3      	b.n	a528 <twim_xfer+0x1e0>
    switch (p_xfer_desc->type)
    a5a0:	2308      	movs	r3, #8
    a5a2:	f8df 90c8 	ldr.w	r9, [pc, #200]	; a66c <twim_xfer+0x324>
    a5a6:	e7bf      	b.n	a528 <twim_xfer+0x1e0>
        bool transmission_finished = false;
    a5a8:	4643      	mov	r3, r8
    a5aa:	e000      	b.n	a5ae <twim_xfer+0x266>
        } while (!transmission_finished);
    a5ac:	bb6b      	cbnz	r3, a60a <twim_xfer+0x2c2>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a5ae:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
    a5b2:	b102      	cbz	r2, a5b6 <twim_xfer+0x26e>
                transmission_finished = true;
    a5b4:	2301      	movs	r3, #1
    a5b6:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    a5ba:	b12a      	cbz	r2, a5c8 <twim_xfer+0x280>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a5bc:	2300      	movs	r3, #0
    a5be:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    a5c2:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
                transmission_finished = true;
    a5c6:	2301      	movs	r3, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a5c8:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    a5cc:	2a00      	cmp	r2, #0
    a5ce:	d0ed      	beq.n	a5ac <twim_xfer+0x264>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a5d0:	2200      	movs	r2, #0
    a5d2:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
    a5d6:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a5da:	f8d4 2160 	ldr.w	r2, [r4, #352]	; 0x160
}

NRF_STATIC_INLINE uint32_t nrf_twim_shorts_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->SHORTS;
    a5de:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
    a5e2:	b112      	cbz	r2, a5ea <twim_xfer+0x2a2>
    a5e4:	f411 7f00 	tst.w	r1, #512	; 0x200
    a5e8:	d103      	bne.n	a5f2 <twim_xfer+0x2aa>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a5ea:	2301      	movs	r3, #1
    a5ec:	6223      	str	r3, [r4, #32]
    a5ee:	6163      	str	r3, [r4, #20]
                    transmission_finished = false;
    a5f0:	4643      	mov	r3, r8
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
    a5f2:	2a00      	cmp	r2, #0
    a5f4:	d0da      	beq.n	a5ac <twim_xfer+0x264>
    a5f6:	f411 7f80 	tst.w	r1, #256	; 0x100
    a5fa:	d0d7      	beq.n	a5ac <twim_xfer+0x264>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a5fc:	2300      	movs	r3, #0
    a5fe:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    a602:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
                    transmission_finished = false;
    a606:	4643      	mov	r3, r8
    a608:	e7d1      	b.n	a5ae <twim_xfer+0x266>
    uint32_t error_source = p_reg->ERRORSRC;
    a60a:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    a60e:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
        p_cb->busy = false;
    a612:	2300      	movs	r3, #0
    a614:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
        if (errorsrc)
    a618:	b118      	cbz	r0, a622 <twim_xfer+0x2da>
            err_code = twi_process_error(errorsrc);
    a61a:	f7ff fe7b 	bl	a314 <twi_process_error>
    a61e:	4681      	mov	r9, r0
    a620:	e7a2      	b.n	a568 <twim_xfer+0x220>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
    a622:	f017 0f40 	tst.w	r7, #64	; 0x40
    a626:	d19f      	bne.n	a568 <twim_xfer+0x220>
                !xfer_completeness_check(p_twim, p_cb))
    a628:	4629      	mov	r1, r5
    a62a:	4620      	mov	r0, r4
    a62c:	f005 fabf 	bl	fbae <xfer_completeness_check>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
    a630:	2800      	cmp	r0, #0
    a632:	d199      	bne.n	a568 <twim_xfer+0x220>
                err_code = NRFX_ERROR_INTERNAL;
    a634:	f8df 9038 	ldr.w	r9, [pc, #56]	; a670 <twim_xfer+0x328>
    a638:	e796      	b.n	a568 <twim_xfer+0x220>
        return err_code;
    a63a:	f8df 9038 	ldr.w	r9, [pc, #56]	; a674 <twim_xfer+0x32c>
    a63e:	e793      	b.n	a568 <twim_xfer+0x220>
            return err_code;
    a640:	f8df 9030 	ldr.w	r9, [pc, #48]	; a674 <twim_xfer+0x32c>
    a644:	e790      	b.n	a568 <twim_xfer+0x220>
            return err_code;
    a646:	f8df 902c 	ldr.w	r9, [pc, #44]	; a674 <twim_xfer+0x32c>
    a64a:	e78d      	b.n	a568 <twim_xfer+0x220>
    a64c:	019c0202 	.word	0x019c0202
    a650:	0bad000b 	.word	0x0bad000b
    a654:	0bad0000 	.word	0x0bad0000
    a658:	00012104 	.word	0x00012104
    a65c:	00012140 	.word	0x00012140
    a660:	00010450 	.word	0x00010450
    a664:	00012158 	.word	0x00012158
    a668:	00012170 	.word	0x00012170
    a66c:	0bad0004 	.word	0x0bad0004
    a670:	0bad0001 	.word	0x0bad0001
    a674:	0bad000a 	.word	0x0bad000a

0000a678 <twim_irq_handler>:
{
    return nrf_twim_event_address_get(p_instance->p_twim, NRF_TWIM_EVENT_STOPPED);
}

static void twim_irq_handler(NRF_TWIM_Type * p_twim, twim_control_block_t * p_cb)
{
    a678:	b570      	push	{r4, r5, r6, lr}
    a67a:	b086      	sub	sp, #24
    a67c:	4604      	mov	r4, r0
    a67e:	460d      	mov	r5, r1
            return;
        }
    }
#endif

    NRFX_ASSERT(p_cb->handler);
    a680:	680b      	ldr	r3, [r1, #0]
    a682:	2b00      	cmp	r3, #0
    a684:	d06f      	beq.n	a766 <twim_irq_handler+0xee>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a686:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124

    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    a68a:	b143      	cbz	r3, a69e <twim_irq_handler+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a68c:	2300      	movs	r3, #0
    a68e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    a692:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a696:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    {
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_ERROR);
        NRFX_LOG_DEBUG("TWIM: Event: %s.", EVT_TO_STR_TWIM(NRF_TWIM_EVENT_ERROR));
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    a69a:	2b00      	cmp	r3, #0
    a69c:	d071      	beq.n	a782 <twim_irq_handler+0x10a>
    a69e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
        }
    }

    nrfx_twim_evt_t event;

    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    a6a2:	2b00      	cmp	r3, #0
    a6a4:	f000 808d 	beq.w	a7c2 <twim_irq_handler+0x14a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a6a8:	2300      	movs	r3, #0
    a6aa:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    a6ae:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    {
        NRFX_LOG_DEBUG("TWIM: Event: %s.", EVT_TO_STR_TWIM(NRF_TWIM_EVENT_STOPPED));
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_STOPPED);

        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
    a6b2:	6a2b      	ldr	r3, [r5, #32]
    a6b4:	f013 0f40 	tst.w	r3, #64	; 0x40
    a6b8:	d103      	bne.n	a6c2 <twim_irq_handler+0x4a>
    a6ba:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    a6be:	2b00      	cmp	r3, #0
    a6c0:	d076      	beq.n	a7b0 <twim_irq_handler+0x138>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
        }

        // Further processing of STOPPED event is valid only if NO_XFER_EVT_HANDLER
        // setting is not used.
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
    a6c2:	6a2b      	ldr	r3, [r5, #32]
    a6c4:	f013 0f04 	tst.w	r3, #4
    a6c8:	d130      	bne.n	a72c <twim_irq_handler+0xb4>
        {
            event.xfer_desc = p_cb->xfer_desc;
    a6ca:	f10d 0c04 	add.w	ip, sp, #4
    a6ce:	f105 0e0c 	add.w	lr, r5, #12
    a6d2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    a6d6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    a6da:	f8de 3000 	ldr.w	r3, [lr]
    a6de:	f8cc 3000 	str.w	r3, [ip]
    a6e2:	2300      	movs	r3, #0
    a6e4:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
    a6e8:	f8d4 2160 	ldr.w	r2, [r4, #352]	; 0x160
    a6ec:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
    a6f0:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
            nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_LASTTX);
            nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_LASTRX);
            if (!p_cb->repeated || p_cb->error)
    a6f4:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    a6f8:	b113      	cbz	r3, a700 <twim_irq_handler+0x88>
    a6fa:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    a6fe:	b1ab      	cbz	r3, a72c <twim_irq_handler+0xb4>
    p_reg->SHORTS = mask;
    a700:	2300      	movs	r3, #0
    a702:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
            {
                nrf_twim_shorts_set(p_twim, 0);
                p_cb->int_mask = 0;
    a706:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
    a708:	4b5a      	ldr	r3, [pc, #360]	; (a874 <twim_irq_handler+0x1fc>)
    a70a:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    a70e:	0b22      	lsrs	r2, r4, #12
    a710:	f344 3307 	sbfx	r3, r4, #12, #8
  if ((int32_t)(IRQn) >= 0)
    a714:	2b00      	cmp	r3, #0
    a716:	db09      	blt.n	a72c <twim_irq_handler+0xb4>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a718:	f002 021f 	and.w	r2, r2, #31
    a71c:	095b      	lsrs	r3, r3, #5
    a71e:	2101      	movs	r1, #1
    a720:	fa01 f202 	lsl.w	r2, r1, r2
    a724:	3360      	adds	r3, #96	; 0x60
    a726:	4954      	ldr	r1, [pc, #336]	; (a878 <twim_irq_handler+0x200>)
    a728:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    uint32_t error_source = p_reg->ERRORSRC;
    a72c:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    a730:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            return;
        }
    }

    uint32_t errorsrc = nrf_twim_errorsrc_get_and_clear(p_twim);
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
    a734:	f013 0f02 	tst.w	r3, #2
    a738:	f000 8082 	beq.w	a840 <twim_irq_handler+0x1c8>
    {
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
    a73c:	2301      	movs	r3, #1
    a73e:	f88d 3000 	strb.w	r3, [sp]
    {
        event.type = NRFX_TWIM_EVT_DONE;
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWIM_EVT_DONE));
    }

    if (!p_cb->repeated)
    a742:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    a746:	b90b      	cbnz	r3, a74c <twim_irq_handler+0xd4>
    {
        p_cb->busy = false;
    a748:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    }

    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
    a74c:	6a2b      	ldr	r3, [r5, #32]
    a74e:	f013 0f04 	tst.w	r3, #4
    a752:	d002      	beq.n	a75a <twim_irq_handler+0xe2>
    a754:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    a758:	b11b      	cbz	r3, a762 <twim_irq_handler+0xea>
    {
        p_cb->handler(&event, p_cb->p_context);
    a75a:	682b      	ldr	r3, [r5, #0]
    a75c:	6869      	ldr	r1, [r5, #4]
    a75e:	4668      	mov	r0, sp
    a760:	4798      	blx	r3
    }
}
    a762:	b006      	add	sp, #24
    a764:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(p_cb->handler);
    a766:	4e45      	ldr	r6, [pc, #276]	; (a87c <twim_irq_handler+0x204>)
    a768:	f44f 7337 	mov.w	r3, #732	; 0x2dc
    a76c:	4632      	mov	r2, r6
    a76e:	4944      	ldr	r1, [pc, #272]	; (a880 <twim_irq_handler+0x208>)
    a770:	4844      	ldr	r0, [pc, #272]	; (a884 <twim_irq_handler+0x20c>)
    a772:	f004 fb1e 	bl	edb2 <assert_print>
    a776:	f44f 7137 	mov.w	r1, #732	; 0x2dc
    a77a:	4630      	mov	r0, r6
    a77c:	f004 fb12 	bl	eda4 <assert_post_action>
    a780:	e781      	b.n	a686 <twim_irq_handler+0xe>
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
    a782:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENCLR = mask;
    a784:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    a788:	2302      	movs	r3, #2
    a78a:	60ab      	str	r3, [r5, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    a78c:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
    a78e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a792:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
    a796:	b123      	cbz	r3, a7a2 <twim_irq_handler+0x12a>
    return p_reg->SHORTS;
    a798:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
    a79c:	f413 7f00 	tst.w	r3, #512	; 0x200
    a7a0:	d102      	bne.n	a7a8 <twim_irq_handler+0x130>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a7a2:	2301      	movs	r3, #1
    a7a4:	6223      	str	r3, [r4, #32]
    a7a6:	6163      	str	r3, [r4, #20]
            p_cb->error = true;
    a7a8:	2301      	movs	r3, #1
    a7aa:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
            return;
    a7ae:	e7d8      	b.n	a762 <twim_irq_handler+0xea>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
    a7b0:	4629      	mov	r1, r5
    a7b2:	4620      	mov	r0, r4
    a7b4:	f005 f9fb 	bl	fbae <xfer_completeness_check>
    a7b8:	f080 0001 	eor.w	r0, r0, #1
    a7bc:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
    a7c0:	e77f      	b.n	a6c2 <twim_irq_handler+0x4a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a7c2:	2300      	movs	r3, #0
    a7c4:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    a7c8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
    a7cc:	7b2b      	ldrb	r3, [r5, #12]
    a7ce:	bb2b      	cbnz	r3, a81c <twim_irq_handler+0x1a4>
            event.xfer_desc = p_cb->xfer_desc;
    a7d0:	f10d 0c04 	add.w	ip, sp, #4
    a7d4:	f105 0e0c 	add.w	lr, r5, #12
    a7d8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    a7dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    a7e0:	f8de 3000 	ldr.w	r3, [lr]
    a7e4:	f8cc 3000 	str.w	r3, [ip]
            if (!p_cb->repeated)
    a7e8:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    a7ec:	2b00      	cmp	r3, #0
    a7ee:	d19d      	bne.n	a72c <twim_irq_handler+0xb4>
    p_reg->SHORTS = mask;
    a7f0:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
                p_cb->int_mask = 0;
    a7f4:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
    a7f6:	4b1f      	ldr	r3, [pc, #124]	; (a874 <twim_irq_handler+0x1fc>)
    a7f8:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    a7fc:	0b22      	lsrs	r2, r4, #12
    a7fe:	f344 3307 	sbfx	r3, r4, #12, #8
  if ((int32_t)(IRQn) >= 0)
    a802:	2b00      	cmp	r3, #0
    a804:	db92      	blt.n	a72c <twim_irq_handler+0xb4>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a806:	f002 021f 	and.w	r2, r2, #31
    a80a:	095b      	lsrs	r3, r3, #5
    a80c:	2101      	movs	r1, #1
    a80e:	fa01 f202 	lsl.w	r2, r1, r2
    a812:	3360      	adds	r3, #96	; 0x60
    a814:	4918      	ldr	r1, [pc, #96]	; (a878 <twim_irq_handler+0x200>)
    a816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a81a:	e787      	b.n	a72c <twim_irq_handler+0xb4>
    p_reg->SHORTS = mask;
    a81c:	f44f 7300 	mov.w	r3, #512	; 0x200
    a820:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
    a824:	f240 2302 	movw	r3, #514	; 0x202
    a828:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
    a82a:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
    a82e:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    a832:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
    a834:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a838:	2301      	movs	r3, #1
    a83a:	60a3      	str	r3, [r4, #8]
    a83c:	6223      	str	r3, [r4, #32]
            return;
    a83e:	e790      	b.n	a762 <twim_irq_handler+0xea>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
    a840:	f013 0f04 	tst.w	r3, #4
    a844:	d003      	beq.n	a84e <twim_irq_handler+0x1d6>
        event.type = NRFX_TWIM_EVT_DATA_NACK;
    a846:	2302      	movs	r3, #2
    a848:	f88d 3000 	strb.w	r3, [sp]
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWIM_EVT_DATA_NACK));
    a84c:	e779      	b.n	a742 <twim_irq_handler+0xca>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
    a84e:	f013 0f01 	tst.w	r3, #1
    a852:	d003      	beq.n	a85c <twim_irq_handler+0x1e4>
        event.type = NRFX_TWIM_EVT_OVERRUN;
    a854:	2303      	movs	r3, #3
    a856:	f88d 3000 	strb.w	r3, [sp]
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWIM_EVT_OVERRUN));
    a85a:	e772      	b.n	a742 <twim_irq_handler+0xca>
    else if (p_cb->error)
    a85c:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    a860:	b11b      	cbz	r3, a86a <twim_irq_handler+0x1f2>
        event.type = NRFX_TWIM_EVT_BUS_ERROR;
    a862:	2304      	movs	r3, #4
    a864:	f88d 3000 	strb.w	r3, [sp]
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWIM_EVT_BUS_ERROR));
    a868:	e76b      	b.n	a742 <twim_irq_handler+0xca>
        event.type = NRFX_TWIM_EVT_DONE;
    a86a:	2300      	movs	r3, #0
    a86c:	f88d 3000 	strb.w	r3, [sp]
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWIM_EVT_DONE));
    a870:	e767      	b.n	a742 <twim_irq_handler+0xca>
    a872:	bf00      	nop
    a874:	019c0202 	.word	0x019c0202
    a878:	e000e100 	.word	0xe000e100
    a87c:	00012104 	.word	0x00012104
    a880:	00012188 	.word	0x00012188
    a884:	00010450 	.word	0x00010450

0000a888 <twim_pins_configure>:
{
    a888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a88a:	4606      	mov	r6, r0
    a88c:	460c      	mov	r4, r1
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
    a88e:	7b8b      	ldrb	r3, [r1, #14]
    a890:	b10b      	cbz	r3, a896 <twim_pins_configure+0xe>
    a892:	7bca      	ldrb	r2, [r1, #15]
    a894:	b942      	cbnz	r2, a8a8 <twim_pins_configure+0x20>
    if (!p_config->skip_gpio_cfg)
    a896:	b14b      	cbz	r3, a8ac <twim_pins_configure+0x24>
    if (!p_config->skip_psel_cfg)
    a898:	7be3      	ldrb	r3, [r4, #15]
    a89a:	b92b      	cbnz	r3, a8a8 <twim_pins_configure+0x20>
        nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
    a89c:	6822      	ldr	r2, [r4, #0]
    a89e:	6863      	ldr	r3, [r4, #4]
    p_reg->PSEL.SCL = scl_pin;
    a8a0:	f8c6 2508 	str.w	r2, [r6, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
    a8a4:	f8c6 350c 	str.w	r3, [r6, #1292]	; 0x50c
}
    a8a8:	2001      	movs	r0, #1
    a8aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        TWIM_PIN_INIT(p_config->scl, drive);
    a8ac:	6825      	ldr	r5, [r4, #0]
    switch (port)
    a8ae:	096b      	lsrs	r3, r5, #5
    a8b0:	d01f      	beq.n	a8f2 <twim_pins_configure+0x6a>
    a8b2:	2b01      	cmp	r3, #1
    a8b4:	d120      	bne.n	a8f8 <twim_pins_configure+0x70>
            mask = P1_FEATURE_PINS_PRESENT;
    a8b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    a8ba:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    a8be:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    a8c0:	f013 0f01 	tst.w	r3, #1
    a8c4:	d01a      	beq.n	a8fc <twim_pins_configure+0x74>
    *p_pin = pin_number & 0x1F;
    a8c6:	f005 071f 	and.w	r7, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    a8ca:	096d      	lsrs	r5, r5, #5
    a8cc:	d024      	beq.n	a918 <twim_pins_configure+0x90>
    a8ce:	2d01      	cmp	r5, #1
    a8d0:	d025      	beq.n	a91e <twim_pins_configure+0x96>
            NRFX_ASSERT(0);
    a8d2:	4d37      	ldr	r5, [pc, #220]	; (a9b0 <twim_pins_configure+0x128>)
    a8d4:	f44f 7313 	mov.w	r3, #588	; 0x24c
    a8d8:	462a      	mov	r2, r5
    a8da:	4936      	ldr	r1, [pc, #216]	; (a9b4 <twim_pins_configure+0x12c>)
    a8dc:	4836      	ldr	r0, [pc, #216]	; (a9b8 <twim_pins_configure+0x130>)
    a8de:	f004 fa68 	bl	edb2 <assert_print>
    a8e2:	f44f 7113 	mov.w	r1, #588	; 0x24c
    a8e6:	4628      	mov	r0, r5
    a8e8:	f004 fa5c 	bl	eda4 <assert_post_action>
        case 0: return NRF_P0;
    a8ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    a8f0:	e016      	b.n	a920 <twim_pins_configure+0x98>
            mask = P0_FEATURE_PINS_PRESENT;
    a8f2:	f04f 33ff 	mov.w	r3, #4294967295
    a8f6:	e7e0      	b.n	a8ba <twim_pins_configure+0x32>
    switch (port)
    a8f8:	2300      	movs	r3, #0
    a8fa:	e7de      	b.n	a8ba <twim_pins_configure+0x32>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    a8fc:	4f2c      	ldr	r7, [pc, #176]	; (a9b0 <twim_pins_configure+0x128>)
    a8fe:	f240 2347 	movw	r3, #583	; 0x247
    a902:	463a      	mov	r2, r7
    a904:	492d      	ldr	r1, [pc, #180]	; (a9bc <twim_pins_configure+0x134>)
    a906:	482c      	ldr	r0, [pc, #176]	; (a9b8 <twim_pins_configure+0x130>)
    a908:	f004 fa53 	bl	edb2 <assert_print>
    a90c:	f240 2147 	movw	r1, #583	; 0x247
    a910:	4638      	mov	r0, r7
    a912:	f004 fa47 	bl	eda4 <assert_post_action>
    a916:	e7d6      	b.n	a8c6 <twim_pins_configure+0x3e>
        case 0: return NRF_P0;
    a918:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    a91c:	e000      	b.n	a920 <twim_pins_configure+0x98>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    a91e:	4b28      	ldr	r3, [pc, #160]	; (a9c0 <twim_pins_configure+0x138>)
    reg->PIN_CNF[pin_number] = cnf;
    a920:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    a924:	f240 620c 	movw	r2, #1548	; 0x60c
    a928:	f843 2027 	str.w	r2, [r3, r7, lsl #2]
        TWIM_PIN_INIT(p_config->sda, drive);
    a92c:	6865      	ldr	r5, [r4, #4]
    switch (port)
    a92e:	096b      	lsrs	r3, r5, #5
    a930:	d01f      	beq.n	a972 <twim_pins_configure+0xea>
    a932:	2b01      	cmp	r3, #1
    a934:	d120      	bne.n	a978 <twim_pins_configure+0xf0>
            mask = P1_FEATURE_PINS_PRESENT;
    a936:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    a93a:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    a93e:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    a940:	f013 0f01 	tst.w	r3, #1
    a944:	d01a      	beq.n	a97c <twim_pins_configure+0xf4>
    *p_pin = pin_number & 0x1F;
    a946:	f005 071f 	and.w	r7, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    a94a:	096d      	lsrs	r5, r5, #5
    a94c:	d024      	beq.n	a998 <twim_pins_configure+0x110>
    a94e:	2d01      	cmp	r5, #1
    a950:	d025      	beq.n	a99e <twim_pins_configure+0x116>
            NRFX_ASSERT(0);
    a952:	4d17      	ldr	r5, [pc, #92]	; (a9b0 <twim_pins_configure+0x128>)
    a954:	f44f 7313 	mov.w	r3, #588	; 0x24c
    a958:	462a      	mov	r2, r5
    a95a:	4916      	ldr	r1, [pc, #88]	; (a9b4 <twim_pins_configure+0x12c>)
    a95c:	4816      	ldr	r0, [pc, #88]	; (a9b8 <twim_pins_configure+0x130>)
    a95e:	f004 fa28 	bl	edb2 <assert_print>
    a962:	f44f 7113 	mov.w	r1, #588	; 0x24c
    a966:	4628      	mov	r0, r5
    a968:	f004 fa1c 	bl	eda4 <assert_post_action>
        case 0: return NRF_P0;
    a96c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    a970:	e016      	b.n	a9a0 <twim_pins_configure+0x118>
            mask = P0_FEATURE_PINS_PRESENT;
    a972:	f04f 33ff 	mov.w	r3, #4294967295
    a976:	e7e0      	b.n	a93a <twim_pins_configure+0xb2>
    switch (port)
    a978:	2300      	movs	r3, #0
    a97a:	e7de      	b.n	a93a <twim_pins_configure+0xb2>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    a97c:	4f0c      	ldr	r7, [pc, #48]	; (a9b0 <twim_pins_configure+0x128>)
    a97e:	f240 2347 	movw	r3, #583	; 0x247
    a982:	463a      	mov	r2, r7
    a984:	490d      	ldr	r1, [pc, #52]	; (a9bc <twim_pins_configure+0x134>)
    a986:	480c      	ldr	r0, [pc, #48]	; (a9b8 <twim_pins_configure+0x130>)
    a988:	f004 fa13 	bl	edb2 <assert_print>
    a98c:	f240 2147 	movw	r1, #583	; 0x247
    a990:	4638      	mov	r0, r7
    a992:	f004 fa07 	bl	eda4 <assert_post_action>
    a996:	e7d6      	b.n	a946 <twim_pins_configure+0xbe>
        case 0: return NRF_P0;
    a998:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    a99c:	e000      	b.n	a9a0 <twim_pins_configure+0x118>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    a99e:	4b08      	ldr	r3, [pc, #32]	; (a9c0 <twim_pins_configure+0x138>)
    reg->PIN_CNF[pin_number] = cnf;
    a9a0:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    a9a4:	f240 620c 	movw	r2, #1548	; 0x60c
    a9a8:	f843 2027 	str.w	r2, [r3, r7, lsl #2]
    a9ac:	e774      	b.n	a898 <twim_pins_configure+0x10>
    a9ae:	bf00      	nop
    a9b0:	000113f4 	.word	0x000113f4
    a9b4:	00011934 	.word	0x00011934
    a9b8:	00010450 	.word	0x00010450
    a9bc:	00011428 	.word	0x00011428
    a9c0:	50000300 	.word	0x50000300

0000a9c4 <nrfx_twim_init>:
{
    a9c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a9c8:	4604      	mov	r4, r0
    a9ca:	4616      	mov	r6, r2
    a9cc:	461d      	mov	r5, r3
    NRFX_ASSERT(p_config);
    a9ce:	4688      	mov	r8, r1
    a9d0:	b161      	cbz	r1, a9ec <nrfx_twim_init+0x28>
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    a9d2:	7927      	ldrb	r7, [r4, #4]
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    a9d4:	f8d4 9000 	ldr.w	r9, [r4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    a9d8:	4925      	ldr	r1, [pc, #148]	; (aa70 <nrfx_twim_init+0xac>)
    a9da:	2334      	movs	r3, #52	; 0x34
    a9dc:	fb03 1107 	mla	r1, r3, r7, r1
    a9e0:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
    a9e4:	b183      	cbz	r3, aa08 <nrfx_twim_init+0x44>
        return err_code;
    a9e6:	4823      	ldr	r0, [pc, #140]	; (aa74 <nrfx_twim_init+0xb0>)
}
    a9e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    NRFX_ASSERT(p_config);
    a9ec:	4f22      	ldr	r7, [pc, #136]	; (aa78 <nrfx_twim_init+0xb4>)
    a9ee:	f240 1315 	movw	r3, #277	; 0x115
    a9f2:	463a      	mov	r2, r7
    a9f4:	4921      	ldr	r1, [pc, #132]	; (aa7c <nrfx_twim_init+0xb8>)
    a9f6:	4822      	ldr	r0, [pc, #136]	; (aa80 <nrfx_twim_init+0xbc>)
    a9f8:	f004 f9db 	bl	edb2 <assert_print>
    a9fc:	f240 1115 	movw	r1, #277	; 0x115
    aa00:	4638      	mov	r0, r7
    aa02:	f004 f9cf 	bl	eda4 <assert_post_action>
    aa06:	e7e4      	b.n	a9d2 <nrfx_twim_init+0xe>
    p_cb->handler         = event_handler;
    aa08:	4919      	ldr	r1, [pc, #100]	; (aa70 <nrfx_twim_init+0xac>)
    aa0a:	2234      	movs	r2, #52	; 0x34
    aa0c:	fb07 f202 	mul.w	r2, r7, r2
    aa10:	188b      	adds	r3, r1, r2
    aa12:	508e      	str	r6, [r1, r2]
    p_cb->p_context       = p_context;
    aa14:	605d      	str	r5, [r3, #4]
    p_cb->int_mask        = 0;
    aa16:	2200      	movs	r2, #0
    aa18:	609a      	str	r2, [r3, #8]
    p_cb->repeated        = false;
    aa1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    p_cb->busy            = false;
    aa1e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    aa22:	f898 200d 	ldrb.w	r2, [r8, #13]
    aa26:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
    aa2a:	f898 200e 	ldrb.w	r2, [r8, #14]
    aa2e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    if (!twim_pins_configure(p_twim, p_config))
    aa32:	4641      	mov	r1, r8
    aa34:	4648      	mov	r0, r9
    aa36:	f7ff ff27 	bl	a888 <twim_pins_configure>
    aa3a:	b1b8      	cbz	r0, aa6c <nrfx_twim_init+0xa8>
    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
    aa3c:	f8d8 3008 	ldr.w	r3, [r8, #8]
    p_reg->FREQUENCY = frequency;
    aa40:	f8c9 3524 	str.w	r3, [r9, #1316]	; 0x524
    if (p_cb->handler)
    aa44:	2334      	movs	r3, #52	; 0x34
    aa46:	fb07 f303 	mul.w	r3, r7, r3
    aa4a:	4a09      	ldr	r2, [pc, #36]	; (aa70 <nrfx_twim_init+0xac>)
    aa4c:	58d3      	ldr	r3, [r2, r3]
    aa4e:	b123      	cbz	r3, aa5a <nrfx_twim_init+0x96>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
    aa50:	6820      	ldr	r0, [r4, #0]
    aa52:	f340 3007 	sbfx	r0, r0, #12, #8
    aa56:	f7f9 fbfb 	bl	4250 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    aa5a:	4b05      	ldr	r3, [pc, #20]	; (aa70 <nrfx_twim_init+0xac>)
    aa5c:	2234      	movs	r2, #52	; 0x34
    aa5e:	fb02 3707 	mla	r7, r2, r7, r3
    aa62:	2301      	movs	r3, #1
    aa64:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    return err_code;
    aa68:	4806      	ldr	r0, [pc, #24]	; (aa84 <nrfx_twim_init+0xc0>)
    aa6a:	e7bd      	b.n	a9e8 <nrfx_twim_init+0x24>
        return NRFX_ERROR_INVALID_PARAM;
    aa6c:	4806      	ldr	r0, [pc, #24]	; (aa88 <nrfx_twim_init+0xc4>)
    aa6e:	e7bb      	b.n	a9e8 <nrfx_twim_init+0x24>
    aa70:	2000105c 	.word	0x2000105c
    aa74:	0bad0005 	.word	0x0bad0005
    aa78:	00012104 	.word	0x00012104
    aa7c:	00011fa0 	.word	0x00011fa0
    aa80:	00010450 	.word	0x00010450
    aa84:	0bad0000 	.word	0x0bad0000
    aa88:	0bad0004 	.word	0x0bad0004

0000aa8c <nrfx_twim_enable>:
{
    aa8c:	b570      	push	{r4, r5, r6, lr}
    aa8e:	4604      	mov	r4, r0
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    aa90:	7905      	ldrb	r5, [r0, #4]
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
    aa92:	4b11      	ldr	r3, [pc, #68]	; (aad8 <nrfx_twim_enable+0x4c>)
    aa94:	2234      	movs	r2, #52	; 0x34
    aa96:	fb02 3305 	mla	r3, r2, r5, r3
    aa9a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    aa9e:	2b01      	cmp	r3, #1
    aaa0:	d10b      	bne.n	aaba <nrfx_twim_enable+0x2e>
    nrf_twim_enable(p_instance->p_twim);
    aaa2:	6823      	ldr	r3, [r4, #0]
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    aaa4:	2206      	movs	r2, #6
    aaa6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    aaaa:	4b0b      	ldr	r3, [pc, #44]	; (aad8 <nrfx_twim_enable+0x4c>)
    aaac:	2234      	movs	r2, #52	; 0x34
    aaae:	fb02 3305 	mla	r3, r2, r5, r3
    aab2:	2202      	movs	r2, #2
    aab4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
    aab8:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
    aaba:	4e08      	ldr	r6, [pc, #32]	; (aadc <nrfx_twim_enable+0x50>)
    aabc:	f240 1379 	movw	r3, #377	; 0x179
    aac0:	4632      	mov	r2, r6
    aac2:	4907      	ldr	r1, [pc, #28]	; (aae0 <nrfx_twim_enable+0x54>)
    aac4:	4807      	ldr	r0, [pc, #28]	; (aae4 <nrfx_twim_enable+0x58>)
    aac6:	f004 f974 	bl	edb2 <assert_print>
    aaca:	f240 1179 	movw	r1, #377	; 0x179
    aace:	4630      	mov	r0, r6
    aad0:	f004 f968 	bl	eda4 <assert_post_action>
    aad4:	e7e5      	b.n	aaa2 <nrfx_twim_enable+0x16>
    aad6:	bf00      	nop
    aad8:	2000105c 	.word	0x2000105c
    aadc:	00012104 	.word	0x00012104
    aae0:	00012198 	.word	0x00012198
    aae4:	00010450 	.word	0x00010450

0000aae8 <nrfx_twim_xfer>:
{
    aae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    aaec:	4604      	mov	r4, r0
    aaee:	460d      	mov	r5, r1
    aaf0:	4617      	mov	r7, r2
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
    aaf2:	7903      	ldrb	r3, [r0, #4]
    aaf4:	b93b      	cbnz	r3, ab06 <nrfx_twim_xfer+0x1e>
    aaf6:	684b      	ldr	r3, [r1, #4]
    aaf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    aafc:	d203      	bcs.n	ab06 <nrfx_twim_xfer+0x1e>
    aafe:	688b      	ldr	r3, [r1, #8]
    ab00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    ab04:	d30c      	bcc.n	ab20 <nrfx_twim_xfer+0x38>
    ab06:	4e23      	ldr	r6, [pc, #140]	; (ab94 <nrfx_twim_xfer+0xac>)
    ab08:	f240 2399 	movw	r3, #665	; 0x299
    ab0c:	4632      	mov	r2, r6
    ab0e:	4922      	ldr	r1, [pc, #136]	; (ab98 <nrfx_twim_xfer+0xb0>)
    ab10:	4822      	ldr	r0, [pc, #136]	; (ab9c <nrfx_twim_xfer+0xb4>)
    ab12:	f004 f94e 	bl	edb2 <assert_print>
    ab16:	f240 2199 	movw	r1, #665	; 0x299
    ab1a:	4630      	mov	r0, r6
    ab1c:	f004 f942 	bl	eda4 <assert_post_action>
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    ab20:	7926      	ldrb	r6, [r4, #4]
    ab22:	4b1f      	ldr	r3, [pc, #124]	; (aba0 <nrfx_twim_xfer+0xb8>)
    ab24:	2134      	movs	r1, #52	; 0x34
    ab26:	fb06 f101 	mul.w	r1, r6, r1
    ab2a:	eb03 0801 	add.w	r8, r3, r1
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
    ab2e:	585b      	ldr	r3, [r3, r1]
    ab30:	b16b      	cbz	r3, ab4e <nrfx_twim_xfer+0x66>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXTX)));
    ab32:	2334      	movs	r3, #52	; 0x34
    ab34:	fb03 f606 	mul.w	r6, r3, r6
    ab38:	4b19      	ldr	r3, [pc, #100]	; (aba0 <nrfx_twim_xfer+0xb8>)
    ab3a:	599b      	ldr	r3, [r3, r6]
    ab3c:	b1cb      	cbz	r3, ab72 <nrfx_twim_xfer+0x8a>
    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
    ab3e:	463b      	mov	r3, r7
    ab40:	462a      	mov	r2, r5
    ab42:	6821      	ldr	r1, [r4, #0]
    ab44:	4640      	mov	r0, r8
    ab46:	f7ff fbff 	bl	a348 <twim_xfer>
}
    ab4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
    ab4e:	782b      	ldrb	r3, [r5, #0]
    ab50:	2b02      	cmp	r3, #2
    ab52:	d1ee      	bne.n	ab32 <nrfx_twim_xfer+0x4a>
    ab54:	f8df 903c 	ldr.w	r9, [pc, #60]	; ab94 <nrfx_twim_xfer+0xac>
    ab58:	f240 23a1 	movw	r3, #673	; 0x2a1
    ab5c:	464a      	mov	r2, r9
    ab5e:	4911      	ldr	r1, [pc, #68]	; (aba4 <nrfx_twim_xfer+0xbc>)
    ab60:	480e      	ldr	r0, [pc, #56]	; (ab9c <nrfx_twim_xfer+0xb4>)
    ab62:	f004 f926 	bl	edb2 <assert_print>
    ab66:	f240 21a1 	movw	r1, #673	; 0x2a1
    ab6a:	4648      	mov	r0, r9
    ab6c:	f004 f91a 	bl	eda4 <assert_post_action>
    ab70:	e7df      	b.n	ab32 <nrfx_twim_xfer+0x4a>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXTX)));
    ab72:	782b      	ldrb	r3, [r5, #0]
    ab74:	2b03      	cmp	r3, #3
    ab76:	d1e2      	bne.n	ab3e <nrfx_twim_xfer+0x56>
    ab78:	4e06      	ldr	r6, [pc, #24]	; (ab94 <nrfx_twim_xfer+0xac>)
    ab7a:	f240 23a2 	movw	r3, #674	; 0x2a2
    ab7e:	4632      	mov	r2, r6
    ab80:	4909      	ldr	r1, [pc, #36]	; (aba8 <nrfx_twim_xfer+0xc0>)
    ab82:	4806      	ldr	r0, [pc, #24]	; (ab9c <nrfx_twim_xfer+0xb4>)
    ab84:	f004 f915 	bl	edb2 <assert_print>
    ab88:	f240 21a2 	movw	r1, #674	; 0x2a2
    ab8c:	4630      	mov	r0, r6
    ab8e:	f004 f909 	bl	eda4 <assert_post_action>
    ab92:	e7d4      	b.n	ab3e <nrfx_twim_xfer+0x56>
    ab94:	00012104 	.word	0x00012104
    ab98:	000121c4 	.word	0x000121c4
    ab9c:	00010450 	.word	0x00010450
    aba0:	2000105c 	.word	0x2000105c
    aba4:	00012270 	.word	0x00012270
    aba8:	000122c0 	.word	0x000122c0

0000abac <nrfx_twim_0_irq_handler>:

#if NRFX_CHECK(NRFX_TWIM0_ENABLED)
void nrfx_twim_0_irq_handler(void)
{
    abac:	b508      	push	{r3, lr}
    twim_irq_handler(NRF_TWIM0, &m_cb[NRFX_TWIM0_INST_IDX]);
    abae:	4902      	ldr	r1, [pc, #8]	; (abb8 <nrfx_twim_0_irq_handler+0xc>)
    abb0:	4802      	ldr	r0, [pc, #8]	; (abbc <nrfx_twim_0_irq_handler+0x10>)
    abb2:	f7ff fd61 	bl	a678 <twim_irq_handler>
}
    abb6:	bd08      	pop	{r3, pc}
    abb8:	2000105c 	.word	0x2000105c
    abbc:	40003000 	.word	0x40003000

0000abc0 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    abc0:	4b03      	ldr	r3, [pc, #12]	; (abd0 <z_device_state_init+0x10>)

	while (dev < __device_end) {
    abc2:	e000      	b.n	abc6 <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
    abc4:	3318      	adds	r3, #24
	while (dev < __device_end) {
    abc6:	4a03      	ldr	r2, [pc, #12]	; (abd4 <z_device_state_init+0x14>)
    abc8:	4293      	cmp	r3, r2
    abca:	d3fb      	bcc.n	abc4 <z_device_state_init+0x4>
	}
}
    abcc:	4770      	bx	lr
    abce:	bf00      	nop
    abd0:	0000fef0 	.word	0x0000fef0
    abd4:	0000ff80 	.word	0x0000ff80

0000abd8 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    abd8:	b570      	push	{r4, r5, r6, lr}
    abda:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    abdc:	4b11      	ldr	r3, [pc, #68]	; (ac24 <z_sys_init_run_level+0x4c>)
    abde:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    abe2:	e009      	b.n	abf8 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    abe4:	4240      	negs	r0, r0
    abe6:	e017      	b.n	ac18 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    abe8:	68eb      	ldr	r3, [r5, #12]
    abea:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    abec:	68ea      	ldr	r2, [r5, #12]
    abee:	7853      	ldrb	r3, [r2, #1]
    abf0:	f043 0301 	orr.w	r3, r3, #1
    abf4:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    abf6:	3408      	adds	r4, #8
    abf8:	1c73      	adds	r3, r6, #1
    abfa:	4a0a      	ldr	r2, [pc, #40]	; (ac24 <z_sys_init_run_level+0x4c>)
    abfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac00:	42a3      	cmp	r3, r4
    ac02:	d90d      	bls.n	ac20 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    ac04:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    ac06:	6823      	ldr	r3, [r4, #0]
    ac08:	4628      	mov	r0, r5
    ac0a:	4798      	blx	r3
		if (dev != NULL) {
    ac0c:	2d00      	cmp	r5, #0
    ac0e:	d0f2      	beq.n	abf6 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    ac10:	2800      	cmp	r0, #0
    ac12:	d0eb      	beq.n	abec <z_sys_init_run_level+0x14>
				if (rc < 0) {
    ac14:	2800      	cmp	r0, #0
    ac16:	dbe5      	blt.n	abe4 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    ac18:	28ff      	cmp	r0, #255	; 0xff
    ac1a:	dde5      	ble.n	abe8 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    ac1c:	20ff      	movs	r0, #255	; 0xff
    ac1e:	e7e3      	b.n	abe8 <z_sys_init_run_level+0x10>
		}
	}
}
    ac20:	bd70      	pop	{r4, r5, r6, pc}
    ac22:	bf00      	nop
    ac24:	00012310 	.word	0x00012310

0000ac28 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
    ac28:	2804      	cmp	r0, #4
    ac2a:	d80c      	bhi.n	ac46 <reason_to_str+0x1e>
    ac2c:	e8df f000 	tbb	[pc, r0]
    ac30:	07050d03 	.word	0x07050d03
    ac34:	09          	.byte	0x09
    ac35:	00          	.byte	0x00
    ac36:	4806      	ldr	r0, [pc, #24]	; (ac50 <reason_to_str+0x28>)
    ac38:	4770      	bx	lr
	case K_ERR_CPU_EXCEPTION:
		return "CPU exception";
	case K_ERR_SPURIOUS_IRQ:
		return "Unhandled interrupt";
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
    ac3a:	4806      	ldr	r0, [pc, #24]	; (ac54 <reason_to_str+0x2c>)
    ac3c:	4770      	bx	lr
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
    ac3e:	4806      	ldr	r0, [pc, #24]	; (ac58 <reason_to_str+0x30>)
    ac40:	4770      	bx	lr
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
    ac42:	4806      	ldr	r0, [pc, #24]	; (ac5c <reason_to_str+0x34>)
    ac44:	4770      	bx	lr
	default:
		return "Unknown error";
    ac46:	4806      	ldr	r0, [pc, #24]	; (ac60 <reason_to_str+0x38>)
    ac48:	4770      	bx	lr
		return "Unhandled interrupt";
    ac4a:	4806      	ldr	r0, [pc, #24]	; (ac64 <reason_to_str+0x3c>)
	}
}
    ac4c:	4770      	bx	lr
    ac4e:	bf00      	nop
    ac50:	00012378 	.word	0x00012378
    ac54:	0001234c 	.word	0x0001234c
    ac58:	0001235c 	.word	0x0001235c
    ac5c:	00012368 	.word	0x00012368
    ac60:	00012328 	.word	0x00012328
    ac64:	00012338 	.word	0x00012338

0000ac68 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    ac68:	b130      	cbz	r0, ac78 <thread_name_get+0x10>
{
    ac6a:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    ac6c:	f005 f848 	bl	fd00 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    ac70:	b120      	cbz	r0, ac7c <thread_name_get+0x14>
    ac72:	7803      	ldrb	r3, [r0, #0]
    ac74:	b123      	cbz	r3, ac80 <thread_name_get+0x18>
}
    ac76:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
    ac78:	4802      	ldr	r0, [pc, #8]	; (ac84 <thread_name_get+0x1c>)
}
    ac7a:	4770      	bx	lr
		thread_name = "unknown";
    ac7c:	4801      	ldr	r0, [pc, #4]	; (ac84 <thread_name_get+0x1c>)
    ac7e:	e7fa      	b.n	ac76 <thread_name_get+0xe>
    ac80:	4800      	ldr	r0, [pc, #0]	; (ac84 <thread_name_get+0x1c>)
	return thread_name;
    ac82:	e7f8      	b.n	ac76 <thread_name_get+0xe>
    ac84:	00012388 	.word	0x00012388

0000ac88 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    ac88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ac8c:	b089      	sub	sp, #36	; 0x24
    ac8e:	af00      	add	r7, sp, #0
    ac90:	4604      	mov	r4, r0
    ac92:	460d      	mov	r5, r1
	__asm__ volatile(
    ac94:	f04f 0320 	mov.w	r3, #32
    ac98:	f3ef 8811 	mrs	r8, BASEPRI
    ac9c:	f383 8812 	msr	BASEPRI_MAX, r3
    aca0:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    aca4:	f002 fe50 	bl	d948 <z_impl_z_current_get>
    aca8:	4606      	mov	r6, r0
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    acaa:	4620      	mov	r0, r4
    acac:	f7ff ffbc 	bl	ac28 <reason_to_str>
    acb0:	2303      	movs	r3, #3
    acb2:	713b      	strb	r3, [r7, #4]
    acb4:	46e9      	mov	r9, sp
    acb6:	b08a      	sub	sp, #40	; 0x28
    acb8:	466b      	mov	r3, sp
    acba:	f113 0210 	adds.w	r2, r3, #16
    acbe:	f000 80af 	beq.w	ae20 <z_fatal_error+0x198>
    acc2:	f04f 0c15 	mov.w	ip, #21
    acc6:	b122      	cbz	r2, acd2 <z_fatal_error+0x4a>
    acc8:	f1bc 0f04 	cmp.w	ip, #4
    accc:	dd01      	ble.n	acd2 <z_fatal_error+0x4a>
    acce:	497c      	ldr	r1, [pc, #496]	; (aec0 <z_fatal_error+0x238>)
    acd0:	6159      	str	r1, [r3, #20]
    acd2:	b11a      	cbz	r2, acdc <z_fatal_error+0x54>
    acd4:	f1bc 0f08 	cmp.w	ip, #8
    acd8:	dd00      	ble.n	acdc <z_fatal_error+0x54>
    acda:	619c      	str	r4, [r3, #24]
    acdc:	2103      	movs	r1, #3
    acde:	7039      	strb	r1, [r7, #0]
    ace0:	b11a      	cbz	r2, acea <z_fatal_error+0x62>
    ace2:	f1bc 0f0c 	cmp.w	ip, #12
    ace6:	dd00      	ble.n	acea <z_fatal_error+0x62>
    ace8:	61d8      	str	r0, [r3, #28]
    acea:	b122      	cbz	r2, acf6 <z_fatal_error+0x6e>
    acec:	f1bc 0f10 	cmp.w	ip, #16
    acf0:	dd01      	ble.n	acf6 <z_fatal_error+0x6e>
    acf2:	2100      	movs	r1, #0
    acf4:	6219      	str	r1, [r3, #32]
    acf6:	b12a      	cbz	r2, ad04 <z_fatal_error+0x7c>
    acf8:	f103 0124 	add.w	r1, r3, #36	; 0x24
    acfc:	2000      	movs	r0, #0
    acfe:	2800      	cmp	r0, #0
    ad00:	f000 8091 	beq.w	ae26 <z_fatal_error+0x19e>
    ad04:	f1bc 0f14 	cmp.w	ip, #20
    ad08:	f340 8096 	ble.w	ae38 <z_fatal_error+0x1b0>
    ad0c:	f04f 0c15 	mov.w	ip, #21
    ad10:	b142      	cbz	r2, ad24 <z_fatal_error+0x9c>
    ad12:	2105      	movs	r1, #5
    ad14:	7139      	strb	r1, [r7, #4]
    ad16:	2100      	movs	r1, #0
    ad18:	7179      	strb	r1, [r7, #5]
    ad1a:	71b9      	strb	r1, [r7, #6]
    ad1c:	2101      	movs	r1, #1
    ad1e:	71f9      	strb	r1, [r7, #7]
    ad20:	6878      	ldr	r0, [r7, #4]
    ad22:	6118      	str	r0, [r3, #16]
    ad24:	2100      	movs	r1, #0
    ad26:	f36f 0100 	bfc	r1, #0, #1
    ad2a:	f36f 0141 	bfc	r1, #1, #1
    ad2e:	f36f 0182 	bfc	r1, #2, #1
    ad32:	f36f 01c5 	bfc	r1, #3, #3
    ad36:	2301      	movs	r3, #1
    ad38:	f363 1188 	bfi	r1, r3, #6, #3
    ad3c:	f3cc 0c09 	ubfx	ip, ip, #0, #10
    ad40:	f36c 2152 	bfi	r1, ip, #9, #10
    ad44:	f36f 41de 	bfc	r1, #19, #12
    ad48:	f36f 71df 	bfc	r1, #31, #1
    ad4c:	2300      	movs	r3, #0
    ad4e:	485d      	ldr	r0, [pc, #372]	; (aec4 <z_fatal_error+0x23c>)
    ad50:	f7f8 fb4c 	bl	33ec <z_impl_z_log_msg_static_create>
    ad54:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    ad56:	b125      	cbz	r5, ad62 <z_fatal_error+0xda>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    ad58:	69eb      	ldr	r3, [r5, #28]
    ad5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
    ad5e:	2b00      	cmp	r3, #0
    ad60:	d16d      	bne.n	ae3e <z_fatal_error+0x1b6>
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    ad62:	4630      	mov	r0, r6
    ad64:	f7ff ff80 	bl	ac68 <thread_name_get>
    ad68:	2303      	movs	r3, #3
    ad6a:	713b      	strb	r3, [r7, #4]
    ad6c:	46e9      	mov	r9, sp
    ad6e:	b08a      	sub	sp, #40	; 0x28
    ad70:	466b      	mov	r3, sp
    ad72:	f113 0210 	adds.w	r2, r3, #16
    ad76:	f000 8085 	beq.w	ae84 <z_fatal_error+0x1fc>
    ad7a:	f04f 0c11 	mov.w	ip, #17
    ad7e:	b122      	cbz	r2, ad8a <z_fatal_error+0x102>
    ad80:	f1bc 0f04 	cmp.w	ip, #4
    ad84:	dd01      	ble.n	ad8a <z_fatal_error+0x102>
    ad86:	4950      	ldr	r1, [pc, #320]	; (aec8 <z_fatal_error+0x240>)
    ad88:	6159      	str	r1, [r3, #20]
    ad8a:	b11a      	cbz	r2, ad94 <z_fatal_error+0x10c>
    ad8c:	f1bc 0f08 	cmp.w	ip, #8
    ad90:	dd00      	ble.n	ad94 <z_fatal_error+0x10c>
    ad92:	619e      	str	r6, [r3, #24]
    ad94:	2103      	movs	r1, #3
    ad96:	7039      	strb	r1, [r7, #0]
    ad98:	b11a      	cbz	r2, ada2 <z_fatal_error+0x11a>
    ad9a:	f1bc 0f0c 	cmp.w	ip, #12
    ad9e:	dd00      	ble.n	ada2 <z_fatal_error+0x11a>
    ada0:	61d8      	str	r0, [r3, #28]
    ada2:	b122      	cbz	r2, adae <z_fatal_error+0x126>
    ada4:	f103 0120 	add.w	r1, r3, #32
    ada8:	2000      	movs	r0, #0
    adaa:	2800      	cmp	r0, #0
    adac:	d06d      	beq.n	ae8a <z_fatal_error+0x202>
    adae:	f1bc 0f10 	cmp.w	ip, #16
    adb2:	dd73      	ble.n	ae9c <z_fatal_error+0x214>
    adb4:	f04f 0c11 	mov.w	ip, #17
    adb8:	b142      	cbz	r2, adcc <z_fatal_error+0x144>
    adba:	2104      	movs	r1, #4
    adbc:	7139      	strb	r1, [r7, #4]
    adbe:	2100      	movs	r1, #0
    adc0:	7179      	strb	r1, [r7, #5]
    adc2:	71b9      	strb	r1, [r7, #6]
    adc4:	2101      	movs	r1, #1
    adc6:	71f9      	strb	r1, [r7, #7]
    adc8:	6878      	ldr	r0, [r7, #4]
    adca:	6118      	str	r0, [r3, #16]
    adcc:	2100      	movs	r1, #0
    adce:	f36f 0100 	bfc	r1, #0, #1
    add2:	f36f 0141 	bfc	r1, #1, #1
    add6:	f36f 0182 	bfc	r1, #2, #1
    adda:	f36f 01c5 	bfc	r1, #3, #3
    adde:	2301      	movs	r3, #1
    ade0:	f363 1188 	bfi	r1, r3, #6, #3
    ade4:	f3cc 0c09 	ubfx	ip, ip, #0, #10
    ade8:	f36c 2152 	bfi	r1, ip, #9, #10
    adec:	f36f 41de 	bfc	r1, #19, #12
    adf0:	f36f 71df 	bfc	r1, #31, #1
    adf4:	2300      	movs	r3, #0
    adf6:	4833      	ldr	r0, [pc, #204]	; (aec4 <z_fatal_error+0x23c>)
    adf8:	f7f8 faf8 	bl	33ec <z_impl_z_log_msg_static_create>
    adfc:	46cd      	mov	sp, r9

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    adfe:	4629      	mov	r1, r5
    ae00:	4620      	mov	r0, r4
    ae02:	f7fd fbdd 	bl	85c0 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    ae06:	2c04      	cmp	r4, #4
    ae08:	d04b      	beq.n	aea2 <z_fatal_error+0x21a>
	__asm__ volatile(
    ae0a:	f388 8811 	msr	BASEPRI, r8
    ae0e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    ae12:	4630      	mov	r0, r6
    ae14:	f7fa fb0a 	bl	542c <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    ae18:	3724      	adds	r7, #36	; 0x24
    ae1a:	46bd      	mov	sp, r7
    ae1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    ae20:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
    ae24:	e74f      	b.n	acc6 <z_fatal_error+0x3e>
    ae26:	f107 0e20 	add.w	lr, r7, #32
    ae2a:	4486      	add	lr, r0
    ae2c:	f81e ec20 	ldrb.w	lr, [lr, #-32]
    ae30:	f801 eb01 	strb.w	lr, [r1], #1
    ae34:	3001      	adds	r0, #1
    ae36:	e762      	b.n	acfe <z_fatal_error+0x76>
    ae38:	f06f 0c1b 	mvn.w	ip, #27
    ae3c:	e768      	b.n	ad10 <z_fatal_error+0x88>
		LOG_ERR("Fault during interrupt handling\n");
    ae3e:	4b23      	ldr	r3, [pc, #140]	; (aecc <z_fatal_error+0x244>)
    ae40:	61fb      	str	r3, [r7, #28]
    ae42:	2302      	movs	r3, #2
    ae44:	713b      	strb	r3, [r7, #4]
    ae46:	2300      	movs	r3, #0
    ae48:	717b      	strb	r3, [r7, #5]
    ae4a:	71bb      	strb	r3, [r7, #6]
    ae4c:	71fb      	strb	r3, [r7, #7]
    ae4e:	687a      	ldr	r2, [r7, #4]
    ae50:	61ba      	str	r2, [r7, #24]
    ae52:	4619      	mov	r1, r3
    ae54:	f363 0100 	bfi	r1, r3, #0, #1
    ae58:	f363 0141 	bfi	r1, r3, #1, #1
    ae5c:	f363 0182 	bfi	r1, r3, #2, #1
    ae60:	f363 01c5 	bfi	r1, r3, #3, #3
    ae64:	2201      	movs	r2, #1
    ae66:	f362 1188 	bfi	r1, r2, #6, #3
    ae6a:	2208      	movs	r2, #8
    ae6c:	f362 2152 	bfi	r1, r2, #9, #10
    ae70:	f363 41de 	bfi	r1, r3, #19, #12
    ae74:	f363 71df 	bfi	r1, r3, #31, #1
    ae78:	f107 0218 	add.w	r2, r7, #24
    ae7c:	4811      	ldr	r0, [pc, #68]	; (aec4 <z_fatal_error+0x23c>)
    ae7e:	f7f8 fab5 	bl	33ec <z_impl_z_log_msg_static_create>
    ae82:	e76e      	b.n	ad62 <z_fatal_error+0xda>
	LOG_ERR("Current thread: %p (%s)", thread,
    ae84:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
    ae88:	e779      	b.n	ad7e <z_fatal_error+0xf6>
    ae8a:	f107 0e20 	add.w	lr, r7, #32
    ae8e:	4486      	add	lr, r0
    ae90:	f81e ec20 	ldrb.w	lr, [lr, #-32]
    ae94:	f801 eb01 	strb.w	lr, [r1], #1
    ae98:	3001      	adds	r0, #1
    ae9a:	e786      	b.n	adaa <z_fatal_error+0x122>
    ae9c:	f06f 0c1b 	mvn.w	ip, #27
    aea0:	e78a      	b.n	adb8 <z_fatal_error+0x130>
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    aea2:	4c0b      	ldr	r4, [pc, #44]	; (aed0 <z_fatal_error+0x248>)
    aea4:	2393      	movs	r3, #147	; 0x93
    aea6:	4622      	mov	r2, r4
    aea8:	490a      	ldr	r1, [pc, #40]	; (aed4 <z_fatal_error+0x24c>)
    aeaa:	480b      	ldr	r0, [pc, #44]	; (aed8 <z_fatal_error+0x250>)
    aeac:	f003 ff81 	bl	edb2 <assert_print>
    aeb0:	480a      	ldr	r0, [pc, #40]	; (aedc <z_fatal_error+0x254>)
    aeb2:	f003 ff7e 	bl	edb2 <assert_print>
    aeb6:	2193      	movs	r1, #147	; 0x93
    aeb8:	4620      	mov	r0, r4
    aeba:	f003 ff73 	bl	eda4 <assert_post_action>
    aebe:	e7a4      	b.n	ae0a <z_fatal_error+0x182>
    aec0:	00012390 	.word	0x00012390
    aec4:	0001016c 	.word	0x0001016c
    aec8:	000123dc 	.word	0x000123dc
    aecc:	000123b8 	.word	0x000123b8
    aed0:	000123f4 	.word	0x000123f4
    aed4:	00012418 	.word	0x00012418
    aed8:	00010450 	.word	0x00010450
    aedc:	00012438 	.word	0x00012438

0000aee0 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    aee0:	b510      	push	{r4, lr}
    aee2:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    aee4:	4c10      	ldr	r4, [pc, #64]	; (af28 <init_idle_thread+0x48>)
    aee6:	23b0      	movs	r3, #176	; 0xb0
    aee8:	fb03 4400 	mla	r4, r3, r0, r4
	k_thread_stack_t *stack = z_idle_stacks[i];
    aeec:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    aef0:	4b0e      	ldr	r3, [pc, #56]	; (af2c <init_idle_thread+0x4c>)
    aef2:	eb03 00cc 	add.w	r0, r3, ip, lsl #3
	z_setup_new_thread(thread, stack,
    aef6:	4b0e      	ldr	r3, [pc, #56]	; (af30 <init_idle_thread+0x50>)
    aef8:	9305      	str	r3, [sp, #20]
    aefa:	2301      	movs	r3, #1
    aefc:	9304      	str	r3, [sp, #16]
    aefe:	230f      	movs	r3, #15
    af00:	9303      	str	r3, [sp, #12]
    af02:	2300      	movs	r3, #0
    af04:	9302      	str	r3, [sp, #8]
    af06:	9301      	str	r3, [sp, #4]
    af08:	9000      	str	r0, [sp, #0]
    af0a:	4b0a      	ldr	r3, [pc, #40]	; (af34 <init_idle_thread+0x54>)
    af0c:	f44f 72a0 	mov.w	r2, #320	; 0x140
    af10:	4909      	ldr	r1, [pc, #36]	; (af38 <init_idle_thread+0x58>)
    af12:	eb01 11cc 	add.w	r1, r1, ip, lsl #7
    af16:	4620      	mov	r0, r4
    af18:	f000 fa86 	bl	b428 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    af1c:	7b63      	ldrb	r3, [r4, #13]
    af1e:	f023 0304 	bic.w	r3, r3, #4
    af22:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    af24:	b006      	add	sp, #24
    af26:	bd10      	pop	{r4, pc}
    af28:	20000740 	.word	0x20000740
    af2c:	20001090 	.word	0x20001090
    af30:	00012470 	.word	0x00012470
    af34:	0000b73d 	.word	0x0000b73d
    af38:	20001f80 	.word	0x20001f80

0000af3c <bg_thread_main>:
{
    af3c:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    af3e:	4b0a      	ldr	r3, [pc, #40]	; (af68 <bg_thread_main+0x2c>)
    af40:	2201      	movs	r2, #1
    af42:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    af44:	2002      	movs	r0, #2
    af46:	f7ff fe47 	bl	abd8 <z_sys_init_run_level>
	boot_banner();
    af4a:	f003 fb21 	bl	e590 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    af4e:	2003      	movs	r0, #3
    af50:	f7ff fe42 	bl	abd8 <z_sys_init_run_level>
	z_init_static_threads();
    af54:	f000 fb78 	bl	b648 <z_init_static_threads>
	main();
    af58:	f7f5 fb32 	bl	5c0 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    af5c:	4a03      	ldr	r2, [pc, #12]	; (af6c <bg_thread_main+0x30>)
    af5e:	7b13      	ldrb	r3, [r2, #12]
    af60:	f023 0301 	bic.w	r3, r3, #1
    af64:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    af66:	bd08      	pop	{r3, pc}
    af68:	200012d3 	.word	0x200012d3
    af6c:	200007f0 	.word	0x200007f0

0000af70 <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    af70:	b508      	push	{r3, lr}
    af72:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    af74:	4a01      	ldr	r2, [pc, #4]	; (af7c <switch_to_main_thread+0xc>)
    af76:	4802      	ldr	r0, [pc, #8]	; (af80 <switch_to_main_thread+0x10>)
    af78:	f7f9 fa7e 	bl	4478 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    af7c:	0000af3d 	.word	0x0000af3d
    af80:	200007f0 	.word	0x200007f0

0000af84 <z_bss_zero>:
{
    af84:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    af86:	4803      	ldr	r0, [pc, #12]	; (af94 <z_bss_zero+0x10>)
    af88:	4a03      	ldr	r2, [pc, #12]	; (af98 <z_bss_zero+0x14>)
    af8a:	1a12      	subs	r2, r2, r0
    af8c:	2100      	movs	r1, #0
    af8e:	f004 fe71 	bl	fc74 <z_early_memset>
}
    af92:	bd08      	pop	{r3, pc}
    af94:	20000208 	.word	0x20000208
    af98:	200012d4 	.word	0x200012d4

0000af9c <z_init_cpu>:
{
    af9c:	b510      	push	{r4, lr}
    af9e:	4604      	mov	r4, r0
	init_idle_thread(id);
    afa0:	f7ff ff9e 	bl	aee0 <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    afa4:	490b      	ldr	r1, [pc, #44]	; (afd4 <z_init_cpu+0x38>)
    afa6:	23b0      	movs	r3, #176	; 0xb0
    afa8:	fb03 1104 	mla	r1, r3, r4, r1
    afac:	4a0a      	ldr	r2, [pc, #40]	; (afd8 <z_init_cpu+0x3c>)
    afae:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    afb2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    afb6:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
    afb8:	751c      	strb	r4, [r3, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    afba:	eb04 1144 	add.w	r1, r4, r4, lsl #5
    afbe:	4b07      	ldr	r3, [pc, #28]	; (afdc <z_init_cpu+0x40>)
    afc0:	eb03 1381 	add.w	r3, r3, r1, lsl #6
    afc4:	f503 6304 	add.w	r3, r3, #2112	; 0x840
	_kernel.cpus[id].irq_stack =
    afc8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    afcc:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
    afd0:	6063      	str	r3, [r4, #4]
}
    afd2:	bd10      	pop	{r4, pc}
    afd4:	20000740 	.word	0x20000740
    afd8:	20001090 	.word	0x20001090
    afdc:	20002100 	.word	0x20002100

0000afe0 <prepare_multithreading>:
{
    afe0:	b570      	push	{r4, r5, r6, lr}
    afe2:	b086      	sub	sp, #24
	z_sched_init();
    afe4:	f002 faec 	bl	d5c0 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
    afe8:	4d10      	ldr	r5, [pc, #64]	; (b02c <prepare_multithreading+0x4c>)
    afea:	4b11      	ldr	r3, [pc, #68]	; (b030 <prepare_multithreading+0x50>)
    afec:	61dd      	str	r5, [r3, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    afee:	4b11      	ldr	r3, [pc, #68]	; (b034 <prepare_multithreading+0x54>)
    aff0:	9305      	str	r3, [sp, #20]
    aff2:	2301      	movs	r3, #1
    aff4:	9304      	str	r3, [sp, #16]
    aff6:	2400      	movs	r4, #0
    aff8:	9403      	str	r4, [sp, #12]
    affa:	9402      	str	r4, [sp, #8]
    affc:	9401      	str	r4, [sp, #4]
    affe:	9400      	str	r4, [sp, #0]
    b000:	4b0d      	ldr	r3, [pc, #52]	; (b038 <prepare_multithreading+0x58>)
    b002:	f44f 6280 	mov.w	r2, #1024	; 0x400
    b006:	490d      	ldr	r1, [pc, #52]	; (b03c <prepare_multithreading+0x5c>)
    b008:	4628      	mov	r0, r5
    b00a:	f000 fa0d 	bl	b428 <z_setup_new_thread>
    b00e:	4606      	mov	r6, r0
    b010:	7b6b      	ldrb	r3, [r5, #13]
    b012:	f023 0304 	bic.w	r3, r3, #4
    b016:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
    b018:	4628      	mov	r0, r5
    b01a:	f001 fdf5 	bl	cc08 <z_ready_thread>
	z_init_cpu(0);
    b01e:	4620      	mov	r0, r4
    b020:	f7ff ffbc 	bl	af9c <z_init_cpu>
}
    b024:	4630      	mov	r0, r6
    b026:	b006      	add	sp, #24
    b028:	bd70      	pop	{r4, r5, r6, pc}
    b02a:	bf00      	nop
    b02c:	200007f0 	.word	0x200007f0
    b030:	20001090 	.word	0x20001090
    b034:	00012478 	.word	0x00012478
    b038:	0000af3d 	.word	0x0000af3d
    b03c:	20001b40 	.word	0x20001b40

0000b040 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    b040:	b500      	push	{lr}
    b042:	b0ad      	sub	sp, #180	; 0xb4
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    b044:	4b1e      	ldr	r3, [pc, #120]	; (b0c0 <z_cstart+0x80>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    b046:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    b04a:	4c1e      	ldr	r4, [pc, #120]	; (b0c4 <z_cstart+0x84>)
    b04c:	6963      	ldr	r3, [r4, #20]
    b04e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    b052:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b054:	23e0      	movs	r3, #224	; 0xe0
    b056:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    b05a:	2500      	movs	r5, #0
    b05c:	77e5      	strb	r5, [r4, #31]
    b05e:	7625      	strb	r5, [r4, #24]
    b060:	7665      	strb	r5, [r4, #25]
    b062:	76a5      	strb	r5, [r4, #26]
    b064:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    b068:	6a63      	ldr	r3, [r4, #36]	; 0x24
    b06a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    b06e:	6263      	str	r3, [r4, #36]	; 0x24
    b070:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    b074:	f7fa f940 	bl	52f8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    b078:	f7f8 ffaa 	bl	3fd0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    b07c:	f04f 33ff 	mov.w	r3, #4294967295
    b080:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    b082:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    b084:	f7fa fb58 	bl	5738 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    b088:	f7fa f9ea 	bl	5460 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    b08c:	f7f7 ffd0 	bl	3030 <log_core_init>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    b090:	2401      	movs	r4, #1
    b092:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    b096:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    b09a:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    b09c:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
    b09e:	9529      	str	r5, [sp, #164]	; 0xa4
#endif

	_current_cpu->current = dummy_thread;
    b0a0:	4b09      	ldr	r3, [pc, #36]	; (b0c8 <z_cstart+0x88>)
    b0a2:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    b0a6:	f7ff fd8b 	bl	abc0 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    b0aa:	4628      	mov	r0, r5
    b0ac:	f7ff fd94 	bl	abd8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    b0b0:	4620      	mov	r0, r4
    b0b2:	f7ff fd91 	bl	abd8 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    b0b6:	f7ff ff93 	bl	afe0 <prepare_multithreading>
    b0ba:	f7ff ff59 	bl	af70 <switch_to_main_thread>
    b0be:	bf00      	nop
    b0c0:	20002940 	.word	0x20002940
    b0c4:	e000ed00 	.word	0xe000ed00
    b0c8:	20001090 	.word	0x20001090

0000b0cc <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    b0cc:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    b0ce:	4c10      	ldr	r4, [pc, #64]	; (b110 <init_mem_slab_module+0x44>)
	int rc = 0;
    b0d0:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    b0d2:	e008      	b.n	b0e6 <init_mem_slab_module+0x1a>
    b0d4:	4b0f      	ldr	r3, [pc, #60]	; (b114 <init_mem_slab_module+0x48>)
    b0d6:	429c      	cmp	r4, r3
    b0d8:	d217      	bcs.n	b10a <init_mem_slab_module+0x3e>
		rc = create_free_list(slab);
    b0da:	4620      	mov	r0, r4
    b0dc:	f004 fdd2 	bl	fc84 <create_free_list>
		if (rc < 0) {
    b0e0:	1e05      	subs	r5, r0, #0
    b0e2:	db12      	blt.n	b10a <init_mem_slab_module+0x3e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    b0e4:	3420      	adds	r4, #32
    b0e6:	4b0b      	ldr	r3, [pc, #44]	; (b114 <init_mem_slab_module+0x48>)
    b0e8:	429c      	cmp	r4, r3
    b0ea:	d9f3      	bls.n	b0d4 <init_mem_slab_module+0x8>
    b0ec:	4e0a      	ldr	r6, [pc, #40]	; (b118 <init_mem_slab_module+0x4c>)
    b0ee:	233d      	movs	r3, #61	; 0x3d
    b0f0:	4632      	mov	r2, r6
    b0f2:	490a      	ldr	r1, [pc, #40]	; (b11c <init_mem_slab_module+0x50>)
    b0f4:	480a      	ldr	r0, [pc, #40]	; (b120 <init_mem_slab_module+0x54>)
    b0f6:	f003 fe5c 	bl	edb2 <assert_print>
    b0fa:	480a      	ldr	r0, [pc, #40]	; (b124 <init_mem_slab_module+0x58>)
    b0fc:	f003 fe59 	bl	edb2 <assert_print>
    b100:	213d      	movs	r1, #61	; 0x3d
    b102:	4630      	mov	r0, r6
    b104:	f003 fe4e 	bl	eda4 <assert_post_action>
    b108:	e7e4      	b.n	b0d4 <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
    b10a:	4628      	mov	r0, r5
    b10c:	bd70      	pop	{r4, r5, r6, pc}
    b10e:	bf00      	nop
    b110:	200001a8 	.word	0x200001a8
    b114:	200001a8 	.word	0x200001a8
    b118:	00012484 	.word	0x00012484
    b11c:	000124ac 	.word	0x000124ac
    b120:	00010450 	.word	0x00010450
    b124:	000124cc 	.word	0x000124cc

0000b128 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    b128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b12c:	b082      	sub	sp, #8
    b12e:	4604      	mov	r4, r0
    b130:	460e      	mov	r6, r1
    b132:	4690      	mov	r8, r2
    b134:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    b136:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    b13a:	f04f 0320 	mov.w	r3, #32
    b13e:	f3ef 8711 	mrs	r7, BASEPRI
    b142:	f383 8812 	msr	BASEPRI_MAX, r3
    b146:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b14a:	4628      	mov	r0, r5
    b14c:	f000 f8ea 	bl	b324 <z_spin_lock_valid>
    b150:	b1c0      	cbz	r0, b184 <k_mem_slab_alloc+0x5c>
	z_spin_lock_set_owner(l);
    b152:	4628      	mov	r0, r5
    b154:	f000 f906 	bl	b364 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    b158:	69a1      	ldr	r1, [r4, #24]
    b15a:	b321      	cbz	r1, b1a6 <k_mem_slab_alloc+0x7e>
		/* take a free block */
		*mem = slab->free_list;
    b15c:	6031      	str	r1, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    b15e:	69a3      	ldr	r3, [r4, #24]
    b160:	681b      	ldr	r3, [r3, #0]
    b162:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    b164:	69e3      	ldr	r3, [r4, #28]
    b166:	3301      	adds	r3, #1
    b168:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    b16a:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b16c:	4628      	mov	r0, r5
    b16e:	f000 f8e9 	bl	b344 <z_spin_unlock_valid>
    b172:	b388      	cbz	r0, b1d8 <k_mem_slab_alloc+0xb0>
	__asm__ volatile(
    b174:	f387 8811 	msr	BASEPRI, r7
    b178:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    b17c:	4620      	mov	r0, r4
    b17e:	b002      	add	sp, #8
    b180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b184:	f8df a070 	ldr.w	sl, [pc, #112]	; b1f8 <k_mem_slab_alloc+0xd0>
    b188:	238e      	movs	r3, #142	; 0x8e
    b18a:	4652      	mov	r2, sl
    b18c:	491b      	ldr	r1, [pc, #108]	; (b1fc <k_mem_slab_alloc+0xd4>)
    b18e:	481c      	ldr	r0, [pc, #112]	; (b200 <k_mem_slab_alloc+0xd8>)
    b190:	f003 fe0f 	bl	edb2 <assert_print>
    b194:	4629      	mov	r1, r5
    b196:	481b      	ldr	r0, [pc, #108]	; (b204 <k_mem_slab_alloc+0xdc>)
    b198:	f003 fe0b 	bl	edb2 <assert_print>
    b19c:	218e      	movs	r1, #142	; 0x8e
    b19e:	4650      	mov	r0, sl
    b1a0:	f003 fe00 	bl	eda4 <assert_post_action>
    b1a4:	e7d5      	b.n	b152 <k_mem_slab_alloc+0x2a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    b1a6:	ea59 0308 	orrs.w	r3, r9, r8
    b1aa:	d104      	bne.n	b1b6 <k_mem_slab_alloc+0x8e>
		*mem = NULL;
    b1ac:	2300      	movs	r3, #0
    b1ae:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    b1b0:	f06f 040b 	mvn.w	r4, #11
    b1b4:	e7da      	b.n	b16c <k_mem_slab_alloc+0x44>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    b1b6:	f8cd 8000 	str.w	r8, [sp]
    b1ba:	f8cd 9004 	str.w	r9, [sp, #4]
    b1be:	4622      	mov	r2, r4
    b1c0:	4639      	mov	r1, r7
    b1c2:	4628      	mov	r0, r5
    b1c4:	f001 fefc 	bl	cfc0 <z_pend_curr>
		if (result == 0) {
    b1c8:	4604      	mov	r4, r0
    b1ca:	2800      	cmp	r0, #0
    b1cc:	d1d6      	bne.n	b17c <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    b1ce:	4b0e      	ldr	r3, [pc, #56]	; (b208 <k_mem_slab_alloc+0xe0>)
    b1d0:	689b      	ldr	r3, [r3, #8]
    b1d2:	695b      	ldr	r3, [r3, #20]
    b1d4:	6033      	str	r3, [r6, #0]
		return result;
    b1d6:	e7d1      	b.n	b17c <k_mem_slab_alloc+0x54>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b1d8:	4e07      	ldr	r6, [pc, #28]	; (b1f8 <k_mem_slab_alloc+0xd0>)
    b1da:	23b9      	movs	r3, #185	; 0xb9
    b1dc:	4632      	mov	r2, r6
    b1de:	490b      	ldr	r1, [pc, #44]	; (b20c <k_mem_slab_alloc+0xe4>)
    b1e0:	4807      	ldr	r0, [pc, #28]	; (b200 <k_mem_slab_alloc+0xd8>)
    b1e2:	f003 fde6 	bl	edb2 <assert_print>
    b1e6:	4629      	mov	r1, r5
    b1e8:	4809      	ldr	r0, [pc, #36]	; (b210 <k_mem_slab_alloc+0xe8>)
    b1ea:	f003 fde2 	bl	edb2 <assert_print>
    b1ee:	21b9      	movs	r1, #185	; 0xb9
    b1f0:	4630      	mov	r0, r6
    b1f2:	f003 fdd7 	bl	eda4 <assert_post_action>
    b1f6:	e7bd      	b.n	b174 <k_mem_slab_alloc+0x4c>
    b1f8:	000105e8 	.word	0x000105e8
    b1fc:	00010648 	.word	0x00010648
    b200:	00010450 	.word	0x00010450
    b204:	00010660 	.word	0x00010660
    b208:	20001090 	.word	0x20001090
    b20c:	00010618 	.word	0x00010618
    b210:	00010630 	.word	0x00010630

0000b214 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    b214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b218:	4604      	mov	r4, r0
    b21a:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    b21c:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    b220:	f04f 0320 	mov.w	r3, #32
    b224:	f3ef 8711 	mrs	r7, BASEPRI
    b228:	f383 8812 	msr	BASEPRI_MAX, r3
    b22c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b230:	4630      	mov	r0, r6
    b232:	f000 f877 	bl	b324 <z_spin_lock_valid>
    b236:	b1b0      	cbz	r0, b266 <k_mem_slab_free+0x52>
	z_spin_lock_set_owner(l);
    b238:	4630      	mov	r0, r6
    b23a:	f000 f893 	bl	b364 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    b23e:	69a3      	ldr	r3, [r4, #24]
    b240:	b313      	cbz	r3, b288 <k_mem_slab_free+0x74>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
    b242:	682b      	ldr	r3, [r5, #0]
    b244:	69a2      	ldr	r2, [r4, #24]
    b246:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    b248:	682b      	ldr	r3, [r5, #0]
    b24a:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    b24c:	69e3      	ldr	r3, [r4, #28]
    b24e:	3b01      	subs	r3, #1
    b250:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b252:	4630      	mov	r0, r6
    b254:	f000 f876 	bl	b344 <z_spin_unlock_valid>
    b258:	b338      	cbz	r0, b2aa <k_mem_slab_free+0x96>
	__asm__ volatile(
    b25a:	f387 8811 	msr	BASEPRI, r7
    b25e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    b262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b266:	f8df 8064 	ldr.w	r8, [pc, #100]	; b2cc <k_mem_slab_free+0xb8>
    b26a:	238e      	movs	r3, #142	; 0x8e
    b26c:	4642      	mov	r2, r8
    b26e:	4918      	ldr	r1, [pc, #96]	; (b2d0 <k_mem_slab_free+0xbc>)
    b270:	4818      	ldr	r0, [pc, #96]	; (b2d4 <k_mem_slab_free+0xc0>)
    b272:	f003 fd9e 	bl	edb2 <assert_print>
    b276:	4631      	mov	r1, r6
    b278:	4817      	ldr	r0, [pc, #92]	; (b2d8 <k_mem_slab_free+0xc4>)
    b27a:	f003 fd9a 	bl	edb2 <assert_print>
    b27e:	218e      	movs	r1, #142	; 0x8e
    b280:	4640      	mov	r0, r8
    b282:	f003 fd8f 	bl	eda4 <assert_post_action>
    b286:	e7d7      	b.n	b238 <k_mem_slab_free+0x24>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    b288:	4620      	mov	r0, r4
    b28a:	f002 f935 	bl	d4f8 <z_unpend_first_thread>
		if (pending_thread != NULL) {
    b28e:	2800      	cmp	r0, #0
    b290:	d0d7      	beq.n	b242 <k_mem_slab_free+0x2e>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    b292:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    b294:	2100      	movs	r1, #0
    b296:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    b29a:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    b29c:	f001 fcb4 	bl	cc08 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    b2a0:	4639      	mov	r1, r7
    b2a2:	4630      	mov	r0, r6
    b2a4:	f001 fa0c 	bl	c6c0 <z_reschedule>
			return;
    b2a8:	e7db      	b.n	b262 <k_mem_slab_free+0x4e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b2aa:	4c08      	ldr	r4, [pc, #32]	; (b2cc <k_mem_slab_free+0xb8>)
    b2ac:	23b9      	movs	r3, #185	; 0xb9
    b2ae:	4622      	mov	r2, r4
    b2b0:	490a      	ldr	r1, [pc, #40]	; (b2dc <k_mem_slab_free+0xc8>)
    b2b2:	4808      	ldr	r0, [pc, #32]	; (b2d4 <k_mem_slab_free+0xc0>)
    b2b4:	f003 fd7d 	bl	edb2 <assert_print>
    b2b8:	4631      	mov	r1, r6
    b2ba:	4809      	ldr	r0, [pc, #36]	; (b2e0 <k_mem_slab_free+0xcc>)
    b2bc:	f003 fd79 	bl	edb2 <assert_print>
    b2c0:	21b9      	movs	r1, #185	; 0xb9
    b2c2:	4620      	mov	r0, r4
    b2c4:	f003 fd6e 	bl	eda4 <assert_post_action>
    b2c8:	e7c7      	b.n	b25a <k_mem_slab_free+0x46>
    b2ca:	bf00      	nop
    b2cc:	000105e8 	.word	0x000105e8
    b2d0:	00010648 	.word	0x00010648
    b2d4:	00010450 	.word	0x00010450
    b2d8:	00010660 	.word	0x00010660
    b2dc:	00010618 	.word	0x00010618
    b2e0:	00010630 	.word	0x00010630

0000b2e4 <z_impl_k_thread_name_set>:
	k_spin_unlock(&z_thread_monitor_lock, key);
}
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
    b2e4:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
    b2e6:	4604      	mov	r4, r0
    b2e8:	b140      	cbz	r0, b2fc <z_impl_k_thread_name_set+0x18>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN - 1);
    b2ea:	221f      	movs	r2, #31
    b2ec:	f104 0074 	add.w	r0, r4, #116	; 0x74
    b2f0:	f003 ff59 	bl	f1a6 <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    b2f4:	2000      	movs	r0, #0
    b2f6:	f884 0093 	strb.w	r0, [r4, #147]	; 0x93

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
    b2fa:	bd10      	pop	{r4, pc}
		thread = _current;
    b2fc:	4b01      	ldr	r3, [pc, #4]	; (b304 <z_impl_k_thread_name_set+0x20>)
    b2fe:	689c      	ldr	r4, [r3, #8]
    b300:	e7f3      	b.n	b2ea <z_impl_k_thread_name_set+0x6>
    b302:	bf00      	nop
    b304:	20001090 	.word	0x20001090

0000b308 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    b308:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    b30a:	ea53 0102 	orrs.w	r1, r3, r2
    b30e:	d102      	bne.n	b316 <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
    b310:	f004 fcf8 	bl	fd04 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    b314:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    b316:	4902      	ldr	r1, [pc, #8]	; (b320 <schedule_new_thread+0x18>)
    b318:	3018      	adds	r0, #24
    b31a:	f002 fcdd 	bl	dcd8 <z_add_timeout>
    b31e:	e7f9      	b.n	b314 <schedule_new_thread+0xc>
    b320:	0000cd65 	.word	0x0000cd65

0000b324 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    b324:	6803      	ldr	r3, [r0, #0]

	if (thread_cpu != 0U) {
    b326:	b13b      	cbz	r3, b338 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    b328:	f003 0303 	and.w	r3, r3, #3
    b32c:	4a04      	ldr	r2, [pc, #16]	; (b340 <z_spin_lock_valid+0x1c>)
    b32e:	7d12      	ldrb	r2, [r2, #20]
    b330:	4293      	cmp	r3, r2
    b332:	d003      	beq.n	b33c <z_spin_lock_valid+0x18>
			return false;
		}
	}
	return true;
    b334:	2001      	movs	r0, #1
    b336:	4770      	bx	lr
    b338:	2001      	movs	r0, #1
    b33a:	4770      	bx	lr
			return false;
    b33c:	2000      	movs	r0, #0
}
    b33e:	4770      	bx	lr
    b340:	20001090 	.word	0x20001090

0000b344 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    b344:	6801      	ldr	r1, [r0, #0]
    b346:	4a06      	ldr	r2, [pc, #24]	; (b360 <z_spin_unlock_valid+0x1c>)
    b348:	7d13      	ldrb	r3, [r2, #20]
    b34a:	6892      	ldr	r2, [r2, #8]
    b34c:	4313      	orrs	r3, r2
    b34e:	4299      	cmp	r1, r3
    b350:	d103      	bne.n	b35a <z_spin_unlock_valid+0x16>
		return false;
	}
	l->thread_cpu = 0;
    b352:	2300      	movs	r3, #0
    b354:	6003      	str	r3, [r0, #0]
	return true;
    b356:	2001      	movs	r0, #1
    b358:	4770      	bx	lr
		return false;
    b35a:	2000      	movs	r0, #0
}
    b35c:	4770      	bx	lr
    b35e:	bf00      	nop
    b360:	20001090 	.word	0x20001090

0000b364 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    b364:	4a02      	ldr	r2, [pc, #8]	; (b370 <z_spin_lock_set_owner+0xc>)
    b366:	7d13      	ldrb	r3, [r2, #20]
    b368:	6892      	ldr	r2, [r2, #8]
    b36a:	4313      	orrs	r3, r2
    b36c:	6003      	str	r3, [r0, #0]
}
    b36e:	4770      	bx	lr
    b370:	20001090 	.word	0x20001090

0000b374 <z_thread_monitor_exit>:
{
    b374:	b570      	push	{r4, r5, r6, lr}
    b376:	4604      	mov	r4, r0
	__asm__ volatile(
    b378:	f04f 0320 	mov.w	r3, #32
    b37c:	f3ef 8511 	mrs	r5, BASEPRI
    b380:	f383 8812 	msr	BASEPRI_MAX, r3
    b384:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b388:	481f      	ldr	r0, [pc, #124]	; (b408 <z_thread_monitor_exit+0x94>)
    b38a:	f7ff ffcb 	bl	b324 <z_spin_lock_valid>
    b38e:	b150      	cbz	r0, b3a6 <z_thread_monitor_exit+0x32>
	z_spin_lock_set_owner(l);
    b390:	481d      	ldr	r0, [pc, #116]	; (b408 <z_thread_monitor_exit+0x94>)
    b392:	f7ff ffe7 	bl	b364 <z_spin_lock_set_owner>
	if (thread == _kernel.threads) {
    b396:	4b1d      	ldr	r3, [pc, #116]	; (b40c <z_thread_monitor_exit+0x98>)
    b398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b39a:	42a3      	cmp	r3, r4
    b39c:	d114      	bne.n	b3c8 <z_thread_monitor_exit+0x54>
		_kernel.threads = _kernel.threads->next_thread;
    b39e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    b3a0:	4b1a      	ldr	r3, [pc, #104]	; (b40c <z_thread_monitor_exit+0x98>)
    b3a2:	629a      	str	r2, [r3, #40]	; 0x28
    b3a4:	e017      	b.n	b3d6 <z_thread_monitor_exit+0x62>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b3a6:	4e1a      	ldr	r6, [pc, #104]	; (b410 <z_thread_monitor_exit+0x9c>)
    b3a8:	238e      	movs	r3, #142	; 0x8e
    b3aa:	4632      	mov	r2, r6
    b3ac:	4919      	ldr	r1, [pc, #100]	; (b414 <z_thread_monitor_exit+0xa0>)
    b3ae:	481a      	ldr	r0, [pc, #104]	; (b418 <z_thread_monitor_exit+0xa4>)
    b3b0:	f003 fcff 	bl	edb2 <assert_print>
    b3b4:	4914      	ldr	r1, [pc, #80]	; (b408 <z_thread_monitor_exit+0x94>)
    b3b6:	4819      	ldr	r0, [pc, #100]	; (b41c <z_thread_monitor_exit+0xa8>)
    b3b8:	f003 fcfb 	bl	edb2 <assert_print>
    b3bc:	218e      	movs	r1, #142	; 0x8e
    b3be:	4630      	mov	r0, r6
    b3c0:	f003 fcf0 	bl	eda4 <assert_post_action>
    b3c4:	e7e4      	b.n	b390 <z_thread_monitor_exit+0x1c>
			prev_thread = prev_thread->next_thread;
    b3c6:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    b3c8:	b113      	cbz	r3, b3d0 <z_thread_monitor_exit+0x5c>
			(thread != prev_thread->next_thread)) {
    b3ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    b3cc:	42a2      	cmp	r2, r4
    b3ce:	d1fa      	bne.n	b3c6 <z_thread_monitor_exit+0x52>
		if (prev_thread != NULL) {
    b3d0:	b10b      	cbz	r3, b3d6 <z_thread_monitor_exit+0x62>
			prev_thread->next_thread = thread->next_thread;
    b3d2:	6f22      	ldr	r2, [r4, #112]	; 0x70
    b3d4:	671a      	str	r2, [r3, #112]	; 0x70
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b3d6:	480c      	ldr	r0, [pc, #48]	; (b408 <z_thread_monitor_exit+0x94>)
    b3d8:	f7ff ffb4 	bl	b344 <z_spin_unlock_valid>
    b3dc:	b120      	cbz	r0, b3e8 <z_thread_monitor_exit+0x74>
	__asm__ volatile(
    b3de:	f385 8811 	msr	BASEPRI, r5
    b3e2:	f3bf 8f6f 	isb	sy
}
    b3e6:	bd70      	pop	{r4, r5, r6, pc}
    b3e8:	4c09      	ldr	r4, [pc, #36]	; (b410 <z_thread_monitor_exit+0x9c>)
    b3ea:	23b9      	movs	r3, #185	; 0xb9
    b3ec:	4622      	mov	r2, r4
    b3ee:	490c      	ldr	r1, [pc, #48]	; (b420 <z_thread_monitor_exit+0xac>)
    b3f0:	4809      	ldr	r0, [pc, #36]	; (b418 <z_thread_monitor_exit+0xa4>)
    b3f2:	f003 fcde 	bl	edb2 <assert_print>
    b3f6:	4904      	ldr	r1, [pc, #16]	; (b408 <z_thread_monitor_exit+0x94>)
    b3f8:	480a      	ldr	r0, [pc, #40]	; (b424 <z_thread_monitor_exit+0xb0>)
    b3fa:	f003 fcda 	bl	edb2 <assert_print>
    b3fe:	21b9      	movs	r1, #185	; 0xb9
    b400:	4620      	mov	r0, r4
    b402:	f003 fccf 	bl	eda4 <assert_post_action>
    b406:	e7ea      	b.n	b3de <z_thread_monitor_exit+0x6a>
    b408:	200010bc 	.word	0x200010bc
    b40c:	20001090 	.word	0x20001090
    b410:	000105e8 	.word	0x000105e8
    b414:	00010648 	.word	0x00010648
    b418:	00010450 	.word	0x00010450
    b41c:	00010660 	.word	0x00010660
    b420:	00010618 	.word	0x00010618
    b424:	00010630 	.word	0x00010630

0000b428 <z_setup_new_thread>:
{
    b428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b42c:	b085      	sub	sp, #20
    b42e:	4604      	mov	r4, r0
    b430:	460e      	mov	r6, r1
    b432:	4690      	mov	r8, r2
    b434:	461d      	mov	r5, r3
    b436:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    b43a:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
    b43e:	9f11      	ldr	r7, [sp, #68]	; 0x44
	Z_ASSERT_VALID_PRIO(prio, entry);
    b440:	2f0f      	cmp	r7, #15
    b442:	d05e      	beq.n	b502 <z_setup_new_thread+0xda>
    b444:	f107 0310 	add.w	r3, r7, #16
    b448:	2b1e      	cmp	r3, #30
    b44a:	d85e      	bhi.n	b50a <z_setup_new_thread+0xe2>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    b44c:	f104 0358 	add.w	r3, r4, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    b450:	65a3      	str	r3, [r4, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    b452:	65e3      	str	r3, [r4, #92]	; 0x5c
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    b454:	9b12      	ldr	r3, [sp, #72]	; 0x48
    b456:	2204      	movs	r2, #4
    b458:	4639      	mov	r1, r7
    b45a:	4620      	mov	r0, r4
    b45c:	f004 fc56 	bl	fd0c <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    b460:	4642      	mov	r2, r8
    b462:	4631      	mov	r1, r6
    b464:	4620      	mov	r0, r4
    b466:	f004 fc33 	bl	fcd0 <setup_thread_stack>
    b46a:	4607      	mov	r7, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    b46c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b46e:	9302      	str	r3, [sp, #8]
    b470:	f8cd a004 	str.w	sl, [sp, #4]
    b474:	f8cd b000 	str.w	fp, [sp]
    b478:	462b      	mov	r3, r5
    b47a:	4602      	mov	r2, r0
    b47c:	4631      	mov	r1, r6
    b47e:	4620      	mov	r0, r4
    b480:	f7f8 ffb0 	bl	43e4 <arch_new_thread>
	new_thread->init_data = NULL;
    b484:	2300      	movs	r3, #0
    b486:	6563      	str	r3, [r4, #84]	; 0x54
	new_thread->entry.pEntry = entry;
    b488:	6625      	str	r5, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    b48a:	f8c4 b064 	str.w	fp, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    b48e:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    b492:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b494:	66e3      	str	r3, [r4, #108]	; 0x6c
	__asm__ volatile(
    b496:	f04f 0320 	mov.w	r3, #32
    b49a:	f3ef 8611 	mrs	r6, BASEPRI
    b49e:	f383 8812 	msr	BASEPRI_MAX, r3
    b4a2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b4a6:	4837      	ldr	r0, [pc, #220]	; (b584 <z_setup_new_thread+0x15c>)
    b4a8:	f7ff ff3c 	bl	b324 <z_spin_lock_valid>
    b4ac:	2800      	cmp	r0, #0
    b4ae:	d042      	beq.n	b536 <z_setup_new_thread+0x10e>
	z_spin_lock_set_owner(l);
    b4b0:	4d34      	ldr	r5, [pc, #208]	; (b584 <z_setup_new_thread+0x15c>)
    b4b2:	4628      	mov	r0, r5
    b4b4:	f7ff ff56 	bl	b364 <z_spin_lock_set_owner>
	new_thread->next_thread = _kernel.threads;
    b4b8:	4b33      	ldr	r3, [pc, #204]	; (b588 <z_setup_new_thread+0x160>)
    b4ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b4bc:	6722      	str	r2, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    b4be:	629c      	str	r4, [r3, #40]	; 0x28
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b4c0:	4628      	mov	r0, r5
    b4c2:	f7ff ff3f 	bl	b344 <z_spin_unlock_valid>
    b4c6:	2800      	cmp	r0, #0
    b4c8:	d045      	beq.n	b556 <z_setup_new_thread+0x12e>
	__asm__ volatile(
    b4ca:	f386 8811 	msr	BASEPRI, r6
    b4ce:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
    b4d2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    b4d4:	2b00      	cmp	r3, #0
    b4d6:	d04e      	beq.n	b576 <z_setup_new_thread+0x14e>
		strncpy(new_thread->name, name,
    b4d8:	221f      	movs	r2, #31
    b4da:	4619      	mov	r1, r3
    b4dc:	f104 0074 	add.w	r0, r4, #116	; 0x74
    b4e0:	f003 fe61 	bl	f1a6 <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    b4e4:	2300      	movs	r3, #0
    b4e6:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
	if (!_current) {
    b4ea:	4b27      	ldr	r3, [pc, #156]	; (b588 <z_setup_new_thread+0x160>)
    b4ec:	689b      	ldr	r3, [r3, #8]
    b4ee:	2b00      	cmp	r3, #0
    b4f0:	d045      	beq.n	b57e <z_setup_new_thread+0x156>
	new_thread->resource_pool = _current->resource_pool;
    b4f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    b4f6:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
}
    b4fa:	4638      	mov	r0, r7
    b4fc:	b005      	add	sp, #20
    b4fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    b502:	4b22      	ldr	r3, [pc, #136]	; (b58c <z_setup_new_thread+0x164>)
    b504:	429d      	cmp	r5, r3
    b506:	d19d      	bne.n	b444 <z_setup_new_thread+0x1c>
    b508:	e7a0      	b.n	b44c <z_setup_new_thread+0x24>
    b50a:	f8df 9084 	ldr.w	r9, [pc, #132]	; b590 <z_setup_new_thread+0x168>
    b50e:	f44f 7306 	mov.w	r3, #536	; 0x218
    b512:	464a      	mov	r2, r9
    b514:	491f      	ldr	r1, [pc, #124]	; (b594 <z_setup_new_thread+0x16c>)
    b516:	4820      	ldr	r0, [pc, #128]	; (b598 <z_setup_new_thread+0x170>)
    b518:	f003 fc4b 	bl	edb2 <assert_print>
    b51c:	f06f 030f 	mvn.w	r3, #15
    b520:	220e      	movs	r2, #14
    b522:	4639      	mov	r1, r7
    b524:	481d      	ldr	r0, [pc, #116]	; (b59c <z_setup_new_thread+0x174>)
    b526:	f003 fc44 	bl	edb2 <assert_print>
    b52a:	f44f 7106 	mov.w	r1, #536	; 0x218
    b52e:	4648      	mov	r0, r9
    b530:	f003 fc38 	bl	eda4 <assert_post_action>
    b534:	e78a      	b.n	b44c <z_setup_new_thread+0x24>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b536:	4d1a      	ldr	r5, [pc, #104]	; (b5a0 <z_setup_new_thread+0x178>)
    b538:	238e      	movs	r3, #142	; 0x8e
    b53a:	462a      	mov	r2, r5
    b53c:	4919      	ldr	r1, [pc, #100]	; (b5a4 <z_setup_new_thread+0x17c>)
    b53e:	4816      	ldr	r0, [pc, #88]	; (b598 <z_setup_new_thread+0x170>)
    b540:	f003 fc37 	bl	edb2 <assert_print>
    b544:	490f      	ldr	r1, [pc, #60]	; (b584 <z_setup_new_thread+0x15c>)
    b546:	4818      	ldr	r0, [pc, #96]	; (b5a8 <z_setup_new_thread+0x180>)
    b548:	f003 fc33 	bl	edb2 <assert_print>
    b54c:	218e      	movs	r1, #142	; 0x8e
    b54e:	4628      	mov	r0, r5
    b550:	f003 fc28 	bl	eda4 <assert_post_action>
    b554:	e7ac      	b.n	b4b0 <z_setup_new_thread+0x88>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b556:	4d12      	ldr	r5, [pc, #72]	; (b5a0 <z_setup_new_thread+0x178>)
    b558:	23b9      	movs	r3, #185	; 0xb9
    b55a:	462a      	mov	r2, r5
    b55c:	4913      	ldr	r1, [pc, #76]	; (b5ac <z_setup_new_thread+0x184>)
    b55e:	480e      	ldr	r0, [pc, #56]	; (b598 <z_setup_new_thread+0x170>)
    b560:	f003 fc27 	bl	edb2 <assert_print>
    b564:	4907      	ldr	r1, [pc, #28]	; (b584 <z_setup_new_thread+0x15c>)
    b566:	4812      	ldr	r0, [pc, #72]	; (b5b0 <z_setup_new_thread+0x188>)
    b568:	f003 fc23 	bl	edb2 <assert_print>
    b56c:	21b9      	movs	r1, #185	; 0xb9
    b56e:	4628      	mov	r0, r5
    b570:	f003 fc18 	bl	eda4 <assert_post_action>
    b574:	e7a9      	b.n	b4ca <z_setup_new_thread+0xa2>
		new_thread->name[0] = '\0';
    b576:	2300      	movs	r3, #0
    b578:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    b57c:	e7b5      	b.n	b4ea <z_setup_new_thread+0xc2>
		new_thread->resource_pool = NULL;
    b57e:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    b582:	e7ba      	b.n	b4fa <z_setup_new_thread+0xd2>
    b584:	200010bc 	.word	0x200010bc
    b588:	20001090 	.word	0x20001090
    b58c:	0000b73d 	.word	0x0000b73d
    b590:	000124ec 	.word	0x000124ec
    b594:	00012544 	.word	0x00012544
    b598:	00010450 	.word	0x00010450
    b59c:	000125c4 	.word	0x000125c4
    b5a0:	000105e8 	.word	0x000105e8
    b5a4:	00010648 	.word	0x00010648
    b5a8:	00010660 	.word	0x00010660
    b5ac:	00010618 	.word	0x00010618
    b5b0:	00010630 	.word	0x00010630

0000b5b4 <z_impl_k_thread_create>:
{
    b5b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b5b8:	b086      	sub	sp, #24
    b5ba:	4604      	mov	r4, r0
    b5bc:	460d      	mov	r5, r1
    b5be:	4616      	mov	r6, r2
    b5c0:	461f      	mov	r7, r3
    b5c2:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
    b5c6:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    b5ca:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    b5ce:	b9db      	cbnz	r3, b608 <z_impl_k_thread_create+0x54>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    b5d0:	2300      	movs	r3, #0
    b5d2:	9305      	str	r3, [sp, #20]
    b5d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    b5d6:	9304      	str	r3, [sp, #16]
    b5d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b5da:	9303      	str	r3, [sp, #12]
    b5dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b5de:	9302      	str	r3, [sp, #8]
    b5e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b5e2:	9301      	str	r3, [sp, #4]
    b5e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b5e6:	9300      	str	r3, [sp, #0]
    b5e8:	463b      	mov	r3, r7
    b5ea:	4632      	mov	r2, r6
    b5ec:	4629      	mov	r1, r5
    b5ee:	4620      	mov	r0, r4
    b5f0:	f7ff ff1a 	bl	b428 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    b5f4:	f1b8 3fff 	cmp.w	r8, #4294967295
    b5f8:	bf08      	it	eq
    b5fa:	f1b9 3fff 	cmpeq.w	r9, #4294967295
    b5fe:	d115      	bne.n	b62c <z_impl_k_thread_create+0x78>
}
    b600:	4620      	mov	r0, r4
    b602:	b006      	add	sp, #24
    b604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    b608:	f8df a02c 	ldr.w	sl, [pc, #44]	; b638 <z_impl_k_thread_create+0x84>
    b60c:	f240 2387 	movw	r3, #647	; 0x287
    b610:	4652      	mov	r2, sl
    b612:	490a      	ldr	r1, [pc, #40]	; (b63c <z_impl_k_thread_create+0x88>)
    b614:	480a      	ldr	r0, [pc, #40]	; (b640 <z_impl_k_thread_create+0x8c>)
    b616:	f003 fbcc 	bl	edb2 <assert_print>
    b61a:	480a      	ldr	r0, [pc, #40]	; (b644 <z_impl_k_thread_create+0x90>)
    b61c:	f003 fbc9 	bl	edb2 <assert_print>
    b620:	f240 2187 	movw	r1, #647	; 0x287
    b624:	4650      	mov	r0, sl
    b626:	f003 fbbd 	bl	eda4 <assert_post_action>
    b62a:	e7d1      	b.n	b5d0 <z_impl_k_thread_create+0x1c>
		schedule_new_thread(new_thread, delay);
    b62c:	464a      	mov	r2, r9
    b62e:	4643      	mov	r3, r8
    b630:	4620      	mov	r0, r4
    b632:	f7ff fe69 	bl	b308 <schedule_new_thread>
    b636:	e7e3      	b.n	b600 <z_impl_k_thread_create+0x4c>
    b638:	000124ec 	.word	0x000124ec
    b63c:	000125f8 	.word	0x000125f8
    b640:	00010450 	.word	0x00010450
    b644:	0001260c 	.word	0x0001260c

0000b648 <z_init_static_threads>:
{
    b648:	b530      	push	{r4, r5, lr}
    b64a:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    b64c:	4c35      	ldr	r4, [pc, #212]	; (b724 <z_init_static_threads+0xdc>)
    b64e:	e017      	b.n	b680 <z_init_static_threads+0x38>
    b650:	4b35      	ldr	r3, [pc, #212]	; (b728 <z_init_static_threads+0xe0>)
    b652:	429c      	cmp	r4, r3
    b654:	d228      	bcs.n	b6a8 <z_init_static_threads+0x60>
		z_setup_new_thread(
    b656:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    b658:	9305      	str	r3, [sp, #20]
    b65a:	6a23      	ldr	r3, [r4, #32]
    b65c:	9304      	str	r3, [sp, #16]
    b65e:	69e3      	ldr	r3, [r4, #28]
    b660:	9303      	str	r3, [sp, #12]
    b662:	69a3      	ldr	r3, [r4, #24]
    b664:	9302      	str	r3, [sp, #8]
    b666:	6963      	ldr	r3, [r4, #20]
    b668:	9301      	str	r3, [sp, #4]
    b66a:	6923      	ldr	r3, [r4, #16]
    b66c:	9300      	str	r3, [sp, #0]
    b66e:	68e3      	ldr	r3, [r4, #12]
    b670:	68a2      	ldr	r2, [r4, #8]
    b672:	6861      	ldr	r1, [r4, #4]
    b674:	6820      	ldr	r0, [r4, #0]
    b676:	f7ff fed7 	bl	b428 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    b67a:	6823      	ldr	r3, [r4, #0]
    b67c:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    b67e:	3430      	adds	r4, #48	; 0x30
    b680:	4b29      	ldr	r3, [pc, #164]	; (b728 <z_init_static_threads+0xe0>)
    b682:	429c      	cmp	r4, r3
    b684:	d9e4      	bls.n	b650 <z_init_static_threads+0x8>
    b686:	4d29      	ldr	r5, [pc, #164]	; (b72c <z_init_static_threads+0xe4>)
    b688:	f240 23ee 	movw	r3, #750	; 0x2ee
    b68c:	462a      	mov	r2, r5
    b68e:	4928      	ldr	r1, [pc, #160]	; (b730 <z_init_static_threads+0xe8>)
    b690:	4828      	ldr	r0, [pc, #160]	; (b734 <z_init_static_threads+0xec>)
    b692:	f003 fb8e 	bl	edb2 <assert_print>
    b696:	4828      	ldr	r0, [pc, #160]	; (b738 <z_init_static_threads+0xf0>)
    b698:	f003 fb8b 	bl	edb2 <assert_print>
    b69c:	f240 21ee 	movw	r1, #750	; 0x2ee
    b6a0:	4628      	mov	r0, r5
    b6a2:	f003 fb7f 	bl	eda4 <assert_post_action>
    b6a6:	e7d3      	b.n	b650 <z_init_static_threads+0x8>
	k_sched_lock();
    b6a8:	f001 f858 	bl	c75c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    b6ac:	4c1d      	ldr	r4, [pc, #116]	; (b724 <z_init_static_threads+0xdc>)
    b6ae:	e000      	b.n	b6b2 <z_init_static_threads+0x6a>
    b6b0:	3430      	adds	r4, #48	; 0x30
    b6b2:	4b1d      	ldr	r3, [pc, #116]	; (b728 <z_init_static_threads+0xe0>)
    b6b4:	429c      	cmp	r4, r3
    b6b6:	d81f      	bhi.n	b6f8 <z_init_static_threads+0xb0>
    b6b8:	4b1b      	ldr	r3, [pc, #108]	; (b728 <z_init_static_threads+0xe0>)
    b6ba:	429c      	cmp	r4, r3
    b6bc:	d22d      	bcs.n	b71a <z_init_static_threads+0xd2>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    b6be:	6a60      	ldr	r0, [r4, #36]	; 0x24
    b6c0:	f1b0 3fff 	cmp.w	r0, #4294967295
    b6c4:	d0f4      	beq.n	b6b0 <z_init_static_threads+0x68>
			schedule_new_thread(thread_data->init_thread,
    b6c6:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    b6c8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    b6cc:	17c1      	asrs	r1, r0, #31
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    b6ce:	03c9      	lsls	r1, r1, #15
    b6d0:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    b6d4:	03c0      	lsls	r0, r0, #15
    b6d6:	f240 33e7 	movw	r3, #999	; 0x3e7
    b6da:	18c0      	adds	r0, r0, r3
    b6dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b6e0:	f04f 0300 	mov.w	r3, #0
    b6e4:	f141 0100 	adc.w	r1, r1, #0
    b6e8:	f7f4 fd0a 	bl	100 <__aeabi_uldivmod>
    b6ec:	4602      	mov	r2, r0
    b6ee:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    b6f0:	4628      	mov	r0, r5
    b6f2:	f7ff fe09 	bl	b308 <schedule_new_thread>
    b6f6:	e7db      	b.n	b6b0 <z_init_static_threads+0x68>
	_FOREACH_STATIC_THREAD(thread_data) {
    b6f8:	4d0c      	ldr	r5, [pc, #48]	; (b72c <z_init_static_threads+0xe4>)
    b6fa:	f240 330d 	movw	r3, #781	; 0x30d
    b6fe:	462a      	mov	r2, r5
    b700:	490b      	ldr	r1, [pc, #44]	; (b730 <z_init_static_threads+0xe8>)
    b702:	480c      	ldr	r0, [pc, #48]	; (b734 <z_init_static_threads+0xec>)
    b704:	f003 fb55 	bl	edb2 <assert_print>
    b708:	480b      	ldr	r0, [pc, #44]	; (b738 <z_init_static_threads+0xf0>)
    b70a:	f003 fb52 	bl	edb2 <assert_print>
    b70e:	f240 310d 	movw	r1, #781	; 0x30d
    b712:	4628      	mov	r0, r5
    b714:	f003 fb46 	bl	eda4 <assert_post_action>
    b718:	e7ce      	b.n	b6b8 <z_init_static_threads+0x70>
	k_sched_unlock();
    b71a:	f001 fdab 	bl	d274 <k_sched_unlock>
}
    b71e:	b007      	add	sp, #28
    b720:	bd30      	pop	{r4, r5, pc}
    b722:	bf00      	nop
    b724:	200001a8 	.word	0x200001a8
    b728:	200001a8 	.word	0x200001a8
    b72c:	000124ec 	.word	0x000124ec
    b730:	00012634 	.word	0x00012634
    b734:	00010450 	.word	0x00010450
    b738:	000124cc 	.word	0x000124cc

0000b73c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    b73c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    b73e:	4b14      	ldr	r3, [pc, #80]	; (b790 <idle+0x54>)
    b740:	689b      	ldr	r3, [r3, #8]
    b742:	f993 300e 	ldrsb.w	r3, [r3, #14]
    b746:	2b00      	cmp	r3, #0
    b748:	da0d      	bge.n	b766 <idle+0x2a>
    b74a:	4c12      	ldr	r4, [pc, #72]	; (b794 <idle+0x58>)
    b74c:	2327      	movs	r3, #39	; 0x27
    b74e:	4622      	mov	r2, r4
    b750:	4911      	ldr	r1, [pc, #68]	; (b798 <idle+0x5c>)
    b752:	4812      	ldr	r0, [pc, #72]	; (b79c <idle+0x60>)
    b754:	f003 fb2d 	bl	edb2 <assert_print>
    b758:	2127      	movs	r1, #39	; 0x27
    b75a:	4620      	mov	r0, r4
    b75c:	f003 fb22 	bl	eda4 <assert_post_action>
    b760:	e001      	b.n	b766 <idle+0x2a>
	arch_cpu_idle();
    b762:	f7f8 fc3b 	bl	3fdc <arch_cpu_idle>
	__asm__ volatile(
    b766:	f04f 0220 	mov.w	r2, #32
    b76a:	f3ef 8311 	mrs	r3, BASEPRI
    b76e:	f382 8812 	msr	BASEPRI_MAX, r2
    b772:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    b776:	f002 fbed 	bl	df54 <z_get_next_timeout_expiry>
    b77a:	4b05      	ldr	r3, [pc, #20]	; (b790 <idle+0x54>)
    b77c:	6198      	str	r0, [r3, #24]
	return !z_sys_post_kernel;
    b77e:	4b08      	ldr	r3, [pc, #32]	; (b7a0 <idle+0x64>)
    b780:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    b782:	2b00      	cmp	r3, #0
    b784:	d0ed      	beq.n	b762 <idle+0x26>
    b786:	f7f8 f9e1 	bl	3b4c <pm_system_suspend>
    b78a:	2800      	cmp	r0, #0
    b78c:	d1eb      	bne.n	b766 <idle+0x2a>
    b78e:	e7e8      	b.n	b762 <idle+0x26>
    b790:	20001090 	.word	0x20001090
    b794:	00012664 	.word	0x00012664
    b798:	00012688 	.word	0x00012688
    b79c:	00010450 	.word	0x00010450
    b7a0:	200012d3 	.word	0x200012d3

0000b7a4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    b7a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b7a8:	b083      	sub	sp, #12
    b7aa:	4604      	mov	r4, r0
    b7ac:	4616      	mov	r6, r2
    b7ae:	461d      	mov	r5, r3
    b7b0:	f3ef 8105 	mrs	r1, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    b7b4:	2900      	cmp	r1, #0
    b7b6:	d12b      	bne.n	b810 <z_impl_k_mutex_lock+0x6c>
    b7b8:	f04f 0320 	mov.w	r3, #32
    b7bc:	f3ef 8711 	mrs	r7, BASEPRI
    b7c0:	f383 8812 	msr	BASEPRI_MAX, r3
    b7c4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b7c8:	487b      	ldr	r0, [pc, #492]	; (b9b8 <z_impl_k_mutex_lock+0x214>)
    b7ca:	f7ff fdab 	bl	b324 <z_spin_lock_valid>
    b7ce:	2800      	cmp	r0, #0
    b7d0:	d02d      	beq.n	b82e <z_impl_k_mutex_lock+0x8a>
	z_spin_lock_set_owner(l);
    b7d2:	4879      	ldr	r0, [pc, #484]	; (b9b8 <z_impl_k_mutex_lock+0x214>)
    b7d4:	f7ff fdc6 	bl	b364 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    b7d8:	68e1      	ldr	r1, [r4, #12]
    b7da:	2900      	cmp	r1, #0
    b7dc:	d138      	bne.n	b850 <z_impl_k_mutex_lock+0xac>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    b7de:	2900      	cmp	r1, #0
    b7e0:	d17d      	bne.n	b8de <z_impl_k_mutex_lock+0x13a>
    b7e2:	4b76      	ldr	r3, [pc, #472]	; (b9bc <z_impl_k_mutex_lock+0x218>)
    b7e4:	689b      	ldr	r3, [r3, #8]
    b7e6:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    b7ea:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    b7ec:	3101      	adds	r1, #1
    b7ee:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    b7f0:	4b72      	ldr	r3, [pc, #456]	; (b9bc <z_impl_k_mutex_lock+0x218>)
    b7f2:	689b      	ldr	r3, [r3, #8]
    b7f4:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b7f6:	4870      	ldr	r0, [pc, #448]	; (b9b8 <z_impl_k_mutex_lock+0x214>)
    b7f8:	f7ff fda4 	bl	b344 <z_spin_unlock_valid>
    b7fc:	2800      	cmp	r0, #0
    b7fe:	d070      	beq.n	b8e2 <z_impl_k_mutex_lock+0x13e>
	__asm__ volatile(
    b800:	f387 8811 	msr	BASEPRI, r7
    b804:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    b808:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    b80a:	b003      	add	sp, #12
    b80c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    b810:	4f6b      	ldr	r7, [pc, #428]	; (b9c0 <z_impl_k_mutex_lock+0x21c>)
    b812:	2365      	movs	r3, #101	; 0x65
    b814:	463a      	mov	r2, r7
    b816:	496b      	ldr	r1, [pc, #428]	; (b9c4 <z_impl_k_mutex_lock+0x220>)
    b818:	486b      	ldr	r0, [pc, #428]	; (b9c8 <z_impl_k_mutex_lock+0x224>)
    b81a:	f003 faca 	bl	edb2 <assert_print>
    b81e:	486b      	ldr	r0, [pc, #428]	; (b9cc <z_impl_k_mutex_lock+0x228>)
    b820:	f003 fac7 	bl	edb2 <assert_print>
    b824:	2165      	movs	r1, #101	; 0x65
    b826:	4638      	mov	r0, r7
    b828:	f003 fabc 	bl	eda4 <assert_post_action>
    b82c:	e7c4      	b.n	b7b8 <z_impl_k_mutex_lock+0x14>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b82e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; b9d0 <z_impl_k_mutex_lock+0x22c>
    b832:	238e      	movs	r3, #142	; 0x8e
    b834:	4642      	mov	r2, r8
    b836:	4967      	ldr	r1, [pc, #412]	; (b9d4 <z_impl_k_mutex_lock+0x230>)
    b838:	4863      	ldr	r0, [pc, #396]	; (b9c8 <z_impl_k_mutex_lock+0x224>)
    b83a:	f003 faba 	bl	edb2 <assert_print>
    b83e:	495e      	ldr	r1, [pc, #376]	; (b9b8 <z_impl_k_mutex_lock+0x214>)
    b840:	4865      	ldr	r0, [pc, #404]	; (b9d8 <z_impl_k_mutex_lock+0x234>)
    b842:	f003 fab6 	bl	edb2 <assert_print>
    b846:	218e      	movs	r1, #142	; 0x8e
    b848:	4640      	mov	r0, r8
    b84a:	f003 faab 	bl	eda4 <assert_post_action>
    b84e:	e7c0      	b.n	b7d2 <z_impl_k_mutex_lock+0x2e>
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    b850:	68a2      	ldr	r2, [r4, #8]
    b852:	4b5a      	ldr	r3, [pc, #360]	; (b9bc <z_impl_k_mutex_lock+0x218>)
    b854:	689b      	ldr	r3, [r3, #8]
    b856:	429a      	cmp	r2, r3
    b858:	d0c1      	beq.n	b7de <z_impl_k_mutex_lock+0x3a>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    b85a:	ea55 0106 	orrs.w	r1, r5, r6
    b85e:	bf0c      	ite	eq
    b860:	f04f 0801 	moveq.w	r8, #1
    b864:	f04f 0800 	movne.w	r8, #0
    b868:	d04b      	beq.n	b902 <z_impl_k_mutex_lock+0x15e>
					    mutex->owner->base.prio);
    b86a:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    b86e:	4649      	mov	r1, r9
    b870:	f993 000e 	ldrsb.w	r0, [r3, #14]
    b874:	f004 fa5b 	bl	fd2e <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    b878:	4581      	cmp	r9, r0
    b87a:	dc5d      	bgt.n	b938 <z_impl_k_mutex_lock+0x194>
	bool resched = false;
    b87c:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    b880:	9600      	str	r6, [sp, #0]
    b882:	9501      	str	r5, [sp, #4]
    b884:	4622      	mov	r2, r4
    b886:	4639      	mov	r1, r7
    b888:	484b      	ldr	r0, [pc, #300]	; (b9b8 <z_impl_k_mutex_lock+0x214>)
    b88a:	f001 fb99 	bl	cfc0 <z_pend_curr>
	if (got_mutex == 0) {
    b88e:	2800      	cmp	r0, #0
    b890:	d0bb      	beq.n	b80a <z_impl_k_mutex_lock+0x66>
	__asm__ volatile(
    b892:	f04f 0320 	mov.w	r3, #32
    b896:	f3ef 8511 	mrs	r5, BASEPRI
    b89a:	f383 8812 	msr	BASEPRI_MAX, r3
    b89e:	f3bf 8f6f 	isb	sy
    b8a2:	4845      	ldr	r0, [pc, #276]	; (b9b8 <z_impl_k_mutex_lock+0x214>)
    b8a4:	f7ff fd3e 	bl	b324 <z_spin_lock_valid>
    b8a8:	2800      	cmp	r0, #0
    b8aa:	d04b      	beq.n	b944 <z_impl_k_mutex_lock+0x1a0>
	z_spin_lock_set_owner(l);
    b8ac:	4842      	ldr	r0, [pc, #264]	; (b9b8 <z_impl_k_mutex_lock+0x214>)
    b8ae:	f7ff fd59 	bl	b364 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    b8b2:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b8b4:	429c      	cmp	r4, r3
    b8b6:	d055      	beq.n	b964 <z_impl_k_mutex_lock+0x1c0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    b8b8:	2b00      	cmp	r3, #0
    b8ba:	d053      	beq.n	b964 <z_impl_k_mutex_lock+0x1c0>
    b8bc:	6921      	ldr	r1, [r4, #16]
    b8be:	f993 000e 	ldrsb.w	r0, [r3, #14]
    b8c2:	f004 fa34 	bl	fd2e <new_prio_for_inheritance>
    b8c6:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    b8c8:	4620      	mov	r0, r4
    b8ca:	f004 fa3b 	bl	fd44 <adjust_owner_prio>
    b8ce:	2800      	cmp	r0, #0
    b8d0:	d14a      	bne.n	b968 <z_impl_k_mutex_lock+0x1c4>
    b8d2:	f1b9 0f00 	cmp.w	r9, #0
    b8d6:	d049      	beq.n	b96c <z_impl_k_mutex_lock+0x1c8>
    b8d8:	f04f 0801 	mov.w	r8, #1
    b8dc:	e046      	b.n	b96c <z_impl_k_mutex_lock+0x1c8>
					_current->base.prio :
    b8de:	6923      	ldr	r3, [r4, #16]
    b8e0:	e783      	b.n	b7ea <z_impl_k_mutex_lock+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b8e2:	4c3b      	ldr	r4, [pc, #236]	; (b9d0 <z_impl_k_mutex_lock+0x22c>)
    b8e4:	23b9      	movs	r3, #185	; 0xb9
    b8e6:	4622      	mov	r2, r4
    b8e8:	493c      	ldr	r1, [pc, #240]	; (b9dc <z_impl_k_mutex_lock+0x238>)
    b8ea:	4837      	ldr	r0, [pc, #220]	; (b9c8 <z_impl_k_mutex_lock+0x224>)
    b8ec:	f003 fa61 	bl	edb2 <assert_print>
    b8f0:	4931      	ldr	r1, [pc, #196]	; (b9b8 <z_impl_k_mutex_lock+0x214>)
    b8f2:	483b      	ldr	r0, [pc, #236]	; (b9e0 <z_impl_k_mutex_lock+0x23c>)
    b8f4:	f003 fa5d 	bl	edb2 <assert_print>
    b8f8:	21b9      	movs	r1, #185	; 0xb9
    b8fa:	4620      	mov	r0, r4
    b8fc:	f003 fa52 	bl	eda4 <assert_post_action>
    b900:	e77e      	b.n	b800 <z_impl_k_mutex_lock+0x5c>
    b902:	482d      	ldr	r0, [pc, #180]	; (b9b8 <z_impl_k_mutex_lock+0x214>)
    b904:	f7ff fd1e 	bl	b344 <z_spin_unlock_valid>
    b908:	b130      	cbz	r0, b918 <z_impl_k_mutex_lock+0x174>
	__asm__ volatile(
    b90a:	f387 8811 	msr	BASEPRI, r7
    b90e:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    b912:	f06f 000f 	mvn.w	r0, #15
    b916:	e778      	b.n	b80a <z_impl_k_mutex_lock+0x66>
    b918:	4c2d      	ldr	r4, [pc, #180]	; (b9d0 <z_impl_k_mutex_lock+0x22c>)
    b91a:	23b9      	movs	r3, #185	; 0xb9
    b91c:	4622      	mov	r2, r4
    b91e:	492f      	ldr	r1, [pc, #188]	; (b9dc <z_impl_k_mutex_lock+0x238>)
    b920:	4829      	ldr	r0, [pc, #164]	; (b9c8 <z_impl_k_mutex_lock+0x224>)
    b922:	f003 fa46 	bl	edb2 <assert_print>
    b926:	4924      	ldr	r1, [pc, #144]	; (b9b8 <z_impl_k_mutex_lock+0x214>)
    b928:	482d      	ldr	r0, [pc, #180]	; (b9e0 <z_impl_k_mutex_lock+0x23c>)
    b92a:	f003 fa42 	bl	edb2 <assert_print>
    b92e:	21b9      	movs	r1, #185	; 0xb9
    b930:	4620      	mov	r0, r4
    b932:	f003 fa37 	bl	eda4 <assert_post_action>
    b936:	e7e8      	b.n	b90a <z_impl_k_mutex_lock+0x166>
		resched = adjust_owner_prio(mutex, new_prio);
    b938:	4601      	mov	r1, r0
    b93a:	4620      	mov	r0, r4
    b93c:	f004 fa02 	bl	fd44 <adjust_owner_prio>
    b940:	4681      	mov	r9, r0
    b942:	e79d      	b.n	b880 <z_impl_k_mutex_lock+0xdc>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b944:	4e22      	ldr	r6, [pc, #136]	; (b9d0 <z_impl_k_mutex_lock+0x22c>)
    b946:	238e      	movs	r3, #142	; 0x8e
    b948:	4632      	mov	r2, r6
    b94a:	4922      	ldr	r1, [pc, #136]	; (b9d4 <z_impl_k_mutex_lock+0x230>)
    b94c:	481e      	ldr	r0, [pc, #120]	; (b9c8 <z_impl_k_mutex_lock+0x224>)
    b94e:	f003 fa30 	bl	edb2 <assert_print>
    b952:	4919      	ldr	r1, [pc, #100]	; (b9b8 <z_impl_k_mutex_lock+0x214>)
    b954:	4820      	ldr	r0, [pc, #128]	; (b9d8 <z_impl_k_mutex_lock+0x234>)
    b956:	f003 fa2c 	bl	edb2 <assert_print>
    b95a:	218e      	movs	r1, #142	; 0x8e
    b95c:	4630      	mov	r0, r6
    b95e:	f003 fa21 	bl	eda4 <assert_post_action>
    b962:	e7a3      	b.n	b8ac <z_impl_k_mutex_lock+0x108>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    b964:	6921      	ldr	r1, [r4, #16]
    b966:	e7af      	b.n	b8c8 <z_impl_k_mutex_lock+0x124>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    b968:	f04f 0801 	mov.w	r8, #1
	if (resched) {
    b96c:	f1b8 0f00 	cmp.w	r8, #0
    b970:	d006      	beq.n	b980 <z_impl_k_mutex_lock+0x1dc>
		z_reschedule(&lock, key);
    b972:	4629      	mov	r1, r5
    b974:	4810      	ldr	r0, [pc, #64]	; (b9b8 <z_impl_k_mutex_lock+0x214>)
    b976:	f000 fea3 	bl	c6c0 <z_reschedule>
	return -EAGAIN;
    b97a:	f06f 000a 	mvn.w	r0, #10
    b97e:	e744      	b.n	b80a <z_impl_k_mutex_lock+0x66>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b980:	480d      	ldr	r0, [pc, #52]	; (b9b8 <z_impl_k_mutex_lock+0x214>)
    b982:	f7ff fcdf 	bl	b344 <z_spin_unlock_valid>
    b986:	b130      	cbz	r0, b996 <z_impl_k_mutex_lock+0x1f2>
    b988:	f385 8811 	msr	BASEPRI, r5
    b98c:	f3bf 8f6f 	isb	sy
    b990:	f06f 000a 	mvn.w	r0, #10
    b994:	e739      	b.n	b80a <z_impl_k_mutex_lock+0x66>
    b996:	4c0e      	ldr	r4, [pc, #56]	; (b9d0 <z_impl_k_mutex_lock+0x22c>)
    b998:	23b9      	movs	r3, #185	; 0xb9
    b99a:	4622      	mov	r2, r4
    b99c:	490f      	ldr	r1, [pc, #60]	; (b9dc <z_impl_k_mutex_lock+0x238>)
    b99e:	480a      	ldr	r0, [pc, #40]	; (b9c8 <z_impl_k_mutex_lock+0x224>)
    b9a0:	f003 fa07 	bl	edb2 <assert_print>
    b9a4:	4904      	ldr	r1, [pc, #16]	; (b9b8 <z_impl_k_mutex_lock+0x214>)
    b9a6:	480e      	ldr	r0, [pc, #56]	; (b9e0 <z_impl_k_mutex_lock+0x23c>)
    b9a8:	f003 fa03 	bl	edb2 <assert_print>
    b9ac:	21b9      	movs	r1, #185	; 0xb9
    b9ae:	4620      	mov	r0, r4
    b9b0:	f003 f9f8 	bl	eda4 <assert_post_action>
    b9b4:	e7e8      	b.n	b988 <z_impl_k_mutex_lock+0x1e4>
    b9b6:	bf00      	nop
    b9b8:	200010c0 	.word	0x200010c0
    b9bc:	20001090 	.word	0x20001090
    b9c0:	000126b0 	.word	0x000126b0
    b9c4:	000125f8 	.word	0x000125f8
    b9c8:	00010450 	.word	0x00010450
    b9cc:	000126d4 	.word	0x000126d4
    b9d0:	000105e8 	.word	0x000105e8
    b9d4:	00010648 	.word	0x00010648
    b9d8:	00010660 	.word	0x00010660
    b9dc:	00010618 	.word	0x00010618
    b9e0:	00010630 	.word	0x00010630

0000b9e4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    b9e4:	b570      	push	{r4, r5, r6, lr}
    b9e6:	4604      	mov	r4, r0
    b9e8:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    b9ec:	b97b      	cbnz	r3, ba0e <z_impl_k_mutex_unlock+0x2a>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    b9ee:	68a3      	ldr	r3, [r4, #8]
    b9f0:	2b00      	cmp	r3, #0
    b9f2:	d079      	beq.n	bae8 <z_impl_k_mutex_unlock+0x104>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    b9f4:	4a3f      	ldr	r2, [pc, #252]	; (baf4 <z_impl_k_mutex_unlock+0x110>)
    b9f6:	6892      	ldr	r2, [r2, #8]
    b9f8:	4293      	cmp	r3, r2
    b9fa:	d178      	bne.n	baee <z_impl_k_mutex_unlock+0x10a>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    b9fc:	68e3      	ldr	r3, [r4, #12]
    b9fe:	b1ab      	cbz	r3, ba2c <z_impl_k_mutex_unlock+0x48>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    ba00:	68e3      	ldr	r3, [r4, #12]
    ba02:	2b01      	cmp	r3, #1
    ba04:	d91e      	bls.n	ba44 <z_impl_k_mutex_unlock+0x60>
		mutex->lock_count--;
    ba06:	3b01      	subs	r3, #1
    ba08:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    ba0a:	2000      	movs	r0, #0
}
    ba0c:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    ba0e:	4d3a      	ldr	r5, [pc, #232]	; (baf8 <z_impl_k_mutex_unlock+0x114>)
    ba10:	23c7      	movs	r3, #199	; 0xc7
    ba12:	462a      	mov	r2, r5
    ba14:	4939      	ldr	r1, [pc, #228]	; (bafc <z_impl_k_mutex_unlock+0x118>)
    ba16:	483a      	ldr	r0, [pc, #232]	; (bb00 <z_impl_k_mutex_unlock+0x11c>)
    ba18:	f003 f9cb 	bl	edb2 <assert_print>
    ba1c:	4839      	ldr	r0, [pc, #228]	; (bb04 <z_impl_k_mutex_unlock+0x120>)
    ba1e:	f003 f9c8 	bl	edb2 <assert_print>
    ba22:	21c7      	movs	r1, #199	; 0xc7
    ba24:	4628      	mov	r0, r5
    ba26:	f003 f9bd 	bl	eda4 <assert_post_action>
    ba2a:	e7e0      	b.n	b9ee <z_impl_k_mutex_unlock+0xa>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    ba2c:	4d32      	ldr	r5, [pc, #200]	; (baf8 <z_impl_k_mutex_unlock+0x114>)
    ba2e:	23df      	movs	r3, #223	; 0xdf
    ba30:	462a      	mov	r2, r5
    ba32:	4935      	ldr	r1, [pc, #212]	; (bb08 <z_impl_k_mutex_unlock+0x124>)
    ba34:	4832      	ldr	r0, [pc, #200]	; (bb00 <z_impl_k_mutex_unlock+0x11c>)
    ba36:	f003 f9bc 	bl	edb2 <assert_print>
    ba3a:	21df      	movs	r1, #223	; 0xdf
    ba3c:	4628      	mov	r0, r5
    ba3e:	f003 f9b1 	bl	eda4 <assert_post_action>
    ba42:	e7dd      	b.n	ba00 <z_impl_k_mutex_unlock+0x1c>
	__asm__ volatile(
    ba44:	f04f 0320 	mov.w	r3, #32
    ba48:	f3ef 8511 	mrs	r5, BASEPRI
    ba4c:	f383 8812 	msr	BASEPRI_MAX, r3
    ba50:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ba54:	482d      	ldr	r0, [pc, #180]	; (bb0c <z_impl_k_mutex_unlock+0x128>)
    ba56:	f7ff fc65 	bl	b324 <z_spin_lock_valid>
    ba5a:	b1c8      	cbz	r0, ba90 <z_impl_k_mutex_unlock+0xac>
	z_spin_lock_set_owner(l);
    ba5c:	482b      	ldr	r0, [pc, #172]	; (bb0c <z_impl_k_mutex_unlock+0x128>)
    ba5e:	f7ff fc81 	bl	b364 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    ba62:	6921      	ldr	r1, [r4, #16]
    ba64:	4620      	mov	r0, r4
    ba66:	f004 f96d 	bl	fd44 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    ba6a:	4620      	mov	r0, r4
    ba6c:	f001 fd44 	bl	d4f8 <z_unpend_first_thread>
	mutex->owner = new_owner;
    ba70:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    ba72:	b1e8      	cbz	r0, bab0 <z_impl_k_mutex_unlock+0xcc>
		mutex->owner_orig_prio = new_owner->base.prio;
    ba74:	f990 300e 	ldrsb.w	r3, [r0, #14]
    ba78:	6123      	str	r3, [r4, #16]
    ba7a:	2400      	movs	r4, #0
    ba7c:	f8c0 40ac 	str.w	r4, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    ba80:	f001 f8c2 	bl	cc08 <z_ready_thread>
		z_reschedule(&lock, key);
    ba84:	4629      	mov	r1, r5
    ba86:	4821      	ldr	r0, [pc, #132]	; (bb0c <z_impl_k_mutex_unlock+0x128>)
    ba88:	f000 fe1a 	bl	c6c0 <z_reschedule>
	return 0;
    ba8c:	4620      	mov	r0, r4
    ba8e:	e7bd      	b.n	ba0c <z_impl_k_mutex_unlock+0x28>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ba90:	4e1f      	ldr	r6, [pc, #124]	; (bb10 <z_impl_k_mutex_unlock+0x12c>)
    ba92:	238e      	movs	r3, #142	; 0x8e
    ba94:	4632      	mov	r2, r6
    ba96:	491f      	ldr	r1, [pc, #124]	; (bb14 <z_impl_k_mutex_unlock+0x130>)
    ba98:	4819      	ldr	r0, [pc, #100]	; (bb00 <z_impl_k_mutex_unlock+0x11c>)
    ba9a:	f003 f98a 	bl	edb2 <assert_print>
    ba9e:	491b      	ldr	r1, [pc, #108]	; (bb0c <z_impl_k_mutex_unlock+0x128>)
    baa0:	481d      	ldr	r0, [pc, #116]	; (bb18 <z_impl_k_mutex_unlock+0x134>)
    baa2:	f003 f986 	bl	edb2 <assert_print>
    baa6:	218e      	movs	r1, #142	; 0x8e
    baa8:	4630      	mov	r0, r6
    baaa:	f003 f97b 	bl	eda4 <assert_post_action>
    baae:	e7d5      	b.n	ba5c <z_impl_k_mutex_unlock+0x78>
		mutex->lock_count = 0U;
    bab0:	2300      	movs	r3, #0
    bab2:	60e3      	str	r3, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    bab4:	4815      	ldr	r0, [pc, #84]	; (bb0c <z_impl_k_mutex_unlock+0x128>)
    bab6:	f7ff fc45 	bl	b344 <z_spin_unlock_valid>
    baba:	b128      	cbz	r0, bac8 <z_impl_k_mutex_unlock+0xe4>
	__asm__ volatile(
    babc:	f385 8811 	msr	BASEPRI, r5
    bac0:	f3bf 8f6f 	isb	sy
	return 0;
    bac4:	2000      	movs	r0, #0
    bac6:	e7a1      	b.n	ba0c <z_impl_k_mutex_unlock+0x28>
    bac8:	4c11      	ldr	r4, [pc, #68]	; (bb10 <z_impl_k_mutex_unlock+0x12c>)
    baca:	23b9      	movs	r3, #185	; 0xb9
    bacc:	4622      	mov	r2, r4
    bace:	4913      	ldr	r1, [pc, #76]	; (bb1c <z_impl_k_mutex_unlock+0x138>)
    bad0:	480b      	ldr	r0, [pc, #44]	; (bb00 <z_impl_k_mutex_unlock+0x11c>)
    bad2:	f003 f96e 	bl	edb2 <assert_print>
    bad6:	490d      	ldr	r1, [pc, #52]	; (bb0c <z_impl_k_mutex_unlock+0x128>)
    bad8:	4811      	ldr	r0, [pc, #68]	; (bb20 <z_impl_k_mutex_unlock+0x13c>)
    bada:	f003 f96a 	bl	edb2 <assert_print>
    bade:	21b9      	movs	r1, #185	; 0xb9
    bae0:	4620      	mov	r0, r4
    bae2:	f003 f95f 	bl	eda4 <assert_post_action>
    bae6:	e7e9      	b.n	babc <z_impl_k_mutex_unlock+0xd8>
		return -EINVAL;
    bae8:	f06f 0015 	mvn.w	r0, #21
    baec:	e78e      	b.n	ba0c <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    baee:	f04f 30ff 	mov.w	r0, #4294967295
    baf2:	e78b      	b.n	ba0c <z_impl_k_mutex_unlock+0x28>
    baf4:	20001090 	.word	0x20001090
    baf8:	000126b0 	.word	0x000126b0
    bafc:	000125f8 	.word	0x000125f8
    bb00:	00010450 	.word	0x00010450
    bb04:	000126d4 	.word	0x000126d4
    bb08:	000126fc 	.word	0x000126fc
    bb0c:	200010c0 	.word	0x200010c0
    bb10:	000105e8 	.word	0x000105e8
    bb14:	00010648 	.word	0x00010648
    bb18:	00010660 	.word	0x00010660
    bb1c:	00010618 	.word	0x00010618
    bb20:	00010630 	.word	0x00010630

0000bb24 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    bb24:	b570      	push	{r4, r5, r6, lr}
    bb26:	4604      	mov	r4, r0
	__asm__ volatile(
    bb28:	f04f 0320 	mov.w	r3, #32
    bb2c:	f3ef 8511 	mrs	r5, BASEPRI
    bb30:	f383 8812 	msr	BASEPRI_MAX, r3
    bb34:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    bb38:	4817      	ldr	r0, [pc, #92]	; (bb98 <z_impl_k_sem_give+0x74>)
    bb3a:	f7ff fbf3 	bl	b324 <z_spin_lock_valid>
    bb3e:	b180      	cbz	r0, bb62 <z_impl_k_sem_give+0x3e>
	z_spin_lock_set_owner(l);
    bb40:	4815      	ldr	r0, [pc, #84]	; (bb98 <z_impl_k_sem_give+0x74>)
    bb42:	f7ff fc0f 	bl	b364 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    bb46:	4620      	mov	r0, r4
    bb48:	f001 fcd6 	bl	d4f8 <z_unpend_first_thread>

	if (thread != NULL) {
    bb4c:	b1c8      	cbz	r0, bb82 <z_impl_k_sem_give+0x5e>
    bb4e:	2200      	movs	r2, #0
    bb50:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    bb54:	f001 f858 	bl	cc08 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    bb58:	4629      	mov	r1, r5
    bb5a:	480f      	ldr	r0, [pc, #60]	; (bb98 <z_impl_k_sem_give+0x74>)
    bb5c:	f000 fdb0 	bl	c6c0 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    bb60:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    bb62:	4e0e      	ldr	r6, [pc, #56]	; (bb9c <z_impl_k_sem_give+0x78>)
    bb64:	238e      	movs	r3, #142	; 0x8e
    bb66:	4632      	mov	r2, r6
    bb68:	490d      	ldr	r1, [pc, #52]	; (bba0 <z_impl_k_sem_give+0x7c>)
    bb6a:	480e      	ldr	r0, [pc, #56]	; (bba4 <z_impl_k_sem_give+0x80>)
    bb6c:	f003 f921 	bl	edb2 <assert_print>
    bb70:	4909      	ldr	r1, [pc, #36]	; (bb98 <z_impl_k_sem_give+0x74>)
    bb72:	480d      	ldr	r0, [pc, #52]	; (bba8 <z_impl_k_sem_give+0x84>)
    bb74:	f003 f91d 	bl	edb2 <assert_print>
    bb78:	218e      	movs	r1, #142	; 0x8e
    bb7a:	4630      	mov	r0, r6
    bb7c:	f003 f912 	bl	eda4 <assert_post_action>
    bb80:	e7de      	b.n	bb40 <z_impl_k_sem_give+0x1c>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    bb82:	68a3      	ldr	r3, [r4, #8]
    bb84:	68e2      	ldr	r2, [r4, #12]
    bb86:	4293      	cmp	r3, r2
    bb88:	d003      	beq.n	bb92 <z_impl_k_sem_give+0x6e>
    bb8a:	2201      	movs	r2, #1
    bb8c:	4413      	add	r3, r2
    bb8e:	60a3      	str	r3, [r4, #8]
}
    bb90:	e7e2      	b.n	bb58 <z_impl_k_sem_give+0x34>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    bb92:	2200      	movs	r2, #0
    bb94:	e7fa      	b.n	bb8c <z_impl_k_sem_give+0x68>
    bb96:	bf00      	nop
    bb98:	200010c4 	.word	0x200010c4
    bb9c:	000105e8 	.word	0x000105e8
    bba0:	00010648 	.word	0x00010648
    bba4:	00010450 	.word	0x00010450
    bba8:	00010660 	.word	0x00010660

0000bbac <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    bbac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bbb0:	b082      	sub	sp, #8
    bbb2:	4604      	mov	r4, r0
    bbb4:	4617      	mov	r7, r2
    bbb6:	461d      	mov	r5, r3
    bbb8:	f3ef 8105 	mrs	r1, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    bbbc:	b111      	cbz	r1, bbc4 <z_impl_k_sem_take+0x18>
    bbbe:	ea55 0302 	orrs.w	r3, r5, r2
    bbc2:	d11f      	bne.n	bc04 <z_impl_k_sem_take+0x58>
    bbc4:	f04f 0320 	mov.w	r3, #32
    bbc8:	f3ef 8611 	mrs	r6, BASEPRI
    bbcc:	f383 8812 	msr	BASEPRI_MAX, r3
    bbd0:	f3bf 8f6f 	isb	sy
    bbd4:	4836      	ldr	r0, [pc, #216]	; (bcb0 <z_impl_k_sem_take+0x104>)
    bbd6:	f7ff fba5 	bl	b324 <z_spin_lock_valid>
    bbda:	b310      	cbz	r0, bc22 <z_impl_k_sem_take+0x76>
	z_spin_lock_set_owner(l);
    bbdc:	4834      	ldr	r0, [pc, #208]	; (bcb0 <z_impl_k_sem_take+0x104>)
    bbde:	f7ff fbc1 	bl	b364 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    bbe2:	68a1      	ldr	r1, [r4, #8]
    bbe4:	2900      	cmp	r1, #0
    bbe6:	d03d      	beq.n	bc64 <z_impl_k_sem_take+0xb8>
		sem->count--;
    bbe8:	3901      	subs	r1, #1
    bbea:	60a1      	str	r1, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    bbec:	4830      	ldr	r0, [pc, #192]	; (bcb0 <z_impl_k_sem_take+0x104>)
    bbee:	f7ff fba9 	bl	b344 <z_spin_unlock_valid>
    bbf2:	b338      	cbz	r0, bc44 <z_impl_k_sem_take+0x98>
	__asm__ volatile(
    bbf4:	f386 8811 	msr	BASEPRI, r6
    bbf8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    bbfc:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    bbfe:	b002      	add	sp, #8
    bc00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(((arch_is_in_isr() == false) ||
    bc04:	4e2b      	ldr	r6, [pc, #172]	; (bcb4 <z_impl_k_sem_take+0x108>)
    bc06:	2379      	movs	r3, #121	; 0x79
    bc08:	4632      	mov	r2, r6
    bc0a:	492b      	ldr	r1, [pc, #172]	; (bcb8 <z_impl_k_sem_take+0x10c>)
    bc0c:	482b      	ldr	r0, [pc, #172]	; (bcbc <z_impl_k_sem_take+0x110>)
    bc0e:	f003 f8d0 	bl	edb2 <assert_print>
    bc12:	482b      	ldr	r0, [pc, #172]	; (bcc0 <z_impl_k_sem_take+0x114>)
    bc14:	f003 f8cd 	bl	edb2 <assert_print>
    bc18:	2179      	movs	r1, #121	; 0x79
    bc1a:	4630      	mov	r0, r6
    bc1c:	f003 f8c2 	bl	eda4 <assert_post_action>
    bc20:	e7d0      	b.n	bbc4 <z_impl_k_sem_take+0x18>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    bc22:	f8df 80a0 	ldr.w	r8, [pc, #160]	; bcc4 <z_impl_k_sem_take+0x118>
    bc26:	238e      	movs	r3, #142	; 0x8e
    bc28:	4642      	mov	r2, r8
    bc2a:	4927      	ldr	r1, [pc, #156]	; (bcc8 <z_impl_k_sem_take+0x11c>)
    bc2c:	4823      	ldr	r0, [pc, #140]	; (bcbc <z_impl_k_sem_take+0x110>)
    bc2e:	f003 f8c0 	bl	edb2 <assert_print>
    bc32:	491f      	ldr	r1, [pc, #124]	; (bcb0 <z_impl_k_sem_take+0x104>)
    bc34:	4825      	ldr	r0, [pc, #148]	; (bccc <z_impl_k_sem_take+0x120>)
    bc36:	f003 f8bc 	bl	edb2 <assert_print>
    bc3a:	218e      	movs	r1, #142	; 0x8e
    bc3c:	4640      	mov	r0, r8
    bc3e:	f003 f8b1 	bl	eda4 <assert_post_action>
    bc42:	e7cb      	b.n	bbdc <z_impl_k_sem_take+0x30>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    bc44:	4c1f      	ldr	r4, [pc, #124]	; (bcc4 <z_impl_k_sem_take+0x118>)
    bc46:	23b9      	movs	r3, #185	; 0xb9
    bc48:	4622      	mov	r2, r4
    bc4a:	4921      	ldr	r1, [pc, #132]	; (bcd0 <z_impl_k_sem_take+0x124>)
    bc4c:	481b      	ldr	r0, [pc, #108]	; (bcbc <z_impl_k_sem_take+0x110>)
    bc4e:	f003 f8b0 	bl	edb2 <assert_print>
    bc52:	4917      	ldr	r1, [pc, #92]	; (bcb0 <z_impl_k_sem_take+0x104>)
    bc54:	481f      	ldr	r0, [pc, #124]	; (bcd4 <z_impl_k_sem_take+0x128>)
    bc56:	f003 f8ac 	bl	edb2 <assert_print>
    bc5a:	21b9      	movs	r1, #185	; 0xb9
    bc5c:	4620      	mov	r0, r4
    bc5e:	f003 f8a1 	bl	eda4 <assert_post_action>
    bc62:	e7c7      	b.n	bbf4 <z_impl_k_sem_take+0x48>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    bc64:	ea55 0307 	orrs.w	r3, r5, r7
    bc68:	d007      	beq.n	bc7a <z_impl_k_sem_take+0xce>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    bc6a:	9700      	str	r7, [sp, #0]
    bc6c:	9501      	str	r5, [sp, #4]
    bc6e:	4622      	mov	r2, r4
    bc70:	4631      	mov	r1, r6
    bc72:	480f      	ldr	r0, [pc, #60]	; (bcb0 <z_impl_k_sem_take+0x104>)
    bc74:	f001 f9a4 	bl	cfc0 <z_pend_curr>
	return ret;
    bc78:	e7c1      	b.n	bbfe <z_impl_k_sem_take+0x52>
    bc7a:	480d      	ldr	r0, [pc, #52]	; (bcb0 <z_impl_k_sem_take+0x104>)
    bc7c:	f7ff fb62 	bl	b344 <z_spin_unlock_valid>
    bc80:	b130      	cbz	r0, bc90 <z_impl_k_sem_take+0xe4>
    bc82:	f386 8811 	msr	BASEPRI, r6
    bc86:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    bc8a:	f06f 000f 	mvn.w	r0, #15
    bc8e:	e7b6      	b.n	bbfe <z_impl_k_sem_take+0x52>
    bc90:	4c0c      	ldr	r4, [pc, #48]	; (bcc4 <z_impl_k_sem_take+0x118>)
    bc92:	23b9      	movs	r3, #185	; 0xb9
    bc94:	4622      	mov	r2, r4
    bc96:	490e      	ldr	r1, [pc, #56]	; (bcd0 <z_impl_k_sem_take+0x124>)
    bc98:	4808      	ldr	r0, [pc, #32]	; (bcbc <z_impl_k_sem_take+0x110>)
    bc9a:	f003 f88a 	bl	edb2 <assert_print>
    bc9e:	4904      	ldr	r1, [pc, #16]	; (bcb0 <z_impl_k_sem_take+0x104>)
    bca0:	480c      	ldr	r0, [pc, #48]	; (bcd4 <z_impl_k_sem_take+0x128>)
    bca2:	f003 f886 	bl	edb2 <assert_print>
    bca6:	21b9      	movs	r1, #185	; 0xb9
    bca8:	4620      	mov	r0, r4
    bcaa:	f003 f87b 	bl	eda4 <assert_post_action>
    bcae:	e7e8      	b.n	bc82 <z_impl_k_sem_take+0xd6>
    bcb0:	200010c4 	.word	0x200010c4
    bcb4:	00012714 	.word	0x00012714
    bcb8:	00012734 	.word	0x00012734
    bcbc:	00010450 	.word	0x00010450
    bcc0:	00012784 	.word	0x00012784
    bcc4:	000105e8 	.word	0x000105e8
    bcc8:	00010648 	.word	0x00010648
    bccc:	00010660 	.word	0x00010660
    bcd0:	00010618 	.word	0x00010618
    bcd4:	00010630 	.word	0x00010630

0000bcd8 <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
    bcd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bcda:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
    bcdc:	68c3      	ldr	r3, [r0, #12]
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    bcde:	f013 0f02 	tst.w	r3, #2
    bce2:	d16f      	bne.n	bdc4 <submit_to_queue_locked+0xec>
    bce4:	4604      	mov	r4, r0
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    bce6:	f013 0f04 	tst.w	r3, #4
    bcea:	d170      	bne.n	bdce <submit_to_queue_locked+0xf6>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
    bcec:	680b      	ldr	r3, [r1, #0]
    bcee:	2b00      	cmp	r3, #0
    bcf0:	d03d      	beq.n	bd6e <submit_to_queue_locked+0x96>
	return (*flagp & BIT(bit)) != 0U;
    bcf2:	68e3      	ldr	r3, [r4, #12]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    bcf4:	f013 0f01 	tst.w	r3, #1
    bcf8:	d04a      	beq.n	bd90 <submit_to_queue_locked+0xb8>
			__ASSERT_NO_MSG(work->queue != NULL);
    bcfa:	68a3      	ldr	r3, [r4, #8]
    bcfc:	2b00      	cmp	r3, #0
    bcfe:	d039      	beq.n	bd74 <submit_to_queue_locked+0x9c>
			*queuep = work->queue;
    bd00:	68a3      	ldr	r3, [r4, #8]
    bd02:	602b      	str	r3, [r5, #0]
			ret = 2;
    bd04:	2702      	movs	r7, #2
		}

		int rc = queue_submit_locked(*queuep, work);
    bd06:	682e      	ldr	r6, [r5, #0]
	if (queue == NULL) {
    bd08:	2e00      	cmp	r6, #0
    bd0a:	d04f      	beq.n	bdac <submit_to_queue_locked+0xd4>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    bd0c:	4b31      	ldr	r3, [pc, #196]	; (bdd4 <submit_to_queue_locked+0xfc>)
    bd0e:	689b      	ldr	r3, [r3, #8]
    bd10:	42b3      	cmp	r3, r6
    bd12:	d03f      	beq.n	bd94 <submit_to_queue_locked+0xbc>
    bd14:	2300      	movs	r3, #0
    bd16:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
    bd18:	f8d6 30c8 	ldr.w	r3, [r6, #200]	; 0xc8
    bd1c:	f3c3 0180 	ubfx	r1, r3, #2, #1
    bd20:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    bd24:	f013 0f01 	tst.w	r3, #1
    bd28:	d043      	beq.n	bdb2 <submit_to_queue_locked+0xda>
	} else if (draining && !chained) {
    bd2a:	b109      	cbz	r1, bd30 <submit_to_queue_locked+0x58>
    bd2c:	2a00      	cmp	r2, #0
    bd2e:	d043      	beq.n	bdb8 <submit_to_queue_locked+0xe0>
	} else if (plugged && !draining) {
    bd30:	b108      	cbz	r0, bd36 <submit_to_queue_locked+0x5e>
    bd32:	2900      	cmp	r1, #0
    bd34:	d043      	beq.n	bdbe <submit_to_queue_locked+0xe6>
	parent->next = child;
    bd36:	2300      	movs	r3, #0
    bd38:	6023      	str	r3, [r4, #0]
	return list->tail;
    bd3a:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
Z_GENLIST_APPEND(slist, snode)
    bd3e:	b383      	cbz	r3, bda2 <submit_to_queue_locked+0xca>
	parent->next = child;
    bd40:	601c      	str	r4, [r3, #0]
	list->tail = node;
    bd42:	f8c6 40b4 	str.w	r4, [r6, #180]	; 0xb4
	if (queue != NULL) {
    bd46:	b12e      	cbz	r6, bd54 <submit_to_queue_locked+0x7c>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    bd48:	2200      	movs	r2, #0
    bd4a:	4611      	mov	r1, r2
    bd4c:	f106 00b8 	add.w	r0, r6, #184	; 0xb8
    bd50:	f001 fed8 	bl	db04 <z_sched_wake>
		ret = 1;
    bd54:	2001      	movs	r0, #1

		if (rc < 0) {
    bd56:	2800      	cmp	r0, #0
    bd58:	db06      	blt.n	bd68 <submit_to_queue_locked+0x90>
	*flagp |= BIT(bit);
    bd5a:	68e3      	ldr	r3, [r4, #12]
    bd5c:	f043 0304 	orr.w	r3, r3, #4
    bd60:	60e3      	str	r3, [r4, #12]
			ret = rc;
		} else {
			flag_set(&work->flags, K_WORK_QUEUED_BIT);
			work->queue = *queuep;
    bd62:	682b      	ldr	r3, [r5, #0]
    bd64:	60a3      	str	r3, [r4, #8]
    bd66:	4638      	mov	r0, r7
		}
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
    bd68:	2800      	cmp	r0, #0
    bd6a:	dc2f      	bgt.n	bdcc <submit_to_queue_locked+0xf4>
    bd6c:	e02c      	b.n	bdc8 <submit_to_queue_locked+0xf0>
			*queuep = work->queue;
    bd6e:	6883      	ldr	r3, [r0, #8]
    bd70:	600b      	str	r3, [r1, #0]
    bd72:	e7be      	b.n	bcf2 <submit_to_queue_locked+0x1a>
			__ASSERT_NO_MSG(work->queue != NULL);
    bd74:	4e18      	ldr	r6, [pc, #96]	; (bdd8 <submit_to_queue_locked+0x100>)
    bd76:	f44f 73a7 	mov.w	r3, #334	; 0x14e
    bd7a:	4632      	mov	r2, r6
    bd7c:	4917      	ldr	r1, [pc, #92]	; (bddc <submit_to_queue_locked+0x104>)
    bd7e:	4818      	ldr	r0, [pc, #96]	; (bde0 <submit_to_queue_locked+0x108>)
    bd80:	f003 f817 	bl	edb2 <assert_print>
    bd84:	f44f 71a7 	mov.w	r1, #334	; 0x14e
    bd88:	4630      	mov	r0, r6
    bd8a:	f003 f80b 	bl	eda4 <assert_post_action>
    bd8e:	e7b7      	b.n	bd00 <submit_to_queue_locked+0x28>
		ret = 1;
    bd90:	2701      	movs	r7, #1
    bd92:	e7b8      	b.n	bd06 <submit_to_queue_locked+0x2e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    bd94:	f003 ffae 	bl	fcf4 <k_is_in_isr>
    bd98:	b908      	cbnz	r0, bd9e <submit_to_queue_locked+0xc6>
    bd9a:	2301      	movs	r3, #1
    bd9c:	e7bb      	b.n	bd16 <submit_to_queue_locked+0x3e>
    bd9e:	2300      	movs	r3, #0
    bda0:	e7b9      	b.n	bd16 <submit_to_queue_locked+0x3e>
    bda2:	f8c6 40b4 	str.w	r4, [r6, #180]	; 0xb4
	list->head = node;
    bda6:	f8c6 40b0 	str.w	r4, [r6, #176]	; 0xb0
}
    bdaa:	e7cc      	b.n	bd46 <submit_to_queue_locked+0x6e>
		return -EINVAL;
    bdac:	f06f 0015 	mvn.w	r0, #21
    bdb0:	e7d1      	b.n	bd56 <submit_to_queue_locked+0x7e>
		ret = -ENODEV;
    bdb2:	f06f 0012 	mvn.w	r0, #18
    bdb6:	e7ce      	b.n	bd56 <submit_to_queue_locked+0x7e>
		ret = -EBUSY;
    bdb8:	f06f 000f 	mvn.w	r0, #15
    bdbc:	e7cb      	b.n	bd56 <submit_to_queue_locked+0x7e>
		ret = -EBUSY;
    bdbe:	f06f 000f 	mvn.w	r0, #15
    bdc2:	e7c8      	b.n	bd56 <submit_to_queue_locked+0x7e>
		ret = -EBUSY;
    bdc4:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
    bdc8:	2300      	movs	r3, #0
    bdca:	602b      	str	r3, [r5, #0]
	}

	return ret;
}
    bdcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int ret = 0;
    bdce:	2000      	movs	r0, #0
    bdd0:	e7fa      	b.n	bdc8 <submit_to_queue_locked+0xf0>
    bdd2:	bf00      	nop
    bdd4:	20001090 	.word	0x20001090
    bdd8:	00012788 	.word	0x00012788
    bddc:	000127ac 	.word	0x000127ac
    bde0:	00010450 	.word	0x00010450

0000bde4 <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
    bde4:	b5f0      	push	{r4, r5, r6, r7, lr}
    bde6:	b083      	sub	sp, #12
    bde8:	4604      	mov	r4, r0
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
    bdea:	f1a0 0610 	sub.w	r6, r0, #16
	__asm__ volatile(
    bdee:	f04f 0320 	mov.w	r3, #32
    bdf2:	f3ef 8511 	mrs	r5, BASEPRI
    bdf6:	f383 8812 	msr	BASEPRI_MAX, r3
    bdfa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    bdfe:	4821      	ldr	r0, [pc, #132]	; (be84 <work_timeout+0xa0>)
    be00:	f7ff fa90 	bl	b324 <z_spin_lock_valid>
    be04:	b1b8      	cbz	r0, be36 <work_timeout+0x52>
	z_spin_lock_set_owner(l);
    be06:	481f      	ldr	r0, [pc, #124]	; (be84 <work_timeout+0xa0>)
    be08:	f7ff faac 	bl	b364 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
    be0c:	2300      	movs	r3, #0
    be0e:	9301      	str	r3, [sp, #4]
	return (*flagp & BIT(bit)) != 0U;
    be10:	f854 3c04 	ldr.w	r3, [r4, #-4]
	*flagp &= ~BIT(bit);
    be14:	f023 0208 	bic.w	r2, r3, #8
    be18:	f844 2c04 	str.w	r2, [r4, #-4]
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
    be1c:	f013 0f08 	tst.w	r3, #8
    be20:	d119      	bne.n	be56 <work_timeout+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    be22:	4818      	ldr	r0, [pc, #96]	; (be84 <work_timeout+0xa0>)
    be24:	f7ff fa8e 	bl	b344 <z_spin_unlock_valid>
    be28:	b1e0      	cbz	r0, be64 <work_timeout+0x80>
	__asm__ volatile(
    be2a:	f385 8811 	msr	BASEPRI, r5
    be2e:	f3bf 8f6f 	isb	sy
		queue = dw->queue;
		(void)submit_to_queue_locked(wp, &queue);
	}

	k_spin_unlock(&lock, key);
}
    be32:	b003      	add	sp, #12
    be34:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    be36:	4f14      	ldr	r7, [pc, #80]	; (be88 <work_timeout+0xa4>)
    be38:	238e      	movs	r3, #142	; 0x8e
    be3a:	463a      	mov	r2, r7
    be3c:	4913      	ldr	r1, [pc, #76]	; (be8c <work_timeout+0xa8>)
    be3e:	4814      	ldr	r0, [pc, #80]	; (be90 <work_timeout+0xac>)
    be40:	f002 ffb7 	bl	edb2 <assert_print>
    be44:	490f      	ldr	r1, [pc, #60]	; (be84 <work_timeout+0xa0>)
    be46:	4813      	ldr	r0, [pc, #76]	; (be94 <work_timeout+0xb0>)
    be48:	f002 ffb3 	bl	edb2 <assert_print>
    be4c:	218e      	movs	r1, #142	; 0x8e
    be4e:	4638      	mov	r0, r7
    be50:	f002 ffa8 	bl	eda4 <assert_post_action>
    be54:	e7d7      	b.n	be06 <work_timeout+0x22>
		queue = dw->queue;
    be56:	69a3      	ldr	r3, [r4, #24]
    be58:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
    be5a:	a901      	add	r1, sp, #4
    be5c:	4630      	mov	r0, r6
    be5e:	f7ff ff3b 	bl	bcd8 <submit_to_queue_locked>
    be62:	e7de      	b.n	be22 <work_timeout+0x3e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    be64:	4c08      	ldr	r4, [pc, #32]	; (be88 <work_timeout+0xa4>)
    be66:	23b9      	movs	r3, #185	; 0xb9
    be68:	4622      	mov	r2, r4
    be6a:	490b      	ldr	r1, [pc, #44]	; (be98 <work_timeout+0xb4>)
    be6c:	4808      	ldr	r0, [pc, #32]	; (be90 <work_timeout+0xac>)
    be6e:	f002 ffa0 	bl	edb2 <assert_print>
    be72:	4904      	ldr	r1, [pc, #16]	; (be84 <work_timeout+0xa0>)
    be74:	4809      	ldr	r0, [pc, #36]	; (be9c <work_timeout+0xb8>)
    be76:	f002 ff9c 	bl	edb2 <assert_print>
    be7a:	21b9      	movs	r1, #185	; 0xb9
    be7c:	4620      	mov	r0, r4
    be7e:	f002 ff91 	bl	eda4 <assert_post_action>
    be82:	e7d2      	b.n	be2a <work_timeout+0x46>
    be84:	200010c8 	.word	0x200010c8
    be88:	000105e8 	.word	0x000105e8
    be8c:	00010648 	.word	0x00010648
    be90:	00010450 	.word	0x00010450
    be94:	00010660 	.word	0x00010660
    be98:	00010618 	.word	0x00010618
    be9c:	00010630 	.word	0x00010630

0000bea0 <schedule_for_queue_locked>:
 * @retval 1 to indicate successfully scheduled.
 */
static int schedule_for_queue_locked(struct k_work_q **queuep,
				     struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
    bea0:	b508      	push	{r3, lr}
    bea2:	4684      	mov	ip, r0
    bea4:	4608      	mov	r0, r1
	int ret = 1;
	struct k_work *work = &dwork->work;

	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    bea6:	ea53 0102 	orrs.w	r1, r3, r2
    beaa:	d00c      	beq.n	bec6 <schedule_for_queue_locked+0x26>
	*flagp |= BIT(bit);
    beac:	68c1      	ldr	r1, [r0, #12]
    beae:	f041 0108 	orr.w	r1, r1, #8
    beb2:	60c1      	str	r1, [r0, #12]
		return submit_to_queue_locked(work, queuep);
	}

	flag_set(&work->flags, K_WORK_DELAYED_BIT);
	dwork->queue = *queuep;
    beb4:	f8dc 1000 	ldr.w	r1, [ip]
    beb8:	6281      	str	r1, [r0, #40]	; 0x28

	/* Add timeout */
	z_add_timeout(&dwork->timeout, work_timeout, delay);
    beba:	4905      	ldr	r1, [pc, #20]	; (bed0 <schedule_for_queue_locked+0x30>)
    bebc:	3010      	adds	r0, #16
    bebe:	f001 ff0b 	bl	dcd8 <z_add_timeout>

	return ret;
    bec2:	2001      	movs	r0, #1
}
    bec4:	bd08      	pop	{r3, pc}
		return submit_to_queue_locked(work, queuep);
    bec6:	4661      	mov	r1, ip
    bec8:	f7ff ff06 	bl	bcd8 <submit_to_queue_locked>
    becc:	e7fa      	b.n	bec4 <schedule_for_queue_locked+0x24>
    bece:	bf00      	nop
    bed0:	0000bde5 	.word	0x0000bde5

0000bed4 <finalize_cancel_locked>:
{
    bed4:	b570      	push	{r4, r5, r6, lr}
    bed6:	4605      	mov	r5, r0
	*flagp &= ~BIT(bit);
    bed8:	68c3      	ldr	r3, [r0, #12]
    beda:	f023 0302 	bic.w	r3, r3, #2
    bede:	60c3      	str	r3, [r0, #12]
	return list->head;
    bee0:	4b1a      	ldr	r3, [pc, #104]	; (bf4c <finalize_cancel_locked+0x78>)
    bee2:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    bee4:	b1fb      	cbz	r3, bf26 <finalize_cancel_locked+0x52>
    bee6:	461c      	mov	r4, r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    bee8:	b103      	cbz	r3, beec <finalize_cancel_locked+0x18>
	return node->next;
    beea:	681c      	ldr	r4, [r3, #0]
    beec:	2600      	movs	r6, #0
    beee:	e01f      	b.n	bf30 <finalize_cancel_locked+0x5c>
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    bef0:	461a      	mov	r2, r3
Z_GENLIST_REMOVE(slist, snode)
    bef2:	b166      	cbz	r6, bf0e <finalize_cancel_locked+0x3a>
	return node->next;
    bef4:	6819      	ldr	r1, [r3, #0]
	parent->next = child;
    bef6:	6031      	str	r1, [r6, #0]
	return list->tail;
    bef8:	4914      	ldr	r1, [pc, #80]	; (bf4c <finalize_cancel_locked+0x78>)
    befa:	6849      	ldr	r1, [r1, #4]
Z_GENLIST_REMOVE(slist, snode)
    befc:	428b      	cmp	r3, r1
    befe:	d00f      	beq.n	bf20 <finalize_cancel_locked+0x4c>
	parent->next = child;
    bf00:	2100      	movs	r1, #0
    bf02:	6011      	str	r1, [r2, #0]
			k_sem_give(&wc->sem);
    bf04:	f103 0008 	add.w	r0, r3, #8
	z_impl_k_sem_give(sem);
    bf08:	f7ff fe0c 	bl	bb24 <z_impl_k_sem_give>
}
    bf0c:	e015      	b.n	bf3a <finalize_cancel_locked+0x66>
	return node->next;
    bf0e:	6818      	ldr	r0, [r3, #0]
	list->head = node;
    bf10:	490e      	ldr	r1, [pc, #56]	; (bf4c <finalize_cancel_locked+0x78>)
    bf12:	6008      	str	r0, [r1, #0]
	return list->tail;
    bf14:	6849      	ldr	r1, [r1, #4]
Z_GENLIST_REMOVE(slist, snode)
    bf16:	428b      	cmp	r3, r1
    bf18:	d1f2      	bne.n	bf00 <finalize_cancel_locked+0x2c>
	list->tail = node;
    bf1a:	490c      	ldr	r1, [pc, #48]	; (bf4c <finalize_cancel_locked+0x78>)
    bf1c:	6048      	str	r0, [r1, #4]
}
    bf1e:	e7ef      	b.n	bf00 <finalize_cancel_locked+0x2c>
	list->tail = node;
    bf20:	490a      	ldr	r1, [pc, #40]	; (bf4c <finalize_cancel_locked+0x78>)
    bf22:	604e      	str	r6, [r1, #4]
}
    bf24:	e7ec      	b.n	bf00 <finalize_cancel_locked+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    bf26:	461c      	mov	r4, r3
    bf28:	e7e0      	b.n	beec <finalize_cancel_locked+0x18>
    bf2a:	4622      	mov	r2, r4
    bf2c:	4623      	mov	r3, r4
    bf2e:	4614      	mov	r4, r2
    bf30:	b153      	cbz	r3, bf48 <finalize_cancel_locked+0x74>
		if (wc->work == work) {
    bf32:	685a      	ldr	r2, [r3, #4]
    bf34:	42aa      	cmp	r2, r5
    bf36:	d0db      	beq.n	bef0 <finalize_cancel_locked+0x1c>
			prev = &wc->node;
    bf38:	461e      	mov	r6, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    bf3a:	2c00      	cmp	r4, #0
    bf3c:	d0f5      	beq.n	bf2a <finalize_cancel_locked+0x56>
    bf3e:	4622      	mov	r2, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    bf40:	2c00      	cmp	r4, #0
    bf42:	d0f3      	beq.n	bf2c <finalize_cancel_locked+0x58>
	return node->next;
    bf44:	6822      	ldr	r2, [r4, #0]
    bf46:	e7f1      	b.n	bf2c <finalize_cancel_locked+0x58>
}
    bf48:	bd70      	pop	{r4, r5, r6, pc}
    bf4a:	bf00      	nop
    bf4c:	200010cc 	.word	0x200010cc

0000bf50 <work_queue_main>:
{
    bf50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bf54:	b084      	sub	sp, #16
    bf56:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
    bf58:	e026      	b.n	bfa8 <work_queue_main+0x58>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    bf5a:	4c6e      	ldr	r4, [pc, #440]	; (c114 <work_queue_main+0x1c4>)
    bf5c:	238e      	movs	r3, #142	; 0x8e
    bf5e:	4622      	mov	r2, r4
    bf60:	496d      	ldr	r1, [pc, #436]	; (c118 <work_queue_main+0x1c8>)
    bf62:	486e      	ldr	r0, [pc, #440]	; (c11c <work_queue_main+0x1cc>)
    bf64:	f002 ff25 	bl	edb2 <assert_print>
    bf68:	496d      	ldr	r1, [pc, #436]	; (c120 <work_queue_main+0x1d0>)
    bf6a:	486e      	ldr	r0, [pc, #440]	; (c124 <work_queue_main+0x1d4>)
    bf6c:	f002 ff21 	bl	edb2 <assert_print>
    bf70:	218e      	movs	r1, #142	; 0x8e
    bf72:	4620      	mov	r0, r4
    bf74:	f002 ff16 	bl	eda4 <assert_post_action>
    bf78:	e023      	b.n	bfc2 <work_queue_main+0x72>
	return (*flagp & BIT(bit)) != 0U;
    bf7a:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
	*flagp &= ~BIT(bit);
    bf7e:	f023 0204 	bic.w	r2, r3, #4
    bf82:	f8c5 20c8 	str.w	r2, [r5, #200]	; 0xc8
		} else if (flag_test_and_clear(&queue->flags,
    bf86:	f013 0f04 	tst.w	r3, #4
    bf8a:	d175      	bne.n	c078 <work_queue_main+0x128>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    bf8c:	2300      	movs	r3, #0
    bf8e:	9302      	str	r3, [sp, #8]
    bf90:	f04f 32ff 	mov.w	r2, #4294967295
    bf94:	f04f 33ff 	mov.w	r3, #4294967295
    bf98:	e9cd 2300 	strd	r2, r3, [sp]
    bf9c:	f105 02b8 	add.w	r2, r5, #184	; 0xb8
    bfa0:	4631      	mov	r1, r6
    bfa2:	485f      	ldr	r0, [pc, #380]	; (c120 <work_queue_main+0x1d0>)
    bfa4:	f001 fe22 	bl	dbec <z_sched_wait>
	__asm__ volatile(
    bfa8:	f04f 0320 	mov.w	r3, #32
    bfac:	f3ef 8611 	mrs	r6, BASEPRI
    bfb0:	f383 8812 	msr	BASEPRI_MAX, r3
    bfb4:	f3bf 8f6f 	isb	sy
    bfb8:	4859      	ldr	r0, [pc, #356]	; (c120 <work_queue_main+0x1d0>)
    bfba:	f7ff f9b3 	bl	b324 <z_spin_lock_valid>
    bfbe:	2800      	cmp	r0, #0
    bfc0:	d0cb      	beq.n	bf5a <work_queue_main+0xa>
	z_spin_lock_set_owner(l);
    bfc2:	4857      	ldr	r0, [pc, #348]	; (c120 <work_queue_main+0x1d0>)
    bfc4:	f7ff f9ce 	bl	b364 <z_spin_lock_set_owner>
	return list->head;
    bfc8:	f8d5 40b0 	ldr.w	r4, [r5, #176]	; 0xb0
Z_GENLIST_GET(slist, snode)
    bfcc:	2c00      	cmp	r4, #0
    bfce:	d0d4      	beq.n	bf7a <work_queue_main+0x2a>
	return node->next;
    bfd0:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    bfd2:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
	return list->tail;
    bfd6:	f8d5 20b4 	ldr.w	r2, [r5, #180]	; 0xb4
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    bfda:	4294      	cmp	r4, r2
    bfdc:	d049      	beq.n	c072 <work_queue_main+0x122>
	*flagp |= BIT(bit);
    bfde:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
    bfe2:	f043 0302 	orr.w	r3, r3, #2
    bfe6:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
    bfea:	68e3      	ldr	r3, [r4, #12]
    bfec:	f043 0301 	orr.w	r3, r3, #1
    bff0:	60e3      	str	r3, [r4, #12]
	*flagp &= ~BIT(bit);
    bff2:	f023 0304 	bic.w	r3, r3, #4
    bff6:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
    bff8:	6867      	ldr	r7, [r4, #4]
		if (work == NULL) {
    bffa:	2c00      	cmp	r4, #0
    bffc:	d0c6      	beq.n	bf8c <work_queue_main+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    bffe:	4848      	ldr	r0, [pc, #288]	; (c120 <work_queue_main+0x1d0>)
    c000:	f7ff f9a0 	bl	b344 <z_spin_unlock_valid>
    c004:	2800      	cmp	r0, #0
    c006:	d042      	beq.n	c08e <work_queue_main+0x13e>
	__asm__ volatile(
    c008:	f386 8811 	msr	BASEPRI, r6
    c00c:	f3bf 8f6f 	isb	sy
		__ASSERT_NO_MSG(handler != NULL);
    c010:	2f00      	cmp	r7, #0
    c012:	d04d      	beq.n	c0b0 <work_queue_main+0x160>
		handler(work);
    c014:	4620      	mov	r0, r4
    c016:	47b8      	blx	r7
	__asm__ volatile(
    c018:	f04f 0320 	mov.w	r3, #32
    c01c:	f3ef 8611 	mrs	r6, BASEPRI
    c020:	f383 8812 	msr	BASEPRI_MAX, r3
    c024:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c028:	483d      	ldr	r0, [pc, #244]	; (c120 <work_queue_main+0x1d0>)
    c02a:	f7ff f97b 	bl	b324 <z_spin_lock_valid>
    c02e:	2800      	cmp	r0, #0
    c030:	d04c      	beq.n	c0cc <work_queue_main+0x17c>
	z_spin_lock_set_owner(l);
    c032:	483b      	ldr	r0, [pc, #236]	; (c120 <work_queue_main+0x1d0>)
    c034:	f7ff f996 	bl	b364 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
    c038:	68e3      	ldr	r3, [r4, #12]
    c03a:	f023 0301 	bic.w	r3, r3, #1
    c03e:	60e3      	str	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    c040:	f013 0f02 	tst.w	r3, #2
    c044:	d152      	bne.n	c0ec <work_queue_main+0x19c>
	*flagp &= ~BIT(bit);
    c046:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
    c04a:	f023 0302 	bic.w	r3, r3, #2
    c04e:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
	return (*flagp & BIT(bit)) != 0U;
    c052:	f3c3 2400 	ubfx	r4, r3, #8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c056:	4832      	ldr	r0, [pc, #200]	; (c120 <work_queue_main+0x1d0>)
    c058:	f7ff f974 	bl	b344 <z_spin_unlock_valid>
    c05c:	2800      	cmp	r0, #0
    c05e:	d049      	beq.n	c0f4 <work_queue_main+0x1a4>
	__asm__ volatile(
    c060:	f386 8811 	msr	BASEPRI, r6
    c064:	f3bf 8f6f 	isb	sy
		if (yield) {
    c068:	2c00      	cmp	r4, #0
    c06a:	d19d      	bne.n	bfa8 <work_queue_main+0x58>
	z_impl_k_yield();
    c06c:	f001 fab4 	bl	d5d8 <z_impl_k_yield>
}
    c070:	e79a      	b.n	bfa8 <work_queue_main+0x58>
	list->tail = node;
    c072:	f8c5 30b4 	str.w	r3, [r5, #180]	; 0xb4
}
    c076:	e7b2      	b.n	bfde <work_queue_main+0x8e>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    c078:	f105 07c0 	add.w	r7, r5, #192	; 0xc0
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    c07c:	2200      	movs	r2, #0
    c07e:	2101      	movs	r1, #1
    c080:	4638      	mov	r0, r7
    c082:	f001 fd3f 	bl	db04 <z_sched_wake>
    c086:	2800      	cmp	r0, #0
    c088:	d1f8      	bne.n	c07c <work_queue_main+0x12c>
		k_work_handler_t handler = NULL;
    c08a:	2700      	movs	r7, #0
    c08c:	e7b5      	b.n	bffa <work_queue_main+0xaa>
    c08e:	f8df 8084 	ldr.w	r8, [pc, #132]	; c114 <work_queue_main+0x1c4>
    c092:	23b9      	movs	r3, #185	; 0xb9
    c094:	4642      	mov	r2, r8
    c096:	4924      	ldr	r1, [pc, #144]	; (c128 <work_queue_main+0x1d8>)
    c098:	4820      	ldr	r0, [pc, #128]	; (c11c <work_queue_main+0x1cc>)
    c09a:	f002 fe8a 	bl	edb2 <assert_print>
    c09e:	4920      	ldr	r1, [pc, #128]	; (c120 <work_queue_main+0x1d0>)
    c0a0:	4822      	ldr	r0, [pc, #136]	; (c12c <work_queue_main+0x1dc>)
    c0a2:	f002 fe86 	bl	edb2 <assert_print>
    c0a6:	21b9      	movs	r1, #185	; 0xb9
    c0a8:	4640      	mov	r0, r8
    c0aa:	f002 fe7b 	bl	eda4 <assert_post_action>
    c0ae:	e7ab      	b.n	c008 <work_queue_main+0xb8>
		__ASSERT_NO_MSG(handler != NULL);
    c0b0:	4e1f      	ldr	r6, [pc, #124]	; (c130 <work_queue_main+0x1e0>)
    c0b2:	f240 239b 	movw	r3, #667	; 0x29b
    c0b6:	4632      	mov	r2, r6
    c0b8:	491e      	ldr	r1, [pc, #120]	; (c134 <work_queue_main+0x1e4>)
    c0ba:	4818      	ldr	r0, [pc, #96]	; (c11c <work_queue_main+0x1cc>)
    c0bc:	f002 fe79 	bl	edb2 <assert_print>
    c0c0:	f240 219b 	movw	r1, #667	; 0x29b
    c0c4:	4630      	mov	r0, r6
    c0c6:	f002 fe6d 	bl	eda4 <assert_post_action>
    c0ca:	e7a3      	b.n	c014 <work_queue_main+0xc4>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c0cc:	4f11      	ldr	r7, [pc, #68]	; (c114 <work_queue_main+0x1c4>)
    c0ce:	238e      	movs	r3, #142	; 0x8e
    c0d0:	463a      	mov	r2, r7
    c0d2:	4911      	ldr	r1, [pc, #68]	; (c118 <work_queue_main+0x1c8>)
    c0d4:	4811      	ldr	r0, [pc, #68]	; (c11c <work_queue_main+0x1cc>)
    c0d6:	f002 fe6c 	bl	edb2 <assert_print>
    c0da:	4911      	ldr	r1, [pc, #68]	; (c120 <work_queue_main+0x1d0>)
    c0dc:	4811      	ldr	r0, [pc, #68]	; (c124 <work_queue_main+0x1d4>)
    c0de:	f002 fe68 	bl	edb2 <assert_print>
    c0e2:	218e      	movs	r1, #142	; 0x8e
    c0e4:	4638      	mov	r0, r7
    c0e6:	f002 fe5d 	bl	eda4 <assert_post_action>
    c0ea:	e7a2      	b.n	c032 <work_queue_main+0xe2>
			finalize_cancel_locked(work);
    c0ec:	4620      	mov	r0, r4
    c0ee:	f7ff fef1 	bl	bed4 <finalize_cancel_locked>
    c0f2:	e7a8      	b.n	c046 <work_queue_main+0xf6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c0f4:	4f07      	ldr	r7, [pc, #28]	; (c114 <work_queue_main+0x1c4>)
    c0f6:	23b9      	movs	r3, #185	; 0xb9
    c0f8:	463a      	mov	r2, r7
    c0fa:	490b      	ldr	r1, [pc, #44]	; (c128 <work_queue_main+0x1d8>)
    c0fc:	4807      	ldr	r0, [pc, #28]	; (c11c <work_queue_main+0x1cc>)
    c0fe:	f002 fe58 	bl	edb2 <assert_print>
    c102:	4907      	ldr	r1, [pc, #28]	; (c120 <work_queue_main+0x1d0>)
    c104:	4809      	ldr	r0, [pc, #36]	; (c12c <work_queue_main+0x1dc>)
    c106:	f002 fe54 	bl	edb2 <assert_print>
    c10a:	21b9      	movs	r1, #185	; 0xb9
    c10c:	4638      	mov	r0, r7
    c10e:	f002 fe49 	bl	eda4 <assert_post_action>
    c112:	e7a5      	b.n	c060 <work_queue_main+0x110>
    c114:	000105e8 	.word	0x000105e8
    c118:	00010648 	.word	0x00010648
    c11c:	00010450 	.word	0x00010450
    c120:	200010c8 	.word	0x200010c8
    c124:	00010660 	.word	0x00010660
    c128:	00010618 	.word	0x00010618
    c12c:	00010630 	.word	0x00010630
    c130:	00012788 	.word	0x00012788
    c134:	000127c8 	.word	0x000127c8

0000c138 <k_work_queue_start>:
{
    c138:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c13c:	b089      	sub	sp, #36	; 0x24
    c13e:	460d      	mov	r5, r1
    c140:	4617      	mov	r7, r2
    c142:	4698      	mov	r8, r3
    c144:	9e10      	ldr	r6, [sp, #64]	; 0x40
	__ASSERT_NO_MSG(queue);
    c146:	4604      	mov	r4, r0
    c148:	2800      	cmp	r0, #0
    c14a:	d03e      	beq.n	c1ca <k_work_queue_start+0x92>
	__ASSERT_NO_MSG(stack);
    c14c:	2d00      	cmp	r5, #0
    c14e:	d04b      	beq.n	c1e8 <k_work_queue_start+0xb0>
	return (*flagp & BIT(bit)) != 0U;
    c150:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
    c154:	f013 0f01 	tst.w	r3, #1
    c158:	d155      	bne.n	c206 <k_work_queue_start+0xce>
	list->head = NULL;
    c15a:	2300      	movs	r3, #0
    c15c:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	list->tail = NULL;
    c160:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
    c164:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
	list->head = (sys_dnode_t *)list;
    c168:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
	list->tail = (sys_dnode_t *)list;
    c16c:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    c170:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
	list->head = (sys_dnode_t *)list;
    c174:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	list->tail = (sys_dnode_t *)list;
    c178:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
	if ((cfg != NULL) && cfg->no_yield) {
    c17c:	2e00      	cmp	r6, #0
    c17e:	d051      	beq.n	c224 <k_work_queue_start+0xec>
    c180:	7933      	ldrb	r3, [r6, #4]
    c182:	2b00      	cmp	r3, #0
    c184:	d150      	bne.n	c228 <k_work_queue_start+0xf0>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    c186:	2301      	movs	r3, #1
	*flagp = flags;
    c188:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    c18c:	f04f 32ff 	mov.w	r2, #4294967295
    c190:	f04f 33ff 	mov.w	r3, #4294967295
    c194:	e9cd 2306 	strd	r2, r3, [sp, #24]
    c198:	2200      	movs	r2, #0
    c19a:	9204      	str	r2, [sp, #16]
    c19c:	f8cd 800c 	str.w	r8, [sp, #12]
    c1a0:	9202      	str	r2, [sp, #8]
    c1a2:	9201      	str	r2, [sp, #4]
    c1a4:	9400      	str	r4, [sp, #0]
    c1a6:	4b22      	ldr	r3, [pc, #136]	; (c230 <k_work_queue_start+0xf8>)
    c1a8:	463a      	mov	r2, r7
    c1aa:	4629      	mov	r1, r5
    c1ac:	4620      	mov	r0, r4
    c1ae:	f7ff fa01 	bl	b5b4 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
    c1b2:	b126      	cbz	r6, c1be <k_work_queue_start+0x86>
    c1b4:	6831      	ldr	r1, [r6, #0]
    c1b6:	b111      	cbz	r1, c1be <k_work_queue_start+0x86>
	return z_impl_k_thread_name_set(thread, str);
    c1b8:	4620      	mov	r0, r4
    c1ba:	f7ff f893 	bl	b2e4 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    c1be:	4620      	mov	r0, r4
    c1c0:	f003 fda0 	bl	fd04 <z_impl_k_thread_start>
}
    c1c4:	b009      	add	sp, #36	; 0x24
    c1c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__ASSERT_NO_MSG(queue);
    c1ca:	f8df 9068 	ldr.w	r9, [pc, #104]	; c234 <k_work_queue_start+0xfc>
    c1ce:	f44f 7332 	mov.w	r3, #712	; 0x2c8
    c1d2:	464a      	mov	r2, r9
    c1d4:	4918      	ldr	r1, [pc, #96]	; (c238 <k_work_queue_start+0x100>)
    c1d6:	4819      	ldr	r0, [pc, #100]	; (c23c <k_work_queue_start+0x104>)
    c1d8:	f002 fdeb 	bl	edb2 <assert_print>
    c1dc:	f44f 7132 	mov.w	r1, #712	; 0x2c8
    c1e0:	4648      	mov	r0, r9
    c1e2:	f002 fddf 	bl	eda4 <assert_post_action>
    c1e6:	e7b1      	b.n	c14c <k_work_queue_start+0x14>
	__ASSERT_NO_MSG(stack);
    c1e8:	f8df 9048 	ldr.w	r9, [pc, #72]	; c234 <k_work_queue_start+0xfc>
    c1ec:	f240 23c9 	movw	r3, #713	; 0x2c9
    c1f0:	464a      	mov	r2, r9
    c1f2:	4913      	ldr	r1, [pc, #76]	; (c240 <k_work_queue_start+0x108>)
    c1f4:	4811      	ldr	r0, [pc, #68]	; (c23c <k_work_queue_start+0x104>)
    c1f6:	f002 fddc 	bl	edb2 <assert_print>
    c1fa:	f240 21c9 	movw	r1, #713	; 0x2c9
    c1fe:	4648      	mov	r0, r9
    c200:	f002 fdd0 	bl	eda4 <assert_post_action>
    c204:	e7a4      	b.n	c150 <k_work_queue_start+0x18>
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
    c206:	f8df 902c 	ldr.w	r9, [pc, #44]	; c234 <k_work_queue_start+0xfc>
    c20a:	f240 23ca 	movw	r3, #714	; 0x2ca
    c20e:	464a      	mov	r2, r9
    c210:	490c      	ldr	r1, [pc, #48]	; (c244 <k_work_queue_start+0x10c>)
    c212:	480a      	ldr	r0, [pc, #40]	; (c23c <k_work_queue_start+0x104>)
    c214:	f002 fdcd 	bl	edb2 <assert_print>
    c218:	f240 21ca 	movw	r1, #714	; 0x2ca
    c21c:	4648      	mov	r0, r9
    c21e:	f002 fdc1 	bl	eda4 <assert_post_action>
    c222:	e79a      	b.n	c15a <k_work_queue_start+0x22>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    c224:	2301      	movs	r3, #1
    c226:	e7af      	b.n	c188 <k_work_queue_start+0x50>
		flags |= K_WORK_QUEUE_NO_YIELD;
    c228:	f240 1301 	movw	r3, #257	; 0x101
    c22c:	e7ac      	b.n	c188 <k_work_queue_start+0x50>
    c22e:	bf00      	nop
    c230:	0000bf51 	.word	0x0000bf51
    c234:	00012788 	.word	0x00012788
    c238:	000127e0 	.word	0x000127e0
    c23c:	00010450 	.word	0x00010450
    c240:	000127e8 	.word	0x000127e8
    c244:	000127f0 	.word	0x000127f0

0000c248 <k_work_init_delayable>:
{
    c248:	b570      	push	{r4, r5, r6, lr}
    c24a:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(dwork != NULL);
    c24c:	4605      	mov	r5, r0
    c24e:	b150      	cbz	r0, c266 <k_work_init_delayable+0x1e>
	__ASSERT_NO_MSG(handler != NULL);
    c250:	b1bc      	cbz	r4, c282 <k_work_init_delayable+0x3a>
	*dwork = (struct k_work_delayable){
    c252:	2230      	movs	r2, #48	; 0x30
    c254:	2100      	movs	r1, #0
    c256:	4628      	mov	r0, r5
    c258:	f003 f801 	bl	f25e <memset>
    c25c:	606c      	str	r4, [r5, #4]
    c25e:	f44f 7380 	mov.w	r3, #256	; 0x100
    c262:	60eb      	str	r3, [r5, #12]
}
    c264:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(dwork != NULL);
    c266:	4e0e      	ldr	r6, [pc, #56]	; (c2a0 <k_work_init_delayable+0x58>)
    c268:	f44f 7350 	mov.w	r3, #832	; 0x340
    c26c:	4632      	mov	r2, r6
    c26e:	490d      	ldr	r1, [pc, #52]	; (c2a4 <k_work_init_delayable+0x5c>)
    c270:	480d      	ldr	r0, [pc, #52]	; (c2a8 <k_work_init_delayable+0x60>)
    c272:	f002 fd9e 	bl	edb2 <assert_print>
    c276:	f44f 7150 	mov.w	r1, #832	; 0x340
    c27a:	4630      	mov	r0, r6
    c27c:	f002 fd92 	bl	eda4 <assert_post_action>
    c280:	e7e6      	b.n	c250 <k_work_init_delayable+0x8>
	__ASSERT_NO_MSG(handler != NULL);
    c282:	4e07      	ldr	r6, [pc, #28]	; (c2a0 <k_work_init_delayable+0x58>)
    c284:	f240 3341 	movw	r3, #833	; 0x341
    c288:	4632      	mov	r2, r6
    c28a:	4908      	ldr	r1, [pc, #32]	; (c2ac <k_work_init_delayable+0x64>)
    c28c:	4806      	ldr	r0, [pc, #24]	; (c2a8 <k_work_init_delayable+0x60>)
    c28e:	f002 fd90 	bl	edb2 <assert_print>
    c292:	f240 3141 	movw	r1, #833	; 0x341
    c296:	4630      	mov	r0, r6
    c298:	f002 fd84 	bl	eda4 <assert_post_action>
    c29c:	e7d9      	b.n	c252 <k_work_init_delayable+0xa>
    c29e:	bf00      	nop
    c2a0:	00012788 	.word	0x00012788
    c2a4:	00012824 	.word	0x00012824
    c2a8:	00010450 	.word	0x00010450
    c2ac:	000127c8 	.word	0x000127c8

0000c2b0 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
    c2b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c2b4:	b082      	sub	sp, #8
    c2b6:	9001      	str	r0, [sp, #4]
    c2b8:	4617      	mov	r7, r2
    c2ba:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
    c2bc:	460c      	mov	r4, r1
    c2be:	b1f9      	cbz	r1, c300 <k_work_schedule_for_queue+0x50>
	__asm__ volatile(
    c2c0:	f04f 0320 	mov.w	r3, #32
    c2c4:	f3ef 8611 	mrs	r6, BASEPRI
    c2c8:	f383 8812 	msr	BASEPRI_MAX, r3
    c2cc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c2d0:	4827      	ldr	r0, [pc, #156]	; (c370 <k_work_schedule_for_queue+0xc0>)
    c2d2:	f7ff f827 	bl	b324 <z_spin_lock_valid>
    c2d6:	b308      	cbz	r0, c31c <k_work_schedule_for_queue+0x6c>
	z_spin_lock_set_owner(l);
    c2d8:	4825      	ldr	r0, [pc, #148]	; (c370 <k_work_schedule_for_queue+0xc0>)
    c2da:	f7ff f843 	bl	b364 <z_spin_lock_set_owner>
	return *flagp;
    c2de:	68e1      	ldr	r1, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
    c2e0:	f011 0f0e 	tst.w	r1, #14
    c2e4:	d02b      	beq.n	c33e <k_work_schedule_for_queue+0x8e>
	int ret = 0;
    c2e6:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c2e8:	4821      	ldr	r0, [pc, #132]	; (c370 <k_work_schedule_for_queue+0xc0>)
    c2ea:	f7ff f82b 	bl	b344 <z_spin_unlock_valid>
    c2ee:	b370      	cbz	r0, c34e <k_work_schedule_for_queue+0x9e>
	__asm__ volatile(
    c2f0:	f386 8811 	msr	BASEPRI, r6
    c2f4:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
    c2f8:	4620      	mov	r0, r4
    c2fa:	b002      	add	sp, #8
    c2fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(dwork != NULL);
    c300:	4e1c      	ldr	r6, [pc, #112]	; (c374 <k_work_schedule_for_queue+0xc4>)
    c302:	f240 33b7 	movw	r3, #951	; 0x3b7
    c306:	4632      	mov	r2, r6
    c308:	491b      	ldr	r1, [pc, #108]	; (c378 <k_work_schedule_for_queue+0xc8>)
    c30a:	481c      	ldr	r0, [pc, #112]	; (c37c <k_work_schedule_for_queue+0xcc>)
    c30c:	f002 fd51 	bl	edb2 <assert_print>
    c310:	f240 31b7 	movw	r1, #951	; 0x3b7
    c314:	4630      	mov	r0, r6
    c316:	f002 fd45 	bl	eda4 <assert_post_action>
    c31a:	e7d1      	b.n	c2c0 <k_work_schedule_for_queue+0x10>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c31c:	f8df 8060 	ldr.w	r8, [pc, #96]	; c380 <k_work_schedule_for_queue+0xd0>
    c320:	238e      	movs	r3, #142	; 0x8e
    c322:	4642      	mov	r2, r8
    c324:	4917      	ldr	r1, [pc, #92]	; (c384 <k_work_schedule_for_queue+0xd4>)
    c326:	4815      	ldr	r0, [pc, #84]	; (c37c <k_work_schedule_for_queue+0xcc>)
    c328:	f002 fd43 	bl	edb2 <assert_print>
    c32c:	4910      	ldr	r1, [pc, #64]	; (c370 <k_work_schedule_for_queue+0xc0>)
    c32e:	4816      	ldr	r0, [pc, #88]	; (c388 <k_work_schedule_for_queue+0xd8>)
    c330:	f002 fd3f 	bl	edb2 <assert_print>
    c334:	218e      	movs	r1, #142	; 0x8e
    c336:	4640      	mov	r0, r8
    c338:	f002 fd34 	bl	eda4 <assert_post_action>
    c33c:	e7cc      	b.n	c2d8 <k_work_schedule_for_queue+0x28>
		ret = schedule_for_queue_locked(&queue, dwork, delay);
    c33e:	463a      	mov	r2, r7
    c340:	462b      	mov	r3, r5
    c342:	4621      	mov	r1, r4
    c344:	a801      	add	r0, sp, #4
    c346:	f7ff fdab 	bl	bea0 <schedule_for_queue_locked>
    c34a:	4604      	mov	r4, r0
    c34c:	e7cc      	b.n	c2e8 <k_work_schedule_for_queue+0x38>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c34e:	4d0c      	ldr	r5, [pc, #48]	; (c380 <k_work_schedule_for_queue+0xd0>)
    c350:	23b9      	movs	r3, #185	; 0xb9
    c352:	462a      	mov	r2, r5
    c354:	490d      	ldr	r1, [pc, #52]	; (c38c <k_work_schedule_for_queue+0xdc>)
    c356:	4809      	ldr	r0, [pc, #36]	; (c37c <k_work_schedule_for_queue+0xcc>)
    c358:	f002 fd2b 	bl	edb2 <assert_print>
    c35c:	4904      	ldr	r1, [pc, #16]	; (c370 <k_work_schedule_for_queue+0xc0>)
    c35e:	480c      	ldr	r0, [pc, #48]	; (c390 <k_work_schedule_for_queue+0xe0>)
    c360:	f002 fd27 	bl	edb2 <assert_print>
    c364:	21b9      	movs	r1, #185	; 0xb9
    c366:	4628      	mov	r0, r5
    c368:	f002 fd1c 	bl	eda4 <assert_post_action>
    c36c:	e7c0      	b.n	c2f0 <k_work_schedule_for_queue+0x40>
    c36e:	bf00      	nop
    c370:	200010c8 	.word	0x200010c8
    c374:	00012788 	.word	0x00012788
    c378:	00012824 	.word	0x00012824
    c37c:	00010450 	.word	0x00010450
    c380:	000105e8 	.word	0x000105e8
    c384:	00010648 	.word	0x00010648
    c388:	00010660 	.word	0x00010660
    c38c:	00010618 	.word	0x00010618
    c390:	00010630 	.word	0x00010630

0000c394 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
    c394:	b508      	push	{r3, lr}
    c396:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
    c398:	4801      	ldr	r0, [pc, #4]	; (c3a0 <k_work_schedule+0xc>)
    c39a:	f7ff ff89 	bl	c2b0 <k_work_schedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule, dwork, delay, ret);

	return ret;
}
    c39e:	bd08      	pop	{r3, pc}
    c3a0:	200008a8 	.word	0x200008a8

0000c3a4 <k_work_reschedule_for_queue>:

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
    c3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c3a8:	b082      	sub	sp, #8
    c3aa:	9001      	str	r0, [sp, #4]
    c3ac:	4616      	mov	r6, r2
    c3ae:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
    c3b0:	460c      	mov	r4, r1
    c3b2:	b341      	cbz	r1, c406 <k_work_reschedule_for_queue+0x62>
	__asm__ volatile(
    c3b4:	f04f 0320 	mov.w	r3, #32
    c3b8:	f3ef 8711 	mrs	r7, BASEPRI
    c3bc:	f383 8812 	msr	BASEPRI_MAX, r3
    c3c0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c3c4:	482a      	ldr	r0, [pc, #168]	; (c470 <k_work_reschedule_for_queue+0xcc>)
    c3c6:	f7fe ffad 	bl	b324 <z_spin_lock_valid>
    c3ca:	b350      	cbz	r0, c422 <k_work_reschedule_for_queue+0x7e>
	z_spin_lock_set_owner(l);
    c3cc:	4828      	ldr	r0, [pc, #160]	; (c470 <k_work_reschedule_for_queue+0xcc>)
    c3ce:	f7fe ffc9 	bl	b364 <z_spin_lock_set_owner>
	return (*flagp & BIT(bit)) != 0U;
    c3d2:	68e3      	ldr	r3, [r4, #12]
	*flagp &= ~BIT(bit);
    c3d4:	f023 0208 	bic.w	r2, r3, #8
    c3d8:	60e2      	str	r2, [r4, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
    c3da:	f013 0f08 	tst.w	r3, #8
    c3de:	d131      	bne.n	c444 <k_work_reschedule_for_queue+0xa0>

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);

	/* Schedule the work item with the new parameters. */
	ret = schedule_for_queue_locked(&queue, dwork, delay);
    c3e0:	4632      	mov	r2, r6
    c3e2:	462b      	mov	r3, r5
    c3e4:	4621      	mov	r1, r4
    c3e6:	a801      	add	r0, sp, #4
    c3e8:	f7ff fd5a 	bl	bea0 <schedule_for_queue_locked>
    c3ec:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c3ee:	4820      	ldr	r0, [pc, #128]	; (c470 <k_work_reschedule_for_queue+0xcc>)
    c3f0:	f7fe ffa8 	bl	b344 <z_spin_unlock_valid>
    c3f4:	b358      	cbz	r0, c44e <k_work_reschedule_for_queue+0xaa>
	__asm__ volatile(
    c3f6:	f387 8811 	msr	BASEPRI, r7
    c3fa:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
    c3fe:	4620      	mov	r0, r4
    c400:	b002      	add	sp, #8
    c402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(dwork != NULL);
    c406:	4f1b      	ldr	r7, [pc, #108]	; (c474 <k_work_reschedule_for_queue+0xd0>)
    c408:	f240 33db 	movw	r3, #987	; 0x3db
    c40c:	463a      	mov	r2, r7
    c40e:	491a      	ldr	r1, [pc, #104]	; (c478 <k_work_reschedule_for_queue+0xd4>)
    c410:	481a      	ldr	r0, [pc, #104]	; (c47c <k_work_reschedule_for_queue+0xd8>)
    c412:	f002 fcce 	bl	edb2 <assert_print>
    c416:	f240 31db 	movw	r1, #987	; 0x3db
    c41a:	4638      	mov	r0, r7
    c41c:	f002 fcc2 	bl	eda4 <assert_post_action>
    c420:	e7c8      	b.n	c3b4 <k_work_reschedule_for_queue+0x10>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c422:	f8df 805c 	ldr.w	r8, [pc, #92]	; c480 <k_work_reschedule_for_queue+0xdc>
    c426:	238e      	movs	r3, #142	; 0x8e
    c428:	4642      	mov	r2, r8
    c42a:	4916      	ldr	r1, [pc, #88]	; (c484 <k_work_reschedule_for_queue+0xe0>)
    c42c:	4813      	ldr	r0, [pc, #76]	; (c47c <k_work_reschedule_for_queue+0xd8>)
    c42e:	f002 fcc0 	bl	edb2 <assert_print>
    c432:	490f      	ldr	r1, [pc, #60]	; (c470 <k_work_reschedule_for_queue+0xcc>)
    c434:	4814      	ldr	r0, [pc, #80]	; (c488 <k_work_reschedule_for_queue+0xe4>)
    c436:	f002 fcbc 	bl	edb2 <assert_print>
    c43a:	218e      	movs	r1, #142	; 0x8e
    c43c:	4640      	mov	r0, r8
    c43e:	f002 fcb1 	bl	eda4 <assert_post_action>
    c442:	e7c3      	b.n	c3cc <k_work_reschedule_for_queue+0x28>
		z_abort_timeout(&dwork->timeout);
    c444:	f104 0010 	add.w	r0, r4, #16
    c448:	f001 fd2a 	bl	dea0 <z_abort_timeout>
		ret = true;
    c44c:	e7c8      	b.n	c3e0 <k_work_reschedule_for_queue+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c44e:	4d0c      	ldr	r5, [pc, #48]	; (c480 <k_work_reschedule_for_queue+0xdc>)
    c450:	23b9      	movs	r3, #185	; 0xb9
    c452:	462a      	mov	r2, r5
    c454:	490d      	ldr	r1, [pc, #52]	; (c48c <k_work_reschedule_for_queue+0xe8>)
    c456:	4809      	ldr	r0, [pc, #36]	; (c47c <k_work_reschedule_for_queue+0xd8>)
    c458:	f002 fcab 	bl	edb2 <assert_print>
    c45c:	4904      	ldr	r1, [pc, #16]	; (c470 <k_work_reschedule_for_queue+0xcc>)
    c45e:	480c      	ldr	r0, [pc, #48]	; (c490 <k_work_reschedule_for_queue+0xec>)
    c460:	f002 fca7 	bl	edb2 <assert_print>
    c464:	21b9      	movs	r1, #185	; 0xb9
    c466:	4628      	mov	r0, r5
    c468:	f002 fc9c 	bl	eda4 <assert_post_action>
    c46c:	e7c3      	b.n	c3f6 <k_work_reschedule_for_queue+0x52>
    c46e:	bf00      	nop
    c470:	200010c8 	.word	0x200010c8
    c474:	00012788 	.word	0x00012788
    c478:	00012824 	.word	0x00012824
    c47c:	00010450 	.word	0x00010450
    c480:	000105e8 	.word	0x000105e8
    c484:	00010648 	.word	0x00010648
    c488:	00010660 	.word	0x00010660
    c48c:	00010618 	.word	0x00010618
    c490:	00010630 	.word	0x00010630

0000c494 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
    c494:	b508      	push	{r3, lr}
    c496:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
    c498:	4801      	ldr	r0, [pc, #4]	; (c4a0 <k_work_reschedule+0xc>)
    c49a:	f7ff ff83 	bl	c3a4 <k_work_reschedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule, dwork, delay, ret);

	return ret;
}
    c49e:	bd08      	pop	{r3, pc}
    c4a0:	200008a8 	.word	0x200008a8

0000c4a4 <pended_on_thread>:
}
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on_thread(struct k_thread *thread)
{
    c4a4:	b538      	push	{r3, r4, r5, lr}
    c4a6:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    c4a8:	6883      	ldr	r3, [r0, #8]
    c4aa:	b10b      	cbz	r3, c4b0 <pended_on_thread+0xc>

	return thread->base.pended_on;
}
    c4ac:	68a0      	ldr	r0, [r4, #8]
    c4ae:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(thread->base.pended_on);
    c4b0:	4d06      	ldr	r5, [pc, #24]	; (c4cc <pended_on_thread+0x28>)
    c4b2:	f44f 7335 	mov.w	r3, #724	; 0x2d4
    c4b6:	462a      	mov	r2, r5
    c4b8:	4905      	ldr	r1, [pc, #20]	; (c4d0 <pended_on_thread+0x2c>)
    c4ba:	4806      	ldr	r0, [pc, #24]	; (c4d4 <pended_on_thread+0x30>)
    c4bc:	f002 fc79 	bl	edb2 <assert_print>
    c4c0:	f44f 7135 	mov.w	r1, #724	; 0x2d4
    c4c4:	4628      	mov	r0, r5
    c4c6:	f002 fc6d 	bl	eda4 <assert_post_action>
    c4ca:	e7ef      	b.n	c4ac <pended_on_thread+0x8>
    c4cc:	0001283c 	.word	0x0001283c
    c4d0:	00012860 	.word	0x00012860
    c4d4:	00010450 	.word	0x00010450

0000c4d8 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    c4d8:	f1b3 3fff 	cmp.w	r3, #4294967295
    c4dc:	bf08      	it	eq
    c4de:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    c4e2:	d100      	bne.n	c4e6 <add_thread_timeout+0xe>
    c4e4:	4770      	bx	lr
{
    c4e6:	b508      	push	{r3, lr}
    c4e8:	4902      	ldr	r1, [pc, #8]	; (c4f4 <add_thread_timeout+0x1c>)
    c4ea:	3018      	adds	r0, #24
    c4ec:	f001 fbf4 	bl	dcd8 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
    c4f0:	bd08      	pop	{r3, pc}
    c4f2:	bf00      	nop
    c4f4:	0000cd65 	.word	0x0000cd65

0000c4f8 <z_reset_time_slice>:
{
    c4f8:	b510      	push	{r4, lr}
	int ret = slice_ticks;
    c4fa:	4b07      	ldr	r3, [pc, #28]	; (c518 <z_reset_time_slice+0x20>)
    c4fc:	681c      	ldr	r4, [r3, #0]
	if (slice_time(curr) != 0) {
    c4fe:	b904      	cbnz	r4, c502 <z_reset_time_slice+0xa>
}
    c500:	bd10      	pop	{r4, pc}
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    c502:	f7fa fcbd 	bl	6e80 <sys_clock_elapsed>
    c506:	4404      	add	r4, r0
    c508:	4b04      	ldr	r3, [pc, #16]	; (c51c <z_reset_time_slice+0x24>)
    c50a:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    c50c:	2100      	movs	r1, #0
    c50e:	4b02      	ldr	r3, [pc, #8]	; (c518 <z_reset_time_slice+0x20>)
    c510:	6818      	ldr	r0, [r3, #0]
    c512:	f001 fd71 	bl	dff8 <z_set_timeout_expiry>
}
    c516:	e7f3      	b.n	c500 <z_reset_time_slice+0x8>
    c518:	200010e0 	.word	0x200010e0
    c51c:	20001090 	.word	0x20001090

0000c520 <k_sched_time_slice_set>:
{
    c520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c524:	4604      	mov	r4, r0
    c526:	460d      	mov	r5, r1
	LOCKED(&sched_spinlock) {
    c528:	2700      	movs	r7, #0
	__asm__ volatile(
    c52a:	f04f 0320 	mov.w	r3, #32
    c52e:	f3ef 8611 	mrs	r6, BASEPRI
    c532:	f383 8812 	msr	BASEPRI_MAX, r3
    c536:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c53a:	482a      	ldr	r0, [pc, #168]	; (c5e4 <k_sched_time_slice_set+0xc4>)
    c53c:	f7fe fef2 	bl	b324 <z_spin_lock_valid>
    c540:	b118      	cbz	r0, c54a <k_sched_time_slice_set+0x2a>
	z_spin_lock_set_owner(l);
    c542:	4828      	ldr	r0, [pc, #160]	; (c5e4 <k_sched_time_slice_set+0xc4>)
    c544:	f7fe ff0e 	bl	b364 <z_spin_lock_set_owner>
	return k;
    c548:	e023      	b.n	c592 <k_sched_time_slice_set+0x72>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c54a:	f8df 809c 	ldr.w	r8, [pc, #156]	; c5e8 <k_sched_time_slice_set+0xc8>
    c54e:	238e      	movs	r3, #142	; 0x8e
    c550:	4642      	mov	r2, r8
    c552:	4926      	ldr	r1, [pc, #152]	; (c5ec <k_sched_time_slice_set+0xcc>)
    c554:	4826      	ldr	r0, [pc, #152]	; (c5f0 <k_sched_time_slice_set+0xd0>)
    c556:	f002 fc2c 	bl	edb2 <assert_print>
    c55a:	4922      	ldr	r1, [pc, #136]	; (c5e4 <k_sched_time_slice_set+0xc4>)
    c55c:	4825      	ldr	r0, [pc, #148]	; (c5f4 <k_sched_time_slice_set+0xd4>)
    c55e:	f002 fc28 	bl	edb2 <assert_print>
    c562:	218e      	movs	r1, #142	; 0x8e
    c564:	4640      	mov	r0, r8
    c566:	f002 fc1d 	bl	eda4 <assert_post_action>
    c56a:	e7ea      	b.n	c542 <k_sched_time_slice_set+0x22>
			slice_ticks = MAX(2, slice_ticks);
    c56c:	2802      	cmp	r0, #2
    c56e:	bfb8      	it	lt
    c570:	2002      	movlt	r0, #2
    c572:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    c574:	4b20      	ldr	r3, [pc, #128]	; (c5f8 <k_sched_time_slice_set+0xd8>)
    c576:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    c578:	4b20      	ldr	r3, [pc, #128]	; (c5fc <k_sched_time_slice_set+0xdc>)
    c57a:	6898      	ldr	r0, [r3, #8]
    c57c:	f7ff ffbc 	bl	c4f8 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c580:	4818      	ldr	r0, [pc, #96]	; (c5e4 <k_sched_time_slice_set+0xc4>)
    c582:	f7fe fedf 	bl	b344 <z_spin_unlock_valid>
    c586:	b1d0      	cbz	r0, c5be <k_sched_time_slice_set+0x9e>
	__asm__ volatile(
    c588:	f386 8811 	msr	BASEPRI, r6
    c58c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    c590:	2701      	movs	r7, #1
    c592:	bb27      	cbnz	r7, c5de <k_sched_time_slice_set+0xbe>
		_current_cpu->slice_ticks = 0;
    c594:	4b19      	ldr	r3, [pc, #100]	; (c5fc <k_sched_time_slice_set+0xdc>)
    c596:	2200      	movs	r2, #0
    c598:	611a      	str	r2, [r3, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    c59a:	0c61      	lsrs	r1, r4, #17
    c59c:	03e3      	lsls	r3, r4, #15
    c59e:	f240 30e7 	movw	r0, #999	; 0x3e7
    c5a2:	1818      	adds	r0, r3, r0
    c5a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c5a8:	f04f 0300 	mov.w	r3, #0
    c5ac:	f141 0100 	adc.w	r1, r1, #0
    c5b0:	f7f3 fda6 	bl	100 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    c5b4:	4b12      	ldr	r3, [pc, #72]	; (c600 <k_sched_time_slice_set+0xe0>)
    c5b6:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    c5b8:	2c00      	cmp	r4, #0
    c5ba:	dcd7      	bgt.n	c56c <k_sched_time_slice_set+0x4c>
    c5bc:	e7da      	b.n	c574 <k_sched_time_slice_set+0x54>
    c5be:	4f0a      	ldr	r7, [pc, #40]	; (c5e8 <k_sched_time_slice_set+0xc8>)
    c5c0:	23b9      	movs	r3, #185	; 0xb9
    c5c2:	463a      	mov	r2, r7
    c5c4:	490f      	ldr	r1, [pc, #60]	; (c604 <k_sched_time_slice_set+0xe4>)
    c5c6:	480a      	ldr	r0, [pc, #40]	; (c5f0 <k_sched_time_slice_set+0xd0>)
    c5c8:	f002 fbf3 	bl	edb2 <assert_print>
    c5cc:	4905      	ldr	r1, [pc, #20]	; (c5e4 <k_sched_time_slice_set+0xc4>)
    c5ce:	480e      	ldr	r0, [pc, #56]	; (c608 <k_sched_time_slice_set+0xe8>)
    c5d0:	f002 fbef 	bl	edb2 <assert_print>
    c5d4:	21b9      	movs	r1, #185	; 0xb9
    c5d6:	4638      	mov	r0, r7
    c5d8:	f002 fbe4 	bl	eda4 <assert_post_action>
    c5dc:	e7d4      	b.n	c588 <k_sched_time_slice_set+0x68>
}
    c5de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c5e2:	bf00      	nop
    c5e4:	200010d8 	.word	0x200010d8
    c5e8:	000105e8 	.word	0x000105e8
    c5ec:	00010648 	.word	0x00010648
    c5f0:	00010450 	.word	0x00010450
    c5f4:	00010660 	.word	0x00010660
    c5f8:	200010dc 	.word	0x200010dc
    c5fc:	20001090 	.word	0x20001090
    c600:	200010e0 	.word	0x200010e0
    c604:	00010618 	.word	0x00010618
    c608:	00010630 	.word	0x00010630

0000c60c <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
    c60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c60e:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    c610:	2500      	movs	r5, #0
	__asm__ volatile(
    c612:	f04f 0320 	mov.w	r3, #32
    c616:	f3ef 8611 	mrs	r6, BASEPRI
    c61a:	f383 8812 	msr	BASEPRI_MAX, r3
    c61e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c622:	4820      	ldr	r0, [pc, #128]	; (c6a4 <z_unpend_thread_no_timeout+0x98>)
    c624:	f7fe fe7e 	bl	b324 <z_spin_lock_valid>
    c628:	b118      	cbz	r0, c632 <z_unpend_thread_no_timeout+0x26>
	z_spin_lock_set_owner(l);
    c62a:	481e      	ldr	r0, [pc, #120]	; (c6a4 <z_unpend_thread_no_timeout+0x98>)
    c62c:	f7fe fe9a 	bl	b364 <z_spin_lock_set_owner>
	return k;
    c630:	e014      	b.n	c65c <z_unpend_thread_no_timeout+0x50>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c632:	4f1d      	ldr	r7, [pc, #116]	; (c6a8 <z_unpend_thread_no_timeout+0x9c>)
    c634:	238e      	movs	r3, #142	; 0x8e
    c636:	463a      	mov	r2, r7
    c638:	491c      	ldr	r1, [pc, #112]	; (c6ac <z_unpend_thread_no_timeout+0xa0>)
    c63a:	481d      	ldr	r0, [pc, #116]	; (c6b0 <z_unpend_thread_no_timeout+0xa4>)
    c63c:	f002 fbb9 	bl	edb2 <assert_print>
    c640:	4918      	ldr	r1, [pc, #96]	; (c6a4 <z_unpend_thread_no_timeout+0x98>)
    c642:	481c      	ldr	r0, [pc, #112]	; (c6b4 <z_unpend_thread_no_timeout+0xa8>)
    c644:	f002 fbb5 	bl	edb2 <assert_print>
    c648:	218e      	movs	r1, #142	; 0x8e
    c64a:	4638      	mov	r0, r7
    c64c:	f002 fbaa 	bl	eda4 <assert_post_action>
    c650:	e7eb      	b.n	c62a <z_unpend_thread_no_timeout+0x1e>
	__asm__ volatile(
    c652:	f386 8811 	msr	BASEPRI, r6
    c656:	f3bf 8f6f 	isb	sy
    c65a:	2501      	movs	r5, #1
    c65c:	bb05      	cbnz	r5, c6a0 <z_unpend_thread_no_timeout+0x94>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    c65e:	4620      	mov	r0, r4
    c660:	f7ff ff20 	bl	c4a4 <pended_on_thread>
    c664:	4621      	mov	r1, r4
    c666:	f000 f8fb 	bl	c860 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    c66a:	7b63      	ldrb	r3, [r4, #13]
    c66c:	f023 0302 	bic.w	r3, r3, #2
    c670:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    c672:	2300      	movs	r3, #0
    c674:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c676:	480b      	ldr	r0, [pc, #44]	; (c6a4 <z_unpend_thread_no_timeout+0x98>)
    c678:	f7fe fe64 	bl	b344 <z_spin_unlock_valid>
    c67c:	2800      	cmp	r0, #0
    c67e:	d1e8      	bne.n	c652 <z_unpend_thread_no_timeout+0x46>
    c680:	4d09      	ldr	r5, [pc, #36]	; (c6a8 <z_unpend_thread_no_timeout+0x9c>)
    c682:	23b9      	movs	r3, #185	; 0xb9
    c684:	462a      	mov	r2, r5
    c686:	490c      	ldr	r1, [pc, #48]	; (c6b8 <z_unpend_thread_no_timeout+0xac>)
    c688:	4809      	ldr	r0, [pc, #36]	; (c6b0 <z_unpend_thread_no_timeout+0xa4>)
    c68a:	f002 fb92 	bl	edb2 <assert_print>
    c68e:	4905      	ldr	r1, [pc, #20]	; (c6a4 <z_unpend_thread_no_timeout+0x98>)
    c690:	480a      	ldr	r0, [pc, #40]	; (c6bc <z_unpend_thread_no_timeout+0xb0>)
    c692:	f002 fb8e 	bl	edb2 <assert_print>
    c696:	21b9      	movs	r1, #185	; 0xb9
    c698:	4628      	mov	r0, r5
    c69a:	f002 fb83 	bl	eda4 <assert_post_action>
    c69e:	e7d8      	b.n	c652 <z_unpend_thread_no_timeout+0x46>
		unpend_thread_no_timeout(thread);
	}
}
    c6a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c6a2:	bf00      	nop
    c6a4:	200010d8 	.word	0x200010d8
    c6a8:	000105e8 	.word	0x000105e8
    c6ac:	00010648 	.word	0x00010648
    c6b0:	00010450 	.word	0x00010450
    c6b4:	00010660 	.word	0x00010660
    c6b8:	00010618 	.word	0x00010618
    c6bc:	00010630 	.word	0x00010630

0000c6c0 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    c6c0:	b570      	push	{r4, r5, r6, lr}
    c6c2:	4604      	mov	r4, r0
	if (resched(key.key) && need_swap()) {
    c6c4:	460d      	mov	r5, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    c6c6:	b921      	cbnz	r1, c6d2 <z_reschedule+0x12>
    c6c8:	f3ef 8305 	mrs	r3, IPSR
    c6cc:	b913      	cbnz	r3, c6d4 <z_reschedule+0x14>
    c6ce:	2101      	movs	r1, #1
    c6d0:	e000      	b.n	c6d4 <z_reschedule+0x14>
    c6d2:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
    c6d4:	f011 0f01 	tst.w	r1, #1
    c6d8:	d01c      	beq.n	c714 <z_reschedule+0x54>
	new_thread = _kernel.ready_q.cache;
    c6da:	4b1b      	ldr	r3, [pc, #108]	; (c748 <z_reschedule+0x88>)
    c6dc:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
    c6de:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
    c6e0:	429a      	cmp	r2, r3
    c6e2:	d017      	beq.n	c714 <z_reschedule+0x54>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c6e4:	4620      	mov	r0, r4
    c6e6:	f7fe fe2d 	bl	b344 <z_spin_unlock_valid>
    c6ea:	b118      	cbz	r0, c6f4 <z_reschedule+0x34>
	ret = arch_swap(key);
    c6ec:	4628      	mov	r0, r5
    c6ee:	f7f7 fe21 	bl	4334 <arch_swap>
		z_swap(lock, key);
    c6f2:	e017      	b.n	c724 <z_reschedule+0x64>
    c6f4:	4e15      	ldr	r6, [pc, #84]	; (c74c <z_reschedule+0x8c>)
    c6f6:	23d0      	movs	r3, #208	; 0xd0
    c6f8:	4632      	mov	r2, r6
    c6fa:	4915      	ldr	r1, [pc, #84]	; (c750 <z_reschedule+0x90>)
    c6fc:	4815      	ldr	r0, [pc, #84]	; (c754 <z_reschedule+0x94>)
    c6fe:	f002 fb58 	bl	edb2 <assert_print>
    c702:	4621      	mov	r1, r4
    c704:	4814      	ldr	r0, [pc, #80]	; (c758 <z_reschedule+0x98>)
    c706:	f002 fb54 	bl	edb2 <assert_print>
    c70a:	21d0      	movs	r1, #208	; 0xd0
    c70c:	4630      	mov	r0, r6
    c70e:	f002 fb49 	bl	eda4 <assert_post_action>
    c712:	e7eb      	b.n	c6ec <z_reschedule+0x2c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c714:	4620      	mov	r0, r4
    c716:	f7fe fe15 	bl	b344 <z_spin_unlock_valid>
    c71a:	b120      	cbz	r0, c726 <z_reschedule+0x66>
    c71c:	f385 8811 	msr	BASEPRI, r5
    c720:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
    c724:	bd70      	pop	{r4, r5, r6, pc}
    c726:	4e09      	ldr	r6, [pc, #36]	; (c74c <z_reschedule+0x8c>)
    c728:	23b9      	movs	r3, #185	; 0xb9
    c72a:	4632      	mov	r2, r6
    c72c:	4908      	ldr	r1, [pc, #32]	; (c750 <z_reschedule+0x90>)
    c72e:	4809      	ldr	r0, [pc, #36]	; (c754 <z_reschedule+0x94>)
    c730:	f002 fb3f 	bl	edb2 <assert_print>
    c734:	4621      	mov	r1, r4
    c736:	4808      	ldr	r0, [pc, #32]	; (c758 <z_reschedule+0x98>)
    c738:	f002 fb3b 	bl	edb2 <assert_print>
    c73c:	21b9      	movs	r1, #185	; 0xb9
    c73e:	4630      	mov	r0, r6
    c740:	f002 fb30 	bl	eda4 <assert_post_action>
    c744:	e7ea      	b.n	c71c <z_reschedule+0x5c>
    c746:	bf00      	nop
    c748:	20001090 	.word	0x20001090
    c74c:	000105e8 	.word	0x000105e8
    c750:	00010618 	.word	0x00010618
    c754:	00010450 	.word	0x00010450
    c758:	00010630 	.word	0x00010630

0000c75c <k_sched_lock>:
		signal_pending_ipi();
	}
}

void k_sched_lock(void)
{
    c75c:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
    c75e:	2400      	movs	r4, #0
	__asm__ volatile(
    c760:	f04f 0320 	mov.w	r3, #32
    c764:	f3ef 8511 	mrs	r5, BASEPRI
    c768:	f383 8812 	msr	BASEPRI_MAX, r3
    c76c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c770:	482f      	ldr	r0, [pc, #188]	; (c830 <k_sched_lock+0xd4>)
    c772:	f7fe fdd7 	bl	b324 <z_spin_lock_valid>
    c776:	b118      	cbz	r0, c780 <k_sched_lock+0x24>
	z_spin_lock_set_owner(l);
    c778:	482d      	ldr	r0, [pc, #180]	; (c830 <k_sched_lock+0xd4>)
    c77a:	f7fe fdf3 	bl	b364 <z_spin_lock_set_owner>
	return k;
    c77e:	e022      	b.n	c7c6 <k_sched_lock+0x6a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c780:	4e2c      	ldr	r6, [pc, #176]	; (c834 <k_sched_lock+0xd8>)
    c782:	238e      	movs	r3, #142	; 0x8e
    c784:	4632      	mov	r2, r6
    c786:	492c      	ldr	r1, [pc, #176]	; (c838 <k_sched_lock+0xdc>)
    c788:	482c      	ldr	r0, [pc, #176]	; (c83c <k_sched_lock+0xe0>)
    c78a:	f002 fb12 	bl	edb2 <assert_print>
    c78e:	4928      	ldr	r1, [pc, #160]	; (c830 <k_sched_lock+0xd4>)
    c790:	482b      	ldr	r0, [pc, #172]	; (c840 <k_sched_lock+0xe4>)
    c792:	f002 fb0e 	bl	edb2 <assert_print>
    c796:	218e      	movs	r1, #142	; 0x8e
    c798:	4630      	mov	r0, r6
    c79a:	f002 fb03 	bl	eda4 <assert_post_action>
    c79e:	e7eb      	b.n	c778 <k_sched_lock+0x1c>
	__ASSERT(_current->base.sched_locked != 1U, "");
    c7a0:	4b28      	ldr	r3, [pc, #160]	; (c844 <k_sched_lock+0xe8>)
    c7a2:	689b      	ldr	r3, [r3, #8]
    c7a4:	7bdb      	ldrb	r3, [r3, #15]
    c7a6:	2b01      	cmp	r3, #1
    c7a8:	d022      	beq.n	c7f0 <k_sched_lock+0x94>
	--_current->base.sched_locked;
    c7aa:	4b26      	ldr	r3, [pc, #152]	; (c844 <k_sched_lock+0xe8>)
    c7ac:	689a      	ldr	r2, [r3, #8]
    c7ae:	7bd3      	ldrb	r3, [r2, #15]
    c7b0:	3b01      	subs	r3, #1
    c7b2:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c7b4:	481e      	ldr	r0, [pc, #120]	; (c830 <k_sched_lock+0xd4>)
    c7b6:	f7fe fdc5 	bl	b344 <z_spin_unlock_valid>
    c7ba:	b340      	cbz	r0, c80e <k_sched_lock+0xb2>
	__asm__ volatile(
    c7bc:	f385 8811 	msr	BASEPRI, r5
    c7c0:	f3bf 8f6f 	isb	sy
    c7c4:	2401      	movs	r4, #1
    c7c6:	2c00      	cmp	r4, #0
    c7c8:	d131      	bne.n	c82e <k_sched_lock+0xd2>
    c7ca:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    c7ce:	2b00      	cmp	r3, #0
    c7d0:	d0e6      	beq.n	c7a0 <k_sched_lock+0x44>
    c7d2:	4c1d      	ldr	r4, [pc, #116]	; (c848 <k_sched_lock+0xec>)
    c7d4:	23fd      	movs	r3, #253	; 0xfd
    c7d6:	4622      	mov	r2, r4
    c7d8:	491c      	ldr	r1, [pc, #112]	; (c84c <k_sched_lock+0xf0>)
    c7da:	4818      	ldr	r0, [pc, #96]	; (c83c <k_sched_lock+0xe0>)
    c7dc:	f002 fae9 	bl	edb2 <assert_print>
    c7e0:	481b      	ldr	r0, [pc, #108]	; (c850 <k_sched_lock+0xf4>)
    c7e2:	f002 fae6 	bl	edb2 <assert_print>
    c7e6:	21fd      	movs	r1, #253	; 0xfd
    c7e8:	4620      	mov	r0, r4
    c7ea:	f002 fadb 	bl	eda4 <assert_post_action>
    c7ee:	e7d7      	b.n	c7a0 <k_sched_lock+0x44>
	__ASSERT(_current->base.sched_locked != 1U, "");
    c7f0:	4c15      	ldr	r4, [pc, #84]	; (c848 <k_sched_lock+0xec>)
    c7f2:	23fe      	movs	r3, #254	; 0xfe
    c7f4:	4622      	mov	r2, r4
    c7f6:	4917      	ldr	r1, [pc, #92]	; (c854 <k_sched_lock+0xf8>)
    c7f8:	4810      	ldr	r0, [pc, #64]	; (c83c <k_sched_lock+0xe0>)
    c7fa:	f002 fada 	bl	edb2 <assert_print>
    c7fe:	4814      	ldr	r0, [pc, #80]	; (c850 <k_sched_lock+0xf4>)
    c800:	f002 fad7 	bl	edb2 <assert_print>
    c804:	21fe      	movs	r1, #254	; 0xfe
    c806:	4620      	mov	r0, r4
    c808:	f002 facc 	bl	eda4 <assert_post_action>
    c80c:	e7cd      	b.n	c7aa <k_sched_lock+0x4e>
    c80e:	4c09      	ldr	r4, [pc, #36]	; (c834 <k_sched_lock+0xd8>)
    c810:	23b9      	movs	r3, #185	; 0xb9
    c812:	4622      	mov	r2, r4
    c814:	4910      	ldr	r1, [pc, #64]	; (c858 <k_sched_lock+0xfc>)
    c816:	4809      	ldr	r0, [pc, #36]	; (c83c <k_sched_lock+0xe0>)
    c818:	f002 facb 	bl	edb2 <assert_print>
    c81c:	4904      	ldr	r1, [pc, #16]	; (c830 <k_sched_lock+0xd4>)
    c81e:	480f      	ldr	r0, [pc, #60]	; (c85c <k_sched_lock+0x100>)
    c820:	f002 fac7 	bl	edb2 <assert_print>
    c824:	21b9      	movs	r1, #185	; 0xb9
    c826:	4620      	mov	r0, r4
    c828:	f002 fabc 	bl	eda4 <assert_post_action>
    c82c:	e7c6      	b.n	c7bc <k_sched_lock+0x60>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    c82e:	bd70      	pop	{r4, r5, r6, pc}
    c830:	200010d8 	.word	0x200010d8
    c834:	000105e8 	.word	0x000105e8
    c838:	00010648 	.word	0x00010648
    c83c:	00010450 	.word	0x00010450
    c840:	00010660 	.word	0x00010660
    c844:	20001090 	.word	0x20001090
    c848:	00012878 	.word	0x00012878
    c84c:	000125f8 	.word	0x000125f8
    c850:	00012784 	.word	0x00012784
    c854:	000128a4 	.word	0x000128a4
    c858:	00010618 	.word	0x00010618
    c85c:	00010630 	.word	0x00010630

0000c860 <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
    c860:	b538      	push	{r3, r4, r5, lr}
    c862:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    c864:	4b0c      	ldr	r3, [pc, #48]	; (c898 <z_priq_dumb_remove+0x38>)
    c866:	4299      	cmp	r1, r3
    c868:	d007      	beq.n	c87a <z_priq_dumb_remove+0x1a>
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    c86a:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    c86c:	6823      	ldr	r3, [r4, #0]

	prev->next = next;
    c86e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    c870:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    c872:	2300      	movs	r3, #0
    c874:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    c876:	6063      	str	r3, [r4, #4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    c878:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    c87a:	4d08      	ldr	r5, [pc, #32]	; (c89c <z_priq_dumb_remove+0x3c>)
    c87c:	f240 4362 	movw	r3, #1122	; 0x462
    c880:	462a      	mov	r2, r5
    c882:	4907      	ldr	r1, [pc, #28]	; (c8a0 <z_priq_dumb_remove+0x40>)
    c884:	4807      	ldr	r0, [pc, #28]	; (c8a4 <z_priq_dumb_remove+0x44>)
    c886:	f002 fa94 	bl	edb2 <assert_print>
    c88a:	f240 4162 	movw	r1, #1122	; 0x462
    c88e:	4628      	mov	r0, r5
    c890:	f002 fa88 	bl	eda4 <assert_post_action>
    c894:	e7e9      	b.n	c86a <z_priq_dumb_remove+0xa>
    c896:	bf00      	nop
    c898:	20000740 	.word	0x20000740
    c89c:	0001283c 	.word	0x0001283c
    c8a0:	000128d8 	.word	0x000128d8
    c8a4:	00010450 	.word	0x00010450

0000c8a8 <update_cache>:
{
    c8a8:	b538      	push	{r3, r4, r5, lr}
    c8aa:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    c8ac:	4819      	ldr	r0, [pc, #100]	; (c914 <update_cache+0x6c>)
    c8ae:	f003 fa8b 	bl	fdc8 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    c8b2:	4605      	mov	r5, r0
    c8b4:	b188      	cbz	r0, c8da <update_cache+0x32>
	if (preempt_ok != 0) {
    c8b6:	bb14      	cbnz	r4, c8fe <update_cache+0x56>
	__ASSERT(_current != NULL, "");
    c8b8:	4b17      	ldr	r3, [pc, #92]	; (c918 <update_cache+0x70>)
    c8ba:	689b      	ldr	r3, [r3, #8]
    c8bc:	b183      	cbz	r3, c8e0 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
    c8be:	4b16      	ldr	r3, [pc, #88]	; (c918 <update_cache+0x70>)
    c8c0:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    c8c2:	7b5a      	ldrb	r2, [r3, #13]
    c8c4:	f012 0f1f 	tst.w	r2, #31
    c8c8:	d119      	bne.n	c8fe <update_cache+0x56>
	return node->next != NULL;
    c8ca:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    c8cc:	b9ba      	cbnz	r2, c8fe <update_cache+0x56>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    c8ce:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    c8d0:	2a7f      	cmp	r2, #127	; 0x7f
    c8d2:	d914      	bls.n	c8fe <update_cache+0x56>
		_kernel.ready_q.cache = _current;
    c8d4:	4a10      	ldr	r2, [pc, #64]	; (c918 <update_cache+0x70>)
    c8d6:	61d3      	str	r3, [r2, #28]
    c8d8:	e01a      	b.n	c910 <update_cache+0x68>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    c8da:	4b0f      	ldr	r3, [pc, #60]	; (c918 <update_cache+0x70>)
    c8dc:	68dd      	ldr	r5, [r3, #12]
    c8de:	e7ea      	b.n	c8b6 <update_cache+0xe>
	__ASSERT(_current != NULL, "");
    c8e0:	4c0e      	ldr	r4, [pc, #56]	; (c91c <update_cache+0x74>)
    c8e2:	2389      	movs	r3, #137	; 0x89
    c8e4:	4622      	mov	r2, r4
    c8e6:	490e      	ldr	r1, [pc, #56]	; (c920 <update_cache+0x78>)
    c8e8:	480e      	ldr	r0, [pc, #56]	; (c924 <update_cache+0x7c>)
    c8ea:	f002 fa62 	bl	edb2 <assert_print>
    c8ee:	480e      	ldr	r0, [pc, #56]	; (c928 <update_cache+0x80>)
    c8f0:	f002 fa5f 	bl	edb2 <assert_print>
    c8f4:	2189      	movs	r1, #137	; 0x89
    c8f6:	4620      	mov	r0, r4
    c8f8:	f002 fa54 	bl	eda4 <assert_post_action>
    c8fc:	e7df      	b.n	c8be <update_cache+0x16>
		if (thread != _current) {
    c8fe:	4b06      	ldr	r3, [pc, #24]	; (c918 <update_cache+0x70>)
    c900:	689b      	ldr	r3, [r3, #8]
    c902:	42ab      	cmp	r3, r5
    c904:	d002      	beq.n	c90c <update_cache+0x64>
			z_reset_time_slice(thread);
    c906:	4628      	mov	r0, r5
    c908:	f7ff fdf6 	bl	c4f8 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    c90c:	4b02      	ldr	r3, [pc, #8]	; (c918 <update_cache+0x70>)
    c90e:	61dd      	str	r5, [r3, #28]
}
    c910:	bd38      	pop	{r3, r4, r5, pc}
    c912:	bf00      	nop
    c914:	200010b0 	.word	0x200010b0
    c918:	20001090 	.word	0x20001090
    c91c:	0001283c 	.word	0x0001283c
    c920:	000128fc 	.word	0x000128fc
    c924:	00010450 	.word	0x00010450
    c928:	00012784 	.word	0x00012784

0000c92c <move_thread_to_end_of_prio_q>:
{
    c92c:	b538      	push	{r3, r4, r5, lr}
    c92e:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    c930:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    c932:	f990 300d 	ldrsb.w	r3, [r0, #13]
    c936:	2b00      	cmp	r3, #0
    c938:	db2b      	blt.n	c992 <move_thread_to_end_of_prio_q+0x66>
	thread->base.thread_state |= _THREAD_QUEUED;
    c93a:	7b6b      	ldrb	r3, [r5, #13]
    c93c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    c940:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    c942:	4b22      	ldr	r3, [pc, #136]	; (c9cc <move_thread_to_end_of_prio_q+0xa0>)
    c944:	429d      	cmp	r5, r3
    c946:	d02c      	beq.n	c9a2 <move_thread_to_end_of_prio_q+0x76>
	return list->head == list;
    c948:	4b21      	ldr	r3, [pc, #132]	; (c9d0 <move_thread_to_end_of_prio_q+0xa4>)
    c94a:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c94e:	429c      	cmp	r4, r3
    c950:	d039      	beq.n	c9c6 <move_thread_to_end_of_prio_q+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    c952:	b16c      	cbz	r4, c970 <move_thread_to_end_of_prio_q+0x44>
		if (z_sched_prio_cmp(thread, t) > 0) {
    c954:	4621      	mov	r1, r4
    c956:	4628      	mov	r0, r5
    c958:	f003 fa17 	bl	fd8a <z_sched_prio_cmp>
    c95c:	2800      	cmp	r0, #0
    c95e:	dc2c      	bgt.n	c9ba <move_thread_to_end_of_prio_q+0x8e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    c960:	b134      	cbz	r4, c970 <move_thread_to_end_of_prio_q+0x44>
	return (node == list->tail) ? NULL : node->next;
    c962:	4b1b      	ldr	r3, [pc, #108]	; (c9d0 <move_thread_to_end_of_prio_q+0xa4>)
    c964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c966:	429c      	cmp	r4, r3
    c968:	d002      	beq.n	c970 <move_thread_to_end_of_prio_q+0x44>
    c96a:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    c96c:	2c00      	cmp	r4, #0
    c96e:	d1f0      	bne.n	c952 <move_thread_to_end_of_prio_q+0x26>
	sys_dnode_t *const tail = list->tail;
    c970:	4b17      	ldr	r3, [pc, #92]	; (c9d0 <move_thread_to_end_of_prio_q+0xa4>)
    c972:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    c974:	f103 0120 	add.w	r1, r3, #32
    c978:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    c97a:	606a      	str	r2, [r5, #4]
	tail->next = node;
    c97c:	6015      	str	r5, [r2, #0]
	list->tail = node;
    c97e:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    c980:	4b13      	ldr	r3, [pc, #76]	; (c9d0 <move_thread_to_end_of_prio_q+0xa4>)
    c982:	6898      	ldr	r0, [r3, #8]
    c984:	42a8      	cmp	r0, r5
    c986:	bf14      	ite	ne
    c988:	2000      	movne	r0, #0
    c98a:	2001      	moveq	r0, #1
    c98c:	f7ff ff8c 	bl	c8a8 <update_cache>
}
    c990:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    c992:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    c996:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    c998:	4601      	mov	r1, r0
    c99a:	480e      	ldr	r0, [pc, #56]	; (c9d4 <move_thread_to_end_of_prio_q+0xa8>)
    c99c:	f7ff ff60 	bl	c860 <z_priq_dumb_remove>
}
    c9a0:	e7cb      	b.n	c93a <move_thread_to_end_of_prio_q+0xe>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    c9a2:	4c0d      	ldr	r4, [pc, #52]	; (c9d8 <move_thread_to_end_of_prio_q+0xac>)
    c9a4:	23ba      	movs	r3, #186	; 0xba
    c9a6:	4622      	mov	r2, r4
    c9a8:	490c      	ldr	r1, [pc, #48]	; (c9dc <move_thread_to_end_of_prio_q+0xb0>)
    c9aa:	480d      	ldr	r0, [pc, #52]	; (c9e0 <move_thread_to_end_of_prio_q+0xb4>)
    c9ac:	f002 fa01 	bl	edb2 <assert_print>
    c9b0:	21ba      	movs	r1, #186	; 0xba
    c9b2:	4620      	mov	r0, r4
    c9b4:	f002 f9f6 	bl	eda4 <assert_post_action>
    c9b8:	e7c6      	b.n	c948 <move_thread_to_end_of_prio_q+0x1c>
	sys_dnode_t *const prev = successor->prev;
    c9ba:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    c9bc:	606b      	str	r3, [r5, #4]
	node->next = successor;
    c9be:	602c      	str	r4, [r5, #0]
	prev->next = node;
    c9c0:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    c9c2:	6065      	str	r5, [r4, #4]
}
    c9c4:	e7dc      	b.n	c980 <move_thread_to_end_of_prio_q+0x54>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    c9c6:	2400      	movs	r4, #0
    c9c8:	e7c3      	b.n	c952 <move_thread_to_end_of_prio_q+0x26>
    c9ca:	bf00      	nop
    c9cc:	20000740 	.word	0x20000740
    c9d0:	20001090 	.word	0x20001090
    c9d4:	200010b0 	.word	0x200010b0
    c9d8:	0001283c 	.word	0x0001283c
    c9dc:	000128d8 	.word	0x000128d8
    c9e0:	00010450 	.word	0x00010450

0000c9e4 <slice_expired_locked>:
{
    c9e4:	b538      	push	{r3, r4, r5, lr}
    c9e6:	4604      	mov	r4, r0
	struct k_thread *curr = _current;
    c9e8:	4b07      	ldr	r3, [pc, #28]	; (ca08 <slice_expired_locked+0x24>)
    c9ea:	689d      	ldr	r5, [r3, #8]
	uint8_t state = thread->base.thread_state;
    c9ec:	7b6b      	ldrb	r3, [r5, #13]
	if (!z_is_thread_prevented_from_running(curr)) {
    c9ee:	f013 0f1f 	tst.w	r3, #31
    c9f2:	d004      	beq.n	c9fe <slice_expired_locked+0x1a>
	z_reset_time_slice(curr);
    c9f4:	4628      	mov	r0, r5
    c9f6:	f7ff fd7f 	bl	c4f8 <z_reset_time_slice>
}
    c9fa:	4620      	mov	r0, r4
    c9fc:	bd38      	pop	{r3, r4, r5, pc}
		move_thread_to_end_of_prio_q(curr);
    c9fe:	4628      	mov	r0, r5
    ca00:	f7ff ff94 	bl	c92c <move_thread_to_end_of_prio_q>
    ca04:	e7f6      	b.n	c9f4 <slice_expired_locked+0x10>
    ca06:	bf00      	nop
    ca08:	20001090 	.word	0x20001090

0000ca0c <z_time_slice>:
{
    ca0c:	b570      	push	{r4, r5, r6, lr}
    ca0e:	4604      	mov	r4, r0
	__asm__ volatile(
    ca10:	f04f 0320 	mov.w	r3, #32
    ca14:	f3ef 8511 	mrs	r5, BASEPRI
    ca18:	f383 8812 	msr	BASEPRI_MAX, r3
    ca1c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ca20:	4842      	ldr	r0, [pc, #264]	; (cb2c <z_time_slice+0x120>)
    ca22:	f7fe fc7f 	bl	b324 <z_spin_lock_valid>
    ca26:	b310      	cbz	r0, ca6e <z_time_slice+0x62>
	z_spin_lock_set_owner(l);
    ca28:	4840      	ldr	r0, [pc, #256]	; (cb2c <z_time_slice+0x120>)
    ca2a:	f7fe fc9b 	bl	b364 <z_spin_lock_set_owner>
	return k;
    ca2e:	462b      	mov	r3, r5
	if (pending_current == _current) {
    ca30:	4a3f      	ldr	r2, [pc, #252]	; (cb30 <z_time_slice+0x124>)
    ca32:	6892      	ldr	r2, [r2, #8]
    ca34:	493f      	ldr	r1, [pc, #252]	; (cb34 <z_time_slice+0x128>)
    ca36:	6809      	ldr	r1, [r1, #0]
    ca38:	428a      	cmp	r2, r1
    ca3a:	d028      	beq.n	ca8e <z_time_slice+0x82>
	pending_current = NULL;
    ca3c:	493d      	ldr	r1, [pc, #244]	; (cb34 <z_time_slice+0x128>)
    ca3e:	2000      	movs	r0, #0
    ca40:	6008      	str	r0, [r1, #0]
	int ret = slice_ticks;
    ca42:	493d      	ldr	r1, [pc, #244]	; (cb38 <z_time_slice+0x12c>)
    ca44:	6809      	ldr	r1, [r1, #0]
	if (slice_time(_current) && sliceable(_current)) {
    ca46:	2900      	cmp	r1, #0
    ca48:	d052      	beq.n	caf0 <z_time_slice+0xe4>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    ca4a:	89d1      	ldrh	r1, [r2, #14]
		&& !z_is_idle_thread_object(thread);
    ca4c:	297f      	cmp	r1, #127	; 0x7f
    ca4e:	d83a      	bhi.n	cac6 <z_time_slice+0xba>
    ca50:	7b51      	ldrb	r1, [r2, #13]
		&& !z_is_thread_prevented_from_running(thread)
    ca52:	f011 0f1f 	tst.w	r1, #31
    ca56:	d140      	bne.n	cada <z_time_slice+0xce>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    ca58:	f992 000e 	ldrsb.w	r0, [r2, #14]
    ca5c:	4937      	ldr	r1, [pc, #220]	; (cb3c <z_time_slice+0x130>)
    ca5e:	6809      	ldr	r1, [r1, #0]
    ca60:	4288      	cmp	r0, r1
    ca62:	db3c      	blt.n	cade <z_time_slice+0xd2>
		&& !z_is_idle_thread_object(thread);
    ca64:	4936      	ldr	r1, [pc, #216]	; (cb40 <z_time_slice+0x134>)
    ca66:	428a      	cmp	r2, r1
    ca68:	d03b      	beq.n	cae2 <z_time_slice+0xd6>
    ca6a:	2201      	movs	r2, #1
    ca6c:	e02c      	b.n	cac8 <z_time_slice+0xbc>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ca6e:	4e35      	ldr	r6, [pc, #212]	; (cb44 <z_time_slice+0x138>)
    ca70:	238e      	movs	r3, #142	; 0x8e
    ca72:	4632      	mov	r2, r6
    ca74:	4934      	ldr	r1, [pc, #208]	; (cb48 <z_time_slice+0x13c>)
    ca76:	4835      	ldr	r0, [pc, #212]	; (cb4c <z_time_slice+0x140>)
    ca78:	f002 f99b 	bl	edb2 <assert_print>
    ca7c:	492b      	ldr	r1, [pc, #172]	; (cb2c <z_time_slice+0x120>)
    ca7e:	4834      	ldr	r0, [pc, #208]	; (cb50 <z_time_slice+0x144>)
    ca80:	f002 f997 	bl	edb2 <assert_print>
    ca84:	218e      	movs	r1, #142	; 0x8e
    ca86:	4630      	mov	r0, r6
    ca88:	f002 f98c 	bl	eda4 <assert_post_action>
    ca8c:	e7cc      	b.n	ca28 <z_time_slice+0x1c>
		z_reset_time_slice(_current);
    ca8e:	4610      	mov	r0, r2
    ca90:	f7ff fd32 	bl	c4f8 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ca94:	4825      	ldr	r0, [pc, #148]	; (cb2c <z_time_slice+0x120>)
    ca96:	f7fe fc55 	bl	b344 <z_spin_unlock_valid>
    ca9a:	b120      	cbz	r0, caa6 <z_time_slice+0x9a>
	__asm__ volatile(
    ca9c:	f385 8811 	msr	BASEPRI, r5
    caa0:	f3bf 8f6f 	isb	sy
		return;
    caa4:	e030      	b.n	cb08 <z_time_slice+0xfc>
    caa6:	4c27      	ldr	r4, [pc, #156]	; (cb44 <z_time_slice+0x138>)
    caa8:	23b9      	movs	r3, #185	; 0xb9
    caaa:	4622      	mov	r2, r4
    caac:	4929      	ldr	r1, [pc, #164]	; (cb54 <z_time_slice+0x148>)
    caae:	4827      	ldr	r0, [pc, #156]	; (cb4c <z_time_slice+0x140>)
    cab0:	f002 f97f 	bl	edb2 <assert_print>
    cab4:	491d      	ldr	r1, [pc, #116]	; (cb2c <z_time_slice+0x120>)
    cab6:	4828      	ldr	r0, [pc, #160]	; (cb58 <z_time_slice+0x14c>)
    cab8:	f002 f97b 	bl	edb2 <assert_print>
    cabc:	21b9      	movs	r1, #185	; 0xb9
    cabe:	4620      	mov	r0, r4
    cac0:	f002 f970 	bl	eda4 <assert_post_action>
    cac4:	e7ea      	b.n	ca9c <z_time_slice+0x90>
		&& !z_is_idle_thread_object(thread);
    cac6:	2200      	movs	r2, #0
	if (slice_time(_current) && sliceable(_current)) {
    cac8:	b192      	cbz	r2, caf0 <z_time_slice+0xe4>
		if (ticks >= _current_cpu->slice_ticks) {
    caca:	4a19      	ldr	r2, [pc, #100]	; (cb30 <z_time_slice+0x124>)
    cacc:	6910      	ldr	r0, [r2, #16]
    cace:	42a0      	cmp	r0, r4
    cad0:	dd09      	ble.n	cae6 <z_time_slice+0xda>
			_current_cpu->slice_ticks -= ticks;
    cad2:	1b00      	subs	r0, r0, r4
    cad4:	4a16      	ldr	r2, [pc, #88]	; (cb30 <z_time_slice+0x124>)
    cad6:	6110      	str	r0, [r2, #16]
    cad8:	e00d      	b.n	caf6 <z_time_slice+0xea>
		&& !z_is_idle_thread_object(thread);
    cada:	2200      	movs	r2, #0
    cadc:	e7f4      	b.n	cac8 <z_time_slice+0xbc>
    cade:	2200      	movs	r2, #0
    cae0:	e7f2      	b.n	cac8 <z_time_slice+0xbc>
    cae2:	2200      	movs	r2, #0
    cae4:	e7f0      	b.n	cac8 <z_time_slice+0xbc>
			key = slice_expired_locked(key);
    cae6:	4628      	mov	r0, r5
    cae8:	f7ff ff7c 	bl	c9e4 <slice_expired_locked>
    caec:	4603      	mov	r3, r0
    caee:	e002      	b.n	caf6 <z_time_slice+0xea>
		_current_cpu->slice_ticks = 0;
    caf0:	4a0f      	ldr	r2, [pc, #60]	; (cb30 <z_time_slice+0x124>)
    caf2:	2100      	movs	r1, #0
    caf4:	6111      	str	r1, [r2, #16]
	k_spin_unlock(&sched_spinlock, key);
    caf6:	461c      	mov	r4, r3
    caf8:	480c      	ldr	r0, [pc, #48]	; (cb2c <z_time_slice+0x120>)
    cafa:	f7fe fc23 	bl	b344 <z_spin_unlock_valid>
    cafe:	b120      	cbz	r0, cb0a <z_time_slice+0xfe>
    cb00:	f384 8811 	msr	BASEPRI, r4
    cb04:	f3bf 8f6f 	isb	sy
}
    cb08:	bd70      	pop	{r4, r5, r6, pc}
    cb0a:	4d0e      	ldr	r5, [pc, #56]	; (cb44 <z_time_slice+0x138>)
    cb0c:	23b9      	movs	r3, #185	; 0xb9
    cb0e:	462a      	mov	r2, r5
    cb10:	4910      	ldr	r1, [pc, #64]	; (cb54 <z_time_slice+0x148>)
    cb12:	480e      	ldr	r0, [pc, #56]	; (cb4c <z_time_slice+0x140>)
    cb14:	f002 f94d 	bl	edb2 <assert_print>
    cb18:	4904      	ldr	r1, [pc, #16]	; (cb2c <z_time_slice+0x120>)
    cb1a:	480f      	ldr	r0, [pc, #60]	; (cb58 <z_time_slice+0x14c>)
    cb1c:	f002 f949 	bl	edb2 <assert_print>
    cb20:	21b9      	movs	r1, #185	; 0xb9
    cb22:	4628      	mov	r0, r5
    cb24:	f002 f93e 	bl	eda4 <assert_post_action>
    cb28:	e7ea      	b.n	cb00 <z_time_slice+0xf4>
    cb2a:	bf00      	nop
    cb2c:	200010d8 	.word	0x200010d8
    cb30:	20001090 	.word	0x20001090
    cb34:	200010d4 	.word	0x200010d4
    cb38:	200010e0 	.word	0x200010e0
    cb3c:	200010dc 	.word	0x200010dc
    cb40:	20000740 	.word	0x20000740
    cb44:	000105e8 	.word	0x000105e8
    cb48:	00010648 	.word	0x00010648
    cb4c:	00010450 	.word	0x00010450
    cb50:	00010660 	.word	0x00010660
    cb54:	00010618 	.word	0x00010618
    cb58:	00010630 	.word	0x00010630

0000cb5c <ready_thread>:
{
    cb5c:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
    cb5e:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    cb60:	f990 200d 	ldrsb.w	r2, [r0, #13]
    cb64:	2a00      	cmp	r2, #0
    cb66:	db30      	blt.n	cbca <ready_thread+0x6e>
    cb68:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    cb6a:	f013 0f1f 	tst.w	r3, #31
    cb6e:	d105      	bne.n	cb7c <ready_thread+0x20>
	return node->next != NULL;
    cb70:	6982      	ldr	r2, [r0, #24]
    cb72:	b10a      	cbz	r2, cb78 <ready_thread+0x1c>
    cb74:	2200      	movs	r2, #0
    cb76:	e002      	b.n	cb7e <ready_thread+0x22>
    cb78:	2201      	movs	r2, #1
    cb7a:	e000      	b.n	cb7e <ready_thread+0x22>
    cb7c:	2200      	movs	r2, #0
    cb7e:	b322      	cbz	r2, cbca <ready_thread+0x6e>
	thread->base.thread_state |= _THREAD_QUEUED;
    cb80:	f063 037f 	orn	r3, r3, #127	; 0x7f
    cb84:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    cb86:	4b1b      	ldr	r3, [pc, #108]	; (cbf4 <ready_thread+0x98>)
    cb88:	429c      	cmp	r4, r3
    cb8a:	d01f      	beq.n	cbcc <ready_thread+0x70>
	return list->head == list;
    cb8c:	4b1a      	ldr	r3, [pc, #104]	; (cbf8 <ready_thread+0x9c>)
    cb8e:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    cb92:	429d      	cmp	r5, r3
    cb94:	d02c      	beq.n	cbf0 <ready_thread+0x94>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    cb96:	b16d      	cbz	r5, cbb4 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    cb98:	4629      	mov	r1, r5
    cb9a:	4620      	mov	r0, r4
    cb9c:	f003 f8f5 	bl	fd8a <z_sched_prio_cmp>
    cba0:	2800      	cmp	r0, #0
    cba2:	dc1f      	bgt.n	cbe4 <ready_thread+0x88>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    cba4:	b135      	cbz	r5, cbb4 <ready_thread+0x58>
	return (node == list->tail) ? NULL : node->next;
    cba6:	4b14      	ldr	r3, [pc, #80]	; (cbf8 <ready_thread+0x9c>)
    cba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    cbaa:	429d      	cmp	r5, r3
    cbac:	d002      	beq.n	cbb4 <ready_thread+0x58>
    cbae:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    cbb0:	2d00      	cmp	r5, #0
    cbb2:	d1f0      	bne.n	cb96 <ready_thread+0x3a>
	sys_dnode_t *const tail = list->tail;
    cbb4:	4b10      	ldr	r3, [pc, #64]	; (cbf8 <ready_thread+0x9c>)
    cbb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    cbb8:	f103 0120 	add.w	r1, r3, #32
    cbbc:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    cbbe:	6062      	str	r2, [r4, #4]
	tail->next = node;
    cbc0:	6014      	str	r4, [r2, #0]
	list->tail = node;
    cbc2:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    cbc4:	2000      	movs	r0, #0
    cbc6:	f7ff fe6f 	bl	c8a8 <update_cache>
}
    cbca:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    cbcc:	4d0b      	ldr	r5, [pc, #44]	; (cbfc <ready_thread+0xa0>)
    cbce:	23ba      	movs	r3, #186	; 0xba
    cbd0:	462a      	mov	r2, r5
    cbd2:	490b      	ldr	r1, [pc, #44]	; (cc00 <ready_thread+0xa4>)
    cbd4:	480b      	ldr	r0, [pc, #44]	; (cc04 <ready_thread+0xa8>)
    cbd6:	f002 f8ec 	bl	edb2 <assert_print>
    cbda:	21ba      	movs	r1, #186	; 0xba
    cbdc:	4628      	mov	r0, r5
    cbde:	f002 f8e1 	bl	eda4 <assert_post_action>
    cbe2:	e7d3      	b.n	cb8c <ready_thread+0x30>
	sys_dnode_t *const prev = successor->prev;
    cbe4:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    cbe6:	6063      	str	r3, [r4, #4]
	node->next = successor;
    cbe8:	6025      	str	r5, [r4, #0]
	prev->next = node;
    cbea:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    cbec:	606c      	str	r4, [r5, #4]
}
    cbee:	e7e9      	b.n	cbc4 <ready_thread+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    cbf0:	2500      	movs	r5, #0
    cbf2:	e7d0      	b.n	cb96 <ready_thread+0x3a>
    cbf4:	20000740 	.word	0x20000740
    cbf8:	20001090 	.word	0x20001090
    cbfc:	0001283c 	.word	0x0001283c
    cc00:	000128d8 	.word	0x000128d8
    cc04:	00010450 	.word	0x00010450

0000cc08 <z_ready_thread>:
{
    cc08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cc0a:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
    cc0c:	2400      	movs	r4, #0
	__asm__ volatile(
    cc0e:	f04f 0320 	mov.w	r3, #32
    cc12:	f3ef 8611 	mrs	r6, BASEPRI
    cc16:	f383 8812 	msr	BASEPRI_MAX, r3
    cc1a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cc1e:	481e      	ldr	r0, [pc, #120]	; (cc98 <z_ready_thread+0x90>)
    cc20:	f7fe fb80 	bl	b324 <z_spin_lock_valid>
    cc24:	b118      	cbz	r0, cc2e <z_ready_thread+0x26>
	z_spin_lock_set_owner(l);
    cc26:	481c      	ldr	r0, [pc, #112]	; (cc98 <z_ready_thread+0x90>)
    cc28:	f7fe fb9c 	bl	b364 <z_spin_lock_set_owner>
	return k;
    cc2c:	e018      	b.n	cc60 <z_ready_thread+0x58>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cc2e:	4f1b      	ldr	r7, [pc, #108]	; (cc9c <z_ready_thread+0x94>)
    cc30:	238e      	movs	r3, #142	; 0x8e
    cc32:	463a      	mov	r2, r7
    cc34:	491a      	ldr	r1, [pc, #104]	; (cca0 <z_ready_thread+0x98>)
    cc36:	481b      	ldr	r0, [pc, #108]	; (cca4 <z_ready_thread+0x9c>)
    cc38:	f002 f8bb 	bl	edb2 <assert_print>
    cc3c:	4916      	ldr	r1, [pc, #88]	; (cc98 <z_ready_thread+0x90>)
    cc3e:	481a      	ldr	r0, [pc, #104]	; (cca8 <z_ready_thread+0xa0>)
    cc40:	f002 f8b7 	bl	edb2 <assert_print>
    cc44:	218e      	movs	r1, #142	; 0x8e
    cc46:	4638      	mov	r0, r7
    cc48:	f002 f8ac 	bl	eda4 <assert_post_action>
    cc4c:	e7eb      	b.n	cc26 <z_ready_thread+0x1e>
			ready_thread(thread);
    cc4e:	4628      	mov	r0, r5
    cc50:	f7ff ff84 	bl	cb5c <ready_thread>
    cc54:	e00a      	b.n	cc6c <z_ready_thread+0x64>
	__asm__ volatile(
    cc56:	f386 8811 	msr	BASEPRI, r6
    cc5a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    cc5e:	2401      	movs	r4, #1
    cc60:	b9cc      	cbnz	r4, cc96 <z_ready_thread+0x8e>
		if (!thread_active_elsewhere(thread)) {
    cc62:	4628      	mov	r0, r5
    cc64:	f003 f88f 	bl	fd86 <thread_active_elsewhere>
    cc68:	2800      	cmp	r0, #0
    cc6a:	d0f0      	beq.n	cc4e <z_ready_thread+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cc6c:	480a      	ldr	r0, [pc, #40]	; (cc98 <z_ready_thread+0x90>)
    cc6e:	f7fe fb69 	bl	b344 <z_spin_unlock_valid>
    cc72:	2800      	cmp	r0, #0
    cc74:	d1ef      	bne.n	cc56 <z_ready_thread+0x4e>
    cc76:	4c09      	ldr	r4, [pc, #36]	; (cc9c <z_ready_thread+0x94>)
    cc78:	23b9      	movs	r3, #185	; 0xb9
    cc7a:	4622      	mov	r2, r4
    cc7c:	490b      	ldr	r1, [pc, #44]	; (ccac <z_ready_thread+0xa4>)
    cc7e:	4809      	ldr	r0, [pc, #36]	; (cca4 <z_ready_thread+0x9c>)
    cc80:	f002 f897 	bl	edb2 <assert_print>
    cc84:	4904      	ldr	r1, [pc, #16]	; (cc98 <z_ready_thread+0x90>)
    cc86:	480a      	ldr	r0, [pc, #40]	; (ccb0 <z_ready_thread+0xa8>)
    cc88:	f002 f893 	bl	edb2 <assert_print>
    cc8c:	21b9      	movs	r1, #185	; 0xb9
    cc8e:	4620      	mov	r0, r4
    cc90:	f002 f888 	bl	eda4 <assert_post_action>
    cc94:	e7df      	b.n	cc56 <z_ready_thread+0x4e>
}
    cc96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cc98:	200010d8 	.word	0x200010d8
    cc9c:	000105e8 	.word	0x000105e8
    cca0:	00010648 	.word	0x00010648
    cca4:	00010450 	.word	0x00010450
    cca8:	00010660 	.word	0x00010660
    ccac:	00010618 	.word	0x00010618
    ccb0:	00010630 	.word	0x00010630

0000ccb4 <z_sched_start>:
{
    ccb4:	b570      	push	{r4, r5, r6, lr}
    ccb6:	4604      	mov	r4, r0
	__asm__ volatile(
    ccb8:	f04f 0320 	mov.w	r3, #32
    ccbc:	f3ef 8511 	mrs	r5, BASEPRI
    ccc0:	f383 8812 	msr	BASEPRI_MAX, r3
    ccc4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ccc8:	481f      	ldr	r0, [pc, #124]	; (cd48 <z_sched_start+0x94>)
    ccca:	f7fe fb2b 	bl	b324 <z_spin_lock_valid>
    ccce:	b188      	cbz	r0, ccf4 <z_sched_start+0x40>
	z_spin_lock_set_owner(l);
    ccd0:	481d      	ldr	r0, [pc, #116]	; (cd48 <z_sched_start+0x94>)
    ccd2:	f7fe fb47 	bl	b364 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    ccd6:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
    ccd8:	f013 0f04 	tst.w	r3, #4
    ccdc:	d01a      	beq.n	cd14 <z_sched_start+0x60>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    ccde:	f023 0304 	bic.w	r3, r3, #4
    cce2:	7363      	strb	r3, [r4, #13]
	ready_thread(thread);
    cce4:	4620      	mov	r0, r4
    cce6:	f7ff ff39 	bl	cb5c <ready_thread>
	z_reschedule(&sched_spinlock, key);
    ccea:	4629      	mov	r1, r5
    ccec:	4816      	ldr	r0, [pc, #88]	; (cd48 <z_sched_start+0x94>)
    ccee:	f7ff fce7 	bl	c6c0 <z_reschedule>
}
    ccf2:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ccf4:	4e15      	ldr	r6, [pc, #84]	; (cd4c <z_sched_start+0x98>)
    ccf6:	238e      	movs	r3, #142	; 0x8e
    ccf8:	4632      	mov	r2, r6
    ccfa:	4915      	ldr	r1, [pc, #84]	; (cd50 <z_sched_start+0x9c>)
    ccfc:	4815      	ldr	r0, [pc, #84]	; (cd54 <z_sched_start+0xa0>)
    ccfe:	f002 f858 	bl	edb2 <assert_print>
    cd02:	4911      	ldr	r1, [pc, #68]	; (cd48 <z_sched_start+0x94>)
    cd04:	4814      	ldr	r0, [pc, #80]	; (cd58 <z_sched_start+0xa4>)
    cd06:	f002 f854 	bl	edb2 <assert_print>
    cd0a:	218e      	movs	r1, #142	; 0x8e
    cd0c:	4630      	mov	r0, r6
    cd0e:	f002 f849 	bl	eda4 <assert_post_action>
    cd12:	e7dd      	b.n	ccd0 <z_sched_start+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cd14:	480c      	ldr	r0, [pc, #48]	; (cd48 <z_sched_start+0x94>)
    cd16:	f7fe fb15 	bl	b344 <z_spin_unlock_valid>
    cd1a:	b120      	cbz	r0, cd26 <z_sched_start+0x72>
	__asm__ volatile(
    cd1c:	f385 8811 	msr	BASEPRI, r5
    cd20:	f3bf 8f6f 	isb	sy
		return;
    cd24:	e7e5      	b.n	ccf2 <z_sched_start+0x3e>
    cd26:	4c09      	ldr	r4, [pc, #36]	; (cd4c <z_sched_start+0x98>)
    cd28:	23b9      	movs	r3, #185	; 0xb9
    cd2a:	4622      	mov	r2, r4
    cd2c:	490b      	ldr	r1, [pc, #44]	; (cd5c <z_sched_start+0xa8>)
    cd2e:	4809      	ldr	r0, [pc, #36]	; (cd54 <z_sched_start+0xa0>)
    cd30:	f002 f83f 	bl	edb2 <assert_print>
    cd34:	4904      	ldr	r1, [pc, #16]	; (cd48 <z_sched_start+0x94>)
    cd36:	480a      	ldr	r0, [pc, #40]	; (cd60 <z_sched_start+0xac>)
    cd38:	f002 f83b 	bl	edb2 <assert_print>
    cd3c:	21b9      	movs	r1, #185	; 0xb9
    cd3e:	4620      	mov	r0, r4
    cd40:	f002 f830 	bl	eda4 <assert_post_action>
    cd44:	e7ea      	b.n	cd1c <z_sched_start+0x68>
    cd46:	bf00      	nop
    cd48:	200010d8 	.word	0x200010d8
    cd4c:	000105e8 	.word	0x000105e8
    cd50:	00010648 	.word	0x00010648
    cd54:	00010450 	.word	0x00010450
    cd58:	00010660 	.word	0x00010660
    cd5c:	00010618 	.word	0x00010618
    cd60:	00010630 	.word	0x00010630

0000cd64 <z_thread_timeout>:
{
    cd64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cd68:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    cd6a:	f1a0 0618 	sub.w	r6, r0, #24
	LOCKED(&sched_spinlock) {
    cd6e:	2500      	movs	r5, #0
	__asm__ volatile(
    cd70:	f04f 0320 	mov.w	r3, #32
    cd74:	f3ef 8711 	mrs	r7, BASEPRI
    cd78:	f383 8812 	msr	BASEPRI_MAX, r3
    cd7c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cd80:	482b      	ldr	r0, [pc, #172]	; (ce30 <z_thread_timeout+0xcc>)
    cd82:	f7fe facf 	bl	b324 <z_spin_lock_valid>
    cd86:	b118      	cbz	r0, cd90 <z_thread_timeout+0x2c>
	z_spin_lock_set_owner(l);
    cd88:	4829      	ldr	r0, [pc, #164]	; (ce30 <z_thread_timeout+0xcc>)
    cd8a:	f7fe faeb 	bl	b364 <z_spin_lock_set_owner>
	return k;
    cd8e:	e026      	b.n	cdde <z_thread_timeout+0x7a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cd90:	f8df 80a0 	ldr.w	r8, [pc, #160]	; ce34 <z_thread_timeout+0xd0>
    cd94:	238e      	movs	r3, #142	; 0x8e
    cd96:	4642      	mov	r2, r8
    cd98:	4927      	ldr	r1, [pc, #156]	; (ce38 <z_thread_timeout+0xd4>)
    cd9a:	4828      	ldr	r0, [pc, #160]	; (ce3c <z_thread_timeout+0xd8>)
    cd9c:	f002 f809 	bl	edb2 <assert_print>
    cda0:	4923      	ldr	r1, [pc, #140]	; (ce30 <z_thread_timeout+0xcc>)
    cda2:	4827      	ldr	r0, [pc, #156]	; (ce40 <z_thread_timeout+0xdc>)
    cda4:	f002 f805 	bl	edb2 <assert_print>
    cda8:	218e      	movs	r1, #142	; 0x8e
    cdaa:	4640      	mov	r0, r8
    cdac:	f001 fffa 	bl	eda4 <assert_post_action>
    cdb0:	e7ea      	b.n	cd88 <z_thread_timeout+0x24>
    cdb2:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    cdb6:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    cdba:	f804 3c0b 	strb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    cdbe:	f023 0310 	bic.w	r3, r3, #16
    cdc2:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    cdc6:	4630      	mov	r0, r6
    cdc8:	f7ff fec8 	bl	cb5c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cdcc:	4818      	ldr	r0, [pc, #96]	; (ce30 <z_thread_timeout+0xcc>)
    cdce:	f7fe fab9 	bl	b344 <z_spin_unlock_valid>
    cdd2:	b1d8      	cbz	r0, ce0c <z_thread_timeout+0xa8>
	__asm__ volatile(
    cdd4:	f387 8811 	msr	BASEPRI, r7
    cdd8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    cddc:	2501      	movs	r5, #1
    cdde:	bb2d      	cbnz	r5, ce2c <z_thread_timeout+0xc8>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    cde0:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    cde4:	f013 0f28 	tst.w	r3, #40	; 0x28
    cde8:	d1f0      	bne.n	cdcc <z_thread_timeout+0x68>
			if (thread->base.pended_on != NULL) {
    cdea:	f854 3c10 	ldr.w	r3, [r4, #-16]
    cdee:	2b00      	cmp	r3, #0
    cdf0:	d0df      	beq.n	cdb2 <z_thread_timeout+0x4e>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    cdf2:	4630      	mov	r0, r6
    cdf4:	f7ff fb56 	bl	c4a4 <pended_on_thread>
    cdf8:	4631      	mov	r1, r6
    cdfa:	f7ff fd31 	bl	c860 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    cdfe:	7b73      	ldrb	r3, [r6, #13]
    ce00:	f023 0302 	bic.w	r3, r3, #2
    ce04:	7373      	strb	r3, [r6, #13]
	thread->base.pended_on = NULL;
    ce06:	2300      	movs	r3, #0
    ce08:	60b3      	str	r3, [r6, #8]
}
    ce0a:	e7d2      	b.n	cdb2 <z_thread_timeout+0x4e>
    ce0c:	4d09      	ldr	r5, [pc, #36]	; (ce34 <z_thread_timeout+0xd0>)
    ce0e:	23b9      	movs	r3, #185	; 0xb9
    ce10:	462a      	mov	r2, r5
    ce12:	490c      	ldr	r1, [pc, #48]	; (ce44 <z_thread_timeout+0xe0>)
    ce14:	4809      	ldr	r0, [pc, #36]	; (ce3c <z_thread_timeout+0xd8>)
    ce16:	f001 ffcc 	bl	edb2 <assert_print>
    ce1a:	4905      	ldr	r1, [pc, #20]	; (ce30 <z_thread_timeout+0xcc>)
    ce1c:	480a      	ldr	r0, [pc, #40]	; (ce48 <z_thread_timeout+0xe4>)
    ce1e:	f001 ffc8 	bl	edb2 <assert_print>
    ce22:	21b9      	movs	r1, #185	; 0xb9
    ce24:	4628      	mov	r0, r5
    ce26:	f001 ffbd 	bl	eda4 <assert_post_action>
    ce2a:	e7d3      	b.n	cdd4 <z_thread_timeout+0x70>
}
    ce2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ce30:	200010d8 	.word	0x200010d8
    ce34:	000105e8 	.word	0x000105e8
    ce38:	00010648 	.word	0x00010648
    ce3c:	00010450 	.word	0x00010450
    ce40:	00010660 	.word	0x00010660
    ce44:	00010618 	.word	0x00010618
    ce48:	00010630 	.word	0x00010630

0000ce4c <unready_thread>:
{
    ce4c:	b510      	push	{r4, lr}
    ce4e:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    ce50:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    ce52:	f990 300d 	ldrsb.w	r3, [r0, #13]
    ce56:	2b00      	cmp	r3, #0
    ce58:	db08      	blt.n	ce6c <unready_thread+0x20>
	update_cache(thread == _current);
    ce5a:	4b08      	ldr	r3, [pc, #32]	; (ce7c <unready_thread+0x30>)
    ce5c:	6898      	ldr	r0, [r3, #8]
    ce5e:	42a0      	cmp	r0, r4
    ce60:	bf14      	ite	ne
    ce62:	2000      	movne	r0, #0
    ce64:	2001      	moveq	r0, #1
    ce66:	f7ff fd1f 	bl	c8a8 <update_cache>
}
    ce6a:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    ce6c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    ce70:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    ce72:	4601      	mov	r1, r0
    ce74:	4802      	ldr	r0, [pc, #8]	; (ce80 <unready_thread+0x34>)
    ce76:	f7ff fcf3 	bl	c860 <z_priq_dumb_remove>
}
    ce7a:	e7ee      	b.n	ce5a <unready_thread+0xe>
    ce7c:	20001090 	.word	0x20001090
    ce80:	200010b0 	.word	0x200010b0

0000ce84 <add_to_waitq_locked>:
{
    ce84:	b570      	push	{r4, r5, r6, lr}
    ce86:	4605      	mov	r5, r0
    ce88:	460e      	mov	r6, r1
	unready_thread(thread);
    ce8a:	f7ff ffdf 	bl	ce4c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    ce8e:	7b6b      	ldrb	r3, [r5, #13]
    ce90:	f043 0302 	orr.w	r3, r3, #2
    ce94:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    ce96:	b1ce      	cbz	r6, cecc <add_to_waitq_locked+0x48>
		thread->base.pended_on = wait_q;
    ce98:	60ae      	str	r6, [r5, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    ce9a:	4b17      	ldr	r3, [pc, #92]	; (cef8 <add_to_waitq_locked+0x74>)
    ce9c:	429d      	cmp	r5, r3
    ce9e:	d016      	beq.n	cece <add_to_waitq_locked+0x4a>
	return list->head == list;
    cea0:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    cea2:	42a6      	cmp	r6, r4
    cea4:	d025      	beq.n	cef2 <add_to_waitq_locked+0x6e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    cea6:	b164      	cbz	r4, cec2 <add_to_waitq_locked+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    cea8:	4621      	mov	r1, r4
    ceaa:	4628      	mov	r0, r5
    ceac:	f002 ff6d 	bl	fd8a <z_sched_prio_cmp>
    ceb0:	2800      	cmp	r0, #0
    ceb2:	dc18      	bgt.n	cee6 <add_to_waitq_locked+0x62>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    ceb4:	b12c      	cbz	r4, cec2 <add_to_waitq_locked+0x3e>
	return (node == list->tail) ? NULL : node->next;
    ceb6:	6873      	ldr	r3, [r6, #4]
    ceb8:	429c      	cmp	r4, r3
    ceba:	d002      	beq.n	cec2 <add_to_waitq_locked+0x3e>
    cebc:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    cebe:	2c00      	cmp	r4, #0
    cec0:	d1f1      	bne.n	cea6 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    cec2:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    cec4:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    cec6:	606b      	str	r3, [r5, #4]
	tail->next = node;
    cec8:	601d      	str	r5, [r3, #0]
	list->tail = node;
    ceca:	6075      	str	r5, [r6, #4]
}
    cecc:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    cece:	4c0b      	ldr	r4, [pc, #44]	; (cefc <add_to_waitq_locked+0x78>)
    ced0:	23ba      	movs	r3, #186	; 0xba
    ced2:	4622      	mov	r2, r4
    ced4:	490a      	ldr	r1, [pc, #40]	; (cf00 <add_to_waitq_locked+0x7c>)
    ced6:	480b      	ldr	r0, [pc, #44]	; (cf04 <add_to_waitq_locked+0x80>)
    ced8:	f001 ff6b 	bl	edb2 <assert_print>
    cedc:	21ba      	movs	r1, #186	; 0xba
    cede:	4620      	mov	r0, r4
    cee0:	f001 ff60 	bl	eda4 <assert_post_action>
    cee4:	e7dc      	b.n	cea0 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const prev = successor->prev;
    cee6:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    cee8:	606b      	str	r3, [r5, #4]
	node->next = successor;
    ceea:	602c      	str	r4, [r5, #0]
	prev->next = node;
    ceec:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    ceee:	6065      	str	r5, [r4, #4]
}
    cef0:	e7ec      	b.n	cecc <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    cef2:	2400      	movs	r4, #0
    cef4:	e7d7      	b.n	cea6 <add_to_waitq_locked+0x22>
    cef6:	bf00      	nop
    cef8:	20000740 	.word	0x20000740
    cefc:	0001283c 	.word	0x0001283c
    cf00:	000128d8 	.word	0x000128d8
    cf04:	00010450 	.word	0x00010450

0000cf08 <pend>:
{
    cf08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cf0c:	4605      	mov	r5, r0
    cf0e:	460e      	mov	r6, r1
    cf10:	4691      	mov	r9, r2
    cf12:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
    cf14:	2400      	movs	r4, #0
	__asm__ volatile(
    cf16:	f04f 0320 	mov.w	r3, #32
    cf1a:	f3ef 8711 	mrs	r7, BASEPRI
    cf1e:	f383 8812 	msr	BASEPRI_MAX, r3
    cf22:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cf26:	481f      	ldr	r0, [pc, #124]	; (cfa4 <pend+0x9c>)
    cf28:	f7fe f9fc 	bl	b324 <z_spin_lock_valid>
    cf2c:	b118      	cbz	r0, cf36 <pend+0x2e>
	z_spin_lock_set_owner(l);
    cf2e:	481d      	ldr	r0, [pc, #116]	; (cfa4 <pend+0x9c>)
    cf30:	f7fe fa18 	bl	b364 <z_spin_lock_set_owner>
	return k;
    cf34:	e015      	b.n	cf62 <pend+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cf36:	f8df a070 	ldr.w	sl, [pc, #112]	; cfa8 <pend+0xa0>
    cf3a:	238e      	movs	r3, #142	; 0x8e
    cf3c:	4652      	mov	r2, sl
    cf3e:	491b      	ldr	r1, [pc, #108]	; (cfac <pend+0xa4>)
    cf40:	481b      	ldr	r0, [pc, #108]	; (cfb0 <pend+0xa8>)
    cf42:	f001 ff36 	bl	edb2 <assert_print>
    cf46:	4917      	ldr	r1, [pc, #92]	; (cfa4 <pend+0x9c>)
    cf48:	481a      	ldr	r0, [pc, #104]	; (cfb4 <pend+0xac>)
    cf4a:	f001 ff32 	bl	edb2 <assert_print>
    cf4e:	218e      	movs	r1, #142	; 0x8e
    cf50:	4650      	mov	r0, sl
    cf52:	f001 ff27 	bl	eda4 <assert_post_action>
    cf56:	e7ea      	b.n	cf2e <pend+0x26>
	__asm__ volatile(
    cf58:	f387 8811 	msr	BASEPRI, r7
    cf5c:	f3bf 8f6f 	isb	sy
    cf60:	2401      	movs	r4, #1
    cf62:	b9c4      	cbnz	r4, cf96 <pend+0x8e>
		add_to_waitq_locked(thread, wait_q);
    cf64:	4631      	mov	r1, r6
    cf66:	4628      	mov	r0, r5
    cf68:	f7ff ff8c 	bl	ce84 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cf6c:	480d      	ldr	r0, [pc, #52]	; (cfa4 <pend+0x9c>)
    cf6e:	f7fe f9e9 	bl	b344 <z_spin_unlock_valid>
    cf72:	2800      	cmp	r0, #0
    cf74:	d1f0      	bne.n	cf58 <pend+0x50>
    cf76:	4c0c      	ldr	r4, [pc, #48]	; (cfa8 <pend+0xa0>)
    cf78:	23b9      	movs	r3, #185	; 0xb9
    cf7a:	4622      	mov	r2, r4
    cf7c:	490e      	ldr	r1, [pc, #56]	; (cfb8 <pend+0xb0>)
    cf7e:	480c      	ldr	r0, [pc, #48]	; (cfb0 <pend+0xa8>)
    cf80:	f001 ff17 	bl	edb2 <assert_print>
    cf84:	4907      	ldr	r1, [pc, #28]	; (cfa4 <pend+0x9c>)
    cf86:	480d      	ldr	r0, [pc, #52]	; (cfbc <pend+0xb4>)
    cf88:	f001 ff13 	bl	edb2 <assert_print>
    cf8c:	21b9      	movs	r1, #185	; 0xb9
    cf8e:	4620      	mov	r0, r4
    cf90:	f001 ff08 	bl	eda4 <assert_post_action>
    cf94:	e7e0      	b.n	cf58 <pend+0x50>
	add_thread_timeout(thread, timeout);
    cf96:	464a      	mov	r2, r9
    cf98:	4643      	mov	r3, r8
    cf9a:	4628      	mov	r0, r5
    cf9c:	f7ff fa9c 	bl	c4d8 <add_thread_timeout>
}
    cfa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cfa4:	200010d8 	.word	0x200010d8
    cfa8:	000105e8 	.word	0x000105e8
    cfac:	00010648 	.word	0x00010648
    cfb0:	00010450 	.word	0x00010450
    cfb4:	00010660 	.word	0x00010660
    cfb8:	00010618 	.word	0x00010618
    cfbc:	00010630 	.word	0x00010630

0000cfc0 <z_pend_curr>:
{
    cfc0:	b570      	push	{r4, r5, r6, lr}
    cfc2:	4604      	mov	r4, r0
    cfc4:	460d      	mov	r5, r1
    cfc6:	4611      	mov	r1, r2
	pending_current = _current;
    cfc8:	4b0f      	ldr	r3, [pc, #60]	; (d008 <z_pend_curr+0x48>)
    cfca:	6898      	ldr	r0, [r3, #8]
    cfcc:	4b0f      	ldr	r3, [pc, #60]	; (d00c <z_pend_curr+0x4c>)
    cfce:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    cfd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    cfd4:	f7ff ff98 	bl	cf08 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cfd8:	4620      	mov	r0, r4
    cfda:	f7fe f9b3 	bl	b344 <z_spin_unlock_valid>
    cfde:	b118      	cbz	r0, cfe8 <z_pend_curr+0x28>
    cfe0:	4628      	mov	r0, r5
    cfe2:	f7f7 f9a7 	bl	4334 <arch_swap>
}
    cfe6:	bd70      	pop	{r4, r5, r6, pc}
    cfe8:	4e09      	ldr	r6, [pc, #36]	; (d010 <z_pend_curr+0x50>)
    cfea:	23d0      	movs	r3, #208	; 0xd0
    cfec:	4632      	mov	r2, r6
    cfee:	4909      	ldr	r1, [pc, #36]	; (d014 <z_pend_curr+0x54>)
    cff0:	4809      	ldr	r0, [pc, #36]	; (d018 <z_pend_curr+0x58>)
    cff2:	f001 fede 	bl	edb2 <assert_print>
    cff6:	4621      	mov	r1, r4
    cff8:	4808      	ldr	r0, [pc, #32]	; (d01c <z_pend_curr+0x5c>)
    cffa:	f001 feda 	bl	edb2 <assert_print>
    cffe:	21d0      	movs	r1, #208	; 0xd0
    d000:	4630      	mov	r0, r6
    d002:	f001 fecf 	bl	eda4 <assert_post_action>
    d006:	e7eb      	b.n	cfe0 <z_pend_curr+0x20>
    d008:	20001090 	.word	0x20001090
    d00c:	200010d4 	.word	0x200010d4
    d010:	000105e8 	.word	0x000105e8
    d014:	00010618 	.word	0x00010618
    d018:	00010450 	.word	0x00010450
    d01c:	00010630 	.word	0x00010630

0000d020 <z_set_prio>:
{
    d020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d024:	4604      	mov	r4, r0
    d026:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
    d028:	2500      	movs	r5, #0
	__asm__ volatile(
    d02a:	f04f 0320 	mov.w	r3, #32
    d02e:	f3ef 8811 	mrs	r8, BASEPRI
    d032:	f383 8812 	msr	BASEPRI_MAX, r3
    d036:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d03a:	4844      	ldr	r0, [pc, #272]	; (d14c <z_set_prio+0x12c>)
    d03c:	f7fe f972 	bl	b324 <z_spin_lock_valid>
    d040:	b120      	cbz	r0, d04c <z_set_prio+0x2c>
	z_spin_lock_set_owner(l);
    d042:	4842      	ldr	r0, [pc, #264]	; (d14c <z_set_prio+0x12c>)
    d044:	f7fe f98e 	bl	b364 <z_spin_lock_set_owner>
	bool need_sched = 0;
    d048:	2700      	movs	r7, #0
	return k;
    d04a:	e01d      	b.n	d088 <z_set_prio+0x68>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d04c:	4f40      	ldr	r7, [pc, #256]	; (d150 <z_set_prio+0x130>)
    d04e:	238e      	movs	r3, #142	; 0x8e
    d050:	463a      	mov	r2, r7
    d052:	4940      	ldr	r1, [pc, #256]	; (d154 <z_set_prio+0x134>)
    d054:	4840      	ldr	r0, [pc, #256]	; (d158 <z_set_prio+0x138>)
    d056:	f001 feac 	bl	edb2 <assert_print>
    d05a:	493c      	ldr	r1, [pc, #240]	; (d14c <z_set_prio+0x12c>)
    d05c:	483f      	ldr	r0, [pc, #252]	; (d15c <z_set_prio+0x13c>)
    d05e:	f001 fea8 	bl	edb2 <assert_print>
    d062:	218e      	movs	r1, #142	; 0x8e
    d064:	4638      	mov	r0, r7
    d066:	f001 fe9d 	bl	eda4 <assert_post_action>
    d06a:	e7ea      	b.n	d042 <z_set_prio+0x22>
		if (need_sched) {
    d06c:	f013 0701 	ands.w	r7, r3, #1
    d070:	d116      	bne.n	d0a0 <z_set_prio+0x80>
			thread->base.prio = prio;
    d072:	73a6      	strb	r6, [r4, #14]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d074:	4835      	ldr	r0, [pc, #212]	; (d14c <z_set_prio+0x12c>)
    d076:	f7fe f965 	bl	b344 <z_spin_unlock_valid>
    d07a:	2800      	cmp	r0, #0
    d07c:	d053      	beq.n	d126 <z_set_prio+0x106>
	__asm__ volatile(
    d07e:	f388 8811 	msr	BASEPRI, r8
    d082:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    d086:	2501      	movs	r5, #1
    d088:	462b      	mov	r3, r5
    d08a:	2d00      	cmp	r5, #0
    d08c:	d15b      	bne.n	d146 <z_set_prio+0x126>
	uint8_t state = thread->base.thread_state;
    d08e:	7b62      	ldrb	r2, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    d090:	f012 0f1f 	tst.w	r2, #31
    d094:	d1ea      	bne.n	d06c <z_set_prio+0x4c>
	return node->next != NULL;
    d096:	69a1      	ldr	r1, [r4, #24]
    d098:	2900      	cmp	r1, #0
    d09a:	d1e7      	bne.n	d06c <z_set_prio+0x4c>
    d09c:	2301      	movs	r3, #1
    d09e:	e7e5      	b.n	d06c <z_set_prio+0x4c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    d0a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    d0a4:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    d0a6:	4621      	mov	r1, r4
    d0a8:	482d      	ldr	r0, [pc, #180]	; (d160 <z_set_prio+0x140>)
    d0aa:	f7ff fbd9 	bl	c860 <z_priq_dumb_remove>
				thread->base.prio = prio;
    d0ae:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    d0b0:	7b63      	ldrb	r3, [r4, #13]
    d0b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
    d0b6:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    d0b8:	4b2a      	ldr	r3, [pc, #168]	; (d164 <z_set_prio+0x144>)
    d0ba:	429c      	cmp	r4, r3
    d0bc:	d01f      	beq.n	d0fe <z_set_prio+0xde>
	return list->head == list;
    d0be:	4b2a      	ldr	r3, [pc, #168]	; (d168 <z_set_prio+0x148>)
    d0c0:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d0c4:	429d      	cmp	r5, r3
    d0c6:	d02c      	beq.n	d122 <z_set_prio+0x102>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    d0c8:	b16d      	cbz	r5, d0e6 <z_set_prio+0xc6>
		if (z_sched_prio_cmp(thread, t) > 0) {
    d0ca:	4629      	mov	r1, r5
    d0cc:	4620      	mov	r0, r4
    d0ce:	f002 fe5c 	bl	fd8a <z_sched_prio_cmp>
    d0d2:	2800      	cmp	r0, #0
    d0d4:	dc1f      	bgt.n	d116 <z_set_prio+0xf6>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    d0d6:	b135      	cbz	r5, d0e6 <z_set_prio+0xc6>
	return (node == list->tail) ? NULL : node->next;
    d0d8:	4b23      	ldr	r3, [pc, #140]	; (d168 <z_set_prio+0x148>)
    d0da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d0dc:	429d      	cmp	r5, r3
    d0de:	d002      	beq.n	d0e6 <z_set_prio+0xc6>
    d0e0:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    d0e2:	2d00      	cmp	r5, #0
    d0e4:	d1f0      	bne.n	d0c8 <z_set_prio+0xa8>
	sys_dnode_t *const tail = list->tail;
    d0e6:	4b20      	ldr	r3, [pc, #128]	; (d168 <z_set_prio+0x148>)
    d0e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    d0ea:	f103 0120 	add.w	r1, r3, #32
    d0ee:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    d0f0:	6062      	str	r2, [r4, #4]
	tail->next = node;
    d0f2:	6014      	str	r4, [r2, #0]
	list->tail = node;
    d0f4:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
    d0f6:	2001      	movs	r0, #1
    d0f8:	f7ff fbd6 	bl	c8a8 <update_cache>
    d0fc:	e7ba      	b.n	d074 <z_set_prio+0x54>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    d0fe:	4d1b      	ldr	r5, [pc, #108]	; (d16c <z_set_prio+0x14c>)
    d100:	23ba      	movs	r3, #186	; 0xba
    d102:	462a      	mov	r2, r5
    d104:	491a      	ldr	r1, [pc, #104]	; (d170 <z_set_prio+0x150>)
    d106:	4814      	ldr	r0, [pc, #80]	; (d158 <z_set_prio+0x138>)
    d108:	f001 fe53 	bl	edb2 <assert_print>
    d10c:	21ba      	movs	r1, #186	; 0xba
    d10e:	4628      	mov	r0, r5
    d110:	f001 fe48 	bl	eda4 <assert_post_action>
    d114:	e7d3      	b.n	d0be <z_set_prio+0x9e>
	sys_dnode_t *const prev = successor->prev;
    d116:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    d118:	6063      	str	r3, [r4, #4]
	node->next = successor;
    d11a:	6025      	str	r5, [r4, #0]
	prev->next = node;
    d11c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    d11e:	606c      	str	r4, [r5, #4]
}
    d120:	e7e9      	b.n	d0f6 <z_set_prio+0xd6>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    d122:	2500      	movs	r5, #0
    d124:	e7d0      	b.n	d0c8 <z_set_prio+0xa8>
    d126:	4d0a      	ldr	r5, [pc, #40]	; (d150 <z_set_prio+0x130>)
    d128:	23b9      	movs	r3, #185	; 0xb9
    d12a:	462a      	mov	r2, r5
    d12c:	4911      	ldr	r1, [pc, #68]	; (d174 <z_set_prio+0x154>)
    d12e:	480a      	ldr	r0, [pc, #40]	; (d158 <z_set_prio+0x138>)
    d130:	f001 fe3f 	bl	edb2 <assert_print>
    d134:	4905      	ldr	r1, [pc, #20]	; (d14c <z_set_prio+0x12c>)
    d136:	4810      	ldr	r0, [pc, #64]	; (d178 <z_set_prio+0x158>)
    d138:	f001 fe3b 	bl	edb2 <assert_print>
    d13c:	21b9      	movs	r1, #185	; 0xb9
    d13e:	4628      	mov	r0, r5
    d140:	f001 fe30 	bl	eda4 <assert_post_action>
    d144:	e79b      	b.n	d07e <z_set_prio+0x5e>
}
    d146:	4638      	mov	r0, r7
    d148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d14c:	200010d8 	.word	0x200010d8
    d150:	000105e8 	.word	0x000105e8
    d154:	00010648 	.word	0x00010648
    d158:	00010450 	.word	0x00010450
    d15c:	00010660 	.word	0x00010660
    d160:	200010b0 	.word	0x200010b0
    d164:	20000740 	.word	0x20000740
    d168:	20001090 	.word	0x20001090
    d16c:	0001283c 	.word	0x0001283c
    d170:	000128d8 	.word	0x000128d8
    d174:	00010618 	.word	0x00010618
    d178:	00010630 	.word	0x00010630

0000d17c <z_impl_k_thread_suspend>:
{
    d17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d17e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    d180:	3018      	adds	r0, #24
    d182:	f000 fe8d 	bl	dea0 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    d186:	2500      	movs	r5, #0
	__asm__ volatile(
    d188:	f04f 0320 	mov.w	r3, #32
    d18c:	f3ef 8611 	mrs	r6, BASEPRI
    d190:	f383 8812 	msr	BASEPRI_MAX, r3
    d194:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d198:	482d      	ldr	r0, [pc, #180]	; (d250 <z_impl_k_thread_suspend+0xd4>)
    d19a:	f7fe f8c3 	bl	b324 <z_spin_lock_valid>
    d19e:	b118      	cbz	r0, d1a8 <z_impl_k_thread_suspend+0x2c>
	z_spin_lock_set_owner(l);
    d1a0:	482b      	ldr	r0, [pc, #172]	; (d250 <z_impl_k_thread_suspend+0xd4>)
    d1a2:	f7fe f8df 	bl	b364 <z_spin_lock_set_owner>
	return k;
    d1a6:	e01c      	b.n	d1e2 <z_impl_k_thread_suspend+0x66>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d1a8:	4f2a      	ldr	r7, [pc, #168]	; (d254 <z_impl_k_thread_suspend+0xd8>)
    d1aa:	238e      	movs	r3, #142	; 0x8e
    d1ac:	463a      	mov	r2, r7
    d1ae:	492a      	ldr	r1, [pc, #168]	; (d258 <z_impl_k_thread_suspend+0xdc>)
    d1b0:	482a      	ldr	r0, [pc, #168]	; (d25c <z_impl_k_thread_suspend+0xe0>)
    d1b2:	f001 fdfe 	bl	edb2 <assert_print>
    d1b6:	4926      	ldr	r1, [pc, #152]	; (d250 <z_impl_k_thread_suspend+0xd4>)
    d1b8:	4829      	ldr	r0, [pc, #164]	; (d260 <z_impl_k_thread_suspend+0xe4>)
    d1ba:	f001 fdfa 	bl	edb2 <assert_print>
    d1be:	218e      	movs	r1, #142	; 0x8e
    d1c0:	4638      	mov	r0, r7
    d1c2:	f001 fdef 	bl	eda4 <assert_post_action>
    d1c6:	e7eb      	b.n	d1a0 <z_impl_k_thread_suspend+0x24>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    d1c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    d1cc:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    d1ce:	4621      	mov	r1, r4
    d1d0:	4824      	ldr	r0, [pc, #144]	; (d264 <z_impl_k_thread_suspend+0xe8>)
    d1d2:	f7ff fb45 	bl	c860 <z_priq_dumb_remove>
}
    d1d6:	e00a      	b.n	d1ee <z_impl_k_thread_suspend+0x72>
	__asm__ volatile(
    d1d8:	f386 8811 	msr	BASEPRI, r6
    d1dc:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    d1e0:	2501      	movs	r5, #1
    d1e2:	bb2d      	cbnz	r5, d230 <z_impl_k_thread_suspend+0xb4>
	return (thread->base.thread_state & state) != 0U;
    d1e4:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    d1e6:	f994 300d 	ldrsb.w	r3, [r4, #13]
    d1ea:	2b00      	cmp	r3, #0
    d1ec:	dbec      	blt.n	d1c8 <z_impl_k_thread_suspend+0x4c>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    d1ee:	7b63      	ldrb	r3, [r4, #13]
    d1f0:	f043 0310 	orr.w	r3, r3, #16
    d1f4:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    d1f6:	4b1c      	ldr	r3, [pc, #112]	; (d268 <z_impl_k_thread_suspend+0xec>)
    d1f8:	6898      	ldr	r0, [r3, #8]
    d1fa:	42a0      	cmp	r0, r4
    d1fc:	bf14      	ite	ne
    d1fe:	2000      	movne	r0, #0
    d200:	2001      	moveq	r0, #1
    d202:	f7ff fb51 	bl	c8a8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d206:	4812      	ldr	r0, [pc, #72]	; (d250 <z_impl_k_thread_suspend+0xd4>)
    d208:	f7fe f89c 	bl	b344 <z_spin_unlock_valid>
    d20c:	2800      	cmp	r0, #0
    d20e:	d1e3      	bne.n	d1d8 <z_impl_k_thread_suspend+0x5c>
    d210:	4d10      	ldr	r5, [pc, #64]	; (d254 <z_impl_k_thread_suspend+0xd8>)
    d212:	23b9      	movs	r3, #185	; 0xb9
    d214:	462a      	mov	r2, r5
    d216:	4915      	ldr	r1, [pc, #84]	; (d26c <z_impl_k_thread_suspend+0xf0>)
    d218:	4810      	ldr	r0, [pc, #64]	; (d25c <z_impl_k_thread_suspend+0xe0>)
    d21a:	f001 fdca 	bl	edb2 <assert_print>
    d21e:	490c      	ldr	r1, [pc, #48]	; (d250 <z_impl_k_thread_suspend+0xd4>)
    d220:	4813      	ldr	r0, [pc, #76]	; (d270 <z_impl_k_thread_suspend+0xf4>)
    d222:	f001 fdc6 	bl	edb2 <assert_print>
    d226:	21b9      	movs	r1, #185	; 0xb9
    d228:	4628      	mov	r0, r5
    d22a:	f001 fdbb 	bl	eda4 <assert_post_action>
    d22e:	e7d3      	b.n	d1d8 <z_impl_k_thread_suspend+0x5c>
	if (thread == _current) {
    d230:	4b0d      	ldr	r3, [pc, #52]	; (d268 <z_impl_k_thread_suspend+0xec>)
    d232:	689b      	ldr	r3, [r3, #8]
    d234:	42a3      	cmp	r3, r4
    d236:	d000      	beq.n	d23a <z_impl_k_thread_suspend+0xbe>
}
    d238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile(
    d23a:	f04f 0320 	mov.w	r3, #32
    d23e:	f3ef 8011 	mrs	r0, BASEPRI
    d242:	f383 8812 	msr	BASEPRI_MAX, r3
    d246:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    d24a:	f002 fda8 	bl	fd9e <z_reschedule_irqlock>
    d24e:	e7f3      	b.n	d238 <z_impl_k_thread_suspend+0xbc>
    d250:	200010d8 	.word	0x200010d8
    d254:	000105e8 	.word	0x000105e8
    d258:	00010648 	.word	0x00010648
    d25c:	00010450 	.word	0x00010450
    d260:	00010660 	.word	0x00010660
    d264:	200010b0 	.word	0x200010b0
    d268:	20001090 	.word	0x20001090
    d26c:	00010618 	.word	0x00010618
    d270:	00010630 	.word	0x00010630

0000d274 <k_sched_unlock>:
{
    d274:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
    d276:	2400      	movs	r4, #0
    d278:	f04f 0320 	mov.w	r3, #32
    d27c:	f3ef 8511 	mrs	r5, BASEPRI
    d280:	f383 8812 	msr	BASEPRI_MAX, r3
    d284:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d288:	4838      	ldr	r0, [pc, #224]	; (d36c <k_sched_unlock+0xf8>)
    d28a:	f7fe f84b 	bl	b324 <z_spin_lock_valid>
    d28e:	b118      	cbz	r0, d298 <k_sched_unlock+0x24>
	z_spin_lock_set_owner(l);
    d290:	4836      	ldr	r0, [pc, #216]	; (d36c <k_sched_unlock+0xf8>)
    d292:	f7fe f867 	bl	b364 <z_spin_lock_set_owner>
	return k;
    d296:	e036      	b.n	d306 <k_sched_unlock+0x92>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d298:	4e35      	ldr	r6, [pc, #212]	; (d370 <k_sched_unlock+0xfc>)
    d29a:	238e      	movs	r3, #142	; 0x8e
    d29c:	4632      	mov	r2, r6
    d29e:	4935      	ldr	r1, [pc, #212]	; (d374 <k_sched_unlock+0x100>)
    d2a0:	4835      	ldr	r0, [pc, #212]	; (d378 <k_sched_unlock+0x104>)
    d2a2:	f001 fd86 	bl	edb2 <assert_print>
    d2a6:	4931      	ldr	r1, [pc, #196]	; (d36c <k_sched_unlock+0xf8>)
    d2a8:	4834      	ldr	r0, [pc, #208]	; (d37c <k_sched_unlock+0x108>)
    d2aa:	f001 fd82 	bl	edb2 <assert_print>
    d2ae:	218e      	movs	r1, #142	; 0x8e
    d2b0:	4630      	mov	r0, r6
    d2b2:	f001 fd77 	bl	eda4 <assert_post_action>
    d2b6:	e7eb      	b.n	d290 <k_sched_unlock+0x1c>
		__ASSERT(_current->base.sched_locked != 0U, "");
    d2b8:	4c31      	ldr	r4, [pc, #196]	; (d380 <k_sched_unlock+0x10c>)
    d2ba:	f240 33d6 	movw	r3, #982	; 0x3d6
    d2be:	4622      	mov	r2, r4
    d2c0:	4930      	ldr	r1, [pc, #192]	; (d384 <k_sched_unlock+0x110>)
    d2c2:	482d      	ldr	r0, [pc, #180]	; (d378 <k_sched_unlock+0x104>)
    d2c4:	f001 fd75 	bl	edb2 <assert_print>
    d2c8:	482f      	ldr	r0, [pc, #188]	; (d388 <k_sched_unlock+0x114>)
    d2ca:	f001 fd72 	bl	edb2 <assert_print>
    d2ce:	f240 31d6 	movw	r1, #982	; 0x3d6
    d2d2:	4620      	mov	r0, r4
    d2d4:	f001 fd66 	bl	eda4 <assert_post_action>
    d2d8:	e01b      	b.n	d312 <k_sched_unlock+0x9e>
		__ASSERT(!arch_is_in_isr(), "");
    d2da:	4c29      	ldr	r4, [pc, #164]	; (d380 <k_sched_unlock+0x10c>)
    d2dc:	f240 33d7 	movw	r3, #983	; 0x3d7
    d2e0:	4622      	mov	r2, r4
    d2e2:	492a      	ldr	r1, [pc, #168]	; (d38c <k_sched_unlock+0x118>)
    d2e4:	4824      	ldr	r0, [pc, #144]	; (d378 <k_sched_unlock+0x104>)
    d2e6:	f001 fd64 	bl	edb2 <assert_print>
    d2ea:	4827      	ldr	r0, [pc, #156]	; (d388 <k_sched_unlock+0x114>)
    d2ec:	f001 fd61 	bl	edb2 <assert_print>
    d2f0:	f240 31d7 	movw	r1, #983	; 0x3d7
    d2f4:	4620      	mov	r0, r4
    d2f6:	f001 fd55 	bl	eda4 <assert_post_action>
    d2fa:	e00e      	b.n	d31a <k_sched_unlock+0xa6>
	__asm__ volatile(
    d2fc:	f385 8811 	msr	BASEPRI, r5
    d300:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    d304:	2401      	movs	r4, #1
    d306:	bb2c      	cbnz	r4, d354 <k_sched_unlock+0xe0>
		__ASSERT(_current->base.sched_locked != 0U, "");
    d308:	4b21      	ldr	r3, [pc, #132]	; (d390 <k_sched_unlock+0x11c>)
    d30a:	689b      	ldr	r3, [r3, #8]
    d30c:	7bdb      	ldrb	r3, [r3, #15]
    d30e:	2b00      	cmp	r3, #0
    d310:	d0d2      	beq.n	d2b8 <k_sched_unlock+0x44>
    d312:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    d316:	2b00      	cmp	r3, #0
    d318:	d1df      	bne.n	d2da <k_sched_unlock+0x66>
		++_current->base.sched_locked;
    d31a:	4b1d      	ldr	r3, [pc, #116]	; (d390 <k_sched_unlock+0x11c>)
    d31c:	689a      	ldr	r2, [r3, #8]
    d31e:	7bd3      	ldrb	r3, [r2, #15]
    d320:	3301      	adds	r3, #1
    d322:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    d324:	2000      	movs	r0, #0
    d326:	f7ff fabf 	bl	c8a8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d32a:	4810      	ldr	r0, [pc, #64]	; (d36c <k_sched_unlock+0xf8>)
    d32c:	f7fe f80a 	bl	b344 <z_spin_unlock_valid>
    d330:	2800      	cmp	r0, #0
    d332:	d1e3      	bne.n	d2fc <k_sched_unlock+0x88>
    d334:	4c0e      	ldr	r4, [pc, #56]	; (d370 <k_sched_unlock+0xfc>)
    d336:	23b9      	movs	r3, #185	; 0xb9
    d338:	4622      	mov	r2, r4
    d33a:	4916      	ldr	r1, [pc, #88]	; (d394 <k_sched_unlock+0x120>)
    d33c:	480e      	ldr	r0, [pc, #56]	; (d378 <k_sched_unlock+0x104>)
    d33e:	f001 fd38 	bl	edb2 <assert_print>
    d342:	490a      	ldr	r1, [pc, #40]	; (d36c <k_sched_unlock+0xf8>)
    d344:	4814      	ldr	r0, [pc, #80]	; (d398 <k_sched_unlock+0x124>)
    d346:	f001 fd34 	bl	edb2 <assert_print>
    d34a:	21b9      	movs	r1, #185	; 0xb9
    d34c:	4620      	mov	r0, r4
    d34e:	f001 fd29 	bl	eda4 <assert_post_action>
    d352:	e7d3      	b.n	d2fc <k_sched_unlock+0x88>
	__asm__ volatile(
    d354:	f04f 0320 	mov.w	r3, #32
    d358:	f3ef 8011 	mrs	r0, BASEPRI
    d35c:	f383 8812 	msr	BASEPRI_MAX, r3
    d360:	f3bf 8f6f 	isb	sy
    d364:	f002 fd1b 	bl	fd9e <z_reschedule_irqlock>
}
    d368:	bd70      	pop	{r4, r5, r6, pc}
    d36a:	bf00      	nop
    d36c:	200010d8 	.word	0x200010d8
    d370:	000105e8 	.word	0x000105e8
    d374:	00010648 	.word	0x00010648
    d378:	00010450 	.word	0x00010450
    d37c:	00010660 	.word	0x00010660
    d380:	0001283c 	.word	0x0001283c
    d384:	00012924 	.word	0x00012924
    d388:	00012784 	.word	0x00012784
    d38c:	000125f8 	.word	0x000125f8
    d390:	20001090 	.word	0x20001090
    d394:	00010618 	.word	0x00010618
    d398:	00010630 	.word	0x00010630

0000d39c <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
    d39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    d39e:	7b43      	ldrb	r3, [r0, #13]
    d3a0:	f013 0f08 	tst.w	r3, #8
    d3a4:	d145      	bne.n	d432 <end_thread+0x96>
    d3a6:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
    d3a8:	f043 0308 	orr.w	r3, r3, #8
    d3ac:	7343      	strb	r3, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
    d3ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    d3b2:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
    d3b4:	f013 0f80 	tst.w	r3, #128	; 0x80
    d3b8:	d12d      	bne.n	d416 <end_thread+0x7a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    d3ba:	68ab      	ldr	r3, [r5, #8]
    d3bc:	b15b      	cbz	r3, d3d6 <end_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    d3be:	4628      	mov	r0, r5
    d3c0:	f7ff f870 	bl	c4a4 <pended_on_thread>
    d3c4:	4629      	mov	r1, r5
    d3c6:	f7ff fa4b 	bl	c860 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    d3ca:	7b6b      	ldrb	r3, [r5, #13]
    d3cc:	f023 0302 	bic.w	r3, r3, #2
    d3d0:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    d3d2:	2300      	movs	r3, #0
    d3d4:	60ab      	str	r3, [r5, #8]
    d3d6:	f105 0018 	add.w	r0, r5, #24
    d3da:	f000 fd61 	bl	dea0 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    d3de:	f105 0758 	add.w	r7, r5, #88	; 0x58
	return list->head == list;
    d3e2:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d3e4:	42bc      	cmp	r4, r7
    d3e6:	d01e      	beq.n	d426 <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    d3e8:	b1ec      	cbz	r4, d426 <end_thread+0x8a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    d3ea:	4620      	mov	r0, r4
    d3ec:	f7ff f85a 	bl	c4a4 <pended_on_thread>
    d3f0:	4621      	mov	r1, r4
    d3f2:	f7ff fa35 	bl	c860 <z_priq_dumb_remove>
    d3f6:	7b63      	ldrb	r3, [r4, #13]
    d3f8:	f023 0302 	bic.w	r3, r3, #2
    d3fc:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    d3fe:	2600      	movs	r6, #0
    d400:	60a6      	str	r6, [r4, #8]
    d402:	f104 0018 	add.w	r0, r4, #24
    d406:	f000 fd4b 	bl	dea0 <z_abort_timeout>
    d40a:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
    d40e:	4620      	mov	r0, r4
    d410:	f7ff fba4 	bl	cb5c <ready_thread>
    d414:	e7e5      	b.n	d3e2 <end_thread+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    d416:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    d41a:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    d41c:	4601      	mov	r1, r0
    d41e:	4805      	ldr	r0, [pc, #20]	; (d434 <end_thread+0x98>)
    d420:	f7ff fa1e 	bl	c860 <z_priq_dumb_remove>
}
    d424:	e7c9      	b.n	d3ba <end_thread+0x1e>
		update_cache(1);
    d426:	2001      	movs	r0, #1
    d428:	f7ff fa3e 	bl	c8a8 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    d42c:	4628      	mov	r0, r5
    d42e:	f7fd ffa1 	bl	b374 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    d432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d434:	200010b0 	.word	0x200010b0

0000d438 <z_unpend1_no_timeout>:
{
    d438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d43a:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    d43c:	2500      	movs	r5, #0
    d43e:	f04f 0320 	mov.w	r3, #32
    d442:	f3ef 8711 	mrs	r7, BASEPRI
    d446:	f383 8812 	msr	BASEPRI_MAX, r3
    d44a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d44e:	4823      	ldr	r0, [pc, #140]	; (d4dc <z_unpend1_no_timeout+0xa4>)
    d450:	f7fd ff68 	bl	b324 <z_spin_lock_valid>
    d454:	b120      	cbz	r0, d460 <z_unpend1_no_timeout+0x28>
	z_spin_lock_set_owner(l);
    d456:	4821      	ldr	r0, [pc, #132]	; (d4dc <z_unpend1_no_timeout+0xa4>)
    d458:	f7fd ff84 	bl	b364 <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;
    d45c:	2400      	movs	r4, #0
	return k;
    d45e:	e018      	b.n	d492 <z_unpend1_no_timeout+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d460:	4c1f      	ldr	r4, [pc, #124]	; (d4e0 <z_unpend1_no_timeout+0xa8>)
    d462:	238e      	movs	r3, #142	; 0x8e
    d464:	4622      	mov	r2, r4
    d466:	491f      	ldr	r1, [pc, #124]	; (d4e4 <z_unpend1_no_timeout+0xac>)
    d468:	481f      	ldr	r0, [pc, #124]	; (d4e8 <z_unpend1_no_timeout+0xb0>)
    d46a:	f001 fca2 	bl	edb2 <assert_print>
    d46e:	491b      	ldr	r1, [pc, #108]	; (d4dc <z_unpend1_no_timeout+0xa4>)
    d470:	481e      	ldr	r0, [pc, #120]	; (d4ec <z_unpend1_no_timeout+0xb4>)
    d472:	f001 fc9e 	bl	edb2 <assert_print>
    d476:	218e      	movs	r1, #142	; 0x8e
    d478:	4620      	mov	r0, r4
    d47a:	f001 fc93 	bl	eda4 <assert_post_action>
    d47e:	e7ea      	b.n	d456 <z_unpend1_no_timeout+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d480:	4816      	ldr	r0, [pc, #88]	; (d4dc <z_unpend1_no_timeout+0xa4>)
    d482:	f7fd ff5f 	bl	b344 <z_spin_unlock_valid>
    d486:	b1b8      	cbz	r0, d4b8 <z_unpend1_no_timeout+0x80>
	__asm__ volatile(
    d488:	f387 8811 	msr	BASEPRI, r7
    d48c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    d490:	2501      	movs	r5, #1
    d492:	bb0d      	cbnz	r5, d4d8 <z_unpend1_no_timeout+0xa0>
		thread = _priq_wait_best(&wait_q->waitq);
    d494:	4630      	mov	r0, r6
    d496:	f002 fc97 	bl	fdc8 <z_priq_dumb_best>
		if (thread != NULL) {
    d49a:	4604      	mov	r4, r0
    d49c:	2800      	cmp	r0, #0
    d49e:	d0ef      	beq.n	d480 <z_unpend1_no_timeout+0x48>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    d4a0:	f7ff f800 	bl	c4a4 <pended_on_thread>
    d4a4:	4621      	mov	r1, r4
    d4a6:	f7ff f9db 	bl	c860 <z_priq_dumb_remove>
    d4aa:	7b63      	ldrb	r3, [r4, #13]
    d4ac:	f023 0302 	bic.w	r3, r3, #2
    d4b0:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    d4b2:	2300      	movs	r3, #0
    d4b4:	60a3      	str	r3, [r4, #8]
}
    d4b6:	e7e3      	b.n	d480 <z_unpend1_no_timeout+0x48>
    d4b8:	4d09      	ldr	r5, [pc, #36]	; (d4e0 <z_unpend1_no_timeout+0xa8>)
    d4ba:	23b9      	movs	r3, #185	; 0xb9
    d4bc:	462a      	mov	r2, r5
    d4be:	490c      	ldr	r1, [pc, #48]	; (d4f0 <z_unpend1_no_timeout+0xb8>)
    d4c0:	4809      	ldr	r0, [pc, #36]	; (d4e8 <z_unpend1_no_timeout+0xb0>)
    d4c2:	f001 fc76 	bl	edb2 <assert_print>
    d4c6:	4905      	ldr	r1, [pc, #20]	; (d4dc <z_unpend1_no_timeout+0xa4>)
    d4c8:	480a      	ldr	r0, [pc, #40]	; (d4f4 <z_unpend1_no_timeout+0xbc>)
    d4ca:	f001 fc72 	bl	edb2 <assert_print>
    d4ce:	21b9      	movs	r1, #185	; 0xb9
    d4d0:	4628      	mov	r0, r5
    d4d2:	f001 fc67 	bl	eda4 <assert_post_action>
    d4d6:	e7d7      	b.n	d488 <z_unpend1_no_timeout+0x50>
}
    d4d8:	4620      	mov	r0, r4
    d4da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d4dc:	200010d8 	.word	0x200010d8
    d4e0:	000105e8 	.word	0x000105e8
    d4e4:	00010648 	.word	0x00010648
    d4e8:	00010450 	.word	0x00010450
    d4ec:	00010660 	.word	0x00010660
    d4f0:	00010618 	.word	0x00010618
    d4f4:	00010630 	.word	0x00010630

0000d4f8 <z_unpend_first_thread>:
{
    d4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d4fa:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    d4fc:	2500      	movs	r5, #0
	__asm__ volatile(
    d4fe:	f04f 0320 	mov.w	r3, #32
    d502:	f3ef 8711 	mrs	r7, BASEPRI
    d506:	f383 8812 	msr	BASEPRI_MAX, r3
    d50a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d50e:	4825      	ldr	r0, [pc, #148]	; (d5a4 <z_unpend_first_thread+0xac>)
    d510:	f7fd ff08 	bl	b324 <z_spin_lock_valid>
    d514:	b120      	cbz	r0, d520 <z_unpend_first_thread+0x28>
	z_spin_lock_set_owner(l);
    d516:	4823      	ldr	r0, [pc, #140]	; (d5a4 <z_unpend_first_thread+0xac>)
    d518:	f7fd ff24 	bl	b364 <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;
    d51c:	2400      	movs	r4, #0
	return k;
    d51e:	e018      	b.n	d552 <z_unpend_first_thread+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d520:	4c21      	ldr	r4, [pc, #132]	; (d5a8 <z_unpend_first_thread+0xb0>)
    d522:	238e      	movs	r3, #142	; 0x8e
    d524:	4622      	mov	r2, r4
    d526:	4921      	ldr	r1, [pc, #132]	; (d5ac <z_unpend_first_thread+0xb4>)
    d528:	4821      	ldr	r0, [pc, #132]	; (d5b0 <z_unpend_first_thread+0xb8>)
    d52a:	f001 fc42 	bl	edb2 <assert_print>
    d52e:	491d      	ldr	r1, [pc, #116]	; (d5a4 <z_unpend_first_thread+0xac>)
    d530:	4820      	ldr	r0, [pc, #128]	; (d5b4 <z_unpend_first_thread+0xbc>)
    d532:	f001 fc3e 	bl	edb2 <assert_print>
    d536:	218e      	movs	r1, #142	; 0x8e
    d538:	4620      	mov	r0, r4
    d53a:	f001 fc33 	bl	eda4 <assert_post_action>
    d53e:	e7ea      	b.n	d516 <z_unpend_first_thread+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d540:	4818      	ldr	r0, [pc, #96]	; (d5a4 <z_unpend_first_thread+0xac>)
    d542:	f7fd feff 	bl	b344 <z_spin_unlock_valid>
    d546:	b1d8      	cbz	r0, d580 <z_unpend_first_thread+0x88>
	__asm__ volatile(
    d548:	f387 8811 	msr	BASEPRI, r7
    d54c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    d550:	2501      	movs	r5, #1
    d552:	bb2d      	cbnz	r5, d5a0 <z_unpend_first_thread+0xa8>
		thread = _priq_wait_best(&wait_q->waitq);
    d554:	4630      	mov	r0, r6
    d556:	f002 fc37 	bl	fdc8 <z_priq_dumb_best>
		if (thread != NULL) {
    d55a:	4604      	mov	r4, r0
    d55c:	2800      	cmp	r0, #0
    d55e:	d0ef      	beq.n	d540 <z_unpend_first_thread+0x48>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    d560:	f7fe ffa0 	bl	c4a4 <pended_on_thread>
    d564:	4621      	mov	r1, r4
    d566:	f7ff f97b 	bl	c860 <z_priq_dumb_remove>
    d56a:	7b63      	ldrb	r3, [r4, #13]
    d56c:	f023 0302 	bic.w	r3, r3, #2
    d570:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    d572:	2300      	movs	r3, #0
    d574:	60a3      	str	r3, [r4, #8]
    d576:	f104 0018 	add.w	r0, r4, #24
    d57a:	f000 fc91 	bl	dea0 <z_abort_timeout>
    d57e:	e7df      	b.n	d540 <z_unpend_first_thread+0x48>
    d580:	4d09      	ldr	r5, [pc, #36]	; (d5a8 <z_unpend_first_thread+0xb0>)
    d582:	23b9      	movs	r3, #185	; 0xb9
    d584:	462a      	mov	r2, r5
    d586:	490c      	ldr	r1, [pc, #48]	; (d5b8 <z_unpend_first_thread+0xc0>)
    d588:	4809      	ldr	r0, [pc, #36]	; (d5b0 <z_unpend_first_thread+0xb8>)
    d58a:	f001 fc12 	bl	edb2 <assert_print>
    d58e:	4905      	ldr	r1, [pc, #20]	; (d5a4 <z_unpend_first_thread+0xac>)
    d590:	480a      	ldr	r0, [pc, #40]	; (d5bc <z_unpend_first_thread+0xc4>)
    d592:	f001 fc0e 	bl	edb2 <assert_print>
    d596:	21b9      	movs	r1, #185	; 0xb9
    d598:	4628      	mov	r0, r5
    d59a:	f001 fc03 	bl	eda4 <assert_post_action>
    d59e:	e7d3      	b.n	d548 <z_unpend_first_thread+0x50>
}
    d5a0:	4620      	mov	r0, r4
    d5a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d5a4:	200010d8 	.word	0x200010d8
    d5a8:	000105e8 	.word	0x000105e8
    d5ac:	00010648 	.word	0x00010648
    d5b0:	00010450 	.word	0x00010450
    d5b4:	00010660 	.word	0x00010660
    d5b8:	00010618 	.word	0x00010618
    d5bc:	00010630 	.word	0x00010630

0000d5c0 <z_sched_init>:
{
    d5c0:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    d5c2:	4804      	ldr	r0, [pc, #16]	; (d5d4 <z_sched_init+0x14>)
    d5c4:	f002 fc07 	bl	fdd6 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    d5c8:	2100      	movs	r1, #0
    d5ca:	4608      	mov	r0, r1
    d5cc:	f7fe ffa8 	bl	c520 <k_sched_time_slice_set>
}
    d5d0:	bd08      	pop	{r3, pc}
    d5d2:	bf00      	nop
    d5d4:	200010ac 	.word	0x200010ac

0000d5d8 <z_impl_k_yield>:
{
    d5d8:	b570      	push	{r4, r5, r6, lr}
    d5da:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    d5de:	2b00      	cmp	r3, #0
    d5e0:	d149      	bne.n	d676 <z_impl_k_yield+0x9e>
	__asm__ volatile(
    d5e2:	f04f 0320 	mov.w	r3, #32
    d5e6:	f3ef 8611 	mrs	r6, BASEPRI
    d5ea:	f383 8812 	msr	BASEPRI_MAX, r3
    d5ee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d5f2:	4843      	ldr	r0, [pc, #268]	; (d700 <z_impl_k_yield+0x128>)
    d5f4:	f7fd fe96 	bl	b324 <z_spin_lock_valid>
    d5f8:	2800      	cmp	r0, #0
    d5fa:	d04d      	beq.n	d698 <z_impl_k_yield+0xc0>
	z_spin_lock_set_owner(l);
    d5fc:	4840      	ldr	r0, [pc, #256]	; (d700 <z_impl_k_yield+0x128>)
    d5fe:	f7fd feb1 	bl	b364 <z_spin_lock_set_owner>
		dequeue_thread(_current);
    d602:	4c40      	ldr	r4, [pc, #256]	; (d704 <z_impl_k_yield+0x12c>)
    d604:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    d606:	7b4b      	ldrb	r3, [r1, #13]
    d608:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    d60c:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    d60e:	f104 0020 	add.w	r0, r4, #32
    d612:	f7ff f925 	bl	c860 <z_priq_dumb_remove>
	queue_thread(_current);
    d616:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    d618:	7b6b      	ldrb	r3, [r5, #13]
    d61a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    d61e:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    d620:	4b39      	ldr	r3, [pc, #228]	; (d708 <z_impl_k_yield+0x130>)
    d622:	429d      	cmp	r5, r3
    d624:	d048      	beq.n	d6b8 <z_impl_k_yield+0xe0>
	return list->head == list;
    d626:	4b37      	ldr	r3, [pc, #220]	; (d704 <z_impl_k_yield+0x12c>)
    d628:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d62c:	429c      	cmp	r4, r3
    d62e:	d055      	beq.n	d6dc <z_impl_k_yield+0x104>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    d630:	b16c      	cbz	r4, d64e <z_impl_k_yield+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
    d632:	4621      	mov	r1, r4
    d634:	4628      	mov	r0, r5
    d636:	f002 fba8 	bl	fd8a <z_sched_prio_cmp>
    d63a:	2800      	cmp	r0, #0
    d63c:	dc48      	bgt.n	d6d0 <z_impl_k_yield+0xf8>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    d63e:	b134      	cbz	r4, d64e <z_impl_k_yield+0x76>
	return (node == list->tail) ? NULL : node->next;
    d640:	4b30      	ldr	r3, [pc, #192]	; (d704 <z_impl_k_yield+0x12c>)
    d642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d644:	429c      	cmp	r4, r3
    d646:	d002      	beq.n	d64e <z_impl_k_yield+0x76>
    d648:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    d64a:	2c00      	cmp	r4, #0
    d64c:	d1f0      	bne.n	d630 <z_impl_k_yield+0x58>
	sys_dnode_t *const tail = list->tail;
    d64e:	4b2d      	ldr	r3, [pc, #180]	; (d704 <z_impl_k_yield+0x12c>)
    d650:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    d652:	f103 0120 	add.w	r1, r3, #32
    d656:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    d658:	606a      	str	r2, [r5, #4]
	tail->next = node;
    d65a:	6015      	str	r5, [r2, #0]
	list->tail = node;
    d65c:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    d65e:	2001      	movs	r0, #1
    d660:	f7ff f922 	bl	c8a8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d664:	4826      	ldr	r0, [pc, #152]	; (d700 <z_impl_k_yield+0x128>)
    d666:	f7fd fe6d 	bl	b344 <z_spin_unlock_valid>
    d66a:	2800      	cmp	r0, #0
    d66c:	d038      	beq.n	d6e0 <z_impl_k_yield+0x108>
    d66e:	4630      	mov	r0, r6
    d670:	f7f6 fe60 	bl	4334 <arch_swap>
}
    d674:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "");
    d676:	4c25      	ldr	r4, [pc, #148]	; (d70c <z_impl_k_yield+0x134>)
    d678:	f240 535d 	movw	r3, #1373	; 0x55d
    d67c:	4622      	mov	r2, r4
    d67e:	4924      	ldr	r1, [pc, #144]	; (d710 <z_impl_k_yield+0x138>)
    d680:	4824      	ldr	r0, [pc, #144]	; (d714 <z_impl_k_yield+0x13c>)
    d682:	f001 fb96 	bl	edb2 <assert_print>
    d686:	4824      	ldr	r0, [pc, #144]	; (d718 <z_impl_k_yield+0x140>)
    d688:	f001 fb93 	bl	edb2 <assert_print>
    d68c:	f240 515d 	movw	r1, #1373	; 0x55d
    d690:	4620      	mov	r0, r4
    d692:	f001 fb87 	bl	eda4 <assert_post_action>
    d696:	e7a4      	b.n	d5e2 <z_impl_k_yield+0xa>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d698:	4c20      	ldr	r4, [pc, #128]	; (d71c <z_impl_k_yield+0x144>)
    d69a:	238e      	movs	r3, #142	; 0x8e
    d69c:	4622      	mov	r2, r4
    d69e:	4920      	ldr	r1, [pc, #128]	; (d720 <z_impl_k_yield+0x148>)
    d6a0:	481c      	ldr	r0, [pc, #112]	; (d714 <z_impl_k_yield+0x13c>)
    d6a2:	f001 fb86 	bl	edb2 <assert_print>
    d6a6:	4916      	ldr	r1, [pc, #88]	; (d700 <z_impl_k_yield+0x128>)
    d6a8:	481e      	ldr	r0, [pc, #120]	; (d724 <z_impl_k_yield+0x14c>)
    d6aa:	f001 fb82 	bl	edb2 <assert_print>
    d6ae:	218e      	movs	r1, #142	; 0x8e
    d6b0:	4620      	mov	r0, r4
    d6b2:	f001 fb77 	bl	eda4 <assert_post_action>
    d6b6:	e7a1      	b.n	d5fc <z_impl_k_yield+0x24>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    d6b8:	4c14      	ldr	r4, [pc, #80]	; (d70c <z_impl_k_yield+0x134>)
    d6ba:	23ba      	movs	r3, #186	; 0xba
    d6bc:	4622      	mov	r2, r4
    d6be:	491a      	ldr	r1, [pc, #104]	; (d728 <z_impl_k_yield+0x150>)
    d6c0:	4814      	ldr	r0, [pc, #80]	; (d714 <z_impl_k_yield+0x13c>)
    d6c2:	f001 fb76 	bl	edb2 <assert_print>
    d6c6:	21ba      	movs	r1, #186	; 0xba
    d6c8:	4620      	mov	r0, r4
    d6ca:	f001 fb6b 	bl	eda4 <assert_post_action>
    d6ce:	e7aa      	b.n	d626 <z_impl_k_yield+0x4e>
	sys_dnode_t *const prev = successor->prev;
    d6d0:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    d6d2:	606b      	str	r3, [r5, #4]
	node->next = successor;
    d6d4:	602c      	str	r4, [r5, #0]
	prev->next = node;
    d6d6:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    d6d8:	6065      	str	r5, [r4, #4]
}
    d6da:	e7c0      	b.n	d65e <z_impl_k_yield+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    d6dc:	2400      	movs	r4, #0
    d6de:	e7a7      	b.n	d630 <z_impl_k_yield+0x58>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d6e0:	4c0e      	ldr	r4, [pc, #56]	; (d71c <z_impl_k_yield+0x144>)
    d6e2:	23d0      	movs	r3, #208	; 0xd0
    d6e4:	4622      	mov	r2, r4
    d6e6:	4911      	ldr	r1, [pc, #68]	; (d72c <z_impl_k_yield+0x154>)
    d6e8:	480a      	ldr	r0, [pc, #40]	; (d714 <z_impl_k_yield+0x13c>)
    d6ea:	f001 fb62 	bl	edb2 <assert_print>
    d6ee:	4904      	ldr	r1, [pc, #16]	; (d700 <z_impl_k_yield+0x128>)
    d6f0:	480f      	ldr	r0, [pc, #60]	; (d730 <z_impl_k_yield+0x158>)
    d6f2:	f001 fb5e 	bl	edb2 <assert_print>
    d6f6:	21d0      	movs	r1, #208	; 0xd0
    d6f8:	4620      	mov	r0, r4
    d6fa:	f001 fb53 	bl	eda4 <assert_post_action>
    d6fe:	e7b6      	b.n	d66e <z_impl_k_yield+0x96>
    d700:	200010d8 	.word	0x200010d8
    d704:	20001090 	.word	0x20001090
    d708:	20000740 	.word	0x20000740
    d70c:	0001283c 	.word	0x0001283c
    d710:	000125f8 	.word	0x000125f8
    d714:	00010450 	.word	0x00010450
    d718:	00012784 	.word	0x00012784
    d71c:	000105e8 	.word	0x000105e8
    d720:	00010648 	.word	0x00010648
    d724:	00010660 	.word	0x00010660
    d728:	000128d8 	.word	0x000128d8
    d72c:	00010618 	.word	0x00010618
    d730:	00010630 	.word	0x00010630

0000d734 <z_tick_sleep>:
{
    d734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d738:	4604      	mov	r4, r0
    d73a:	460e      	mov	r6, r1
    d73c:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    d740:	2b00      	cmp	r3, #0
    d742:	d14e      	bne.n	d7e2 <z_tick_sleep+0xae>
	if (ticks == 0) {
    d744:	ea54 0306 	orrs.w	r3, r4, r6
    d748:	d05c      	beq.n	d804 <z_tick_sleep+0xd0>
	if (Z_TICK_ABS(ticks) <= 0) {
    d74a:	f06f 0301 	mvn.w	r3, #1
    d74e:	1b1b      	subs	r3, r3, r4
    d750:	f04f 32ff 	mov.w	r2, #4294967295
    d754:	eb62 0206 	sbc.w	r2, r2, r6
    d758:	2b01      	cmp	r3, #1
    d75a:	f172 0300 	sbcs.w	r3, r2, #0
    d75e:	db55      	blt.n	d80c <z_tick_sleep+0xd8>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    d760:	f06f 0501 	mvn.w	r5, #1
    d764:	1b2d      	subs	r5, r5, r4
    d766:	f04f 0320 	mov.w	r3, #32
    d76a:	f3ef 8911 	mrs	r9, BASEPRI
    d76e:	f383 8812 	msr	BASEPRI_MAX, r3
    d772:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d776:	4840      	ldr	r0, [pc, #256]	; (d878 <z_tick_sleep+0x144>)
    d778:	f7fd fdd4 	bl	b324 <z_spin_lock_valid>
    d77c:	2800      	cmp	r0, #0
    d77e:	d049      	beq.n	d814 <z_tick_sleep+0xe0>
	z_spin_lock_set_owner(l);
    d780:	f8df 80f4 	ldr.w	r8, [pc, #244]	; d878 <z_tick_sleep+0x144>
    d784:	4640      	mov	r0, r8
    d786:	f7fd fded 	bl	b364 <z_spin_lock_set_owner>
	pending_current = _current;
    d78a:	4f3c      	ldr	r7, [pc, #240]	; (d87c <z_tick_sleep+0x148>)
    d78c:	68b8      	ldr	r0, [r7, #8]
    d78e:	4b3c      	ldr	r3, [pc, #240]	; (d880 <z_tick_sleep+0x14c>)
    d790:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    d792:	f7ff fb5b 	bl	ce4c <unready_thread>
	z_add_thread_timeout(_current, timeout);
    d796:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    d798:	4622      	mov	r2, r4
    d79a:	4633      	mov	r3, r6
    d79c:	4939      	ldr	r1, [pc, #228]	; (d884 <z_tick_sleep+0x150>)
    d79e:	3018      	adds	r0, #24
    d7a0:	f000 fa9a 	bl	dcd8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    d7a4:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    d7a6:	7b53      	ldrb	r3, [r2, #13]
    d7a8:	f043 0310 	orr.w	r3, r3, #16
    d7ac:	7353      	strb	r3, [r2, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d7ae:	4640      	mov	r0, r8
    d7b0:	f7fd fdc8 	bl	b344 <z_spin_unlock_valid>
    d7b4:	2800      	cmp	r0, #0
    d7b6:	d03d      	beq.n	d834 <z_tick_sleep+0x100>
    d7b8:	4648      	mov	r0, r9
    d7ba:	f7f6 fdbb 	bl	4334 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    d7be:	4b2f      	ldr	r3, [pc, #188]	; (d87c <z_tick_sleep+0x148>)
    d7c0:	689b      	ldr	r3, [r3, #8]
	return (thread->base.thread_state & state) != 0U;
    d7c2:	7b5b      	ldrb	r3, [r3, #13]
    d7c4:	f013 0f10 	tst.w	r3, #16
    d7c8:	d144      	bne.n	d854 <z_tick_sleep+0x120>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    d7ca:	f002 fb1f 	bl	fe0c <sys_clock_tick_get_32>
    d7ce:	1a28      	subs	r0, r5, r0
    d7d0:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    d7d4:	2801      	cmp	r0, #1
    d7d6:	f173 0300 	sbcs.w	r3, r3, #0
    d7da:	da00      	bge.n	d7de <z_tick_sleep+0xaa>
	return 0;
    d7dc:	2000      	movs	r0, #0
}
    d7de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "");
    d7e2:	4d29      	ldr	r5, [pc, #164]	; (d888 <z_tick_sleep+0x154>)
    d7e4:	f240 5379 	movw	r3, #1401	; 0x579
    d7e8:	462a      	mov	r2, r5
    d7ea:	4928      	ldr	r1, [pc, #160]	; (d88c <z_tick_sleep+0x158>)
    d7ec:	4828      	ldr	r0, [pc, #160]	; (d890 <z_tick_sleep+0x15c>)
    d7ee:	f001 fae0 	bl	edb2 <assert_print>
    d7f2:	4828      	ldr	r0, [pc, #160]	; (d894 <z_tick_sleep+0x160>)
    d7f4:	f001 fadd 	bl	edb2 <assert_print>
    d7f8:	f240 5179 	movw	r1, #1401	; 0x579
    d7fc:	4628      	mov	r0, r5
    d7fe:	f001 fad1 	bl	eda4 <assert_post_action>
    d802:	e79f      	b.n	d744 <z_tick_sleep+0x10>
	z_impl_k_yield();
    d804:	f7ff fee8 	bl	d5d8 <z_impl_k_yield>
		return 0;
    d808:	2000      	movs	r0, #0
    d80a:	e7e8      	b.n	d7de <z_tick_sleep+0xaa>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    d80c:	f002 fafe 	bl	fe0c <sys_clock_tick_get_32>
    d810:	1905      	adds	r5, r0, r4
    d812:	e7a8      	b.n	d766 <z_tick_sleep+0x32>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d814:	4f20      	ldr	r7, [pc, #128]	; (d898 <z_tick_sleep+0x164>)
    d816:	238e      	movs	r3, #142	; 0x8e
    d818:	463a      	mov	r2, r7
    d81a:	4920      	ldr	r1, [pc, #128]	; (d89c <z_tick_sleep+0x168>)
    d81c:	481c      	ldr	r0, [pc, #112]	; (d890 <z_tick_sleep+0x15c>)
    d81e:	f001 fac8 	bl	edb2 <assert_print>
    d822:	4915      	ldr	r1, [pc, #84]	; (d878 <z_tick_sleep+0x144>)
    d824:	481e      	ldr	r0, [pc, #120]	; (d8a0 <z_tick_sleep+0x16c>)
    d826:	f001 fac4 	bl	edb2 <assert_print>
    d82a:	218e      	movs	r1, #142	; 0x8e
    d82c:	4638      	mov	r0, r7
    d82e:	f001 fab9 	bl	eda4 <assert_post_action>
    d832:	e7a5      	b.n	d780 <z_tick_sleep+0x4c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d834:	4c18      	ldr	r4, [pc, #96]	; (d898 <z_tick_sleep+0x164>)
    d836:	23d0      	movs	r3, #208	; 0xd0
    d838:	4622      	mov	r2, r4
    d83a:	491a      	ldr	r1, [pc, #104]	; (d8a4 <z_tick_sleep+0x170>)
    d83c:	4814      	ldr	r0, [pc, #80]	; (d890 <z_tick_sleep+0x15c>)
    d83e:	f001 fab8 	bl	edb2 <assert_print>
    d842:	4641      	mov	r1, r8
    d844:	4818      	ldr	r0, [pc, #96]	; (d8a8 <z_tick_sleep+0x174>)
    d846:	f001 fab4 	bl	edb2 <assert_print>
    d84a:	21d0      	movs	r1, #208	; 0xd0
    d84c:	4620      	mov	r0, r4
    d84e:	f001 faa9 	bl	eda4 <assert_post_action>
    d852:	e7b1      	b.n	d7b8 <z_tick_sleep+0x84>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    d854:	4c0c      	ldr	r4, [pc, #48]	; (d888 <z_tick_sleep+0x154>)
    d856:	f240 539a 	movw	r3, #1434	; 0x59a
    d85a:	4622      	mov	r2, r4
    d85c:	4913      	ldr	r1, [pc, #76]	; (d8ac <z_tick_sleep+0x178>)
    d85e:	480c      	ldr	r0, [pc, #48]	; (d890 <z_tick_sleep+0x15c>)
    d860:	f001 faa7 	bl	edb2 <assert_print>
    d864:	480b      	ldr	r0, [pc, #44]	; (d894 <z_tick_sleep+0x160>)
    d866:	f001 faa4 	bl	edb2 <assert_print>
    d86a:	f240 519a 	movw	r1, #1434	; 0x59a
    d86e:	4620      	mov	r0, r4
    d870:	f001 fa98 	bl	eda4 <assert_post_action>
    d874:	e7a9      	b.n	d7ca <z_tick_sleep+0x96>
    d876:	bf00      	nop
    d878:	200010d8 	.word	0x200010d8
    d87c:	20001090 	.word	0x20001090
    d880:	200010d4 	.word	0x200010d4
    d884:	0000cd65 	.word	0x0000cd65
    d888:	0001283c 	.word	0x0001283c
    d88c:	000125f8 	.word	0x000125f8
    d890:	00010450 	.word	0x00010450
    d894:	00012784 	.word	0x00012784
    d898:	000105e8 	.word	0x000105e8
    d89c:	00010648 	.word	0x00010648
    d8a0:	00010660 	.word	0x00010660
    d8a4:	00010618 	.word	0x00010618
    d8a8:	00010630 	.word	0x00010630
    d8ac:	00012958 	.word	0x00012958

0000d8b0 <z_impl_k_sleep>:
{
    d8b0:	b570      	push	{r4, r5, r6, lr}
    d8b2:	4605      	mov	r5, r0
    d8b4:	460c      	mov	r4, r1
    d8b6:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    d8ba:	bb13      	cbnz	r3, d902 <z_impl_k_sleep+0x52>
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    d8bc:	f1b4 3fff 	cmp.w	r4, #4294967295
    d8c0:	bf08      	it	eq
    d8c2:	f1b5 3fff 	cmpeq.w	r5, #4294967295
    d8c6:	d02d      	beq.n	d924 <z_impl_k_sleep+0x74>
	ticks = z_tick_sleep(ticks);
    d8c8:	4628      	mov	r0, r5
    d8ca:	4621      	mov	r1, r4
    d8cc:	f7ff ff32 	bl	d734 <z_tick_sleep>
    d8d0:	4684      	mov	ip, r0
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    d8d2:	17c2      	asrs	r2, r0, #31
			return ((t * to_hz + off) / from_hz);
    d8d4:	0151      	lsls	r1, r2, #5
    d8d6:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
    d8da:	0143      	lsls	r3, r0, #5
    d8dc:	1a1b      	subs	r3, r3, r0
    d8de:	eb61 0102 	sbc.w	r1, r1, r2
    d8e2:	0088      	lsls	r0, r1, #2
    d8e4:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
    d8e8:	009b      	lsls	r3, r3, #2
    d8ea:	eb13 030c 	adds.w	r3, r3, ip
    d8ee:	eb42 0000 	adc.w	r0, r2, r0
    d8f2:	00c0      	lsls	r0, r0, #3
    d8f4:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
    d8f8:	f3c3 3310 	ubfx	r3, r3, #12, #17
    d8fc:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
}
    d900:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "");
    d902:	4e0c      	ldr	r6, [pc, #48]	; (d934 <z_impl_k_sleep+0x84>)
    d904:	f240 53a9 	movw	r3, #1449	; 0x5a9
    d908:	4632      	mov	r2, r6
    d90a:	490b      	ldr	r1, [pc, #44]	; (d938 <z_impl_k_sleep+0x88>)
    d90c:	480b      	ldr	r0, [pc, #44]	; (d93c <z_impl_k_sleep+0x8c>)
    d90e:	f001 fa50 	bl	edb2 <assert_print>
    d912:	480b      	ldr	r0, [pc, #44]	; (d940 <z_impl_k_sleep+0x90>)
    d914:	f001 fa4d 	bl	edb2 <assert_print>
    d918:	f240 51a9 	movw	r1, #1449	; 0x5a9
    d91c:	4630      	mov	r0, r6
    d91e:	f001 fa41 	bl	eda4 <assert_post_action>
    d922:	e7cb      	b.n	d8bc <z_impl_k_sleep+0xc>
		k_thread_suspend(_current);
    d924:	4b07      	ldr	r3, [pc, #28]	; (d944 <z_impl_k_sleep+0x94>)
    d926:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    d928:	f7ff fc28 	bl	d17c <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    d92c:	f04f 30ff 	mov.w	r0, #4294967295
    d930:	e7e6      	b.n	d900 <z_impl_k_sleep+0x50>
    d932:	bf00      	nop
    d934:	0001283c 	.word	0x0001283c
    d938:	000125f8 	.word	0x000125f8
    d93c:	00010450 	.word	0x00010450
    d940:	00012784 	.word	0x00012784
    d944:	20001090 	.word	0x20001090

0000d948 <z_impl_z_current_get>:
}
    d948:	4b01      	ldr	r3, [pc, #4]	; (d950 <z_impl_z_current_get+0x8>)
    d94a:	6898      	ldr	r0, [r3, #8]
    d94c:	4770      	bx	lr
    d94e:	bf00      	nop
    d950:	20001090 	.word	0x20001090

0000d954 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    d954:	b570      	push	{r4, r5, r6, lr}
    d956:	4604      	mov	r4, r0
    d958:	f04f 0320 	mov.w	r3, #32
    d95c:	f3ef 8511 	mrs	r5, BASEPRI
    d960:	f383 8812 	msr	BASEPRI_MAX, r3
    d964:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d968:	485a      	ldr	r0, [pc, #360]	; (dad4 <z_thread_abort+0x180>)
    d96a:	f7fd fcdb 	bl	b324 <z_spin_lock_valid>
    d96e:	b1e0      	cbz	r0, d9aa <z_thread_abort+0x56>
	z_spin_lock_set_owner(l);
    d970:	4858      	ldr	r0, [pc, #352]	; (dad4 <z_thread_abort+0x180>)
    d972:	f7fd fcf7 	bl	b364 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    d976:	7b23      	ldrb	r3, [r4, #12]
    d978:	f013 0f01 	tst.w	r3, #1
    d97c:	d125      	bne.n	d9ca <z_thread_abort+0x76>
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
		return;
	}

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    d97e:	7b63      	ldrb	r3, [r4, #13]
    d980:	f013 0f08 	tst.w	r3, #8
    d984:	d151      	bne.n	da2a <z_thread_abort+0xd6>
			z_swap(&sched_spinlock, key);
		}
		return; /* lock has been released */
	}
#endif
	end_thread(thread);
    d986:	4620      	mov	r0, r4
    d988:	f7ff fd08 	bl	d39c <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    d98c:	4b52      	ldr	r3, [pc, #328]	; (dad8 <z_thread_abort+0x184>)
    d98e:	689b      	ldr	r3, [r3, #8]
    d990:	42a3      	cmp	r3, r4
    d992:	d063      	beq.n	da5c <z_thread_abort+0x108>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d994:	484f      	ldr	r0, [pc, #316]	; (dad4 <z_thread_abort+0x180>)
    d996:	f7fd fcd5 	bl	b344 <z_spin_unlock_valid>
    d99a:	2800      	cmp	r0, #0
    d99c:	f000 808a 	beq.w	dab4 <z_thread_abort+0x160>
	__asm__ volatile(
    d9a0:	f385 8811 	msr	BASEPRI, r5
    d9a4:	f3bf 8f6f 	isb	sy
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    d9a8:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d9aa:	4e4c      	ldr	r6, [pc, #304]	; (dadc <z_thread_abort+0x188>)
    d9ac:	238e      	movs	r3, #142	; 0x8e
    d9ae:	4632      	mov	r2, r6
    d9b0:	494b      	ldr	r1, [pc, #300]	; (dae0 <z_thread_abort+0x18c>)
    d9b2:	484c      	ldr	r0, [pc, #304]	; (dae4 <z_thread_abort+0x190>)
    d9b4:	f001 f9fd 	bl	edb2 <assert_print>
    d9b8:	4946      	ldr	r1, [pc, #280]	; (dad4 <z_thread_abort+0x180>)
    d9ba:	484b      	ldr	r0, [pc, #300]	; (dae8 <z_thread_abort+0x194>)
    d9bc:	f001 f9f9 	bl	edb2 <assert_print>
    d9c0:	218e      	movs	r1, #142	; 0x8e
    d9c2:	4630      	mov	r0, r6
    d9c4:	f001 f9ee 	bl	eda4 <assert_post_action>
    d9c8:	e7d2      	b.n	d970 <z_thread_abort+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d9ca:	4842      	ldr	r0, [pc, #264]	; (dad4 <z_thread_abort+0x180>)
    d9cc:	f7fd fcba 	bl	b344 <z_spin_unlock_valid>
    d9d0:	b1d8      	cbz	r0, da0a <z_thread_abort+0xb6>
    d9d2:	f385 8811 	msr	BASEPRI, r5
    d9d6:	f3bf 8f6f 	isb	sy
		__ASSERT(false, "aborting essential thread %p", thread);
    d9da:	4d44      	ldr	r5, [pc, #272]	; (daec <z_thread_abort+0x198>)
    d9dc:	f240 63b5 	movw	r3, #1717	; 0x6b5
    d9e0:	462a      	mov	r2, r5
    d9e2:	4943      	ldr	r1, [pc, #268]	; (daf0 <z_thread_abort+0x19c>)
    d9e4:	483f      	ldr	r0, [pc, #252]	; (dae4 <z_thread_abort+0x190>)
    d9e6:	f001 f9e4 	bl	edb2 <assert_print>
    d9ea:	4621      	mov	r1, r4
    d9ec:	4841      	ldr	r0, [pc, #260]	; (daf4 <z_thread_abort+0x1a0>)
    d9ee:	f001 f9e0 	bl	edb2 <assert_print>
    d9f2:	f240 61b5 	movw	r1, #1717	; 0x6b5
    d9f6:	4628      	mov	r0, r5
    d9f8:	f001 f9d4 	bl	eda4 <assert_post_action>
		k_panic();
    d9fc:	4040      	eors	r0, r0
    d9fe:	f380 8811 	msr	BASEPRI, r0
    da02:	f04f 0004 	mov.w	r0, #4
    da06:	df02      	svc	2
		return;
    da08:	e7ce      	b.n	d9a8 <z_thread_abort+0x54>
    da0a:	4e34      	ldr	r6, [pc, #208]	; (dadc <z_thread_abort+0x188>)
    da0c:	23b9      	movs	r3, #185	; 0xb9
    da0e:	4632      	mov	r2, r6
    da10:	4939      	ldr	r1, [pc, #228]	; (daf8 <z_thread_abort+0x1a4>)
    da12:	4834      	ldr	r0, [pc, #208]	; (dae4 <z_thread_abort+0x190>)
    da14:	f001 f9cd 	bl	edb2 <assert_print>
    da18:	492e      	ldr	r1, [pc, #184]	; (dad4 <z_thread_abort+0x180>)
    da1a:	4838      	ldr	r0, [pc, #224]	; (dafc <z_thread_abort+0x1a8>)
    da1c:	f001 f9c9 	bl	edb2 <assert_print>
    da20:	21b9      	movs	r1, #185	; 0xb9
    da22:	4630      	mov	r0, r6
    da24:	f001 f9be 	bl	eda4 <assert_post_action>
    da28:	e7d3      	b.n	d9d2 <z_thread_abort+0x7e>
    da2a:	482a      	ldr	r0, [pc, #168]	; (dad4 <z_thread_abort+0x180>)
    da2c:	f7fd fc8a 	bl	b344 <z_spin_unlock_valid>
    da30:	b120      	cbz	r0, da3c <z_thread_abort+0xe8>
    da32:	f385 8811 	msr	BASEPRI, r5
    da36:	f3bf 8f6f 	isb	sy
		return;
    da3a:	e7b5      	b.n	d9a8 <z_thread_abort+0x54>
    da3c:	4c27      	ldr	r4, [pc, #156]	; (dadc <z_thread_abort+0x188>)
    da3e:	23b9      	movs	r3, #185	; 0xb9
    da40:	4622      	mov	r2, r4
    da42:	492d      	ldr	r1, [pc, #180]	; (daf8 <z_thread_abort+0x1a4>)
    da44:	4827      	ldr	r0, [pc, #156]	; (dae4 <z_thread_abort+0x190>)
    da46:	f001 f9b4 	bl	edb2 <assert_print>
    da4a:	4922      	ldr	r1, [pc, #136]	; (dad4 <z_thread_abort+0x180>)
    da4c:	482b      	ldr	r0, [pc, #172]	; (dafc <z_thread_abort+0x1a8>)
    da4e:	f001 f9b0 	bl	edb2 <assert_print>
    da52:	21b9      	movs	r1, #185	; 0xb9
    da54:	4620      	mov	r0, r4
    da56:	f001 f9a5 	bl	eda4 <assert_post_action>
    da5a:	e7ea      	b.n	da32 <z_thread_abort+0xde>
    da5c:	f3ef 8305 	mrs	r3, IPSR
	if (thread == _current && !arch_is_in_isr()) {
    da60:	2b00      	cmp	r3, #0
    da62:	d197      	bne.n	d994 <z_thread_abort+0x40>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    da64:	481b      	ldr	r0, [pc, #108]	; (dad4 <z_thread_abort+0x180>)
    da66:	f7fd fc6d 	bl	b344 <z_spin_unlock_valid>
    da6a:	b198      	cbz	r0, da94 <z_thread_abort+0x140>
    da6c:	4628      	mov	r0, r5
    da6e:	f7f6 fc61 	bl	4334 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    da72:	4c1e      	ldr	r4, [pc, #120]	; (daec <z_thread_abort+0x198>)
    da74:	f240 63e4 	movw	r3, #1764	; 0x6e4
    da78:	4622      	mov	r2, r4
    da7a:	491d      	ldr	r1, [pc, #116]	; (daf0 <z_thread_abort+0x19c>)
    da7c:	4819      	ldr	r0, [pc, #100]	; (dae4 <z_thread_abort+0x190>)
    da7e:	f001 f998 	bl	edb2 <assert_print>
    da82:	481f      	ldr	r0, [pc, #124]	; (db00 <z_thread_abort+0x1ac>)
    da84:	f001 f995 	bl	edb2 <assert_print>
    da88:	f240 61e4 	movw	r1, #1764	; 0x6e4
    da8c:	4620      	mov	r0, r4
    da8e:	f001 f989 	bl	eda4 <assert_post_action>
    da92:	e77f      	b.n	d994 <z_thread_abort+0x40>
    da94:	4c11      	ldr	r4, [pc, #68]	; (dadc <z_thread_abort+0x188>)
    da96:	23d0      	movs	r3, #208	; 0xd0
    da98:	4622      	mov	r2, r4
    da9a:	4917      	ldr	r1, [pc, #92]	; (daf8 <z_thread_abort+0x1a4>)
    da9c:	4811      	ldr	r0, [pc, #68]	; (dae4 <z_thread_abort+0x190>)
    da9e:	f001 f988 	bl	edb2 <assert_print>
    daa2:	490c      	ldr	r1, [pc, #48]	; (dad4 <z_thread_abort+0x180>)
    daa4:	4815      	ldr	r0, [pc, #84]	; (dafc <z_thread_abort+0x1a8>)
    daa6:	f001 f984 	bl	edb2 <assert_print>
    daaa:	21d0      	movs	r1, #208	; 0xd0
    daac:	4620      	mov	r0, r4
    daae:	f001 f979 	bl	eda4 <assert_post_action>
    dab2:	e7db      	b.n	da6c <z_thread_abort+0x118>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    dab4:	4c09      	ldr	r4, [pc, #36]	; (dadc <z_thread_abort+0x188>)
    dab6:	23b9      	movs	r3, #185	; 0xb9
    dab8:	4622      	mov	r2, r4
    daba:	490f      	ldr	r1, [pc, #60]	; (daf8 <z_thread_abort+0x1a4>)
    dabc:	4809      	ldr	r0, [pc, #36]	; (dae4 <z_thread_abort+0x190>)
    dabe:	f001 f978 	bl	edb2 <assert_print>
    dac2:	4904      	ldr	r1, [pc, #16]	; (dad4 <z_thread_abort+0x180>)
    dac4:	480d      	ldr	r0, [pc, #52]	; (dafc <z_thread_abort+0x1a8>)
    dac6:	f001 f974 	bl	edb2 <assert_print>
    daca:	21b9      	movs	r1, #185	; 0xb9
    dacc:	4620      	mov	r0, r4
    dace:	f001 f969 	bl	eda4 <assert_post_action>
    dad2:	e765      	b.n	d9a0 <z_thread_abort+0x4c>
    dad4:	200010d8 	.word	0x200010d8
    dad8:	20001090 	.word	0x20001090
    dadc:	000105e8 	.word	0x000105e8
    dae0:	00010648 	.word	0x00010648
    dae4:	00010450 	.word	0x00010450
    dae8:	00010660 	.word	0x00010660
    daec:	0001283c 	.word	0x0001283c
    daf0:	00011934 	.word	0x00011934
    daf4:	00012998 	.word	0x00012998
    daf8:	00010618 	.word	0x00010618
    dafc:	00010630 	.word	0x00010630
    db00:	000129b8 	.word	0x000129b8

0000db04 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
    db04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    db08:	4605      	mov	r5, r0
    db0a:	460f      	mov	r7, r1
    db0c:	4690      	mov	r8, r2
	struct k_thread *thread;
	bool ret = false;

	LOCKED(&sched_spinlock) {
    db0e:	2400      	movs	r4, #0
	__asm__ volatile(
    db10:	f04f 0320 	mov.w	r3, #32
    db14:	f3ef 8611 	mrs	r6, BASEPRI
    db18:	f383 8812 	msr	BASEPRI_MAX, r3
    db1c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    db20:	482b      	ldr	r0, [pc, #172]	; (dbd0 <z_sched_wake+0xcc>)
    db22:	f7fd fbff 	bl	b324 <z_spin_lock_valid>
    db26:	b128      	cbz	r0, db34 <z_sched_wake+0x30>
	z_spin_lock_set_owner(l);
    db28:	4829      	ldr	r0, [pc, #164]	; (dbd0 <z_sched_wake+0xcc>)
    db2a:	f7fd fc1b 	bl	b364 <z_spin_lock_set_owner>
	bool ret = false;
    db2e:	f04f 0900 	mov.w	r9, #0
	return k;
    db32:	e019      	b.n	db68 <z_sched_wake+0x64>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    db34:	f8df 909c 	ldr.w	r9, [pc, #156]	; dbd4 <z_sched_wake+0xd0>
    db38:	238e      	movs	r3, #142	; 0x8e
    db3a:	464a      	mov	r2, r9
    db3c:	4926      	ldr	r1, [pc, #152]	; (dbd8 <z_sched_wake+0xd4>)
    db3e:	4827      	ldr	r0, [pc, #156]	; (dbdc <z_sched_wake+0xd8>)
    db40:	f001 f937 	bl	edb2 <assert_print>
    db44:	4922      	ldr	r1, [pc, #136]	; (dbd0 <z_sched_wake+0xcc>)
    db46:	4826      	ldr	r0, [pc, #152]	; (dbe0 <z_sched_wake+0xdc>)
    db48:	f001 f933 	bl	edb2 <assert_print>
    db4c:	218e      	movs	r1, #142	; 0x8e
    db4e:	4648      	mov	r0, r9
    db50:	f001 f928 	bl	eda4 <assert_post_action>
    db54:	e7e8      	b.n	db28 <z_sched_wake+0x24>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    db56:	481e      	ldr	r0, [pc, #120]	; (dbd0 <z_sched_wake+0xcc>)
    db58:	f7fd fbf4 	bl	b344 <z_spin_unlock_valid>
    db5c:	b320      	cbz	r0, dba8 <z_sched_wake+0xa4>
	__asm__ volatile(
    db5e:	f386 8811 	msr	BASEPRI, r6
    db62:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    db66:	2401      	movs	r4, #1
    db68:	bb74      	cbnz	r4, dbc8 <z_sched_wake+0xc4>
		thread = _priq_wait_best(&wait_q->waitq);
    db6a:	4628      	mov	r0, r5
    db6c:	f002 f92c 	bl	fdc8 <z_priq_dumb_best>

		if (thread != NULL) {
    db70:	4604      	mov	r4, r0
    db72:	2800      	cmp	r0, #0
    db74:	d0ef      	beq.n	db56 <z_sched_wake+0x52>
    db76:	f8c0 70ac 	str.w	r7, [r0, #172]	; 0xac
    db7a:	f8c0 8014 	str.w	r8, [r0, #20]
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    db7e:	f7fe fc91 	bl	c4a4 <pended_on_thread>
    db82:	4621      	mov	r1, r4
    db84:	f7fe fe6c 	bl	c860 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    db88:	7b63      	ldrb	r3, [r4, #13]
    db8a:	f023 0302 	bic.w	r3, r3, #2
    db8e:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    db90:	2300      	movs	r3, #0
    db92:	60a3      	str	r3, [r4, #8]
	return z_abort_timeout(&thread->base.timeout);
    db94:	f104 0018 	add.w	r0, r4, #24
    db98:	f000 f982 	bl	dea0 <z_abort_timeout>
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
    db9c:	4620      	mov	r0, r4
    db9e:	f7fe ffdd 	bl	cb5c <ready_thread>
			ret = true;
    dba2:	f04f 0901 	mov.w	r9, #1
    dba6:	e7d6      	b.n	db56 <z_sched_wake+0x52>
    dba8:	4c0a      	ldr	r4, [pc, #40]	; (dbd4 <z_sched_wake+0xd0>)
    dbaa:	23b9      	movs	r3, #185	; 0xb9
    dbac:	4622      	mov	r2, r4
    dbae:	490d      	ldr	r1, [pc, #52]	; (dbe4 <z_sched_wake+0xe0>)
    dbb0:	480a      	ldr	r0, [pc, #40]	; (dbdc <z_sched_wake+0xd8>)
    dbb2:	f001 f8fe 	bl	edb2 <assert_print>
    dbb6:	4906      	ldr	r1, [pc, #24]	; (dbd0 <z_sched_wake+0xcc>)
    dbb8:	480b      	ldr	r0, [pc, #44]	; (dbe8 <z_sched_wake+0xe4>)
    dbba:	f001 f8fa 	bl	edb2 <assert_print>
    dbbe:	21b9      	movs	r1, #185	; 0xb9
    dbc0:	4620      	mov	r0, r4
    dbc2:	f001 f8ef 	bl	eda4 <assert_post_action>
    dbc6:	e7ca      	b.n	db5e <z_sched_wake+0x5a>
		}
	}

	return ret;
}
    dbc8:	4648      	mov	r0, r9
    dbca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dbce:	bf00      	nop
    dbd0:	200010d8 	.word	0x200010d8
    dbd4:	000105e8 	.word	0x000105e8
    dbd8:	00010648 	.word	0x00010648
    dbdc:	00010450 	.word	0x00010450
    dbe0:	00010660 	.word	0x00010660
    dbe4:	00010618 	.word	0x00010618
    dbe8:	00010630 	.word	0x00010630

0000dbec <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    dbec:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
    dbf0:	b083      	sub	sp, #12
    dbf2:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    dbf4:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
    dbf8:	e9cd bc00 	strd	fp, ip, [sp]
    dbfc:	f7ff f9e0 	bl	cfc0 <z_pend_curr>

	if (data != NULL) {
    dc00:	b11c      	cbz	r4, dc0a <z_sched_wait+0x1e>
		*data = _current->base.swap_data;
    dc02:	4b03      	ldr	r3, [pc, #12]	; (dc10 <z_sched_wait+0x24>)
    dc04:	689b      	ldr	r3, [r3, #8]
    dc06:	695b      	ldr	r3, [r3, #20]
    dc08:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    dc0a:	b003      	add	sp, #12
    dc0c:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}
    dc10:	20001090 	.word	0x20001090

0000dc14 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    dc14:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    dc16:	4806      	ldr	r0, [pc, #24]	; (dc30 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    dc18:	4a06      	ldr	r2, [pc, #24]	; (dc34 <z_data_copy+0x20>)
    dc1a:	1a12      	subs	r2, r2, r0
    dc1c:	4906      	ldr	r1, [pc, #24]	; (dc38 <z_data_copy+0x24>)
    dc1e:	f002 f82d 	bl	fc7c <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    dc22:	4a06      	ldr	r2, [pc, #24]	; (dc3c <z_data_copy+0x28>)
    dc24:	4906      	ldr	r1, [pc, #24]	; (dc40 <z_data_copy+0x2c>)
    dc26:	4807      	ldr	r0, [pc, #28]	; (dc44 <z_data_copy+0x30>)
    dc28:	f002 f828 	bl	fc7c <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    dc2c:	bd08      	pop	{r3, pc}
    dc2e:	bf00      	nop
    dc30:	20000000 	.word	0x20000000
    dc34:	20000208 	.word	0x20000208
    dc38:	00012aec 	.word	0x00012aec
    dc3c:	00000000 	.word	0x00000000
    dc40:	00012aec 	.word	0x00012aec
    dc44:	20000000 	.word	0x20000000

0000dc48 <first>:
	return list->head == list;
    dc48:	4b03      	ldr	r3, [pc, #12]	; (dc58 <first+0x10>)
    dc4a:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    dc4c:	4298      	cmp	r0, r3
    dc4e:	d000      	beq.n	dc52 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    dc50:	4770      	bx	lr
    dc52:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    dc54:	e7fc      	b.n	dc50 <first+0x8>
    dc56:	bf00      	nop
    dc58:	20000124 	.word	0x20000124

0000dc5c <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    dc5c:	b130      	cbz	r0, dc6c <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    dc5e:	4a04      	ldr	r2, [pc, #16]	; (dc70 <next+0x14>)
    dc60:	6852      	ldr	r2, [r2, #4]
    dc62:	4290      	cmp	r0, r2
    dc64:	d001      	beq.n	dc6a <next+0xe>
    dc66:	6800      	ldr	r0, [r0, #0]
    dc68:	4770      	bx	lr
    dc6a:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    dc6c:	4770      	bx	lr
    dc6e:	bf00      	nop
    dc70:	20000124 	.word	0x20000124

0000dc74 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    dc74:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    dc76:	4b04      	ldr	r3, [pc, #16]	; (dc88 <elapsed+0x14>)
    dc78:	681b      	ldr	r3, [r3, #0]
    dc7a:	b10b      	cbz	r3, dc80 <elapsed+0xc>
    dc7c:	2000      	movs	r0, #0
}
    dc7e:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    dc80:	f7f9 f8fe 	bl	6e80 <sys_clock_elapsed>
    dc84:	e7fb      	b.n	dc7e <elapsed+0xa>
    dc86:	bf00      	nop
    dc88:	200010e4 	.word	0x200010e4

0000dc8c <next_timeout>:

static int32_t next_timeout(void)
{
    dc8c:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    dc8e:	f7ff ffdb 	bl	dc48 <first>
    dc92:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    dc94:	f7ff ffee 	bl	dc74 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    dc98:	b17c      	cbz	r4, dcba <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    dc9a:	6923      	ldr	r3, [r4, #16]
    dc9c:	6962      	ldr	r2, [r4, #20]
    dc9e:	1a1b      	subs	r3, r3, r0
    dca0:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    dca4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    dca8:	f170 0200 	sbcs.w	r2, r0, #0
    dcac:	da08      	bge.n	dcc0 <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    dcae:	2800      	cmp	r0, #0
    dcb0:	db01      	blt.n	dcb6 <next_timeout+0x2a>
    dcb2:	4618      	mov	r0, r3
    dcb4:	e006      	b.n	dcc4 <next_timeout+0x38>
    dcb6:	2300      	movs	r3, #0
    dcb8:	e7fb      	b.n	dcb2 <next_timeout+0x26>
		ret = MAX_WAIT;
    dcba:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    dcbe:	e001      	b.n	dcc4 <next_timeout+0x38>
    dcc0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    dcc4:	4b03      	ldr	r3, [pc, #12]	; (dcd4 <next_timeout+0x48>)
    dcc6:	691b      	ldr	r3, [r3, #16]
    dcc8:	b113      	cbz	r3, dcd0 <next_timeout+0x44>
    dcca:	4283      	cmp	r3, r0
    dccc:	da00      	bge.n	dcd0 <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
    dcce:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    dcd0:	bd10      	pop	{r4, pc}
    dcd2:	bf00      	nop
    dcd4:	20001090 	.word	0x20001090

0000dcd8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    dcd8:	f1b3 3fff 	cmp.w	r3, #4294967295
    dcdc:	bf08      	it	eq
    dcde:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    dce2:	f000 80c1 	beq.w	de68 <z_add_timeout+0x190>
{
    dce6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dcea:	4604      	mov	r4, r0
    dcec:	460f      	mov	r7, r1
    dcee:	4692      	mov	sl, r2
    dcf0:	461d      	mov	r5, r3
	return node->next != NULL;
    dcf2:	6803      	ldr	r3, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    dcf4:	b173      	cbz	r3, dd14 <z_add_timeout+0x3c>
    dcf6:	f8df 8174 	ldr.w	r8, [pc, #372]	; de6c <z_add_timeout+0x194>
    dcfa:	2363      	movs	r3, #99	; 0x63
    dcfc:	4642      	mov	r2, r8
    dcfe:	495c      	ldr	r1, [pc, #368]	; (de70 <z_add_timeout+0x198>)
    dd00:	485c      	ldr	r0, [pc, #368]	; (de74 <z_add_timeout+0x19c>)
    dd02:	f001 f856 	bl	edb2 <assert_print>
    dd06:	485c      	ldr	r0, [pc, #368]	; (de78 <z_add_timeout+0x1a0>)
    dd08:	f001 f853 	bl	edb2 <assert_print>
    dd0c:	2163      	movs	r1, #99	; 0x63
    dd0e:	4640      	mov	r0, r8
    dd10:	f001 f848 	bl	eda4 <assert_post_action>
	to->fn = fn;
    dd14:	60a7      	str	r7, [r4, #8]

	LOCKED(&timeout_lock) {
    dd16:	f04f 0800 	mov.w	r8, #0
	__asm__ volatile(
    dd1a:	f04f 0320 	mov.w	r3, #32
    dd1e:	f3ef 8711 	mrs	r7, BASEPRI
    dd22:	f383 8812 	msr	BASEPRI_MAX, r3
    dd26:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    dd2a:	4854      	ldr	r0, [pc, #336]	; (de7c <z_add_timeout+0x1a4>)
    dd2c:	f7fd fafa 	bl	b324 <z_spin_lock_valid>
    dd30:	b118      	cbz	r0, dd3a <z_add_timeout+0x62>
	z_spin_lock_set_owner(l);
    dd32:	4852      	ldr	r0, [pc, #328]	; (de7c <z_add_timeout+0x1a4>)
    dd34:	f7fd fb16 	bl	b364 <z_spin_lock_set_owner>
	return k;
    dd38:	e038      	b.n	ddac <z_add_timeout+0xd4>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    dd3a:	f8df 9144 	ldr.w	r9, [pc, #324]	; de80 <z_add_timeout+0x1a8>
    dd3e:	238e      	movs	r3, #142	; 0x8e
    dd40:	464a      	mov	r2, r9
    dd42:	4950      	ldr	r1, [pc, #320]	; (de84 <z_add_timeout+0x1ac>)
    dd44:	484b      	ldr	r0, [pc, #300]	; (de74 <z_add_timeout+0x19c>)
    dd46:	f001 f834 	bl	edb2 <assert_print>
    dd4a:	494c      	ldr	r1, [pc, #304]	; (de7c <z_add_timeout+0x1a4>)
    dd4c:	484e      	ldr	r0, [pc, #312]	; (de88 <z_add_timeout+0x1b0>)
    dd4e:	f001 f830 	bl	edb2 <assert_print>
    dd52:	218e      	movs	r1, #142	; 0x8e
    dd54:	4648      	mov	r0, r9
    dd56:	f001 f825 	bl	eda4 <assert_post_action>
    dd5a:	e7ea      	b.n	dd32 <z_add_timeout+0x5a>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    dd5c:	f11a 0801 	adds.w	r8, sl, #1
    dd60:	f145 0900 	adc.w	r9, r5, #0
    dd64:	f7ff ff86 	bl	dc74 <elapsed>
    dd68:	eb18 0300 	adds.w	r3, r8, r0
    dd6c:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
    dd70:	6123      	str	r3, [r4, #16]
    dd72:	6160      	str	r0, [r4, #20]
    dd74:	e03d      	b.n	ddf2 <z_add_timeout+0x11a>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    dd76:	1a51      	subs	r1, r2, r1
    dd78:	eb66 0303 	sbc.w	r3, r6, r3
    dd7c:	6101      	str	r1, [r0, #16]
    dd7e:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
    dd80:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
    dd82:	6063      	str	r3, [r4, #4]
	node->next = successor;
    dd84:	6020      	str	r0, [r4, #0]
	prev->next = node;
    dd86:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    dd88:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    dd8a:	2800      	cmp	r0, #0
    dd8c:	d045      	beq.n	de1a <z_add_timeout+0x142>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    dd8e:	f7ff ff5b 	bl	dc48 <first>
    dd92:	4284      	cmp	r4, r0
    dd94:	d048      	beq.n	de28 <z_add_timeout+0x150>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    dd96:	4839      	ldr	r0, [pc, #228]	; (de7c <z_add_timeout+0x1a4>)
    dd98:	f7fd fad4 	bl	b344 <z_spin_unlock_valid>
    dd9c:	2800      	cmp	r0, #0
    dd9e:	d050      	beq.n	de42 <z_add_timeout+0x16a>
	__asm__ volatile(
    dda0:	f387 8811 	msr	BASEPRI, r7
    dda4:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    dda8:	f04f 0801 	mov.w	r8, #1
    ddac:	f1b8 0f00 	cmp.w	r8, #0
    ddb0:	d158      	bne.n	de64 <z_add_timeout+0x18c>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    ddb2:	4653      	mov	r3, sl
    ddb4:	f06f 0101 	mvn.w	r1, #1
    ddb8:	ebb1 010a 	subs.w	r1, r1, sl
    ddbc:	f04f 30ff 	mov.w	r0, #4294967295
    ddc0:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    ddc4:	2a00      	cmp	r2, #0
    ddc6:	dbc9      	blt.n	dd5c <z_add_timeout+0x84>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    ddc8:	4a30      	ldr	r2, [pc, #192]	; (de8c <z_add_timeout+0x1b4>)
    ddca:	6811      	ldr	r1, [r2, #0]
    ddcc:	6852      	ldr	r2, [r2, #4]
    ddce:	185b      	adds	r3, r3, r1
    ddd0:	eb42 0205 	adc.w	r2, r2, r5
    ddd4:	f06f 0101 	mvn.w	r1, #1
    ddd8:	1acb      	subs	r3, r1, r3
    ddda:	eb60 0202 	sbc.w	r2, r0, r2
			to->dticks = MAX(1, ticks);
    ddde:	4618      	mov	r0, r3
    dde0:	4611      	mov	r1, r2
    dde2:	2b01      	cmp	r3, #1
    dde4:	f172 0300 	sbcs.w	r3, r2, #0
    dde8:	da01      	bge.n	ddee <z_add_timeout+0x116>
    ddea:	2001      	movs	r0, #1
    ddec:	2100      	movs	r1, #0
    ddee:	6120      	str	r0, [r4, #16]
    ddf0:	6161      	str	r1, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    ddf2:	f7ff ff29 	bl	dc48 <first>
    ddf6:	2800      	cmp	r0, #0
    ddf8:	d0c7      	beq.n	dd8a <z_add_timeout+0xb2>
			if (t->dticks > to->dticks) {
    ddfa:	6902      	ldr	r2, [r0, #16]
    ddfc:	6946      	ldr	r6, [r0, #20]
    ddfe:	6921      	ldr	r1, [r4, #16]
    de00:	6963      	ldr	r3, [r4, #20]
    de02:	4291      	cmp	r1, r2
    de04:	eb73 0c06 	sbcs.w	ip, r3, r6
    de08:	dbb5      	blt.n	dd76 <z_add_timeout+0x9e>
			to->dticks -= t->dticks;
    de0a:	1a89      	subs	r1, r1, r2
    de0c:	eb63 0306 	sbc.w	r3, r3, r6
    de10:	6121      	str	r1, [r4, #16]
    de12:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    de14:	f7ff ff22 	bl	dc5c <next>
    de18:	e7ed      	b.n	ddf6 <z_add_timeout+0x11e>
	sys_dnode_t *const tail = list->tail;
    de1a:	4b1d      	ldr	r3, [pc, #116]	; (de90 <z_add_timeout+0x1b8>)
    de1c:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    de1e:	6023      	str	r3, [r4, #0]
	node->prev = tail;
    de20:	6062      	str	r2, [r4, #4]
	tail->next = node;
    de22:	6014      	str	r4, [r2, #0]
	list->tail = node;
    de24:	605c      	str	r4, [r3, #4]
}
    de26:	e7b2      	b.n	dd8e <z_add_timeout+0xb6>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    de28:	f7ff ff30 	bl	dc8c <next_timeout>

			if (next_time == 0 ||
    de2c:	4603      	mov	r3, r0
    de2e:	b118      	cbz	r0, de38 <z_add_timeout+0x160>
			    _current_cpu->slice_ticks != next_time) {
    de30:	4a18      	ldr	r2, [pc, #96]	; (de94 <z_add_timeout+0x1bc>)
    de32:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    de34:	4282      	cmp	r2, r0
    de36:	d0ae      	beq.n	dd96 <z_add_timeout+0xbe>
				sys_clock_set_timeout(next_time, false);
    de38:	2100      	movs	r1, #0
    de3a:	4618      	mov	r0, r3
    de3c:	f7f8 ffee 	bl	6e1c <sys_clock_set_timeout>
    de40:	e7a9      	b.n	dd96 <z_add_timeout+0xbe>
    de42:	f8df 803c 	ldr.w	r8, [pc, #60]	; de80 <z_add_timeout+0x1a8>
    de46:	23b9      	movs	r3, #185	; 0xb9
    de48:	4642      	mov	r2, r8
    de4a:	4913      	ldr	r1, [pc, #76]	; (de98 <z_add_timeout+0x1c0>)
    de4c:	4809      	ldr	r0, [pc, #36]	; (de74 <z_add_timeout+0x19c>)
    de4e:	f000 ffb0 	bl	edb2 <assert_print>
    de52:	490a      	ldr	r1, [pc, #40]	; (de7c <z_add_timeout+0x1a4>)
    de54:	4811      	ldr	r0, [pc, #68]	; (de9c <z_add_timeout+0x1c4>)
    de56:	f000 ffac 	bl	edb2 <assert_print>
    de5a:	21b9      	movs	r1, #185	; 0xb9
    de5c:	4640      	mov	r0, r8
    de5e:	f000 ffa1 	bl	eda4 <assert_post_action>
    de62:	e79d      	b.n	dda0 <z_add_timeout+0xc8>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    de64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    de68:	4770      	bx	lr
    de6a:	bf00      	nop
    de6c:	000129dc 	.word	0x000129dc
    de70:	00012a00 	.word	0x00012a00
    de74:	00010450 	.word	0x00010450
    de78:	00012784 	.word	0x00012784
    de7c:	200010e8 	.word	0x200010e8
    de80:	000105e8 	.word	0x000105e8
    de84:	00010648 	.word	0x00010648
    de88:	00010660 	.word	0x00010660
    de8c:	200008a0 	.word	0x200008a0
    de90:	20000124 	.word	0x20000124
    de94:	20001090 	.word	0x20001090
    de98:	00010618 	.word	0x00010618
    de9c:	00010630 	.word	0x00010630

0000dea0 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    dea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dea4:	4605      	mov	r5, r0
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
    dea6:	2400      	movs	r4, #0
	__asm__ volatile(
    dea8:	f04f 0320 	mov.w	r3, #32
    deac:	f3ef 8711 	mrs	r7, BASEPRI
    deb0:	f383 8812 	msr	BASEPRI_MAX, r3
    deb4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    deb8:	481f      	ldr	r0, [pc, #124]	; (df38 <z_abort_timeout+0x98>)
    deba:	f7fd fa33 	bl	b324 <z_spin_lock_valid>
    debe:	b128      	cbz	r0, decc <z_abort_timeout+0x2c>
	z_spin_lock_set_owner(l);
    dec0:	481d      	ldr	r0, [pc, #116]	; (df38 <z_abort_timeout+0x98>)
    dec2:	f7fd fa4f 	bl	b364 <z_spin_lock_set_owner>
	int ret = -EINVAL;
    dec6:	f06f 0815 	mvn.w	r8, #21
	return k;
    deca:	e018      	b.n	defe <z_abort_timeout+0x5e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    decc:	4e1b      	ldr	r6, [pc, #108]	; (df3c <z_abort_timeout+0x9c>)
    dece:	238e      	movs	r3, #142	; 0x8e
    ded0:	4632      	mov	r2, r6
    ded2:	491b      	ldr	r1, [pc, #108]	; (df40 <z_abort_timeout+0xa0>)
    ded4:	481b      	ldr	r0, [pc, #108]	; (df44 <z_abort_timeout+0xa4>)
    ded6:	f000 ff6c 	bl	edb2 <assert_print>
    deda:	4917      	ldr	r1, [pc, #92]	; (df38 <z_abort_timeout+0x98>)
    dedc:	481a      	ldr	r0, [pc, #104]	; (df48 <z_abort_timeout+0xa8>)
    dede:	f000 ff68 	bl	edb2 <assert_print>
    dee2:	218e      	movs	r1, #142	; 0x8e
    dee4:	4630      	mov	r0, r6
    dee6:	f000 ff5d 	bl	eda4 <assert_post_action>
    deea:	e7e9      	b.n	dec0 <z_abort_timeout+0x20>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    deec:	4812      	ldr	r0, [pc, #72]	; (df38 <z_abort_timeout+0x98>)
    deee:	f7fd fa29 	bl	b344 <z_spin_unlock_valid>
    def2:	b170      	cbz	r0, df12 <z_abort_timeout+0x72>
	__asm__ volatile(
    def4:	f387 8811 	msr	BASEPRI, r7
    def8:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    defc:	2401      	movs	r4, #1
    defe:	4626      	mov	r6, r4
    df00:	b9bc      	cbnz	r4, df32 <z_abort_timeout+0x92>
	return node->next != NULL;
    df02:	682b      	ldr	r3, [r5, #0]
		if (sys_dnode_is_linked(&to->node)) {
    df04:	2b00      	cmp	r3, #0
    df06:	d0f1      	beq.n	deec <z_abort_timeout+0x4c>
			remove_timeout(to);
    df08:	4628      	mov	r0, r5
    df0a:	f001 ff68 	bl	fdde <remove_timeout>
			ret = 0;
    df0e:	46b0      	mov	r8, r6
    df10:	e7ec      	b.n	deec <z_abort_timeout+0x4c>
    df12:	4c0a      	ldr	r4, [pc, #40]	; (df3c <z_abort_timeout+0x9c>)
    df14:	23b9      	movs	r3, #185	; 0xb9
    df16:	4622      	mov	r2, r4
    df18:	490c      	ldr	r1, [pc, #48]	; (df4c <z_abort_timeout+0xac>)
    df1a:	480a      	ldr	r0, [pc, #40]	; (df44 <z_abort_timeout+0xa4>)
    df1c:	f000 ff49 	bl	edb2 <assert_print>
    df20:	4905      	ldr	r1, [pc, #20]	; (df38 <z_abort_timeout+0x98>)
    df22:	480b      	ldr	r0, [pc, #44]	; (df50 <z_abort_timeout+0xb0>)
    df24:	f000 ff45 	bl	edb2 <assert_print>
    df28:	21b9      	movs	r1, #185	; 0xb9
    df2a:	4620      	mov	r0, r4
    df2c:	f000 ff3a 	bl	eda4 <assert_post_action>
    df30:	e7e0      	b.n	def4 <z_abort_timeout+0x54>
		}
	}

	return ret;
}
    df32:	4640      	mov	r0, r8
    df34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    df38:	200010e8 	.word	0x200010e8
    df3c:	000105e8 	.word	0x000105e8
    df40:	00010648 	.word	0x00010648
    df44:	00010450 	.word	0x00010450
    df48:	00010660 	.word	0x00010660
    df4c:	00010618 	.word	0x00010618
    df50:	00010630 	.word	0x00010630

0000df54 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    df54:	b570      	push	{r4, r5, r6, lr}
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
    df56:	2500      	movs	r5, #0
	__asm__ volatile(
    df58:	f04f 0320 	mov.w	r3, #32
    df5c:	f3ef 8611 	mrs	r6, BASEPRI
    df60:	f383 8812 	msr	BASEPRI_MAX, r3
    df64:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    df68:	481c      	ldr	r0, [pc, #112]	; (dfdc <z_get_next_timeout_expiry+0x88>)
    df6a:	f7fd f9db 	bl	b324 <z_spin_lock_valid>
    df6e:	b128      	cbz	r0, df7c <z_get_next_timeout_expiry+0x28>
	z_spin_lock_set_owner(l);
    df70:	481a      	ldr	r0, [pc, #104]	; (dfdc <z_get_next_timeout_expiry+0x88>)
    df72:	f7fd f9f7 	bl	b364 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    df76:	f04f 34ff 	mov.w	r4, #4294967295
	return k;
    df7a:	e014      	b.n	dfa6 <z_get_next_timeout_expiry+0x52>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    df7c:	4c18      	ldr	r4, [pc, #96]	; (dfe0 <z_get_next_timeout_expiry+0x8c>)
    df7e:	238e      	movs	r3, #142	; 0x8e
    df80:	4622      	mov	r2, r4
    df82:	4918      	ldr	r1, [pc, #96]	; (dfe4 <z_get_next_timeout_expiry+0x90>)
    df84:	4818      	ldr	r0, [pc, #96]	; (dfe8 <z_get_next_timeout_expiry+0x94>)
    df86:	f000 ff14 	bl	edb2 <assert_print>
    df8a:	4914      	ldr	r1, [pc, #80]	; (dfdc <z_get_next_timeout_expiry+0x88>)
    df8c:	4817      	ldr	r0, [pc, #92]	; (dfec <z_get_next_timeout_expiry+0x98>)
    df8e:	f000 ff10 	bl	edb2 <assert_print>
    df92:	218e      	movs	r1, #142	; 0x8e
    df94:	4620      	mov	r0, r4
    df96:	f000 ff05 	bl	eda4 <assert_post_action>
    df9a:	e7e9      	b.n	df70 <z_get_next_timeout_expiry+0x1c>
	__asm__ volatile(
    df9c:	f386 8811 	msr	BASEPRI, r6
    dfa0:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    dfa4:	2501      	movs	r5, #1
    dfa6:	b9bd      	cbnz	r5, dfd8 <z_get_next_timeout_expiry+0x84>
		ret = next_timeout();
    dfa8:	f7ff fe70 	bl	dc8c <next_timeout>
    dfac:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    dfae:	480b      	ldr	r0, [pc, #44]	; (dfdc <z_get_next_timeout_expiry+0x88>)
    dfb0:	f7fd f9c8 	bl	b344 <z_spin_unlock_valid>
    dfb4:	2800      	cmp	r0, #0
    dfb6:	d1f1      	bne.n	df9c <z_get_next_timeout_expiry+0x48>
    dfb8:	4d09      	ldr	r5, [pc, #36]	; (dfe0 <z_get_next_timeout_expiry+0x8c>)
    dfba:	23b9      	movs	r3, #185	; 0xb9
    dfbc:	462a      	mov	r2, r5
    dfbe:	490c      	ldr	r1, [pc, #48]	; (dff0 <z_get_next_timeout_expiry+0x9c>)
    dfc0:	4809      	ldr	r0, [pc, #36]	; (dfe8 <z_get_next_timeout_expiry+0x94>)
    dfc2:	f000 fef6 	bl	edb2 <assert_print>
    dfc6:	4905      	ldr	r1, [pc, #20]	; (dfdc <z_get_next_timeout_expiry+0x88>)
    dfc8:	480a      	ldr	r0, [pc, #40]	; (dff4 <z_get_next_timeout_expiry+0xa0>)
    dfca:	f000 fef2 	bl	edb2 <assert_print>
    dfce:	21b9      	movs	r1, #185	; 0xb9
    dfd0:	4628      	mov	r0, r5
    dfd2:	f000 fee7 	bl	eda4 <assert_post_action>
    dfd6:	e7e1      	b.n	df9c <z_get_next_timeout_expiry+0x48>
	}
	return ret;
}
    dfd8:	4620      	mov	r0, r4
    dfda:	bd70      	pop	{r4, r5, r6, pc}
    dfdc:	200010e8 	.word	0x200010e8
    dfe0:	000105e8 	.word	0x000105e8
    dfe4:	00010648 	.word	0x00010648
    dfe8:	00010450 	.word	0x00010450
    dfec:	00010660 	.word	0x00010660
    dff0:	00010618 	.word	0x00010618
    dff4:	00010630 	.word	0x00010630

0000dff8 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    dff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dffc:	4606      	mov	r6, r0
    dffe:	4688      	mov	r8, r1
	LOCKED(&timeout_lock) {
    e000:	2500      	movs	r5, #0
	__asm__ volatile(
    e002:	f04f 0320 	mov.w	r3, #32
    e006:	f3ef 8711 	mrs	r7, BASEPRI
    e00a:	f383 8812 	msr	BASEPRI_MAX, r3
    e00e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e012:	4825      	ldr	r0, [pc, #148]	; (e0a8 <z_set_timeout_expiry+0xb0>)
    e014:	f7fd f986 	bl	b324 <z_spin_lock_valid>
    e018:	b118      	cbz	r0, e022 <z_set_timeout_expiry+0x2a>
	z_spin_lock_set_owner(l);
    e01a:	4823      	ldr	r0, [pc, #140]	; (e0a8 <z_set_timeout_expiry+0xb0>)
    e01c:	f7fd f9a2 	bl	b364 <z_spin_lock_set_owner>
	return k;
    e020:	e01e      	b.n	e060 <z_set_timeout_expiry+0x68>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e022:	4c22      	ldr	r4, [pc, #136]	; (e0ac <z_set_timeout_expiry+0xb4>)
    e024:	238e      	movs	r3, #142	; 0x8e
    e026:	4622      	mov	r2, r4
    e028:	4921      	ldr	r1, [pc, #132]	; (e0b0 <z_set_timeout_expiry+0xb8>)
    e02a:	4822      	ldr	r0, [pc, #136]	; (e0b4 <z_set_timeout_expiry+0xbc>)
    e02c:	f000 fec1 	bl	edb2 <assert_print>
    e030:	491d      	ldr	r1, [pc, #116]	; (e0a8 <z_set_timeout_expiry+0xb0>)
    e032:	4821      	ldr	r0, [pc, #132]	; (e0b8 <z_set_timeout_expiry+0xc0>)
    e034:	f000 febd 	bl	edb2 <assert_print>
    e038:	218e      	movs	r1, #142	; 0x8e
    e03a:	4620      	mov	r0, r4
    e03c:	f000 feb2 	bl	eda4 <assert_post_action>
    e040:	e7eb      	b.n	e01a <z_set_timeout_expiry+0x22>
		int next_to = next_timeout();
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
    e042:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    e044:	f004 0401 	and.w	r4, r4, #1
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    e048:	2801      	cmp	r0, #1
    e04a:	dd00      	ble.n	e04e <z_set_timeout_expiry+0x56>
    e04c:	b99c      	cbnz	r4, e076 <z_set_timeout_expiry+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e04e:	4816      	ldr	r0, [pc, #88]	; (e0a8 <z_set_timeout_expiry+0xb0>)
    e050:	f7fd f978 	bl	b344 <z_spin_unlock_valid>
    e054:	b1b0      	cbz	r0, e084 <z_set_timeout_expiry+0x8c>
	__asm__ volatile(
    e056:	f387 8811 	msr	BASEPRI, r7
    e05a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    e05e:	2501      	movs	r5, #1
    e060:	462c      	mov	r4, r5
    e062:	b9fd      	cbnz	r5, e0a4 <z_set_timeout_expiry+0xac>
		int next_to = next_timeout();
    e064:	f7ff fe12 	bl	dc8c <next_timeout>
			      || (ticks <= next_to);
    e068:	f1b0 3fff 	cmp.w	r0, #4294967295
    e06c:	d0e9      	beq.n	e042 <z_set_timeout_expiry+0x4a>
    e06e:	42b0      	cmp	r0, r6
    e070:	dbe8      	blt.n	e044 <z_set_timeout_expiry+0x4c>
    e072:	2401      	movs	r4, #1
    e074:	e7e6      	b.n	e044 <z_set_timeout_expiry+0x4c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    e076:	4641      	mov	r1, r8
    e078:	42b0      	cmp	r0, r6
    e07a:	bfa8      	it	ge
    e07c:	4630      	movge	r0, r6
    e07e:	f7f8 fecd 	bl	6e1c <sys_clock_set_timeout>
    e082:	e7e4      	b.n	e04e <z_set_timeout_expiry+0x56>
    e084:	4c09      	ldr	r4, [pc, #36]	; (e0ac <z_set_timeout_expiry+0xb4>)
    e086:	23b9      	movs	r3, #185	; 0xb9
    e088:	4622      	mov	r2, r4
    e08a:	490c      	ldr	r1, [pc, #48]	; (e0bc <z_set_timeout_expiry+0xc4>)
    e08c:	4809      	ldr	r0, [pc, #36]	; (e0b4 <z_set_timeout_expiry+0xbc>)
    e08e:	f000 fe90 	bl	edb2 <assert_print>
    e092:	4905      	ldr	r1, [pc, #20]	; (e0a8 <z_set_timeout_expiry+0xb0>)
    e094:	480a      	ldr	r0, [pc, #40]	; (e0c0 <z_set_timeout_expiry+0xc8>)
    e096:	f000 fe8c 	bl	edb2 <assert_print>
    e09a:	21b9      	movs	r1, #185	; 0xb9
    e09c:	4620      	mov	r0, r4
    e09e:	f000 fe81 	bl	eda4 <assert_post_action>
    e0a2:	e7d8      	b.n	e056 <z_set_timeout_expiry+0x5e>
		}
	}
}
    e0a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e0a8:	200010e8 	.word	0x200010e8
    e0ac:	000105e8 	.word	0x000105e8
    e0b0:	00010648 	.word	0x00010648
    e0b4:	00010450 	.word	0x00010450
    e0b8:	00010660 	.word	0x00010660
    e0bc:	00010618 	.word	0x00010618
    e0c0:	00010630 	.word	0x00010630

0000e0c4 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    e0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e0c6:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    e0c8:	f7fe fca0 	bl	ca0c <z_time_slice>
	__asm__ volatile(
    e0cc:	f04f 0320 	mov.w	r3, #32
    e0d0:	f3ef 8511 	mrs	r5, BASEPRI
    e0d4:	f383 8812 	msr	BASEPRI_MAX, r3
    e0d8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e0dc:	4855      	ldr	r0, [pc, #340]	; (e234 <sys_clock_announce+0x170>)
    e0de:	f7fd f921 	bl	b324 <z_spin_lock_valid>
    e0e2:	b128      	cbz	r0, e0f0 <sys_clock_announce+0x2c>
	z_spin_lock_set_owner(l);
    e0e4:	4853      	ldr	r0, [pc, #332]	; (e234 <sys_clock_announce+0x170>)
    e0e6:	f7fd f93d 	bl	b364 <z_spin_lock_set_owner>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    e0ea:	4b53      	ldr	r3, [pc, #332]	; (e238 <sys_clock_announce+0x174>)
    e0ec:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    e0ee:	e026      	b.n	e13e <sys_clock_announce+0x7a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e0f0:	4e52      	ldr	r6, [pc, #328]	; (e23c <sys_clock_announce+0x178>)
    e0f2:	238e      	movs	r3, #142	; 0x8e
    e0f4:	4632      	mov	r2, r6
    e0f6:	4952      	ldr	r1, [pc, #328]	; (e240 <sys_clock_announce+0x17c>)
    e0f8:	4852      	ldr	r0, [pc, #328]	; (e244 <sys_clock_announce+0x180>)
    e0fa:	f000 fe5a 	bl	edb2 <assert_print>
    e0fe:	494d      	ldr	r1, [pc, #308]	; (e234 <sys_clock_announce+0x170>)
    e100:	4851      	ldr	r0, [pc, #324]	; (e248 <sys_clock_announce+0x184>)
    e102:	f000 fe56 	bl	edb2 <assert_print>
    e106:	218e      	movs	r1, #142	; 0x8e
    e108:	4630      	mov	r0, r6
    e10a:	f000 fe4b 	bl	eda4 <assert_post_action>
    e10e:	e7e9      	b.n	e0e4 <sys_clock_announce+0x20>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e110:	4f4a      	ldr	r7, [pc, #296]	; (e23c <sys_clock_announce+0x178>)
    e112:	23b9      	movs	r3, #185	; 0xb9
    e114:	463a      	mov	r2, r7
    e116:	494d      	ldr	r1, [pc, #308]	; (e24c <sys_clock_announce+0x188>)
    e118:	484a      	ldr	r0, [pc, #296]	; (e244 <sys_clock_announce+0x180>)
    e11a:	f000 fe4a 	bl	edb2 <assert_print>
    e11e:	4945      	ldr	r1, [pc, #276]	; (e234 <sys_clock_announce+0x170>)
    e120:	484b      	ldr	r0, [pc, #300]	; (e250 <sys_clock_announce+0x18c>)
    e122:	f000 fe46 	bl	edb2 <assert_print>
    e126:	21b9      	movs	r1, #185	; 0xb9
    e128:	4638      	mov	r0, r7
    e12a:	f000 fe3b 	bl	eda4 <assert_post_action>
    e12e:	e028      	b.n	e182 <sys_clock_announce+0xbe>
	z_spin_lock_set_owner(l);
    e130:	4840      	ldr	r0, [pc, #256]	; (e234 <sys_clock_announce+0x170>)
    e132:	f7fd f917 	bl	b364 <z_spin_lock_set_owner>
		remove_timeout(t);

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
    e136:	4a40      	ldr	r2, [pc, #256]	; (e238 <sys_clock_announce+0x174>)
    e138:	6813      	ldr	r3, [r2, #0]
    e13a:	1b9b      	subs	r3, r3, r6
    e13c:	6013      	str	r3, [r2, #0]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    e13e:	f7ff fd83 	bl	dc48 <first>
    e142:	4604      	mov	r4, r0
    e144:	2800      	cmp	r0, #0
    e146:	d040      	beq.n	e1ca <sys_clock_announce+0x106>
    e148:	6906      	ldr	r6, [r0, #16]
    e14a:	6942      	ldr	r2, [r0, #20]
    e14c:	4b3a      	ldr	r3, [pc, #232]	; (e238 <sys_clock_announce+0x174>)
    e14e:	681b      	ldr	r3, [r3, #0]
    e150:	17d9      	asrs	r1, r3, #31
    e152:	42b3      	cmp	r3, r6
    e154:	eb71 0302 	sbcs.w	r3, r1, r2
    e158:	db37      	blt.n	e1ca <sys_clock_announce+0x106>
		curr_tick += dt;
    e15a:	4a3e      	ldr	r2, [pc, #248]	; (e254 <sys_clock_announce+0x190>)
    e15c:	6813      	ldr	r3, [r2, #0]
    e15e:	6851      	ldr	r1, [r2, #4]
    e160:	199b      	adds	r3, r3, r6
    e162:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
    e166:	6013      	str	r3, [r2, #0]
    e168:	6051      	str	r1, [r2, #4]
		t->dticks = 0;
    e16a:	2200      	movs	r2, #0
    e16c:	2300      	movs	r3, #0
    e16e:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    e172:	4620      	mov	r0, r4
    e174:	f001 fe33 	bl	fdde <remove_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e178:	482e      	ldr	r0, [pc, #184]	; (e234 <sys_clock_announce+0x170>)
    e17a:	f7fd f8e3 	bl	b344 <z_spin_unlock_valid>
    e17e:	2800      	cmp	r0, #0
    e180:	d0c6      	beq.n	e110 <sys_clock_announce+0x4c>
	__asm__ volatile(
    e182:	f385 8811 	msr	BASEPRI, r5
    e186:	f3bf 8f6f 	isb	sy
		t->fn(t);
    e18a:	68a3      	ldr	r3, [r4, #8]
    e18c:	4620      	mov	r0, r4
    e18e:	4798      	blx	r3
	__asm__ volatile(
    e190:	f04f 0320 	mov.w	r3, #32
    e194:	f3ef 8511 	mrs	r5, BASEPRI
    e198:	f383 8812 	msr	BASEPRI_MAX, r3
    e19c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e1a0:	4824      	ldr	r0, [pc, #144]	; (e234 <sys_clock_announce+0x170>)
    e1a2:	f7fd f8bf 	bl	b324 <z_spin_lock_valid>
    e1a6:	2800      	cmp	r0, #0
    e1a8:	d1c2      	bne.n	e130 <sys_clock_announce+0x6c>
    e1aa:	4c24      	ldr	r4, [pc, #144]	; (e23c <sys_clock_announce+0x178>)
    e1ac:	238e      	movs	r3, #142	; 0x8e
    e1ae:	4622      	mov	r2, r4
    e1b0:	4923      	ldr	r1, [pc, #140]	; (e240 <sys_clock_announce+0x17c>)
    e1b2:	4824      	ldr	r0, [pc, #144]	; (e244 <sys_clock_announce+0x180>)
    e1b4:	f000 fdfd 	bl	edb2 <assert_print>
    e1b8:	491e      	ldr	r1, [pc, #120]	; (e234 <sys_clock_announce+0x170>)
    e1ba:	4823      	ldr	r0, [pc, #140]	; (e248 <sys_clock_announce+0x184>)
    e1bc:	f000 fdf9 	bl	edb2 <assert_print>
    e1c0:	218e      	movs	r1, #142	; 0x8e
    e1c2:	4620      	mov	r0, r4
    e1c4:	f000 fdee 	bl	eda4 <assert_post_action>
    e1c8:	e7b2      	b.n	e130 <sys_clock_announce+0x6c>
	}

	if (first() != NULL) {
    e1ca:	b144      	cbz	r4, e1de <sys_clock_announce+0x11a>
		first()->dticks -= announce_remaining;
    e1cc:	4b1a      	ldr	r3, [pc, #104]	; (e238 <sys_clock_announce+0x174>)
    e1ce:	6819      	ldr	r1, [r3, #0]
    e1d0:	6923      	ldr	r3, [r4, #16]
    e1d2:	6962      	ldr	r2, [r4, #20]
    e1d4:	1a5b      	subs	r3, r3, r1
    e1d6:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
    e1da:	6123      	str	r3, [r4, #16]
    e1dc:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
    e1de:	4a1d      	ldr	r2, [pc, #116]	; (e254 <sys_clock_announce+0x190>)
    e1e0:	4e15      	ldr	r6, [pc, #84]	; (e238 <sys_clock_announce+0x174>)
    e1e2:	6830      	ldr	r0, [r6, #0]
    e1e4:	6813      	ldr	r3, [r2, #0]
    e1e6:	6851      	ldr	r1, [r2, #4]
    e1e8:	181b      	adds	r3, r3, r0
    e1ea:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
    e1ee:	6013      	str	r3, [r2, #0]
    e1f0:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
    e1f2:	2400      	movs	r4, #0
    e1f4:	6034      	str	r4, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    e1f6:	f7ff fd49 	bl	dc8c <next_timeout>
    e1fa:	4621      	mov	r1, r4
    e1fc:	f7f8 fe0e 	bl	6e1c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e200:	480c      	ldr	r0, [pc, #48]	; (e234 <sys_clock_announce+0x170>)
    e202:	f7fd f89f 	bl	b344 <z_spin_unlock_valid>
    e206:	b120      	cbz	r0, e212 <sys_clock_announce+0x14e>
	__asm__ volatile(
    e208:	f385 8811 	msr	BASEPRI, r5
    e20c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    e210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e212:	4c0a      	ldr	r4, [pc, #40]	; (e23c <sys_clock_announce+0x178>)
    e214:	23b9      	movs	r3, #185	; 0xb9
    e216:	4622      	mov	r2, r4
    e218:	490c      	ldr	r1, [pc, #48]	; (e24c <sys_clock_announce+0x188>)
    e21a:	480a      	ldr	r0, [pc, #40]	; (e244 <sys_clock_announce+0x180>)
    e21c:	f000 fdc9 	bl	edb2 <assert_print>
    e220:	4904      	ldr	r1, [pc, #16]	; (e234 <sys_clock_announce+0x170>)
    e222:	480b      	ldr	r0, [pc, #44]	; (e250 <sys_clock_announce+0x18c>)
    e224:	f000 fdc5 	bl	edb2 <assert_print>
    e228:	21b9      	movs	r1, #185	; 0xb9
    e22a:	4620      	mov	r0, r4
    e22c:	f000 fdba 	bl	eda4 <assert_post_action>
    e230:	e7ea      	b.n	e208 <sys_clock_announce+0x144>
    e232:	bf00      	nop
    e234:	200010e8 	.word	0x200010e8
    e238:	200010e4 	.word	0x200010e4
    e23c:	000105e8 	.word	0x000105e8
    e240:	00010648 	.word	0x00010648
    e244:	00010450 	.word	0x00010450
    e248:	00010660 	.word	0x00010660
    e24c:	00010618 	.word	0x00010618
    e250:	00010630 	.word	0x00010630
    e254:	200008a0 	.word	0x200008a0

0000e258 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    e258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    e25a:	2700      	movs	r7, #0
	__asm__ volatile(
    e25c:	f04f 0320 	mov.w	r3, #32
    e260:	f3ef 8611 	mrs	r6, BASEPRI
    e264:	f383 8812 	msr	BASEPRI_MAX, r3
    e268:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e26c:	481f      	ldr	r0, [pc, #124]	; (e2ec <sys_clock_tick_get+0x94>)
    e26e:	f7fd f859 	bl	b324 <z_spin_lock_valid>
    e272:	b128      	cbz	r0, e280 <sys_clock_tick_get+0x28>
	z_spin_lock_set_owner(l);
    e274:	481d      	ldr	r0, [pc, #116]	; (e2ec <sys_clock_tick_get+0x94>)
    e276:	f7fd f875 	bl	b364 <z_spin_lock_set_owner>
	uint64_t t = 0U;
    e27a:	2400      	movs	r4, #0
    e27c:	4625      	mov	r5, r4
	return k;
    e27e:	e014      	b.n	e2aa <sys_clock_tick_get+0x52>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e280:	4c1b      	ldr	r4, [pc, #108]	; (e2f0 <sys_clock_tick_get+0x98>)
    e282:	238e      	movs	r3, #142	; 0x8e
    e284:	4622      	mov	r2, r4
    e286:	491b      	ldr	r1, [pc, #108]	; (e2f4 <sys_clock_tick_get+0x9c>)
    e288:	481b      	ldr	r0, [pc, #108]	; (e2f8 <sys_clock_tick_get+0xa0>)
    e28a:	f000 fd92 	bl	edb2 <assert_print>
    e28e:	4917      	ldr	r1, [pc, #92]	; (e2ec <sys_clock_tick_get+0x94>)
    e290:	481a      	ldr	r0, [pc, #104]	; (e2fc <sys_clock_tick_get+0xa4>)
    e292:	f000 fd8e 	bl	edb2 <assert_print>
    e296:	218e      	movs	r1, #142	; 0x8e
    e298:	4620      	mov	r0, r4
    e29a:	f000 fd83 	bl	eda4 <assert_post_action>
    e29e:	e7e9      	b.n	e274 <sys_clock_tick_get+0x1c>
	__asm__ volatile(
    e2a0:	f386 8811 	msr	BASEPRI, r6
    e2a4:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    e2a8:	2701      	movs	r7, #1
    e2aa:	b9e7      	cbnz	r7, e2e6 <sys_clock_tick_get+0x8e>
		t = curr_tick + elapsed();
    e2ac:	f7ff fce2 	bl	dc74 <elapsed>
    e2b0:	4a13      	ldr	r2, [pc, #76]	; (e300 <sys_clock_tick_get+0xa8>)
    e2b2:	6814      	ldr	r4, [r2, #0]
    e2b4:	6855      	ldr	r5, [r2, #4]
    e2b6:	1904      	adds	r4, r0, r4
    e2b8:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e2bc:	480b      	ldr	r0, [pc, #44]	; (e2ec <sys_clock_tick_get+0x94>)
    e2be:	f7fd f841 	bl	b344 <z_spin_unlock_valid>
    e2c2:	2800      	cmp	r0, #0
    e2c4:	d1ec      	bne.n	e2a0 <sys_clock_tick_get+0x48>
    e2c6:	4f0a      	ldr	r7, [pc, #40]	; (e2f0 <sys_clock_tick_get+0x98>)
    e2c8:	23b9      	movs	r3, #185	; 0xb9
    e2ca:	463a      	mov	r2, r7
    e2cc:	490d      	ldr	r1, [pc, #52]	; (e304 <sys_clock_tick_get+0xac>)
    e2ce:	480a      	ldr	r0, [pc, #40]	; (e2f8 <sys_clock_tick_get+0xa0>)
    e2d0:	f000 fd6f 	bl	edb2 <assert_print>
    e2d4:	4905      	ldr	r1, [pc, #20]	; (e2ec <sys_clock_tick_get+0x94>)
    e2d6:	480c      	ldr	r0, [pc, #48]	; (e308 <sys_clock_tick_get+0xb0>)
    e2d8:	f000 fd6b 	bl	edb2 <assert_print>
    e2dc:	21b9      	movs	r1, #185	; 0xb9
    e2de:	4638      	mov	r0, r7
    e2e0:	f000 fd60 	bl	eda4 <assert_post_action>
    e2e4:	e7dc      	b.n	e2a0 <sys_clock_tick_get+0x48>
	}
	return t;
}
    e2e6:	4620      	mov	r0, r4
    e2e8:	4629      	mov	r1, r5
    e2ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e2ec:	200010e8 	.word	0x200010e8
    e2f0:	000105e8 	.word	0x000105e8
    e2f4:	00010648 	.word	0x00010648
    e2f8:	00010450 	.word	0x00010450
    e2fc:	00010660 	.word	0x00010660
    e300:	200008a0 	.word	0x200008a0
    e304:	00010618 	.word	0x00010618
    e308:	00010630 	.word	0x00010630

0000e30c <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    e30c:	b570      	push	{r4, r5, r6, lr}
    e30e:	4604      	mov	r4, r0
	__asm__ volatile(
    e310:	f04f 0320 	mov.w	r3, #32
    e314:	f3ef 8611 	mrs	r6, BASEPRI
    e318:	f383 8812 	msr	BASEPRI_MAX, r3
    e31c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e320:	4868      	ldr	r0, [pc, #416]	; (e4c4 <z_timer_expiration_handler+0x1b8>)
    e322:	f7fc ffff 	bl	b324 <z_spin_lock_valid>
    e326:	2800      	cmp	r0, #0
    e328:	d049      	beq.n	e3be <z_timer_expiration_handler+0xb2>
	z_spin_lock_set_owner(l);
    e32a:	4866      	ldr	r0, [pc, #408]	; (e4c4 <z_timer_expiration_handler+0x1b8>)
    e32c:	f7fd f81a 	bl	b364 <z_spin_lock_set_owner>
	return k;
    e330:	4635      	mov	r5, r6

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    e332:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    e334:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    e336:	ea52 0103 	orrs.w	r1, r2, r3
    e33a:	d005      	beq.n	e348 <z_timer_expiration_handler+0x3c>
    e33c:	f1b3 3fff 	cmp.w	r3, #4294967295
    e340:	bf08      	it	eq
    e342:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    e346:	d14a      	bne.n	e3de <z_timer_expiration_handler+0xd2>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
    e348:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e34a:	3301      	adds	r3, #1
    e34c:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    e34e:	6a23      	ldr	r3, [r4, #32]
    e350:	b1db      	cbz	r3, e38a <z_timer_expiration_handler+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e352:	485c      	ldr	r0, [pc, #368]	; (e4c4 <z_timer_expiration_handler+0x1b8>)
    e354:	f7fc fff6 	bl	b344 <z_spin_unlock_valid>
    e358:	2800      	cmp	r0, #0
    e35a:	d069      	beq.n	e430 <z_timer_expiration_handler+0x124>
	__asm__ volatile(
    e35c:	f386 8811 	msr	BASEPRI, r6
    e360:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    e364:	6a23      	ldr	r3, [r4, #32]
    e366:	4620      	mov	r0, r4
    e368:	4798      	blx	r3
	__asm__ volatile(
    e36a:	f04f 0320 	mov.w	r3, #32
    e36e:	f3ef 8511 	mrs	r5, BASEPRI
    e372:	f383 8812 	msr	BASEPRI_MAX, r3
    e376:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e37a:	4852      	ldr	r0, [pc, #328]	; (e4c4 <z_timer_expiration_handler+0x1b8>)
    e37c:	f7fc ffd2 	bl	b324 <z_spin_lock_valid>
    e380:	2800      	cmp	r0, #0
    e382:	d065      	beq.n	e450 <z_timer_expiration_handler+0x144>
	z_spin_lock_set_owner(l);
    e384:	484f      	ldr	r0, [pc, #316]	; (e4c4 <z_timer_expiration_handler+0x1b8>)
    e386:	f7fc ffed 	bl	b364 <z_spin_lock_set_owner>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    e38a:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
    e38e:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e390:	42a3      	cmp	r3, r4
    e392:	d06d      	beq.n	e470 <z_timer_expiration_handler+0x164>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    e394:	2c00      	cmp	r4, #0
    e396:	d06b      	beq.n	e470 <z_timer_expiration_handler+0x164>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
    e398:	4620      	mov	r0, r4
    e39a:	f7fe f937 	bl	c60c <z_unpend_thread_no_timeout>
    e39e:	2300      	movs	r3, #0
    e3a0:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e3a4:	4847      	ldr	r0, [pc, #284]	; (e4c4 <z_timer_expiration_handler+0x1b8>)
    e3a6:	f7fc ffcd 	bl	b344 <z_spin_unlock_valid>
    e3aa:	2800      	cmp	r0, #0
    e3ac:	d079      	beq.n	e4a2 <z_timer_expiration_handler+0x196>
	__asm__ volatile(
    e3ae:	f385 8811 	msr	BASEPRI, r5
    e3b2:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
    e3b6:	4620      	mov	r0, r4
    e3b8:	f7fe fc26 	bl	cc08 <z_ready_thread>
}
    e3bc:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e3be:	4d42      	ldr	r5, [pc, #264]	; (e4c8 <z_timer_expiration_handler+0x1bc>)
    e3c0:	238e      	movs	r3, #142	; 0x8e
    e3c2:	462a      	mov	r2, r5
    e3c4:	4941      	ldr	r1, [pc, #260]	; (e4cc <z_timer_expiration_handler+0x1c0>)
    e3c6:	4842      	ldr	r0, [pc, #264]	; (e4d0 <z_timer_expiration_handler+0x1c4>)
    e3c8:	f000 fcf3 	bl	edb2 <assert_print>
    e3cc:	493d      	ldr	r1, [pc, #244]	; (e4c4 <z_timer_expiration_handler+0x1b8>)
    e3ce:	4841      	ldr	r0, [pc, #260]	; (e4d4 <z_timer_expiration_handler+0x1c8>)
    e3d0:	f000 fcef 	bl	edb2 <assert_print>
    e3d4:	218e      	movs	r1, #142	; 0x8e
    e3d6:	4628      	mov	r0, r5
    e3d8:	f000 fce4 	bl	eda4 <assert_post_action>
    e3dc:	e7a5      	b.n	e32a <z_timer_expiration_handler+0x1e>
	return z_impl_k_uptime_ticks();
    e3de:	f001 fd19 	bl	fe14 <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
    e3e2:	3001      	adds	r0, #1
    e3e4:	f141 0100 	adc.w	r1, r1, #0
    e3e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    e3ea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    e3ec:	18c0      	adds	r0, r0, r3
    e3ee:	eb41 0102 	adc.w	r1, r1, r2
    e3f2:	2801      	cmp	r0, #1
    e3f4:	f171 0300 	sbcs.w	r3, r1, #0
    e3f8:	da08      	bge.n	e40c <z_timer_expiration_handler+0x100>
    e3fa:	f06f 0201 	mvn.w	r2, #1
    e3fe:	f04f 33ff 	mov.w	r3, #4294967295
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    e402:	4935      	ldr	r1, [pc, #212]	; (e4d8 <z_timer_expiration_handler+0x1cc>)
    e404:	4620      	mov	r0, r4
    e406:	f7ff fc67 	bl	dcd8 <z_add_timeout>
    e40a:	e79d      	b.n	e348 <z_timer_expiration_handler+0x3c>
    e40c:	f001 fd02 	bl	fe14 <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
    e410:	3001      	adds	r0, #1
    e412:	f141 0300 	adc.w	r3, r1, #0
    e416:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    e418:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    e41a:	1880      	adds	r0, r0, r2
    e41c:	eb43 0301 	adc.w	r3, r3, r1
    e420:	f06f 0201 	mvn.w	r2, #1
    e424:	1a12      	subs	r2, r2, r0
    e426:	f04f 31ff 	mov.w	r1, #4294967295
    e42a:	eb61 0303 	sbc.w	r3, r1, r3
    e42e:	e7e8      	b.n	e402 <z_timer_expiration_handler+0xf6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e430:	4d25      	ldr	r5, [pc, #148]	; (e4c8 <z_timer_expiration_handler+0x1bc>)
    e432:	23b9      	movs	r3, #185	; 0xb9
    e434:	462a      	mov	r2, r5
    e436:	4929      	ldr	r1, [pc, #164]	; (e4dc <z_timer_expiration_handler+0x1d0>)
    e438:	4825      	ldr	r0, [pc, #148]	; (e4d0 <z_timer_expiration_handler+0x1c4>)
    e43a:	f000 fcba 	bl	edb2 <assert_print>
    e43e:	4921      	ldr	r1, [pc, #132]	; (e4c4 <z_timer_expiration_handler+0x1b8>)
    e440:	4827      	ldr	r0, [pc, #156]	; (e4e0 <z_timer_expiration_handler+0x1d4>)
    e442:	f000 fcb6 	bl	edb2 <assert_print>
    e446:	21b9      	movs	r1, #185	; 0xb9
    e448:	4628      	mov	r0, r5
    e44a:	f000 fcab 	bl	eda4 <assert_post_action>
    e44e:	e785      	b.n	e35c <z_timer_expiration_handler+0x50>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e450:	4e1d      	ldr	r6, [pc, #116]	; (e4c8 <z_timer_expiration_handler+0x1bc>)
    e452:	238e      	movs	r3, #142	; 0x8e
    e454:	4632      	mov	r2, r6
    e456:	491d      	ldr	r1, [pc, #116]	; (e4cc <z_timer_expiration_handler+0x1c0>)
    e458:	481d      	ldr	r0, [pc, #116]	; (e4d0 <z_timer_expiration_handler+0x1c4>)
    e45a:	f000 fcaa 	bl	edb2 <assert_print>
    e45e:	4919      	ldr	r1, [pc, #100]	; (e4c4 <z_timer_expiration_handler+0x1b8>)
    e460:	481c      	ldr	r0, [pc, #112]	; (e4d4 <z_timer_expiration_handler+0x1c8>)
    e462:	f000 fca6 	bl	edb2 <assert_print>
    e466:	218e      	movs	r1, #142	; 0x8e
    e468:	4630      	mov	r0, r6
    e46a:	f000 fc9b 	bl	eda4 <assert_post_action>
    e46e:	e789      	b.n	e384 <z_timer_expiration_handler+0x78>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e470:	4814      	ldr	r0, [pc, #80]	; (e4c4 <z_timer_expiration_handler+0x1b8>)
    e472:	f7fc ff67 	bl	b344 <z_spin_unlock_valid>
    e476:	b120      	cbz	r0, e482 <z_timer_expiration_handler+0x176>
    e478:	f385 8811 	msr	BASEPRI, r5
    e47c:	f3bf 8f6f 	isb	sy
		return;
    e480:	e79c      	b.n	e3bc <z_timer_expiration_handler+0xb0>
    e482:	4c11      	ldr	r4, [pc, #68]	; (e4c8 <z_timer_expiration_handler+0x1bc>)
    e484:	23b9      	movs	r3, #185	; 0xb9
    e486:	4622      	mov	r2, r4
    e488:	4914      	ldr	r1, [pc, #80]	; (e4dc <z_timer_expiration_handler+0x1d0>)
    e48a:	4811      	ldr	r0, [pc, #68]	; (e4d0 <z_timer_expiration_handler+0x1c4>)
    e48c:	f000 fc91 	bl	edb2 <assert_print>
    e490:	490c      	ldr	r1, [pc, #48]	; (e4c4 <z_timer_expiration_handler+0x1b8>)
    e492:	4813      	ldr	r0, [pc, #76]	; (e4e0 <z_timer_expiration_handler+0x1d4>)
    e494:	f000 fc8d 	bl	edb2 <assert_print>
    e498:	21b9      	movs	r1, #185	; 0xb9
    e49a:	4620      	mov	r0, r4
    e49c:	f000 fc82 	bl	eda4 <assert_post_action>
    e4a0:	e7ea      	b.n	e478 <z_timer_expiration_handler+0x16c>
    e4a2:	4e09      	ldr	r6, [pc, #36]	; (e4c8 <z_timer_expiration_handler+0x1bc>)
    e4a4:	23b9      	movs	r3, #185	; 0xb9
    e4a6:	4632      	mov	r2, r6
    e4a8:	490c      	ldr	r1, [pc, #48]	; (e4dc <z_timer_expiration_handler+0x1d0>)
    e4aa:	4809      	ldr	r0, [pc, #36]	; (e4d0 <z_timer_expiration_handler+0x1c4>)
    e4ac:	f000 fc81 	bl	edb2 <assert_print>
    e4b0:	4904      	ldr	r1, [pc, #16]	; (e4c4 <z_timer_expiration_handler+0x1b8>)
    e4b2:	480b      	ldr	r0, [pc, #44]	; (e4e0 <z_timer_expiration_handler+0x1d4>)
    e4b4:	f000 fc7d 	bl	edb2 <assert_print>
    e4b8:	21b9      	movs	r1, #185	; 0xb9
    e4ba:	4630      	mov	r0, r6
    e4bc:	f000 fc72 	bl	eda4 <assert_post_action>
    e4c0:	e775      	b.n	e3ae <z_timer_expiration_handler+0xa2>
    e4c2:	bf00      	nop
    e4c4:	200010ec 	.word	0x200010ec
    e4c8:	000105e8 	.word	0x000105e8
    e4cc:	00010648 	.word	0x00010648
    e4d0:	00010450 	.word	0x00010450
    e4d4:	00010660 	.word	0x00010660
    e4d8:	0000e30d 	.word	0x0000e30d
    e4dc:	00010618 	.word	0x00010618
    e4e0:	00010630 	.word	0x00010630

0000e4e4 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    e4e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e4e8:	9f06      	ldr	r7, [sp, #24]
    e4ea:	f8dd 801c 	ldr.w	r8, [sp, #28]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    e4ee:	f1b3 3fff 	cmp.w	r3, #4294967295
    e4f2:	bf08      	it	eq
    e4f4:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    e4f8:	d02f      	beq.n	e55a <z_impl_k_timer_start+0x76>
    e4fa:	4605      	mov	r5, r0
    e4fc:	4614      	mov	r4, r2
    e4fe:	461e      	mov	r6, r3
    e500:	4611      	mov	r1, r2
    e502:	4618      	mov	r0, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    e504:	f1b8 3fff 	cmp.w	r8, #4294967295
    e508:	bf08      	it	eq
    e50a:	f1b7 3fff 	cmpeq.w	r7, #4294967295
    e50e:	d00d      	beq.n	e52c <z_impl_k_timer_start+0x48>
    e510:	ea57 0c08 	orrs.w	ip, r7, r8
    e514:	d00a      	beq.n	e52c <z_impl_k_timer_start+0x48>
	    Z_TICK_ABS(period.ticks) < 0) {
    e516:	f06f 0c01 	mvn.w	ip, #1
    e51a:	ebbc 0c07 	subs.w	ip, ip, r7
    e51e:	f04f 3cff 	mov.w	ip, #4294967295
    e522:	eb6c 0c08 	sbc.w	ip, ip, r8
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    e526:	f1bc 0f00 	cmp.w	ip, #0
    e52a:	db18      	blt.n	e55e <z_impl_k_timer_start+0x7a>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    e52c:	f06f 0301 	mvn.w	r3, #1
    e530:	1a5b      	subs	r3, r3, r1
    e532:	f04f 33ff 	mov.w	r3, #4294967295
    e536:	eb63 0300 	sbc.w	r3, r3, r0
    e53a:	2b00      	cmp	r3, #0
    e53c:	db1a      	blt.n	e574 <z_impl_k_timer_start+0x90>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
    e53e:	4628      	mov	r0, r5
    e540:	f7ff fcae 	bl	dea0 <z_abort_timeout>
	timer->period = period;
    e544:	62af      	str	r7, [r5, #40]	; 0x28
    e546:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
	timer->status = 0U;
    e54a:	2300      	movs	r3, #0
    e54c:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    e54e:	4622      	mov	r2, r4
    e550:	4633      	mov	r3, r6
    e552:	490e      	ldr	r1, [pc, #56]	; (e58c <z_impl_k_timer_start+0xa8>)
    e554:	4628      	mov	r0, r5
    e556:	f7ff fbbf 	bl	dcd8 <z_add_timeout>
		     duration);
}
    e55a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		period.ticks = MAX(period.ticks - 1, 1);
    e55e:	2f02      	cmp	r7, #2
    e560:	f178 0300 	sbcs.w	r3, r8, #0
    e564:	da02      	bge.n	e56c <z_impl_k_timer_start+0x88>
    e566:	2702      	movs	r7, #2
    e568:	f04f 0800 	mov.w	r8, #0
    e56c:	3f01      	subs	r7, #1
    e56e:	f148 38ff 	adc.w	r8, r8, #4294967295
    e572:	e7db      	b.n	e52c <z_impl_k_timer_start+0x48>
		duration.ticks = MAX(duration.ticks - 1, 0);
    e574:	460c      	mov	r4, r1
    e576:	4606      	mov	r6, r0
    e578:	2901      	cmp	r1, #1
    e57a:	f170 0300 	sbcs.w	r3, r0, #0
    e57e:	da01      	bge.n	e584 <z_impl_k_timer_start+0xa0>
    e580:	2401      	movs	r4, #1
    e582:	2600      	movs	r6, #0
    e584:	3c01      	subs	r4, #1
    e586:	f146 36ff 	adc.w	r6, r6, #4294967295
    e58a:	e7d8      	b.n	e53e <z_impl_k_timer_start+0x5a>
    e58c:	0000e30d 	.word	0x0000e30d

0000e590 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
    e590:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    e592:	4a03      	ldr	r2, [pc, #12]	; (e5a0 <boot_banner+0x10>)
    e594:	4903      	ldr	r1, [pc, #12]	; (e5a4 <boot_banner+0x14>)
    e596:	4804      	ldr	r0, [pc, #16]	; (e5a8 <boot_banner+0x18>)
    e598:	f000 faac 	bl	eaf4 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    e59c:	bd08      	pop	{r3, pc}
    e59e:	bf00      	nop
    e5a0:	000111bc 	.word	0x000111bc
    e5a4:	00012a20 	.word	0x00012a20
    e5a8:	00012a30 	.word	0x00012a30

0000e5ac <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    e5ac:	b510      	push	{r4, lr}
    e5ae:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    e5b0:	4b08      	ldr	r3, [pc, #32]	; (e5d4 <k_sys_work_q_init+0x28>)
    e5b2:	9302      	str	r3, [sp, #8]
    e5b4:	2400      	movs	r4, #0
    e5b6:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    e5ba:	ab02      	add	r3, sp, #8
    e5bc:	9300      	str	r3, [sp, #0]
    e5be:	f04f 33ff 	mov.w	r3, #4294967295
    e5c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e5c6:	4904      	ldr	r1, [pc, #16]	; (e5d8 <k_sys_work_q_init+0x2c>)
    e5c8:	4804      	ldr	r0, [pc, #16]	; (e5dc <k_sys_work_q_init+0x30>)
    e5ca:	f7fd fdb5 	bl	c138 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    e5ce:	4620      	mov	r0, r4
    e5d0:	b004      	add	sp, #16
    e5d2:	bd10      	pop	{r4, pc}
    e5d4:	00012a58 	.word	0x00012a58
    e5d8:	20002940 	.word	0x20002940
    e5dc:	200008a8 	.word	0x200008a8

0000e5e0 <nrf_cc3xx_platform_init_no_rng>:
    e5e0:	b510      	push	{r4, lr}
    e5e2:	4c0a      	ldr	r4, [pc, #40]	; (e60c <nrf_cc3xx_platform_init_no_rng+0x2c>)
    e5e4:	6823      	ldr	r3, [r4, #0]
    e5e6:	b11b      	cbz	r3, e5f0 <nrf_cc3xx_platform_init_no_rng+0x10>
    e5e8:	2301      	movs	r3, #1
    e5ea:	6023      	str	r3, [r4, #0]
    e5ec:	2000      	movs	r0, #0
    e5ee:	bd10      	pop	{r4, pc}
    e5f0:	f000 f8ce 	bl	e790 <CC_LibInitNoRng>
    e5f4:	2800      	cmp	r0, #0
    e5f6:	d0f7      	beq.n	e5e8 <nrf_cc3xx_platform_init_no_rng+0x8>
    e5f8:	3801      	subs	r0, #1
    e5fa:	2806      	cmp	r0, #6
    e5fc:	d803      	bhi.n	e606 <nrf_cc3xx_platform_init_no_rng+0x26>
    e5fe:	4b04      	ldr	r3, [pc, #16]	; (e610 <nrf_cc3xx_platform_init_no_rng+0x30>)
    e600:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    e604:	bd10      	pop	{r4, pc}
    e606:	4803      	ldr	r0, [pc, #12]	; (e614 <nrf_cc3xx_platform_init_no_rng+0x34>)
    e608:	bd10      	pop	{r4, pc}
    e60a:	bf00      	nop
    e60c:	200010f0 	.word	0x200010f0
    e610:	00012a64 	.word	0x00012a64
    e614:	ffff8ffe 	.word	0xffff8ffe

0000e618 <nrf_cc3xx_platform_abort>:
    e618:	f3bf 8f4f 	dsb	sy
    e61c:	4905      	ldr	r1, [pc, #20]	; (e634 <nrf_cc3xx_platform_abort+0x1c>)
    e61e:	4b06      	ldr	r3, [pc, #24]	; (e638 <nrf_cc3xx_platform_abort+0x20>)
    e620:	68ca      	ldr	r2, [r1, #12]
    e622:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    e626:	4313      	orrs	r3, r2
    e628:	60cb      	str	r3, [r1, #12]
    e62a:	f3bf 8f4f 	dsb	sy
    e62e:	bf00      	nop
    e630:	e7fd      	b.n	e62e <nrf_cc3xx_platform_abort+0x16>
    e632:	bf00      	nop
    e634:	e000ed00 	.word	0xe000ed00
    e638:	05fa0004 	.word	0x05fa0004

0000e63c <CC_PalAbort>:
    e63c:	b410      	push	{r4}
    e63e:	4b09      	ldr	r3, [pc, #36]	; (e664 <CC_PalAbort+0x28>)
    e640:	4909      	ldr	r1, [pc, #36]	; (e668 <CC_PalAbort+0x2c>)
    e642:	4c0a      	ldr	r4, [pc, #40]	; (e66c <CC_PalAbort+0x30>)
    e644:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    e648:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    e64c:	6849      	ldr	r1, [r1, #4]
    e64e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    e652:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    e656:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    e65a:	2300      	movs	r3, #0
    e65c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    e660:	bc10      	pop	{r4}
    e662:	4708      	bx	r1
    e664:	5002b000 	.word	0x5002b000
    e668:	2000012c 	.word	0x2000012c
    e66c:	5002a000 	.word	0x5002a000

0000e670 <nrf_cc3xx_platform_set_abort>:
    e670:	e9d0 1200 	ldrd	r1, r2, [r0]
    e674:	4b01      	ldr	r3, [pc, #4]	; (e67c <nrf_cc3xx_platform_set_abort+0xc>)
    e676:	e9c3 1200 	strd	r1, r2, [r3]
    e67a:	4770      	bx	lr
    e67c:	2000012c 	.word	0x2000012c

0000e680 <mutex_free>:
    e680:	b510      	push	{r4, lr}
    e682:	4604      	mov	r4, r0
    e684:	b130      	cbz	r0, e694 <mutex_free+0x14>
    e686:	6863      	ldr	r3, [r4, #4]
    e688:	06db      	lsls	r3, r3, #27
    e68a:	d502      	bpl.n	e692 <mutex_free+0x12>
    e68c:	2300      	movs	r3, #0
    e68e:	6023      	str	r3, [r4, #0]
    e690:	6063      	str	r3, [r4, #4]
    e692:	bd10      	pop	{r4, pc}
    e694:	4b02      	ldr	r3, [pc, #8]	; (e6a0 <mutex_free+0x20>)
    e696:	4803      	ldr	r0, [pc, #12]	; (e6a4 <mutex_free+0x24>)
    e698:	685b      	ldr	r3, [r3, #4]
    e69a:	4798      	blx	r3
    e69c:	e7f3      	b.n	e686 <mutex_free+0x6>
    e69e:	bf00      	nop
    e6a0:	2000012c 	.word	0x2000012c
    e6a4:	00012a80 	.word	0x00012a80

0000e6a8 <mutex_lock>:
    e6a8:	b1b0      	cbz	r0, e6d8 <mutex_lock+0x30>
    e6aa:	6843      	ldr	r3, [r0, #4]
    e6ac:	b193      	cbz	r3, e6d4 <mutex_lock+0x2c>
    e6ae:	06db      	lsls	r3, r3, #27
    e6b0:	d50e      	bpl.n	e6d0 <mutex_lock+0x28>
    e6b2:	2301      	movs	r3, #1
    e6b4:	e850 2f00 	ldrex	r2, [r0]
    e6b8:	4619      	mov	r1, r3
    e6ba:	e840 1c00 	strex	ip, r1, [r0]
    e6be:	f09c 0f00 	teq	ip, #0
    e6c2:	d1f7      	bne.n	e6b4 <mutex_lock+0xc>
    e6c4:	2a01      	cmp	r2, #1
    e6c6:	d0f5      	beq.n	e6b4 <mutex_lock+0xc>
    e6c8:	f3bf 8f5f 	dmb	sy
    e6cc:	2000      	movs	r0, #0
    e6ce:	4770      	bx	lr
    e6d0:	4803      	ldr	r0, [pc, #12]	; (e6e0 <mutex_lock+0x38>)
    e6d2:	4770      	bx	lr
    e6d4:	4803      	ldr	r0, [pc, #12]	; (e6e4 <mutex_lock+0x3c>)
    e6d6:	4770      	bx	lr
    e6d8:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    e6dc:	4770      	bx	lr
    e6de:	bf00      	nop
    e6e0:	ffff8fe9 	.word	0xffff8fe9
    e6e4:	ffff8fea 	.word	0xffff8fea

0000e6e8 <mutex_unlock>:
    e6e8:	b168      	cbz	r0, e706 <mutex_unlock+0x1e>
    e6ea:	6843      	ldr	r3, [r0, #4]
    e6ec:	b13b      	cbz	r3, e6fe <mutex_unlock+0x16>
    e6ee:	06db      	lsls	r3, r3, #27
    e6f0:	d507      	bpl.n	e702 <mutex_unlock+0x1a>
    e6f2:	f3bf 8f5f 	dmb	sy
    e6f6:	2300      	movs	r3, #0
    e6f8:	6003      	str	r3, [r0, #0]
    e6fa:	4618      	mov	r0, r3
    e6fc:	4770      	bx	lr
    e6fe:	4803      	ldr	r0, [pc, #12]	; (e70c <mutex_unlock+0x24>)
    e700:	4770      	bx	lr
    e702:	4803      	ldr	r0, [pc, #12]	; (e710 <mutex_unlock+0x28>)
    e704:	4770      	bx	lr
    e706:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    e70a:	4770      	bx	lr
    e70c:	ffff8fea 	.word	0xffff8fea
    e710:	ffff8fe9 	.word	0xffff8fe9

0000e714 <mutex_init>:
    e714:	b510      	push	{r4, lr}
    e716:	4604      	mov	r4, r0
    e718:	b120      	cbz	r0, e724 <mutex_init+0x10>
    e71a:	2200      	movs	r2, #0
    e71c:	2311      	movs	r3, #17
    e71e:	6022      	str	r2, [r4, #0]
    e720:	6063      	str	r3, [r4, #4]
    e722:	bd10      	pop	{r4, pc}
    e724:	4801      	ldr	r0, [pc, #4]	; (e72c <mutex_init+0x18>)
    e726:	f7ff ff89 	bl	e63c <CC_PalAbort>
    e72a:	e7f6      	b.n	e71a <mutex_init+0x6>
    e72c:	00012aa8 	.word	0x00012aa8

0000e730 <nrf_cc3xx_platform_set_mutexes>:
    e730:	b570      	push	{r4, r5, r6, lr}
    e732:	e9d0 2300 	ldrd	r2, r3, [r0]
    e736:	4c13      	ldr	r4, [pc, #76]	; (e784 <nrf_cc3xx_platform_set_mutexes+0x54>)
    e738:	4d13      	ldr	r5, [pc, #76]	; (e788 <nrf_cc3xx_platform_set_mutexes+0x58>)
    e73a:	6063      	str	r3, [r4, #4]
    e73c:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    e740:	e9c4 3002 	strd	r3, r0, [r4, #8]
    e744:	6022      	str	r2, [r4, #0]
    e746:	4b11      	ldr	r3, [pc, #68]	; (e78c <nrf_cc3xx_platform_set_mutexes+0x5c>)
    e748:	6808      	ldr	r0, [r1, #0]
    e74a:	6018      	str	r0, [r3, #0]
    e74c:	6848      	ldr	r0, [r1, #4]
    e74e:	6058      	str	r0, [r3, #4]
    e750:	6888      	ldr	r0, [r1, #8]
    e752:	6098      	str	r0, [r3, #8]
    e754:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
    e758:	60d8      	str	r0, [r3, #12]
    e75a:	6119      	str	r1, [r3, #16]
    e75c:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    e760:	06db      	lsls	r3, r3, #27
    e762:	d50d      	bpl.n	e780 <nrf_cc3xx_platform_set_mutexes+0x50>
    e764:	2300      	movs	r3, #0
    e766:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
    e76a:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
    e76e:	f505 708a 	add.w	r0, r5, #276	; 0x114
    e772:	4790      	blx	r2
    e774:	6823      	ldr	r3, [r4, #0]
    e776:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    e77a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e77e:	4718      	bx	r3
    e780:	bd70      	pop	{r4, r5, r6, pc}
    e782:	bf00      	nop
    e784:	2000013c 	.word	0x2000013c
    e788:	20001108 	.word	0x20001108
    e78c:	2000014c 	.word	0x2000014c

0000e790 <CC_LibInitNoRng>:
    e790:	b538      	push	{r3, r4, r5, lr}
    e792:	f000 f82f 	bl	e7f4 <CC_HalInit>
    e796:	b120      	cbz	r0, e7a2 <CC_LibInitNoRng+0x12>
    e798:	2403      	movs	r4, #3
    e79a:	f000 f863 	bl	e864 <CC_PalTerminate>
    e79e:	4620      	mov	r0, r4
    e7a0:	bd38      	pop	{r3, r4, r5, pc}
    e7a2:	f000 f831 	bl	e808 <CC_PalInit>
    e7a6:	b998      	cbnz	r0, e7d0 <CC_LibInitNoRng+0x40>
    e7a8:	f000 f8ac 	bl	e904 <CC_PalPowerSaveModeSelect>
    e7ac:	b998      	cbnz	r0, e7d6 <CC_LibInitNoRng+0x46>
    e7ae:	4d0f      	ldr	r5, [pc, #60]	; (e7ec <CC_LibInitNoRng+0x5c>)
    e7b0:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    e7b4:	0e1b      	lsrs	r3, r3, #24
    e7b6:	2bf0      	cmp	r3, #240	; 0xf0
    e7b8:	d108      	bne.n	e7cc <CC_LibInitNoRng+0x3c>
    e7ba:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    e7be:	4b0c      	ldr	r3, [pc, #48]	; (e7f0 <CC_LibInitNoRng+0x60>)
    e7c0:	429a      	cmp	r2, r3
    e7c2:	d00a      	beq.n	e7da <CC_LibInitNoRng+0x4a>
    e7c4:	2407      	movs	r4, #7
    e7c6:	f000 f817 	bl	e7f8 <CC_HalTerminate>
    e7ca:	e7e6      	b.n	e79a <CC_LibInitNoRng+0xa>
    e7cc:	2406      	movs	r4, #6
    e7ce:	e7fa      	b.n	e7c6 <CC_LibInitNoRng+0x36>
    e7d0:	2404      	movs	r4, #4
    e7d2:	4620      	mov	r0, r4
    e7d4:	bd38      	pop	{r3, r4, r5, pc}
    e7d6:	2400      	movs	r4, #0
    e7d8:	e7f5      	b.n	e7c6 <CC_LibInitNoRng+0x36>
    e7da:	2001      	movs	r0, #1
    e7dc:	f000 f892 	bl	e904 <CC_PalPowerSaveModeSelect>
    e7e0:	4604      	mov	r4, r0
    e7e2:	2800      	cmp	r0, #0
    e7e4:	d1f7      	bne.n	e7d6 <CC_LibInitNoRng+0x46>
    e7e6:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    e7ea:	e7d8      	b.n	e79e <CC_LibInitNoRng+0xe>
    e7ec:	5002b000 	.word	0x5002b000
    e7f0:	20e00000 	.word	0x20e00000

0000e7f4 <CC_HalInit>:
    e7f4:	2000      	movs	r0, #0
    e7f6:	4770      	bx	lr

0000e7f8 <CC_HalTerminate>:
    e7f8:	2000      	movs	r0, #0
    e7fa:	4770      	bx	lr

0000e7fc <CC_HalMaskInterrupt>:
    e7fc:	4b01      	ldr	r3, [pc, #4]	; (e804 <CC_HalMaskInterrupt+0x8>)
    e7fe:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    e802:	4770      	bx	lr
    e804:	5002b000 	.word	0x5002b000

0000e808 <CC_PalInit>:
    e808:	b510      	push	{r4, lr}
    e80a:	4811      	ldr	r0, [pc, #68]	; (e850 <CC_PalInit+0x48>)
    e80c:	f000 f848 	bl	e8a0 <CC_PalMutexCreate>
    e810:	b100      	cbz	r0, e814 <CC_PalInit+0xc>
    e812:	bd10      	pop	{r4, pc}
    e814:	480f      	ldr	r0, [pc, #60]	; (e854 <CC_PalInit+0x4c>)
    e816:	f000 f843 	bl	e8a0 <CC_PalMutexCreate>
    e81a:	2800      	cmp	r0, #0
    e81c:	d1f9      	bne.n	e812 <CC_PalInit+0xa>
    e81e:	4c0e      	ldr	r4, [pc, #56]	; (e858 <CC_PalInit+0x50>)
    e820:	4620      	mov	r0, r4
    e822:	f000 f83d 	bl	e8a0 <CC_PalMutexCreate>
    e826:	2800      	cmp	r0, #0
    e828:	d1f3      	bne.n	e812 <CC_PalInit+0xa>
    e82a:	4b0c      	ldr	r3, [pc, #48]	; (e85c <CC_PalInit+0x54>)
    e82c:	480c      	ldr	r0, [pc, #48]	; (e860 <CC_PalInit+0x58>)
    e82e:	601c      	str	r4, [r3, #0]
    e830:	f000 f836 	bl	e8a0 <CC_PalMutexCreate>
    e834:	4601      	mov	r1, r0
    e836:	2800      	cmp	r0, #0
    e838:	d1eb      	bne.n	e812 <CC_PalInit+0xa>
    e83a:	f000 f82d 	bl	e898 <CC_PalDmaInit>
    e83e:	4604      	mov	r4, r0
    e840:	b108      	cbz	r0, e846 <CC_PalInit+0x3e>
    e842:	4620      	mov	r0, r4
    e844:	bd10      	pop	{r4, pc}
    e846:	f000 f83f 	bl	e8c8 <CC_PalPowerSaveModeInit>
    e84a:	4620      	mov	r0, r4
    e84c:	e7fa      	b.n	e844 <CC_PalInit+0x3c>
    e84e:	bf00      	nop
    e850:	20000184 	.word	0x20000184
    e854:	20000178 	.word	0x20000178
    e858:	20000180 	.word	0x20000180
    e85c:	20000188 	.word	0x20000188
    e860:	2000017c 	.word	0x2000017c

0000e864 <CC_PalTerminate>:
    e864:	b508      	push	{r3, lr}
    e866:	4808      	ldr	r0, [pc, #32]	; (e888 <CC_PalTerminate+0x24>)
    e868:	f000 f824 	bl	e8b4 <CC_PalMutexDestroy>
    e86c:	4807      	ldr	r0, [pc, #28]	; (e88c <CC_PalTerminate+0x28>)
    e86e:	f000 f821 	bl	e8b4 <CC_PalMutexDestroy>
    e872:	4807      	ldr	r0, [pc, #28]	; (e890 <CC_PalTerminate+0x2c>)
    e874:	f000 f81e 	bl	e8b4 <CC_PalMutexDestroy>
    e878:	4806      	ldr	r0, [pc, #24]	; (e894 <CC_PalTerminate+0x30>)
    e87a:	f000 f81b 	bl	e8b4 <CC_PalMutexDestroy>
    e87e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    e882:	f000 b80b 	b.w	e89c <CC_PalDmaTerminate>
    e886:	bf00      	nop
    e888:	20000184 	.word	0x20000184
    e88c:	20000178 	.word	0x20000178
    e890:	20000180 	.word	0x20000180
    e894:	2000017c 	.word	0x2000017c

0000e898 <CC_PalDmaInit>:
    e898:	2000      	movs	r0, #0
    e89a:	4770      	bx	lr

0000e89c <CC_PalDmaTerminate>:
    e89c:	4770      	bx	lr
    e89e:	bf00      	nop

0000e8a0 <CC_PalMutexCreate>:
    e8a0:	b508      	push	{r3, lr}
    e8a2:	4b03      	ldr	r3, [pc, #12]	; (e8b0 <CC_PalMutexCreate+0x10>)
    e8a4:	6802      	ldr	r2, [r0, #0]
    e8a6:	681b      	ldr	r3, [r3, #0]
    e8a8:	6810      	ldr	r0, [r2, #0]
    e8aa:	4798      	blx	r3
    e8ac:	2000      	movs	r0, #0
    e8ae:	bd08      	pop	{r3, pc}
    e8b0:	2000013c 	.word	0x2000013c

0000e8b4 <CC_PalMutexDestroy>:
    e8b4:	b508      	push	{r3, lr}
    e8b6:	4b03      	ldr	r3, [pc, #12]	; (e8c4 <CC_PalMutexDestroy+0x10>)
    e8b8:	6802      	ldr	r2, [r0, #0]
    e8ba:	685b      	ldr	r3, [r3, #4]
    e8bc:	6810      	ldr	r0, [r2, #0]
    e8be:	4798      	blx	r3
    e8c0:	2000      	movs	r0, #0
    e8c2:	bd08      	pop	{r3, pc}
    e8c4:	2000013c 	.word	0x2000013c

0000e8c8 <CC_PalPowerSaveModeInit>:
    e8c8:	b570      	push	{r4, r5, r6, lr}
    e8ca:	4c09      	ldr	r4, [pc, #36]	; (e8f0 <CC_PalPowerSaveModeInit+0x28>)
    e8cc:	4d09      	ldr	r5, [pc, #36]	; (e8f4 <CC_PalPowerSaveModeInit+0x2c>)
    e8ce:	6920      	ldr	r0, [r4, #16]
    e8d0:	68ab      	ldr	r3, [r5, #8]
    e8d2:	4798      	blx	r3
    e8d4:	b118      	cbz	r0, e8de <CC_PalPowerSaveModeInit+0x16>
    e8d6:	4b08      	ldr	r3, [pc, #32]	; (e8f8 <CC_PalPowerSaveModeInit+0x30>)
    e8d8:	4808      	ldr	r0, [pc, #32]	; (e8fc <CC_PalPowerSaveModeInit+0x34>)
    e8da:	685b      	ldr	r3, [r3, #4]
    e8dc:	4798      	blx	r3
    e8de:	4a08      	ldr	r2, [pc, #32]	; (e900 <CC_PalPowerSaveModeInit+0x38>)
    e8e0:	68eb      	ldr	r3, [r5, #12]
    e8e2:	6920      	ldr	r0, [r4, #16]
    e8e4:	2100      	movs	r1, #0
    e8e6:	6011      	str	r1, [r2, #0]
    e8e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e8ec:	4718      	bx	r3
    e8ee:	bf00      	nop
    e8f0:	2000014c 	.word	0x2000014c
    e8f4:	2000013c 	.word	0x2000013c
    e8f8:	2000012c 	.word	0x2000012c
    e8fc:	00012acc 	.word	0x00012acc
    e900:	20001104 	.word	0x20001104

0000e904 <CC_PalPowerSaveModeSelect>:
    e904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e906:	4d1a      	ldr	r5, [pc, #104]	; (e970 <CC_PalPowerSaveModeSelect+0x6c>)
    e908:	4e1a      	ldr	r6, [pc, #104]	; (e974 <CC_PalPowerSaveModeSelect+0x70>)
    e90a:	4604      	mov	r4, r0
    e90c:	68b2      	ldr	r2, [r6, #8]
    e90e:	6928      	ldr	r0, [r5, #16]
    e910:	4790      	blx	r2
    e912:	b9e8      	cbnz	r0, e950 <CC_PalPowerSaveModeSelect+0x4c>
    e914:	4f18      	ldr	r7, [pc, #96]	; (e978 <CC_PalPowerSaveModeSelect+0x74>)
    e916:	683b      	ldr	r3, [r7, #0]
    e918:	b14c      	cbz	r4, e92e <CC_PalPowerSaveModeSelect+0x2a>
    e91a:	b1a3      	cbz	r3, e946 <CC_PalPowerSaveModeSelect+0x42>
    e91c:	2b01      	cmp	r3, #1
    e91e:	d019      	beq.n	e954 <CC_PalPowerSaveModeSelect+0x50>
    e920:	3b01      	subs	r3, #1
    e922:	603b      	str	r3, [r7, #0]
    e924:	6928      	ldr	r0, [r5, #16]
    e926:	68f3      	ldr	r3, [r6, #12]
    e928:	4798      	blx	r3
    e92a:	2000      	movs	r0, #0
    e92c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e92e:	b943      	cbnz	r3, e942 <CC_PalPowerSaveModeSelect+0x3e>
    e930:	4a12      	ldr	r2, [pc, #72]	; (e97c <CC_PalPowerSaveModeSelect+0x78>)
    e932:	2101      	movs	r1, #1
    e934:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    e938:	4911      	ldr	r1, [pc, #68]	; (e980 <CC_PalPowerSaveModeSelect+0x7c>)
    e93a:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
    e93e:	2a00      	cmp	r2, #0
    e940:	d1fb      	bne.n	e93a <CC_PalPowerSaveModeSelect+0x36>
    e942:	3301      	adds	r3, #1
    e944:	603b      	str	r3, [r7, #0]
    e946:	68f3      	ldr	r3, [r6, #12]
    e948:	6928      	ldr	r0, [r5, #16]
    e94a:	4798      	blx	r3
    e94c:	2000      	movs	r0, #0
    e94e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e950:	480c      	ldr	r0, [pc, #48]	; (e984 <CC_PalPowerSaveModeSelect+0x80>)
    e952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e954:	4a0a      	ldr	r2, [pc, #40]	; (e980 <CC_PalPowerSaveModeSelect+0x7c>)
    e956:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    e95a:	2b00      	cmp	r3, #0
    e95c:	d1fb      	bne.n	e956 <CC_PalPowerSaveModeSelect+0x52>
    e95e:	4a07      	ldr	r2, [pc, #28]	; (e97c <CC_PalPowerSaveModeSelect+0x78>)
    e960:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    e964:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    e968:	f7ff ff48 	bl	e7fc <CC_HalMaskInterrupt>
    e96c:	683b      	ldr	r3, [r7, #0]
    e96e:	e7d7      	b.n	e920 <CC_PalPowerSaveModeSelect+0x1c>
    e970:	2000014c 	.word	0x2000014c
    e974:	2000013c 	.word	0x2000013c
    e978:	20001104 	.word	0x20001104
    e97c:	5002a000 	.word	0x5002a000
    e980:	5002b000 	.word	0x5002b000
    e984:	ffff8fe9 	.word	0xffff8fe9

0000e988 <app_mpu_init>:
{
    e988:	b508      	push	{r3, lr}
    err = twi_init();
    e98a:	f7f2 f98b 	bl	ca4 <twi_init>
    if (err) {
    e98e:	4603      	mov	r3, r0
    e990:	b108      	cbz	r0, e996 <app_mpu_init+0xe>
}
    e992:	4618      	mov	r0, r3
    e994:	bd08      	pop	{r3, pc}
    err = app_mpu_write_single_register(MPU_REG_SIGNAL_PATH_RESET, reset_value);
    e996:	2107      	movs	r1, #7
    e998:	2068      	movs	r0, #104	; 0x68
    e99a:	f7f2 f8a5 	bl	ae8 <app_mpu_write_single_register>
    if (err) {
    e99e:	4603      	mov	r3, r0
    e9a0:	2800      	cmp	r0, #0
    e9a2:	d1f6      	bne.n	e992 <app_mpu_init+0xa>
    err = app_mpu_write_single_register(MPU_REG_PWR_MGMT_1, 1);
    e9a4:	2101      	movs	r1, #1
    e9a6:	206b      	movs	r0, #107	; 0x6b
    e9a8:	f7f2 f89e 	bl	ae8 <app_mpu_write_single_register>
    e9ac:	4603      	mov	r3, r0
    return err;
    e9ae:	e7f0      	b.n	e992 <app_mpu_init+0xa>

0000e9b0 <app_mpu_config>:
{
    e9b0:	b508      	push	{r3, lr}
    e9b2:	4601      	mov	r1, r0
    err = app_mpu_write_registers(MPU_REG_SMPLRT_DIV, data, 4);
    e9b4:	2204      	movs	r2, #4
    e9b6:	2019      	movs	r0, #25
    e9b8:	f7f2 f8bc 	bl	b34 <app_mpu_write_registers>
}
    e9bc:	bd08      	pop	{r3, pc}

0000e9be <mpu_sensor_init>:
{
    e9be:	b500      	push	{lr}
    e9c0:	b083      	sub	sp, #12
    err = app_mpu_init();
    e9c2:	f7ff ffe1 	bl	e988 <app_mpu_init>
    if (err) {
    e9c6:	b110      	cbz	r0, e9ce <mpu_sensor_init+0x10>
}
    e9c8:	b003      	add	sp, #12
    e9ca:	f85d fb04 	ldr.w	pc, [sp], #4
    app_mpu_config_t mpu_config = {
    e9ce:	9001      	str	r0, [sp, #4]
    e9d0:	2313      	movs	r3, #19
    e9d2:	f88d 3004 	strb.w	r3, [sp, #4]
    e9d6:	f89d 3005 	ldrb.w	r3, [sp, #5]
    e9da:	2201      	movs	r2, #1
    e9dc:	f362 0302 	bfi	r3, r2, #0, #3
    e9e0:	f88d 3005 	strb.w	r3, [sp, #5]
    e9e4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e9e8:	f043 0318 	orr.w	r3, r3, #24
    e9ec:	f88d 3006 	strb.w	r3, [sp, #6]
    err = app_mpu_config(&mpu_config);
    e9f0:	a801      	add	r0, sp, #4
    e9f2:	f7ff ffdd 	bl	e9b0 <app_mpu_config>
    return err;
    e9f6:	e7e7      	b.n	e9c8 <mpu_sensor_init+0xa>

0000e9f8 <cbprintf_via_va_list>:
{
    e9f8:	b510      	push	{r4, lr}
    e9fa:	460c      	mov	r4, r1
    e9fc:	4611      	mov	r1, r2
    e9fe:	461a      	mov	r2, r3
	return formatter(out, ctx, fmt, u.ap);
    ea00:	9b02      	ldr	r3, [sp, #8]
    ea02:	47a0      	blx	r4
}
    ea04:	bd10      	pop	{r4, pc}

0000ea06 <append_string>:
{
    ea06:	b570      	push	{r4, r5, r6, lr}
    ea08:	4614      	mov	r4, r2
	if (cb == NULL) {
    ea0a:	b138      	cbz	r0, ea1c <append_string+0x16>
    ea0c:	460d      	mov	r5, r1
    ea0e:	4619      	mov	r1, r3
    ea10:	4606      	mov	r6, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
    ea12:	b143      	cbz	r3, ea26 <append_string+0x20>
	return cb(str, strl, ctx);
    ea14:	462a      	mov	r2, r5
    ea16:	4620      	mov	r0, r4
    ea18:	47b0      	blx	r6
}
    ea1a:	bd70      	pop	{r4, r5, r6, pc}
		return 1 + strlen(str);
    ea1c:	4610      	mov	r0, r2
    ea1e:	f000 fbdc 	bl	f1da <strlen>
    ea22:	3001      	adds	r0, #1
    ea24:	e7f9      	b.n	ea1a <append_string+0x14>
	strl = strl > 0 ? strl : strlen(str) + 1;
    ea26:	4610      	mov	r0, r2
    ea28:	f000 fbd7 	bl	f1da <strlen>
    ea2c:	b283      	uxth	r3, r0
    ea2e:	3301      	adds	r3, #1
    ea30:	b299      	uxth	r1, r3
    ea32:	e7ef      	b.n	ea14 <append_string+0xe>

0000ea34 <cbpprintf_external>:
	if (buf == NULL) {
    ea34:	b353      	cbz	r3, ea8c <cbpprintf_external+0x58>
{
    ea36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ea3a:	b082      	sub	sp, #8
    ea3c:	4607      	mov	r7, r0
    ea3e:	4688      	mov	r8, r1
    ea40:	4691      	mov	r9, r2
    ea42:	461d      	mov	r5, r3
	args_size = hdr->hdr.desc.len * sizeof(int);
    ea44:	781a      	ldrb	r2, [r3, #0]
	s_nbr     = hdr->hdr.desc.str_cnt;
    ea46:	785e      	ldrb	r6, [r3, #1]
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
    ea48:	789c      	ldrb	r4, [r3, #2]
	rws_nbr   = hdr->hdr.desc.rw_str_cnt;
    ea4a:	78db      	ldrb	r3, [r3, #3]
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    ea4c:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    ea50:	441c      	add	r4, r3
    ea52:	442c      	add	r4, r5
	for (i = 0; i < s_nbr; i++) {
    ea54:	f04f 0a00 	mov.w	sl, #0
    ea58:	e00a      	b.n	ea70 <cbpprintf_external+0x3c>
		s_idx = *(uint8_t *)s++;
    ea5a:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
    ea5e:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
    ea62:	4620      	mov	r0, r4
    ea64:	f000 fbb9 	bl	f1da <strlen>
    ea68:	3001      	adds	r0, #1
    ea6a:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    ea6c:	f10a 0a01 	add.w	sl, sl, #1
    ea70:	45b2      	cmp	sl, r6
    ea72:	d3f2      	bcc.n	ea5a <cbpprintf_external+0x26>
	buf += sizeof(*hdr);
    ea74:	f105 0308 	add.w	r3, r5, #8
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
    ea78:	9300      	str	r3, [sp, #0]
    ea7a:	686b      	ldr	r3, [r5, #4]
    ea7c:	464a      	mov	r2, r9
    ea7e:	4641      	mov	r1, r8
    ea80:	4638      	mov	r0, r7
    ea82:	f7ff ffb9 	bl	e9f8 <cbprintf_via_va_list>
}
    ea86:	b002      	add	sp, #8
    ea88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
    ea8c:	f06f 0015 	mvn.w	r0, #21
}
    ea90:	4770      	bx	lr

0000ea92 <sys_notify_validate>:
	if (notify == NULL) {
    ea92:	4602      	mov	r2, r0
    ea94:	b158      	cbz	r0, eaae <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    ea96:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    ea98:	f003 0303 	and.w	r3, r3, #3
	switch (sys_notify_get_method(notify)) {
    ea9c:	2b01      	cmp	r3, #1
    ea9e:	d003      	beq.n	eaa8 <sys_notify_validate+0x16>
    eaa0:	2b03      	cmp	r3, #3
    eaa2:	d107      	bne.n	eab4 <sys_notify_validate+0x22>
		if (notify->method.callback == NULL) {
    eaa4:	6803      	ldr	r3, [r0, #0]
    eaa6:	b143      	cbz	r3, eaba <sys_notify_validate+0x28>
		notify->result = 0;
    eaa8:	2000      	movs	r0, #0
    eaaa:	6090      	str	r0, [r2, #8]
    eaac:	4770      	bx	lr
		return -EINVAL;
    eaae:	f06f 0015 	mvn.w	r0, #21
    eab2:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    eab4:	f06f 0015 	mvn.w	r0, #21
    eab8:	4770      	bx	lr
			rv = -EINVAL;
    eaba:	f06f 0015 	mvn.w	r0, #21
}
    eabe:	4770      	bx	lr

0000eac0 <arch_printk_char_out>:
}
    eac0:	2000      	movs	r0, #0
    eac2:	4770      	bx	lr

0000eac4 <str_out>:
{
    eac4:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    eac6:	680c      	ldr	r4, [r1, #0]
    eac8:	b154      	cbz	r4, eae0 <str_out+0x1c>
    eaca:	688a      	ldr	r2, [r1, #8]
    eacc:	684b      	ldr	r3, [r1, #4]
    eace:	429a      	cmp	r2, r3
    ead0:	da06      	bge.n	eae0 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
    ead2:	3b01      	subs	r3, #1
    ead4:	429a      	cmp	r2, r3
    ead6:	d008      	beq.n	eaea <str_out+0x26>
		ctx->str[ctx->count++] = c;
    ead8:	1c53      	adds	r3, r2, #1
    eada:	608b      	str	r3, [r1, #8]
    eadc:	54a0      	strb	r0, [r4, r2]
    eade:	e002      	b.n	eae6 <str_out+0x22>
		ctx->count++;
    eae0:	688b      	ldr	r3, [r1, #8]
    eae2:	3301      	adds	r3, #1
    eae4:	608b      	str	r3, [r1, #8]
}
    eae6:	bc10      	pop	{r4}
    eae8:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
    eaea:	1c53      	adds	r3, r2, #1
    eaec:	608b      	str	r3, [r1, #8]
    eaee:	2300      	movs	r3, #0
    eaf0:	54a3      	strb	r3, [r4, r2]
    eaf2:	e7f8      	b.n	eae6 <str_out+0x22>

0000eaf4 <printk>:
{
    eaf4:	b40f      	push	{r0, r1, r2, r3}
    eaf6:	b500      	push	{lr}
    eaf8:	b083      	sub	sp, #12
    eafa:	a904      	add	r1, sp, #16
    eafc:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    eb00:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
    eb02:	f7f2 fd0d 	bl	1520 <vprintk>
}
    eb06:	b003      	add	sp, #12
    eb08:	f85d eb04 	ldr.w	lr, [sp], #4
    eb0c:	b004      	add	sp, #16
    eb0e:	4770      	bx	lr

0000eb10 <snprintk>:
{
    eb10:	b40c      	push	{r2, r3}
    eb12:	b500      	push	{lr}
    eb14:	b083      	sub	sp, #12
    eb16:	ab04      	add	r3, sp, #16
    eb18:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    eb1c:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    eb1e:	f7f2 fd0d 	bl	153c <vsnprintk>
}
    eb22:	b003      	add	sp, #12
    eb24:	f85d eb04 	ldr.w	lr, [sp], #4
    eb28:	b002      	add	sp, #8
    eb2a:	4770      	bx	lr

0000eb2c <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    eb2c:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    eb30:	8b81      	ldrh	r1, [r0, #28]
    eb32:	f021 0107 	bic.w	r1, r1, #7
    eb36:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    eb38:	8381      	strh	r1, [r0, #28]
}
    eb3a:	4770      	bx	lr

0000eb3c <notify_monitors>:
{
    eb3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eb40:	4606      	mov	r6, r0
    eb42:	460f      	mov	r7, r1
    eb44:	4690      	mov	r8, r2
	return list->head;
    eb46:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    eb48:	b119      	cbz	r1, eb52 <notify_monitors+0x16>
    eb4a:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    eb4c:	b131      	cbz	r1, eb5c <notify_monitors+0x20>
	return node->next;
    eb4e:	680c      	ldr	r4, [r1, #0]
    eb50:	e004      	b.n	eb5c <notify_monitors+0x20>
    eb52:	460c      	mov	r4, r1
    eb54:	e002      	b.n	eb5c <notify_monitors+0x20>
    eb56:	4623      	mov	r3, r4
    eb58:	4621      	mov	r1, r4
    eb5a:	461c      	mov	r4, r3
    eb5c:	b159      	cbz	r1, eb76 <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
    eb5e:	684d      	ldr	r5, [r1, #4]
    eb60:	4643      	mov	r3, r8
    eb62:	463a      	mov	r2, r7
    eb64:	4630      	mov	r0, r6
    eb66:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    eb68:	2c00      	cmp	r4, #0
    eb6a:	d0f4      	beq.n	eb56 <notify_monitors+0x1a>
    eb6c:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    eb6e:	2c00      	cmp	r4, #0
    eb70:	d0f2      	beq.n	eb58 <notify_monitors+0x1c>
	return node->next;
    eb72:	6823      	ldr	r3, [r4, #0]
    eb74:	e7f0      	b.n	eb58 <notify_monitors+0x1c>
}
    eb76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000eb7a <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    eb7a:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    eb7c:	f013 0307 	ands.w	r3, r3, #7
    eb80:	d103      	bne.n	eb8a <process_recheck+0x10>
	return list->head;
    eb82:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    eb84:	b10a      	cbz	r2, eb8a <process_recheck+0x10>
		evt = EVT_START;
    eb86:	2003      	movs	r0, #3
    eb88:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    eb8a:	2b02      	cmp	r3, #2
    eb8c:	d003      	beq.n	eb96 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    eb8e:	2b01      	cmp	r3, #1
    eb90:	d006      	beq.n	eba0 <process_recheck+0x26>
	int evt = EVT_NOP;
    eb92:	2000      	movs	r0, #0
    eb94:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    eb96:	8bc2      	ldrh	r2, [r0, #30]
    eb98:	2a00      	cmp	r2, #0
    eb9a:	d1f8      	bne.n	eb8e <process_recheck+0x14>
		evt = EVT_STOP;
    eb9c:	2004      	movs	r0, #4
    eb9e:	4770      	bx	lr
    eba0:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    eba2:	b10b      	cbz	r3, eba8 <process_recheck+0x2e>
		evt = EVT_RESET;
    eba4:	2005      	movs	r0, #5
}
    eba6:	4770      	bx	lr
	int evt = EVT_NOP;
    eba8:	2000      	movs	r0, #0
    ebaa:	4770      	bx	lr

0000ebac <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    ebac:	b158      	cbz	r0, ebc6 <validate_args+0x1a>
{
    ebae:	b510      	push	{r4, lr}
    ebb0:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    ebb2:	b159      	cbz	r1, ebcc <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
    ebb4:	1d08      	adds	r0, r1, #4
    ebb6:	f7ff ff6c 	bl	ea92 <sys_notify_validate>
	if ((rv == 0)
    ebba:	b918      	cbnz	r0, ebc4 <validate_args+0x18>
	    && ((cli->notify.flags
    ebbc:	68a3      	ldr	r3, [r4, #8]
    ebbe:	f033 0303 	bics.w	r3, r3, #3
    ebc2:	d106      	bne.n	ebd2 <validate_args+0x26>
}
    ebc4:	bd10      	pop	{r4, pc}
		return -EINVAL;
    ebc6:	f06f 0015 	mvn.w	r0, #21
}
    ebca:	4770      	bx	lr
		return -EINVAL;
    ebcc:	f06f 0015 	mvn.w	r0, #21
    ebd0:	e7f8      	b.n	ebc4 <validate_args+0x18>
		rv = -EINVAL;
    ebd2:	f06f 0015 	mvn.w	r0, #21
    ebd6:	e7f5      	b.n	ebc4 <validate_args+0x18>

0000ebd8 <notify_one>:
{
    ebd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ebdc:	4607      	mov	r7, r0
    ebde:	460c      	mov	r4, r1
    ebe0:	4616      	mov	r6, r2
    ebe2:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    ebe4:	4619      	mov	r1, r3
    ebe6:	1d20      	adds	r0, r4, #4
    ebe8:	f7f2 fc68 	bl	14bc <sys_notify_finalize>
	if (cb) {
    ebec:	b128      	cbz	r0, ebfa <notify_one+0x22>
    ebee:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    ebf0:	462b      	mov	r3, r5
    ebf2:	4632      	mov	r2, r6
    ebf4:	4621      	mov	r1, r4
    ebf6:	4638      	mov	r0, r7
    ebf8:	47c0      	blx	r8
}
    ebfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ebfe <notify_all>:
{
    ebfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ec02:	4680      	mov	r8, r0
    ec04:	460c      	mov	r4, r1
    ec06:	4617      	mov	r7, r2
    ec08:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
    ec0a:	e004      	b.n	ec16 <notify_all+0x18>
		notify_one(mgr, cli, state, res);
    ec0c:	4633      	mov	r3, r6
    ec0e:	463a      	mov	r2, r7
    ec10:	4640      	mov	r0, r8
    ec12:	f7ff ffe1 	bl	ebd8 <notify_one>
    ec16:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    ec18:	b131      	cbz	r1, ec28 <notify_all+0x2a>
	return node->next;
    ec1a:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    ec1c:	6025      	str	r5, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    ec1e:	6863      	ldr	r3, [r4, #4]
    ec20:	428b      	cmp	r3, r1
    ec22:	d1f3      	bne.n	ec0c <notify_all+0xe>
	list->tail = node;
    ec24:	6065      	str	r5, [r4, #4]
}
    ec26:	e7f1      	b.n	ec0c <notify_all+0xe>
}
    ec28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ec2c <onoff_manager_init>:
	if ((mgr == NULL)
    ec2c:	b170      	cbz	r0, ec4c <onoff_manager_init+0x20>
{
    ec2e:	b538      	push	{r3, r4, r5, lr}
    ec30:	460c      	mov	r4, r1
    ec32:	4605      	mov	r5, r0
	    || (transitions == NULL)
    ec34:	b169      	cbz	r1, ec52 <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
    ec36:	680b      	ldr	r3, [r1, #0]
    ec38:	b173      	cbz	r3, ec58 <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
    ec3a:	684b      	ldr	r3, [r1, #4]
    ec3c:	b17b      	cbz	r3, ec5e <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    ec3e:	2220      	movs	r2, #32
    ec40:	2100      	movs	r1, #0
    ec42:	f000 fb0c 	bl	f25e <memset>
    ec46:	612c      	str	r4, [r5, #16]
	return 0;
    ec48:	2000      	movs	r0, #0
}
    ec4a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    ec4c:	f06f 0015 	mvn.w	r0, #21
}
    ec50:	4770      	bx	lr
		return -EINVAL;
    ec52:	f06f 0015 	mvn.w	r0, #21
    ec56:	e7f8      	b.n	ec4a <onoff_manager_init+0x1e>
    ec58:	f06f 0015 	mvn.w	r0, #21
    ec5c:	e7f5      	b.n	ec4a <onoff_manager_init+0x1e>
    ec5e:	f06f 0015 	mvn.w	r0, #21
    ec62:	e7f2      	b.n	ec4a <onoff_manager_init+0x1e>

0000ec64 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    ec64:	b508      	push	{r3, lr}
    ec66:	4604      	mov	r4, r0
    ec68:	4608      	mov	r0, r1
    ec6a:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    ec6c:	461a      	mov	r2, r3
    ec6e:	47a0      	blx	r4
	return z_impl_z_current_get();
    ec70:	f7fe fe6a 	bl	d948 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    ec74:	f7f6 fbda 	bl	542c <z_impl_k_thread_abort>

0000ec78 <extract_decimal>:
{
    ec78:	4684      	mov	ip, r0
	const char *sp = *str;
    ec7a:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    ec7c:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    ec7e:	e005      	b.n	ec8c <extract_decimal+0x14>
		val = 10U * val + *sp++ - '0';
    ec80:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    ec84:	3201      	adds	r2, #1
    ec86:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    ec8a:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    ec8c:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    ec8e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    ec92:	2909      	cmp	r1, #9
    ec94:	d9f4      	bls.n	ec80 <extract_decimal+0x8>
	*str = sp;
    ec96:	f8cc 2000 	str.w	r2, [ip]
}
    ec9a:	4770      	bx	lr

0000ec9c <encode_uint>:
{
    ec9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eca0:	b083      	sub	sp, #12
    eca2:	4604      	mov	r4, r0
    eca4:	460d      	mov	r5, r1
    eca6:	9201      	str	r2, [sp, #4]
    eca8:	469a      	mov	sl, r3
    ecaa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
    ecac:	78d3      	ldrb	r3, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    ecae:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    ecb2:	2b6f      	cmp	r3, #111	; 0x6f
    ecb4:	d00f      	beq.n	ecd6 <encode_uint+0x3a>
    ecb6:	d906      	bls.n	ecc6 <encode_uint+0x2a>
    ecb8:	2b70      	cmp	r3, #112	; 0x70
    ecba:	d00f      	beq.n	ecdc <encode_uint+0x40>
    ecbc:	2b78      	cmp	r3, #120	; 0x78
    ecbe:	d110      	bne.n	ece2 <encode_uint+0x46>
		return 16;
    ecc0:	f04f 0910 	mov.w	r9, #16
    ecc4:	e026      	b.n	ed14 <encode_uint+0x78>
	switch (specifier) {
    ecc6:	2b58      	cmp	r3, #88	; 0x58
    ecc8:	d002      	beq.n	ecd0 <encode_uint+0x34>
    ecca:	f04f 090a 	mov.w	r9, #10
    ecce:	e021      	b.n	ed14 <encode_uint+0x78>
		return 16;
    ecd0:	f04f 0910 	mov.w	r9, #16
    ecd4:	e01e      	b.n	ed14 <encode_uint+0x78>
		return 8;
    ecd6:	f04f 0908 	mov.w	r9, #8
    ecda:	e01b      	b.n	ed14 <encode_uint+0x78>
		return 16;
    ecdc:	f04f 0910 	mov.w	r9, #16
    ece0:	e018      	b.n	ed14 <encode_uint+0x78>
	switch (specifier) {
    ece2:	f04f 090a 	mov.w	r9, #10
	char *bp = bps + (bpe - bps);
    ece6:	e015      	b.n	ed14 <encode_uint+0x78>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    ece8:	f1bb 0f19 	cmp.w	fp, #25
    ecec:	d821      	bhi.n	ed32 <encode_uint+0x96>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    ecee:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    ecf0:	3237      	adds	r2, #55	; 0x37
    ecf2:	b2d2      	uxtb	r2, r2
    ecf4:	f806 2d01 	strb.w	r2, [r6, #-1]!
		value /= radix;
    ecf8:	463a      	mov	r2, r7
    ecfa:	4643      	mov	r3, r8
    ecfc:	4620      	mov	r0, r4
    ecfe:	4629      	mov	r1, r5
    ed00:	f7f1 f9fe 	bl	100 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    ed04:	42bc      	cmp	r4, r7
    ed06:	f175 0300 	sbcs.w	r3, r5, #0
    ed0a:	d316      	bcc.n	ed3a <encode_uint+0x9e>
    ed0c:	4556      	cmp	r6, sl
    ed0e:	d914      	bls.n	ed3a <encode_uint+0x9e>
		value /= radix;
    ed10:	4604      	mov	r4, r0
    ed12:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
    ed14:	f04f 0800 	mov.w	r8, #0
    ed18:	464f      	mov	r7, r9
    ed1a:	464a      	mov	r2, r9
    ed1c:	4643      	mov	r3, r8
    ed1e:	4620      	mov	r0, r4
    ed20:	4629      	mov	r1, r5
    ed22:	f7f1 f9ed 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    ed26:	2a09      	cmp	r2, #9
    ed28:	d8de      	bhi.n	ece8 <encode_uint+0x4c>
    ed2a:	b2d2      	uxtb	r2, r2
    ed2c:	3230      	adds	r2, #48	; 0x30
    ed2e:	b2d2      	uxtb	r2, r2
    ed30:	e7e0      	b.n	ecf4 <encode_uint+0x58>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    ed32:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    ed34:	3257      	adds	r2, #87	; 0x57
    ed36:	b2d2      	uxtb	r2, r2
    ed38:	e7dc      	b.n	ecf4 <encode_uint+0x58>
	if (conv->flag_hash) {
    ed3a:	9b01      	ldr	r3, [sp, #4]
    ed3c:	781b      	ldrb	r3, [r3, #0]
    ed3e:	f013 0f20 	tst.w	r3, #32
    ed42:	d005      	beq.n	ed50 <encode_uint+0xb4>
		if (radix == 8) {
    ed44:	f1b9 0f08 	cmp.w	r9, #8
    ed48:	d006      	beq.n	ed58 <encode_uint+0xbc>
		} else if (radix == 16) {
    ed4a:	f1b9 0f10 	cmp.w	r9, #16
    ed4e:	d009      	beq.n	ed64 <encode_uint+0xc8>
}
    ed50:	4630      	mov	r0, r6
    ed52:	b003      	add	sp, #12
    ed54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    ed58:	9a01      	ldr	r2, [sp, #4]
    ed5a:	7893      	ldrb	r3, [r2, #2]
    ed5c:	f043 0308 	orr.w	r3, r3, #8
    ed60:	7093      	strb	r3, [r2, #2]
    ed62:	e7f5      	b.n	ed50 <encode_uint+0xb4>
			conv->altform_0c = true;
    ed64:	9a01      	ldr	r2, [sp, #4]
    ed66:	7893      	ldrb	r3, [r2, #2]
    ed68:	f043 0310 	orr.w	r3, r3, #16
    ed6c:	7093      	strb	r3, [r2, #2]
    ed6e:	e7ef      	b.n	ed50 <encode_uint+0xb4>

0000ed70 <outs>:
{
    ed70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ed74:	4607      	mov	r7, r0
    ed76:	460e      	mov	r6, r1
    ed78:	4614      	mov	r4, r2
    ed7a:	4698      	mov	r8, r3
	size_t count = 0;
    ed7c:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    ed7e:	e006      	b.n	ed8e <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    ed80:	4631      	mov	r1, r6
    ed82:	f814 0b01 	ldrb.w	r0, [r4], #1
    ed86:	47b8      	blx	r7
		if (rc < 0) {
    ed88:	2800      	cmp	r0, #0
    ed8a:	db09      	blt.n	eda0 <outs+0x30>
		++count;
    ed8c:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    ed8e:	4544      	cmp	r4, r8
    ed90:	d3f6      	bcc.n	ed80 <outs+0x10>
    ed92:	f1b8 0f00 	cmp.w	r8, #0
    ed96:	d102      	bne.n	ed9e <outs+0x2e>
    ed98:	7823      	ldrb	r3, [r4, #0]
    ed9a:	2b00      	cmp	r3, #0
    ed9c:	d1f0      	bne.n	ed80 <outs+0x10>
	return (int)count;
    ed9e:	4628      	mov	r0, r5
}
    eda0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000eda4 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    eda4:	4040      	eors	r0, r0
    eda6:	f380 8811 	msr	BASEPRI, r0
    edaa:	f04f 0004 	mov.w	r0, #4
    edae:	df02      	svc	2
}
    edb0:	4770      	bx	lr

0000edb2 <assert_print>:

void assert_print(const char *fmt, ...)
{
    edb2:	b40f      	push	{r0, r1, r2, r3}
    edb4:	b500      	push	{lr}
    edb6:	b083      	sub	sp, #12
    edb8:	a904      	add	r1, sp, #16
    edba:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    edbe:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    edc0:	f7f2 fbae 	bl	1520 <vprintk>

	va_end(ap);
}
    edc4:	b003      	add	sp, #12
    edc6:	f85d eb04 	ldr.w	lr, [sp], #4
    edca:	b004      	add	sp, #16
    edcc:	4770      	bx	lr

0000edce <add_skip_item>:
{
    edce:	b410      	push	{r4}
	union mpsc_pbuf_generic skip = {
    edd0:	2300      	movs	r3, #0
    edd2:	f36f 0300 	bfc	r3, #0, #1
    edd6:	f043 0302 	orr.w	r3, r3, #2
    edda:	f361 039f 	bfi	r3, r1, #2, #30
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    edde:	6a02      	ldr	r2, [r0, #32]
    ede0:	6804      	ldr	r4, [r0, #0]
    ede2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    ede6:	6803      	ldr	r3, [r0, #0]
	uint32_t i = idx + val;
    ede8:	440b      	add	r3, r1
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    edea:	6902      	ldr	r2, [r0, #16]
    edec:	f012 0201 	ands.w	r2, r2, #1
    edf0:	d104      	bne.n	edfc <add_skip_item+0x2e>
	return (i >= buffer->size) ? i - buffer->size : i;
    edf2:	6a44      	ldr	r4, [r0, #36]	; 0x24
    edf4:	42a3      	cmp	r3, r4
    edf6:	d304      	bcc.n	ee02 <add_skip_item+0x34>
    edf8:	1b1b      	subs	r3, r3, r4
    edfa:	e002      	b.n	ee02 <add_skip_item+0x34>
		return i & (buffer->size - 1);
    edfc:	6a44      	ldr	r4, [r0, #36]	; 0x24
    edfe:	3c01      	subs	r4, #1
    ee00:	4023      	ands	r3, r4
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    ee02:	6003      	str	r3, [r0, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    ee04:	6843      	ldr	r3, [r0, #4]
	uint32_t i = idx + val;
    ee06:	4419      	add	r1, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    ee08:	b922      	cbnz	r2, ee14 <add_skip_item+0x46>
	return (i >= buffer->size) ? i - buffer->size : i;
    ee0a:	6a43      	ldr	r3, [r0, #36]	; 0x24
    ee0c:	4299      	cmp	r1, r3
    ee0e:	d304      	bcc.n	ee1a <add_skip_item+0x4c>
    ee10:	1ac9      	subs	r1, r1, r3
    ee12:	e002      	b.n	ee1a <add_skip_item+0x4c>
		return i & (buffer->size - 1);
    ee14:	6a43      	ldr	r3, [r0, #36]	; 0x24
    ee16:	3b01      	subs	r3, #1
    ee18:	4019      	ands	r1, r3
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    ee1a:	6041      	str	r1, [r0, #4]
}
    ee1c:	bc10      	pop	{r4}
    ee1e:	4770      	bx	lr

0000ee20 <drop_item_locked>:
{
    ee20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ee24:	b083      	sub	sp, #12
    ee26:	4604      	mov	r4, r0
    ee28:	9101      	str	r1, [sp, #4]
    ee2a:	4615      	mov	r5, r2
    ee2c:	461e      	mov	r6, r3
	*user_packet = false;
    ee2e:	2300      	movs	r3, #0
    ee30:	7033      	strb	r3, [r6, #0]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    ee32:	f8d0 8020 	ldr.w	r8, [r0, #32]
    ee36:	f8d0 900c 	ldr.w	r9, [r0, #12]
    ee3a:	eb08 0a89 	add.w	sl, r8, r9, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    ee3e:	f818 3029 	ldrb.w	r3, [r8, r9, lsl #2]
    ee42:	f003 0303 	and.w	r3, r3, #3
    ee46:	2b02      	cmp	r3, #2
    ee48:	d012      	beq.n	ee70 <drop_item_locked+0x50>
	return 0;
    ee4a:	f04f 0b00 	mov.w	fp, #0
	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
    ee4e:	69e3      	ldr	r3, [r4, #28]
    ee50:	4650      	mov	r0, sl
    ee52:	4798      	blx	r3
    ee54:	4607      	mov	r7, r0
	if (skip_wlen) {
    ee56:	f1bb 0f00 	cmp.w	fp, #0
    ee5a:	d151      	bne.n	ef00 <drop_item_locked+0xe0>
	} else if (allow_drop) {
    ee5c:	2d00      	cmp	r5, #0
    ee5e:	d05c      	beq.n	ef1a <drop_item_locked+0xfa>
		if (item->hdr.busy) {
    ee60:	f818 3029 	ldrb.w	r3, [r8, r9, lsl #2]
    ee64:	f013 0f02 	tst.w	r3, #2
    ee68:	d109      	bne.n	ee7e <drop_item_locked+0x5e>
			*user_packet = true;
    ee6a:	2301      	movs	r3, #1
    ee6c:	7033      	strb	r3, [r6, #0]
    ee6e:	e048      	b.n	ef02 <drop_item_locked+0xe2>
		return item->skip.len;
    ee70:	f858 3029 	ldr.w	r3, [r8, r9, lsl #2]
	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
    ee74:	ea5f 0b93 	movs.w	fp, r3, lsr #2
    ee78:	d0e9      	beq.n	ee4e <drop_item_locked+0x2e>
		return item->skip.len;
    ee7a:	465f      	mov	r7, fp
    ee7c:	e7eb      	b.n	ee56 <drop_item_locked+0x36>
			add_skip_item(buffer, free_wlen + 1);
    ee7e:	9901      	ldr	r1, [sp, #4]
    ee80:	3101      	adds	r1, #1
    ee82:	4620      	mov	r0, r4
    ee84:	f7ff ffa3 	bl	edce <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    ee88:	6863      	ldr	r3, [r4, #4]
	uint32_t i = idx + val;
    ee8a:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    ee8c:	6922      	ldr	r2, [r4, #16]
    ee8e:	f012 0201 	ands.w	r2, r2, #1
    ee92:	d104      	bne.n	ee9e <drop_item_locked+0x7e>
	return (i >= buffer->size) ? i - buffer->size : i;
    ee94:	6a61      	ldr	r1, [r4, #36]	; 0x24
    ee96:	428b      	cmp	r3, r1
    ee98:	d304      	bcc.n	eea4 <drop_item_locked+0x84>
    ee9a:	1a5b      	subs	r3, r3, r1
    ee9c:	e002      	b.n	eea4 <drop_item_locked+0x84>
		return i & (buffer->size - 1);
    ee9e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    eea0:	3901      	subs	r1, #1
    eea2:	400b      	ands	r3, r1
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    eea4:	6063      	str	r3, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    eea6:	6823      	ldr	r3, [r4, #0]
	uint32_t i = idx + val;
    eea8:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    eeaa:	b922      	cbnz	r2, eeb6 <drop_item_locked+0x96>
	return (i >= buffer->size) ? i - buffer->size : i;
    eeac:	6a61      	ldr	r1, [r4, #36]	; 0x24
    eeae:	428b      	cmp	r3, r1
    eeb0:	d304      	bcc.n	eebc <drop_item_locked+0x9c>
    eeb2:	1a5b      	subs	r3, r3, r1
    eeb4:	e002      	b.n	eebc <drop_item_locked+0x9c>
		return i & (buffer->size - 1);
    eeb6:	6a61      	ldr	r1, [r4, #36]	; 0x24
    eeb8:	3901      	subs	r1, #1
    eeba:	400b      	ands	r3, r1
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    eebc:	6023      	str	r3, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    eebe:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
    eec0:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    eec2:	b922      	cbnz	r2, eece <drop_item_locked+0xae>
	return (i >= buffer->size) ? i - buffer->size : i;
    eec4:	6a62      	ldr	r2, [r4, #36]	; 0x24
    eec6:	4293      	cmp	r3, r2
    eec8:	d304      	bcc.n	eed4 <drop_item_locked+0xb4>
    eeca:	1a9b      	subs	r3, r3, r2
    eecc:	e002      	b.n	eed4 <drop_item_locked+0xb4>
		return i & (buffer->size - 1);
    eece:	6a62      	ldr	r2, [r4, #36]	; 0x24
    eed0:	3a01      	subs	r2, #1
    eed2:	4013      	ands	r3, r2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
    eed4:	6a21      	ldr	r1, [r4, #32]
    eed6:	eb01 0a83 	add.w	sl, r1, r3, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    eeda:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
    eede:	f002 0203 	and.w	r2, r2, #3
    eee2:	2a02      	cmp	r2, #2
    eee4:	d006      	beq.n	eef4 <drop_item_locked+0xd4>
				rd_wlen += buffer->get_wlen(item);
    eee6:	69e3      	ldr	r3, [r4, #28]
    eee8:	4650      	mov	r0, sl
    eeea:	4798      	blx	r3
    eeec:	4407      	add	r7, r0
				*user_packet = true;
    eeee:	2301      	movs	r3, #1
    eef0:	7033      	strb	r3, [r6, #0]
    eef2:	e006      	b.n	ef02 <drop_item_locked+0xe2>
		return item->skip.len;
    eef4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
			if (skip_wlen) {
    eef8:	089b      	lsrs	r3, r3, #2
    eefa:	d0f4      	beq.n	eee6 <drop_item_locked+0xc6>
				rd_wlen += skip_wlen;
    eefc:	441f      	add	r7, r3
    eefe:	e000      	b.n	ef02 <drop_item_locked+0xe2>
		allow_drop = true;
    ef00:	2501      	movs	r5, #1
	if (allow_drop) {
    ef02:	b195      	cbz	r5, ef2a <drop_item_locked+0x10a>
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    ef04:	68e0      	ldr	r0, [r4, #12]
	uint32_t i = idx + val;
    ef06:	4407      	add	r7, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    ef08:	6923      	ldr	r3, [r4, #16]
    ef0a:	f013 0f01 	tst.w	r3, #1
    ef0e:	d107      	bne.n	ef20 <drop_item_locked+0x100>
	return (i >= buffer->size) ? i - buffer->size : i;
    ef10:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ef12:	429f      	cmp	r7, r3
    ef14:	d307      	bcc.n	ef26 <drop_item_locked+0x106>
    ef16:	1aff      	subs	r7, r7, r3
    ef18:	e005      	b.n	ef26 <drop_item_locked+0x106>
		item = NULL;
    ef1a:	f04f 0a00 	mov.w	sl, #0
    ef1e:	e7f0      	b.n	ef02 <drop_item_locked+0xe2>
		return i & (buffer->size - 1);
    ef20:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ef22:	3b01      	subs	r3, #1
    ef24:	401f      	ands	r7, r3
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    ef26:	60e7      	str	r7, [r4, #12]
		buffer->tmp_rd_idx = buffer->rd_idx;
    ef28:	60a7      	str	r7, [r4, #8]
}
    ef2a:	4650      	mov	r0, sl
    ef2c:	b003      	add	sp, #12
    ef2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000ef32 <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    ef32:	6883      	ldr	r3, [r0, #8]
    ef34:	6842      	ldr	r2, [r0, #4]
    ef36:	4293      	cmp	r3, r2
    ef38:	d905      	bls.n	ef46 <mpsc_pbuf_is_pending+0x14>
	*res = buffer->size - buffer->tmp_rd_idx;
    ef3a:	6a40      	ldr	r0, [r0, #36]	; 0x24
    ef3c:	1ac0      	subs	r0, r0, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
    ef3e:	3800      	subs	r0, #0
    ef40:	bf18      	it	ne
    ef42:	2001      	movne	r0, #1
    ef44:	4770      	bx	lr
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    ef46:	1ad0      	subs	r0, r2, r3
		return false;
    ef48:	e7f9      	b.n	ef3e <mpsc_pbuf_is_pending+0xc>

0000ef4a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    ef4a:	4770      	bx	lr

0000ef4c <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
    ef4c:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
    ef4e:	f013 0f04 	tst.w	r3, #4
    ef52:	d001      	beq.n	ef58 <log_msg_generic_get_wlen+0xc>
	return 0;
    ef54:	2000      	movs	r0, #0
}
    ef56:	4770      	bx	lr
		return log_msg_get_total_wlen(msg->hdr.desc);
    ef58:	6803      	ldr	r3, [r0, #0]
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    ef5a:	f3c3 2049 	ubfx	r0, r3, #9, #10
    ef5e:	f3c3 43cb 	ubfx	r3, r3, #19, #12
    ef62:	4418      	add	r0, r3
    ef64:	3017      	adds	r0, #23
    ef66:	f020 0007 	bic.w	r0, r0, #7
    ef6a:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
    ef6c:	4770      	bx	lr

0000ef6e <dummy_timestamp>:
}
    ef6e:	2000      	movs	r0, #0
    ef70:	4770      	bx	lr

0000ef72 <msg_filter_check>:
}
    ef72:	2001      	movs	r0, #1
    ef74:	4770      	bx	lr

0000ef76 <default_get_timestamp>:
{
    ef76:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    ef78:	f000 fd0c 	bl	f994 <sys_clock_cycle_get_32>
}
    ef7c:	bd08      	pop	{r3, pc}

0000ef7e <notify_drop>:
{
    ef7e:	b508      	push	{r3, lr}
	z_log_dropped(true);
    ef80:	2001      	movs	r0, #1
    ef82:	f7f3 ffc5 	bl	2f10 <z_log_dropped>
}
    ef86:	bd08      	pop	{r3, pc}

0000ef88 <z_log_get_tag>:
}
    ef88:	2000      	movs	r0, #0
    ef8a:	4770      	bx	lr

0000ef8c <z_cbprintf_cpy>:
{
    ef8c:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
    ef8e:	6853      	ldr	r3, [r2, #4]
    ef90:	6896      	ldr	r6, [r2, #8]
    ef92:	1b9b      	subs	r3, r3, r6
    ef94:	428b      	cmp	r3, r1
    ef96:	d30c      	bcc.n	efb2 <z_cbprintf_cpy+0x26>
    ef98:	460c      	mov	r4, r1
    ef9a:	4615      	mov	r5, r2
	memcpy(&((uint8_t *)desc->buf)[desc->off], (void *)buf, len);
    ef9c:	6813      	ldr	r3, [r2, #0]
    ef9e:	460a      	mov	r2, r1
    efa0:	4601      	mov	r1, r0
    efa2:	1998      	adds	r0, r3, r6
    efa4:	f000 f92c 	bl	f200 <memcpy>
	desc->off += len;
    efa8:	68ab      	ldr	r3, [r5, #8]
    efaa:	4423      	add	r3, r4
    efac:	60ab      	str	r3, [r5, #8]
	return len;
    efae:	4620      	mov	r0, r4
}
    efb0:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
    efb2:	f06f 001b 	mvn.w	r0, #27
    efb6:	e7fb      	b.n	efb0 <z_cbprintf_cpy+0x24>

0000efb8 <z_log_msg_finalize>:
{
    efb8:	b570      	push	{r4, r5, r6, lr}
	if (!msg) {
    efba:	b198      	cbz	r0, efe4 <z_log_msg_finalize+0x2c>
    efbc:	460e      	mov	r6, r1
    efbe:	4614      	mov	r4, r2
    efc0:	4619      	mov	r1, r3
    efc2:	4605      	mov	r5, r0
	if (data) {
    efc4:	b143      	cbz	r3, efd8 <z_log_msg_finalize+0x20>
		uint8_t *d = msg->data + desc.package_len;
    efc6:	f100 0310 	add.w	r3, r0, #16
    efca:	f3c2 2049 	ubfx	r0, r2, #9, #10
		memcpy(d, data, desc.data_len);
    efce:	f3c2 42cb 	ubfx	r2, r2, #19, #12
    efd2:	4418      	add	r0, r3
    efd4:	f000 f914 	bl	f200 <memcpy>
	msg->hdr.desc = desc;
    efd8:	602c      	str	r4, [r5, #0]
	msg->hdr.source = source;
    efda:	606e      	str	r6, [r5, #4]
	z_log_msg_commit(msg);
    efdc:	4628      	mov	r0, r5
    efde:	f7f4 f957 	bl	3290 <z_log_msg_commit>
}
    efe2:	bd70      	pop	{r4, r5, r6, pc}
		z_log_dropped(false);
    efe4:	f7f3 ff94 	bl	2f10 <z_log_dropped>
		return;
    efe8:	e7fb      	b.n	efe2 <z_log_msg_finalize+0x2a>

0000efea <buffer_write>:
{
    efea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    efec:	4607      	mov	r7, r0
    efee:	460d      	mov	r5, r1
    eff0:	4614      	mov	r4, r2
    eff2:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
    eff4:	4632      	mov	r2, r6
    eff6:	4621      	mov	r1, r4
    eff8:	4628      	mov	r0, r5
    effa:	47b8      	blx	r7
		buf += processed;
    effc:	4405      	add	r5, r0
	} while (len != 0);
    effe:	1a24      	subs	r4, r4, r0
    f000:	d1f8      	bne.n	eff4 <buffer_write+0xa>
}
    f002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000f004 <cbvprintf>:
{
    f004:	b510      	push	{r4, lr}
    f006:	b082      	sub	sp, #8
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    f008:	2400      	movs	r4, #0
    f00a:	9400      	str	r4, [sp, #0]
    f00c:	f7f2 ff8a 	bl	1f24 <z_cbvprintf_impl>
}
    f010:	b002      	add	sp, #8
    f012:	bd10      	pop	{r4, pc}

0000f014 <color_prefix>:
{
    f014:	b508      	push	{r3, lr}
    f016:	4613      	mov	r3, r2
	color_print(output, color, true, level);
    f018:	2201      	movs	r2, #1
    f01a:	f7f4 faa9 	bl	3570 <color_print>
}
    f01e:	bd08      	pop	{r3, pc}

0000f020 <color_postfix>:
{
    f020:	b508      	push	{r3, lr}
    f022:	4613      	mov	r3, r2
	color_print(output, color, false, level);
    f024:	2200      	movs	r2, #0
    f026:	f7f4 faa3 	bl	3570 <color_print>
}
    f02a:	bd08      	pop	{r3, pc}

0000f02c <postfix_print>:
{
    f02c:	b538      	push	{r3, r4, r5, lr}
    f02e:	4605      	mov	r5, r0
    f030:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
    f032:	f001 0101 	and.w	r1, r1, #1
    f036:	f7ff fff3 	bl	f020 <color_postfix>
	newline_print(output, flags);
    f03a:	4621      	mov	r1, r4
    f03c:	4628      	mov	r0, r5
    f03e:	f7f4 fb21 	bl	3684 <newline_print>
}
    f042:	bd38      	pop	{r3, r4, r5, pc}

0000f044 <log_msg_hexdump>:
{
    f044:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f048:	b083      	sub	sp, #12
    f04a:	4680      	mov	r8, r0
    f04c:	460e      	mov	r6, r1
    f04e:	4615      	mov	r5, r2
    f050:	461f      	mov	r7, r3
    f052:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    f056:	462c      	mov	r4, r5
    f058:	2d10      	cmp	r5, #16
    f05a:	bf28      	it	cs
    f05c:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
    f05e:	f8cd 9000 	str.w	r9, [sp]
    f062:	463b      	mov	r3, r7
    f064:	4622      	mov	r2, r4
    f066:	4631      	mov	r1, r6
    f068:	4640      	mov	r0, r8
    f06a:	f7f4 fb1f 	bl	36ac <hexdump_line_print>
		data += length;
    f06e:	4426      	add	r6, r4
	} while (len);
    f070:	1b2d      	subs	r5, r5, r4
    f072:	d1f0      	bne.n	f056 <log_msg_hexdump+0x12>
}
    f074:	b003      	add	sp, #12
    f076:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000f07a <log_output_flush>:
{
    f07a:	b510      	push	{r4, lr}
    f07c:	4604      	mov	r4, r0
		     output->control_block->offset,
    f07e:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    f080:	6853      	ldr	r3, [r2, #4]
    f082:	6812      	ldr	r2, [r2, #0]
    f084:	6881      	ldr	r1, [r0, #8]
    f086:	6800      	ldr	r0, [r0, #0]
    f088:	f7ff ffaf 	bl	efea <buffer_write>
	output->control_block->offset = 0;
    f08c:	6863      	ldr	r3, [r4, #4]
    f08e:	2200      	movs	r2, #0
    f090:	601a      	str	r2, [r3, #0]
}
    f092:	bd10      	pop	{r4, pc}

0000f094 <cr_out_func>:
{
    f094:	b538      	push	{r3, r4, r5, lr}
    f096:	4604      	mov	r4, r0
    f098:	460d      	mov	r5, r1
	out_func(c, ctx);
    f09a:	f7f4 fb65 	bl	3768 <out_func>
	if (c == '\n') {
    f09e:	2c0a      	cmp	r4, #10
    f0a0:	d001      	beq.n	f0a6 <cr_out_func+0x12>
}
    f0a2:	2000      	movs	r0, #0
    f0a4:	bd38      	pop	{r3, r4, r5, pc}
		out_func((int)'\r', ctx);
    f0a6:	4629      	mov	r1, r5
    f0a8:	200d      	movs	r0, #13
    f0aa:	f7f4 fb5d 	bl	3768 <out_func>
    f0ae:	e7f8      	b.n	f0a2 <cr_out_func+0xe>

0000f0b0 <pm_policy_state_lock_is_active>:
			return (atomic_get(&substate_lock_t[i].lock) != 0);
		}
	}

	return false;
}
    f0b0:	2000      	movs	r0, #0
    f0b2:	4770      	bx	lr

0000f0b4 <abort_function>:
{
    f0b4:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    f0b6:	2000      	movs	r0, #0
    f0b8:	f7f3 fd30 	bl	2b1c <sys_reboot>

0000f0bc <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    f0bc:	b538      	push	{r3, r4, r5, lr}
    f0be:	4604      	mov	r4, r0

	if (esf != NULL) {
    f0c0:	460d      	mov	r5, r1
    f0c2:	b111      	cbz	r1, f0ca <z_arm_fatal_error+0xe>
		esf_dump(esf);
    f0c4:	4608      	mov	r0, r1
    f0c6:	f7f4 ffa1 	bl	400c <esf_dump>
	}
	z_fatal_error(reason, esf);
    f0ca:	4629      	mov	r1, r5
    f0cc:	4620      	mov	r0, r4
    f0ce:	f7fb fddb 	bl	ac88 <z_fatal_error>
}
    f0d2:	bd38      	pop	{r3, r4, r5, pc}

0000f0d4 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    f0d4:	b508      	push	{r3, lr}
    f0d6:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    f0d8:	6800      	ldr	r0, [r0, #0]
    f0da:	f7ff ffef 	bl	f0bc <z_arm_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    f0de:	bd08      	pop	{r3, pc}

0000f0e0 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
    f0e0:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    f0e2:	2100      	movs	r1, #0
    f0e4:	2001      	movs	r0, #1
    f0e6:	f7ff ffe9 	bl	f0bc <z_arm_fatal_error>
}
    f0ea:	bd08      	pop	{r3, pc}

0000f0ec <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    f0ec:	b508      	push	{r3, lr}
	handler();
    f0ee:	f7f5 f901 	bl	42f4 <z_SysNmiOnReset>
	z_arm_int_exit();
    f0f2:	f7f5 f9f7 	bl	44e4 <z_arm_exc_exit>
}
    f0f6:	bd08      	pop	{r3, pc}

0000f0f8 <memory_fault_recoverable>:
}
    f0f8:	2000      	movs	r0, #0
    f0fa:	4770      	bx	lr

0000f0fc <fault_handle>:
{
    f0fc:	b508      	push	{r3, lr}
	*recoverable = false;
    f0fe:	2300      	movs	r3, #0
    f100:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    f102:	1ecb      	subs	r3, r1, #3
    f104:	2b09      	cmp	r3, #9
    f106:	d81a      	bhi.n	f13e <fault_handle+0x42>
    f108:	e8df f003 	tbb	[pc, r3]
    f10c:	110d0905 	.word	0x110d0905
    f110:	19191919 	.word	0x19191919
    f114:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
    f116:	4611      	mov	r1, r2
    f118:	f7f5 ff14 	bl	4f44 <hard_fault>
}
    f11c:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    f11e:	2100      	movs	r1, #0
    f120:	f7f5 fd64 	bl	4bec <mem_manage_fault>
		break;
    f124:	e7fa      	b.n	f11c <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
    f126:	2100      	movs	r1, #0
    f128:	f7f5 f9ea 	bl	4500 <bus_fault>
		break;
    f12c:	e7f6      	b.n	f11c <fault_handle+0x20>
		reason = usage_fault(esf);
    f12e:	f7f5 fb77 	bl	4820 <usage_fault>
		break;
    f132:	e7f3      	b.n	f11c <fault_handle+0x20>
		debug_monitor(esf, recoverable);
    f134:	4611      	mov	r1, r2
    f136:	f7f5 fcbd 	bl	4ab4 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    f13a:	2000      	movs	r0, #0
		break;
    f13c:	e7ee      	b.n	f11c <fault_handle+0x20>
		reserved_exception(esf, fault);
    f13e:	f7f5 fce9 	bl	4b14 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    f142:	2000      	movs	r0, #0
	return reason;
    f144:	e7ea      	b.n	f11c <fault_handle+0x20>

0000f146 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
    f146:	6843      	ldr	r3, [r0, #4]
    f148:	1e5a      	subs	r2, r3, #1
		&&
    f14a:	4213      	tst	r3, r2
    f14c:	d106      	bne.n	f15c <mpu_partition_is_valid+0x16>
		&&
    f14e:	2b1f      	cmp	r3, #31
    f150:	d906      	bls.n	f160 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
    f152:	6803      	ldr	r3, [r0, #0]
		&&
    f154:	421a      	tst	r2, r3
    f156:	d005      	beq.n	f164 <mpu_partition_is_valid+0x1e>
    f158:	2000      	movs	r0, #0
    f15a:	4770      	bx	lr
    f15c:	2000      	movs	r0, #0
    f15e:	4770      	bx	lr
    f160:	2000      	movs	r0, #0
    f162:	4770      	bx	lr
    f164:	2001      	movs	r0, #1
}
    f166:	4770      	bx	lr

0000f168 <mpu_configure_region>:
{
    f168:	b500      	push	{lr}
    f16a:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    f16c:	680b      	ldr	r3, [r1, #0]
    f16e:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    f170:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    f172:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
    f174:	2b20      	cmp	r3, #32
    f176:	d912      	bls.n	f19e <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
    f178:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    f17c:	d811      	bhi.n	f1a2 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    f17e:	3b01      	subs	r3, #1
    f180:	fab3 f383 	clz	r3, r3
    f184:	f1c3 031f 	rsb	r3, r3, #31
    f188:	005b      	lsls	r3, r3, #1
    f18a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    f18e:	4313      	orrs	r3, r2
    f190:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    f192:	a901      	add	r1, sp, #4
    f194:	f7f6 f998 	bl	54c8 <region_allocate_and_init>
}
    f198:	b005      	add	sp, #20
    f19a:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
    f19e:	2308      	movs	r3, #8
    f1a0:	e7f5      	b.n	f18e <mpu_configure_region+0x26>
		return REGION_4G;
    f1a2:	233e      	movs	r3, #62	; 0x3e
    f1a4:	e7f3      	b.n	f18e <mpu_configure_region+0x26>

0000f1a6 <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    f1a6:	4603      	mov	r3, r0
    f1a8:	b1a2      	cbz	r2, f1d4 <strncpy+0x2e>
{
    f1aa:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
    f1ac:	780c      	ldrb	r4, [r1, #0]
    f1ae:	b12c      	cbz	r4, f1bc <strncpy+0x16>
		*d = *s;
    f1b0:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
    f1b4:	3101      	adds	r1, #1
		d++;
		n--;
    f1b6:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
    f1b8:	2a00      	cmp	r2, #0
    f1ba:	d1f7      	bne.n	f1ac <strncpy+0x6>
	}

	while (n > 0) {
    f1bc:	b122      	cbz	r2, f1c8 <strncpy+0x22>
		*d = '\0';
    f1be:	2100      	movs	r1, #0
    f1c0:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
    f1c4:	3a01      	subs	r2, #1
    f1c6:	e7f9      	b.n	f1bc <strncpy+0x16>
	}

	return dest;
}
    f1c8:	bc10      	pop	{r4}
    f1ca:	4770      	bx	lr
		*d = '\0';
    f1cc:	2100      	movs	r1, #0
    f1ce:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    f1d2:	3a01      	subs	r2, #1
	while (n > 0) {
    f1d4:	2a00      	cmp	r2, #0
    f1d6:	d1f9      	bne.n	f1cc <strncpy+0x26>
    f1d8:	4770      	bx	lr

0000f1da <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    f1da:	4603      	mov	r3, r0
	size_t n = 0;
    f1dc:	2000      	movs	r0, #0

	while (*s != '\0') {
    f1de:	e001      	b.n	f1e4 <strlen+0xa>
		s++;
    f1e0:	3301      	adds	r3, #1
		n++;
    f1e2:	3001      	adds	r0, #1
	while (*s != '\0') {
    f1e4:	781a      	ldrb	r2, [r3, #0]
    f1e6:	2a00      	cmp	r2, #0
    f1e8:	d1fa      	bne.n	f1e0 <strlen+0x6>
	}

	return n;
}
    f1ea:	4770      	bx	lr

0000f1ec <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    f1ec:	4603      	mov	r3, r0
	size_t n = 0;
    f1ee:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    f1f0:	e001      	b.n	f1f6 <strnlen+0xa>
		s++;
    f1f2:	3301      	adds	r3, #1
		n++;
    f1f4:	3001      	adds	r0, #1
	while (*s != '\0' && n < maxlen) {
    f1f6:	781a      	ldrb	r2, [r3, #0]
    f1f8:	b10a      	cbz	r2, f1fe <strnlen+0x12>
    f1fa:	4288      	cmp	r0, r1
    f1fc:	d3f9      	bcc.n	f1f2 <strnlen+0x6>
	}

	return n;
}
    f1fe:	4770      	bx	lr

0000f200 <memcpy>:
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    f200:	ea80 0301 	eor.w	r3, r0, r1
    f204:	f013 0f03 	tst.w	r3, #3
    f208:	d001      	beq.n	f20e <memcpy+0xe>
	unsigned char *d_byte = (unsigned char *)d;
    f20a:	4603      	mov	r3, r0
    f20c:	e023      	b.n	f256 <memcpy+0x56>
    f20e:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
    f210:	f013 0f03 	tst.w	r3, #3
    f214:	d00f      	beq.n	f236 <memcpy+0x36>
			if (n == 0) {
    f216:	b30a      	cbz	r2, f25c <memcpy+0x5c>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    f218:	f811 cb01 	ldrb.w	ip, [r1], #1
    f21c:	f803 cb01 	strb.w	ip, [r3], #1
			n--;
    f220:	3a01      	subs	r2, #1
    f222:	e7f5      	b.n	f210 <memcpy+0x10>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
    f224:	f811 cb01 	ldrb.w	ip, [r1], #1
    f228:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    f22c:	3a01      	subs	r2, #1
	while (n > 0) {
    f22e:	2a00      	cmp	r2, #0
    f230:	d1f8      	bne.n	f224 <memcpy+0x24>
	}

	return d;
}
    f232:	bc10      	pop	{r4}
    f234:	4770      	bx	lr
		while (n >= sizeof(mem_word_t)) {
    f236:	2a03      	cmp	r2, #3
    f238:	d90d      	bls.n	f256 <memcpy+0x56>
{
    f23a:	b410      	push	{r4}
			*(d_word++) = *(s_word++);
    f23c:	f851 4b04 	ldr.w	r4, [r1], #4
    f240:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
    f244:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
    f246:	2a03      	cmp	r2, #3
    f248:	d8f8      	bhi.n	f23c <memcpy+0x3c>
    f24a:	e7f0      	b.n	f22e <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    f24c:	f811 cb01 	ldrb.w	ip, [r1], #1
    f250:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    f254:	3a01      	subs	r2, #1
	while (n > 0) {
    f256:	2a00      	cmp	r2, #0
    f258:	d1f8      	bne.n	f24c <memcpy+0x4c>
    f25a:	4770      	bx	lr
}
    f25c:	4770      	bx	lr

0000f25e <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    f25e:	fa5f fc81 	uxtb.w	ip, r1
	unsigned char *d_byte = (unsigned char *)buf;
    f262:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    f264:	e002      	b.n	f26c <memset+0xe>
		if (n == 0) {
			return buf;
		}
		*(d_byte++) = c_byte;
    f266:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    f26a:	3a01      	subs	r2, #1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    f26c:	f013 0f03 	tst.w	r3, #3
    f270:	d002      	beq.n	f278 <memset+0x1a>
		if (n == 0) {
    f272:	2a00      	cmp	r2, #0
    f274:	d1f7      	bne.n	f266 <memset+0x8>
    f276:	e00f      	b.n	f298 <memset+0x3a>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    f278:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    f27a:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
    f27e:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    f282:	2a03      	cmp	r2, #3
    f284:	d906      	bls.n	f294 <memset+0x36>
		*(d_word++) = c_word;
    f286:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
    f28a:	3a04      	subs	r2, #4
    f28c:	e7f9      	b.n	f282 <memset+0x24>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
    f28e:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    f292:	3a01      	subs	r2, #1
	while (n > 0) {
    f294:	2a00      	cmp	r2, #0
    f296:	d1fa      	bne.n	f28e <memset+0x30>
	}

	return buf;
}
    f298:	4770      	bx	lr

0000f29a <_stdout_hook_default>:
}
    f29a:	f04f 30ff 	mov.w	r0, #4294967295
    f29e:	4770      	bx	lr

0000f2a0 <nrf52_errata_197>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    f2a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    f2a4:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    f2a8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    f2ac:	2a08      	cmp	r2, #8
    f2ae:	d001      	beq.n	f2b4 <nrf52_errata_197+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    f2b0:	2000      	movs	r0, #0
    f2b2:	4770      	bx	lr
                switch(var2)
    f2b4:	2b02      	cmp	r3, #2
    f2b6:	d001      	beq.n	f2bc <nrf52_errata_197+0x1c>
                        return false;
    f2b8:	2000      	movs	r0, #0
    f2ba:	4770      	bx	lr
                        return true;
    f2bc:	2001      	movs	r0, #1
    #endif
}
    f2be:	4770      	bx	lr

0000f2c0 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    f2c0:	2806      	cmp	r0, #6
    f2c2:	d000      	beq.n	f2c6 <pm_state_set+0x6>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    f2c4:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    f2c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    f2ca:	2201      	movs	r2, #1
    f2cc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    f2d0:	f3bf 8f4f 	dsb	sy
        __WFE();
    f2d4:	bf20      	wfe
    while (true)
    f2d6:	e7fd      	b.n	f2d4 <pm_state_set+0x14>

0000f2d8 <pm_state_exit_post_ops>:
    f2d8:	2300      	movs	r3, #0
    f2da:	f383 8811 	msr	BASEPRI, r3
    f2de:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    f2e2:	4770      	bx	lr

0000f2e4 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    f2e4:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    f2e6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    f2ea:	0089      	lsls	r1, r1, #2
    f2ec:	3140      	adds	r1, #64	; 0x40
}
    f2ee:	4408      	add	r0, r1
    f2f0:	4770      	bx	lr

0000f2f2 <get_sub_config>:
	const struct nrf_clock_control_config *config =
    f2f2:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
    f2f4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
    f2f8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    f2fc:	4770      	bx	lr

0000f2fe <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    f2fe:	6900      	ldr	r0, [r0, #16]
}
    f300:	eb00 1041 	add.w	r0, r0, r1, lsl #5
    f304:	4770      	bx	lr

0000f306 <set_off_state>:
	__asm__ volatile(
    f306:	f04f 0320 	mov.w	r3, #32
    f30a:	f3ef 8211 	mrs	r2, BASEPRI
    f30e:	f383 8812 	msr	BASEPRI_MAX, r3
    f312:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    f316:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    f318:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    f31c:	d001      	beq.n	f322 <set_off_state+0x1c>
    f31e:	428b      	cmp	r3, r1
    f320:	d107      	bne.n	f332 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    f322:	2301      	movs	r3, #1
    f324:	6003      	str	r3, [r0, #0]
	int err = 0;
    f326:	2000      	movs	r0, #0
	__asm__ volatile(
    f328:	f382 8811 	msr	BASEPRI, r2
    f32c:	f3bf 8f6f 	isb	sy
}
    f330:	4770      	bx	lr
		err = -EPERM;
    f332:	f04f 30ff 	mov.w	r0, #4294967295
    f336:	e7f7      	b.n	f328 <set_off_state+0x22>

0000f338 <set_starting_state>:
	__asm__ volatile(
    f338:	f04f 0320 	mov.w	r3, #32
    f33c:	f3ef 8211 	mrs	r2, BASEPRI
    f340:	f383 8812 	msr	BASEPRI_MAX, r3
    f344:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    f348:	6803      	ldr	r3, [r0, #0]
    f34a:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    f34e:	f003 0307 	and.w	r3, r3, #7
    f352:	2b01      	cmp	r3, #1
    f354:	d008      	beq.n	f368 <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
    f356:	458c      	cmp	ip, r1
    f358:	d009      	beq.n	f36e <set_starting_state+0x36>
		err = -EPERM;
    f35a:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
    f35e:	f382 8811 	msr	BASEPRI, r2
    f362:	f3bf 8f6f 	isb	sy
}
    f366:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    f368:	6001      	str	r1, [r0, #0]
	int err = 0;
    f36a:	2000      	movs	r0, #0
    f36c:	e7f7      	b.n	f35e <set_starting_state+0x26>
		err = -EALREADY;
    f36e:	f06f 0077 	mvn.w	r0, #119	; 0x77
    f372:	e7f4      	b.n	f35e <set_starting_state+0x26>

0000f374 <set_on_state>:
	__asm__ volatile(
    f374:	f04f 0320 	mov.w	r3, #32
    f378:	f3ef 8211 	mrs	r2, BASEPRI
    f37c:	f383 8812 	msr	BASEPRI_MAX, r3
    f380:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    f384:	6803      	ldr	r3, [r0, #0]
    f386:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    f38a:	f043 0302 	orr.w	r3, r3, #2
    f38e:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    f390:	f382 8811 	msr	BASEPRI, r2
    f394:	f3bf 8f6f 	isb	sy
}
    f398:	4770      	bx	lr

0000f39a <clkstarted_handle>:
{
    f39a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f39c:	4606      	mov	r6, r0
    f39e:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    f3a0:	f7ff ffa0 	bl	f2e4 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    f3a4:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    f3a6:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    f3a8:	2300      	movs	r3, #0
    f3aa:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    f3ae:	f7ff ffe1 	bl	f374 <set_on_state>
	if (callback) {
    f3b2:	b11d      	cbz	r5, f3bc <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    f3b4:	463a      	mov	r2, r7
    f3b6:	4621      	mov	r1, r4
    f3b8:	4630      	mov	r0, r6
    f3ba:	47a8      	blx	r5
}
    f3bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000f3be <async_start>:
{
    f3be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f3c2:	4606      	mov	r6, r0
    f3c4:	4690      	mov	r8, r2
    f3c6:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    f3c8:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    f3ca:	4629      	mov	r1, r5
    f3cc:	f7ff ff8a 	bl	f2e4 <get_sub_data>
    f3d0:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    f3d2:	9906      	ldr	r1, [sp, #24]
    f3d4:	3008      	adds	r0, #8
    f3d6:	f7ff ffaf 	bl	f338 <set_starting_state>
	if (err < 0) {
    f3da:	2800      	cmp	r0, #0
    f3dc:	db09      	blt.n	f3f2 <async_start+0x34>
	subdata->cb = cb;
    f3de:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    f3e2:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    f3e4:	4629      	mov	r1, r5
    f3e6:	4630      	mov	r0, r6
    f3e8:	f7ff ff83 	bl	f2f2 <get_sub_config>
    f3ec:	6803      	ldr	r3, [r0, #0]
    f3ee:	4798      	blx	r3
	return 0;
    f3f0:	2000      	movs	r0, #0
}
    f3f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f3f6 <api_start>:
{
    f3f6:	b510      	push	{r4, lr}
    f3f8:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    f3fa:	2480      	movs	r4, #128	; 0x80
    f3fc:	9400      	str	r4, [sp, #0]
    f3fe:	f7ff ffde 	bl	f3be <async_start>
}
    f402:	b002      	add	sp, #8
    f404:	bd10      	pop	{r4, pc}

0000f406 <onoff_started_callback>:
{
    f406:	b510      	push	{r4, lr}
    f408:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    f40a:	b2c9      	uxtb	r1, r1
    f40c:	f7ff ff77 	bl	f2fe <get_onoff_manager>
	notify(mgr, 0);
    f410:	2100      	movs	r1, #0
    f412:	47a0      	blx	r4
}
    f414:	bd10      	pop	{r4, pc}

0000f416 <hfclk_start>:
{
    f416:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    f418:	2001      	movs	r0, #1
    f41a:	f7f9 fb1b 	bl	8a54 <nrfx_clock_start>
}
    f41e:	bd08      	pop	{r3, pc}

0000f420 <lfclk_start>:
{
    f420:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    f422:	2000      	movs	r0, #0
    f424:	f7f9 fb16 	bl	8a54 <nrfx_clock_start>
}
    f428:	bd08      	pop	{r3, pc}

0000f42a <hfclk_stop>:
{
    f42a:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    f42c:	2001      	movs	r0, #1
    f42e:	f7f9 fb87 	bl	8b40 <nrfx_clock_stop>
}
    f432:	bd08      	pop	{r3, pc}

0000f434 <lfclk_stop>:
{
    f434:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    f436:	2000      	movs	r0, #0
    f438:	f7f9 fb82 	bl	8b40 <nrfx_clock_stop>
}
    f43c:	bd08      	pop	{r3, pc}

0000f43e <api_stop>:
{
    f43e:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    f440:	2280      	movs	r2, #128	; 0x80
    f442:	f7f6 fa7f 	bl	5944 <stop>
}
    f446:	bd08      	pop	{r3, pc}

0000f448 <blocking_start_callback>:
{
    f448:	b508      	push	{r3, lr}
    f44a:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    f44c:	f7fc fb6a 	bl	bb24 <z_impl_k_sem_give>
}
    f450:	bd08      	pop	{r3, pc}

0000f452 <get_drive>:
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    f452:	f020 00f9 	bic.w	r0, r0, #249	; 0xf9
    f456:	0580      	lsls	r0, r0, #22
    f458:	0d80      	lsrs	r0, r0, #22
    f45a:	f5b0 7f83 	cmp.w	r0, #262	; 0x106
    f45e:	d033      	beq.n	f4c8 <get_drive+0x76>
    f460:	d816      	bhi.n	f490 <get_drive+0x3e>
    f462:	2806      	cmp	r0, #6
    f464:	d02c      	beq.n	f4c0 <get_drive+0x6e>
    f466:	d906      	bls.n	f476 <get_drive+0x24>
    f468:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    f46c:	d10d      	bne.n	f48a <get_drive+0x38>
		*drive = NRF_GPIO_PIN_H0S1;
    f46e:	2301      	movs	r3, #1
    f470:	700b      	strb	r3, [r1, #0]
	return 0;
    f472:	2000      	movs	r0, #0
		break;
    f474:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    f476:	b300      	cbz	r0, f4ba <get_drive+0x68>
    f478:	2802      	cmp	r0, #2
    f47a:	d103      	bne.n	f484 <get_drive+0x32>
		*drive = NRF_GPIO_PIN_D0S1;
    f47c:	2304      	movs	r3, #4
    f47e:	700b      	strb	r3, [r1, #0]
	return 0;
    f480:	2000      	movs	r0, #0
		break;
    f482:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    f484:	f06f 0015 	mvn.w	r0, #21
    f488:	4770      	bx	lr
    f48a:	f06f 0015 	mvn.w	r0, #21
    f48e:	4770      	bx	lr
    f490:	f240 2302 	movw	r3, #514	; 0x202
    f494:	4298      	cmp	r0, r3
    f496:	d01b      	beq.n	f4d0 <get_drive+0x7e>
    f498:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
    f49c:	d103      	bne.n	f4a6 <get_drive+0x54>
		*drive = NRF_GPIO_PIN_H0H1;
    f49e:	2303      	movs	r3, #3
    f4a0:	700b      	strb	r3, [r1, #0]
	return 0;
    f4a2:	2000      	movs	r0, #0
		break;
    f4a4:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    f4a6:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    f4aa:	d103      	bne.n	f4b4 <get_drive+0x62>
		*drive = NRF_GPIO_PIN_S0H1;
    f4ac:	2302      	movs	r3, #2
    f4ae:	700b      	strb	r3, [r1, #0]
	return 0;
    f4b0:	2000      	movs	r0, #0
		break;
    f4b2:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    f4b4:	f06f 0015 	mvn.w	r0, #21
    f4b8:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
    f4ba:	2000      	movs	r0, #0
    f4bc:	7008      	strb	r0, [r1, #0]
		break;
    f4be:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
    f4c0:	2306      	movs	r3, #6
    f4c2:	700b      	strb	r3, [r1, #0]
	return 0;
    f4c4:	2000      	movs	r0, #0
		break;
    f4c6:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
    f4c8:	2307      	movs	r3, #7
    f4ca:	700b      	strb	r3, [r1, #0]
	return 0;
    f4cc:	2000      	movs	r0, #0
		break;
    f4ce:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
    f4d0:	2305      	movs	r3, #5
    f4d2:	700b      	strb	r3, [r1, #0]
	return 0;
    f4d4:	2000      	movs	r0, #0
}
    f4d6:	4770      	bx	lr

0000f4d8 <get_pull>:
	if (flags & GPIO_PULL_UP) {
    f4d8:	f010 0f10 	tst.w	r0, #16
    f4dc:	d104      	bne.n	f4e8 <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
    f4de:	f010 0f20 	tst.w	r0, #32
    f4e2:	d103      	bne.n	f4ec <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
    f4e4:	2000      	movs	r0, #0
    f4e6:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
    f4e8:	2003      	movs	r0, #3
    f4ea:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
    f4ec:	2001      	movs	r0, #1
}
    f4ee:	4770      	bx	lr

0000f4f0 <gpio_nrfx_port_get_raw>:
	return port->config;
    f4f0:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    f4f2:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    f4f4:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    f4f8:	600b      	str	r3, [r1, #0]
}
    f4fa:	2000      	movs	r0, #0
    f4fc:	4770      	bx	lr

0000f4fe <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    f4fe:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    f500:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
    f502:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
    f506:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    f50a:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    f50e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    f512:	2000      	movs	r0, #0
    f514:	4770      	bx	lr

0000f516 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    f516:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    f518:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    f51a:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
    f51e:	2000      	movs	r0, #0
    f520:	4770      	bx	lr

0000f522 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    f522:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    f524:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    f526:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    f52a:	2000      	movs	r0, #0
    f52c:	4770      	bx	lr

0000f52e <gpio_nrfx_port_toggle_bits>:
	return port->config;
    f52e:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    f530:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    f532:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
    f536:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    f53a:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    f53c:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    f540:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    f544:	2000      	movs	r0, #0
    f546:	4770      	bx	lr

0000f548 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
    f548:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    f54c:	d007      	beq.n	f55e <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    f54e:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
    f552:	d00d      	beq.n	f570 <get_trigger+0x28>
    f554:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    f558:	d008      	beq.n	f56c <get_trigger+0x24>
    f55a:	2001      	movs	r0, #1
}
    f55c:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    f55e:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    f562:	d001      	beq.n	f568 <get_trigger+0x20>
    f564:	2005      	movs	r0, #5
    f566:	4770      	bx	lr
    f568:	2004      	movs	r0, #4
    f56a:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    f56c:	2002      	movs	r0, #2
    f56e:	4770      	bx	lr
    f570:	2003      	movs	r0, #3
    f572:	4770      	bx	lr

0000f574 <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
    f574:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    f576:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    f578:	f04f 0120 	mov.w	r1, #32
    f57c:	f3ef 8211 	mrs	r2, BASEPRI
    f580:	f381 8812 	msr	BASEPRI_MAX, r1
    f584:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f588:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    f58c:	b131      	cbz	r1, f59c <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f58e:	2100      	movs	r1, #0
    f590:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    f594:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f598:	2101      	movs	r1, #1
    f59a:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    f59c:	f382 8811 	msr	BASEPRI, r2
    f5a0:	f3bf 8f6f 	isb	sy
}
    f5a4:	4770      	bx	lr

0000f5a6 <uarte_nrfx_isr_int>:
{
    f5a6:	b538      	push	{r3, r4, r5, lr}
	const struct uarte_nrfx_config *config = dev->config;
    f5a8:	6845      	ldr	r5, [r0, #4]
	return config->uarte_regs;
    f5aa:	682c      	ldr	r4, [r5, #0]
    return p_reg->INTENSET & mask;
    f5ac:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    f5b0:	f413 7f80 	tst.w	r3, #256	; 0x100
    f5b4:	d002      	beq.n	f5bc <uarte_nrfx_isr_int+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f5b6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    f5ba:	b9d3      	cbnz	r3, f5f2 <uarte_nrfx_isr_int+0x4c>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    f5bc:	686b      	ldr	r3, [r5, #4]
    f5be:	f013 0f10 	tst.w	r3, #16
    f5c2:	d015      	beq.n	f5f0 <uarte_nrfx_isr_int+0x4a>
	__asm__ volatile(
    f5c4:	f04f 0220 	mov.w	r2, #32
    f5c8:	f3ef 8311 	mrs	r3, BASEPRI
    f5cc:	f382 8812 	msr	BASEPRI_MAX, r2
    f5d0:	f3bf 8f6f 	isb	sy
    f5d4:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    f5d8:	b112      	cbz	r2, f5e0 <uarte_nrfx_isr_int+0x3a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    f5da:	2200      	movs	r2, #0
    f5dc:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    f5e0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    f5e4:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
	__asm__ volatile(
    f5e8:	f383 8811 	msr	BASEPRI, r3
    f5ec:	f3bf 8f6f 	isb	sy
}
    f5f0:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
    f5f2:	f7ff ffbf 	bl	f574 <endtx_isr>
    f5f6:	e7e1      	b.n	f5bc <uarte_nrfx_isr_int+0x16>

0000f5f8 <uarte_nrfx_configure>:
{
    f5f8:	b570      	push	{r4, r5, r6, lr}
    f5fa:	b082      	sub	sp, #8
    f5fc:	4606      	mov	r6, r0
    f5fe:	460c      	mov	r4, r1
	struct uarte_nrfx_data *data = dev->data;
    f600:	6905      	ldr	r5, [r0, #16]
	switch (cfg->stop_bits) {
    f602:	794b      	ldrb	r3, [r1, #5]
    f604:	2b01      	cmp	r3, #1
    f606:	d006      	beq.n	f616 <uarte_nrfx_configure+0x1e>
    f608:	2b03      	cmp	r3, #3
    f60a:	d011      	beq.n	f630 <uarte_nrfx_configure+0x38>
    f60c:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
    f610:	4618      	mov	r0, r3
    f612:	b002      	add	sp, #8
    f614:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    f616:	2300      	movs	r3, #0
    f618:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    f61c:	79a3      	ldrb	r3, [r4, #6]
    f61e:	2b03      	cmp	r3, #3
    f620:	d137      	bne.n	f692 <uarte_nrfx_configure+0x9a>
	switch (cfg->flow_ctrl) {
    f622:	79e3      	ldrb	r3, [r4, #7]
    f624:	b143      	cbz	r3, f638 <uarte_nrfx_configure+0x40>
    f626:	2b01      	cmp	r3, #1
    f628:	d010      	beq.n	f64c <uarte_nrfx_configure+0x54>
    f62a:	f06f 0385 	mvn.w	r3, #133	; 0x85
    f62e:	e7ef      	b.n	f610 <uarte_nrfx_configure+0x18>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    f630:	2310      	movs	r3, #16
    f632:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
    f636:	e7f1      	b.n	f61c <uarte_nrfx_configure+0x24>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    f638:	2300      	movs	r3, #0
    f63a:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
    f63e:	7923      	ldrb	r3, [r4, #4]
    f640:	b143      	cbz	r3, f654 <uarte_nrfx_configure+0x5c>
    f642:	2b02      	cmp	r3, #2
    f644:	d021      	beq.n	f68a <uarte_nrfx_configure+0x92>
    f646:	f06f 0385 	mvn.w	r3, #133	; 0x85
    f64a:	e7e1      	b.n	f610 <uarte_nrfx_configure+0x18>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    f64c:	2301      	movs	r3, #1
    f64e:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    f652:	e7f4      	b.n	f63e <uarte_nrfx_configure+0x46>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    f654:	2300      	movs	r3, #0
    f656:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    f65a:	6821      	ldr	r1, [r4, #0]
    f65c:	4630      	mov	r0, r6
    f65e:	f7f7 f89b 	bl	6798 <baudrate_set>
    f662:	4603      	mov	r3, r0
    f664:	b9c0      	cbnz	r0, f698 <uarte_nrfx_configure+0xa0>
	const struct uarte_nrfx_config *config = dev->config;
    f666:	6872      	ldr	r2, [r6, #4]
	return config->uarte_regs;
    f668:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    f66a:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
    f66e:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
    f672:	f89d 2004 	ldrb.w	r2, [sp, #4]
    f676:	4331      	orrs	r1, r6
    f678:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    f67a:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	data->uart_config = *cfg;
    f67e:	3504      	adds	r5, #4
    f680:	e894 0003 	ldmia.w	r4, {r0, r1}
    f684:	e885 0003 	stmia.w	r5, {r0, r1}
	return 0;
    f688:	e7c2      	b.n	f610 <uarte_nrfx_configure+0x18>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    f68a:	230e      	movs	r3, #14
    f68c:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
    f690:	e7e3      	b.n	f65a <uarte_nrfx_configure+0x62>
		return -ENOTSUP;
    f692:	f06f 0385 	mvn.w	r3, #133	; 0x85
    f696:	e7bb      	b.n	f610 <uarte_nrfx_configure+0x18>
		return -ENOTSUP;
    f698:	f06f 0385 	mvn.w	r3, #133	; 0x85
    f69c:	e7b8      	b.n	f610 <uarte_nrfx_configure+0x18>

0000f69e <uarte_nrfx_config_get>:
{
    f69e:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
    f6a0:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
    f6a2:	3304      	adds	r3, #4
    f6a4:	e893 0003 	ldmia.w	r3, {r0, r1}
    f6a8:	e882 0003 	stmia.w	r2, {r0, r1}
}
    f6ac:	2000      	movs	r0, #0
    f6ae:	4770      	bx	lr

0000f6b0 <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
    f6b0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    f6b2:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    f6b4:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    f6b8:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    f6bc:	4770      	bx	lr

0000f6be <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
    f6be:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    f6c0:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    f6c2:	685b      	ldr	r3, [r3, #4]
    f6c4:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f6c8:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    f6cc:	b929      	cbnz	r1, f6da <is_tx_ready+0x1c>
    f6ce:	b933      	cbnz	r3, f6de <is_tx_ready+0x20>
    f6d0:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    f6d4:	b92b      	cbnz	r3, f6e2 <is_tx_ready+0x24>
    f6d6:	2000      	movs	r0, #0
    f6d8:	4770      	bx	lr
    f6da:	2001      	movs	r0, #1
    f6dc:	4770      	bx	lr
    f6de:	2000      	movs	r0, #0
    f6e0:	4770      	bx	lr
    f6e2:	2001      	movs	r0, #1
}
    f6e4:	4770      	bx	lr

0000f6e6 <uarte_enable>:
	const struct uarte_nrfx_config *config = dev->config;
    f6e6:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    f6e8:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    f6ea:	2208      	movs	r2, #8
    f6ec:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    f6f0:	4770      	bx	lr

0000f6f2 <tx_start>:
{
    f6f2:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
    f6f4:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    f6f6:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    f6f8:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    f6fc:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f700:	2200      	movs	r2, #0
    f702:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    f706:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
    f70a:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
    f70e:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    f712:	685b      	ldr	r3, [r3, #4]
    f714:	f013 0f10 	tst.w	r3, #16
    f718:	d102      	bne.n	f720 <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f71a:	2301      	movs	r3, #1
    f71c:	60a3      	str	r3, [r4, #8]
}
    f71e:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    f720:	2101      	movs	r1, #1
    f722:	f7ff ffe0 	bl	f6e6 <uarte_enable>
    p_reg->INTENSET = mask;
    f726:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    f72a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    f72e:	e7f4      	b.n	f71a <tx_start+0x28>

0000f730 <uarte_nrfx_poll_in>:
{
    f730:	b410      	push	{r4}
	const struct uarte_nrfx_data *data = dev->data;
    f732:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    f734:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    f736:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f738:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    f73c:	b15a      	cbz	r2, f756 <uarte_nrfx_poll_in+0x26>
	*c = *data->rx_data;
    f73e:	6962      	ldr	r2, [r4, #20]
    f740:	7812      	ldrb	r2, [r2, #0]
    f742:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f744:	2000      	movs	r0, #0
    f746:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    f74a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f74e:	2201      	movs	r2, #1
    f750:	601a      	str	r2, [r3, #0]
}
    f752:	bc10      	pop	{r4}
    f754:	4770      	bx	lr
		return -1;
    f756:	f04f 30ff 	mov.w	r0, #4294967295
    f75a:	e7fa      	b.n	f752 <uarte_nrfx_poll_in+0x22>

0000f75c <wait_tx_ready>:
{
    f75c:	b570      	push	{r4, r5, r6, lr}
    f75e:	4606      	mov	r6, r0
    f760:	e014      	b.n	f78c <wait_tx_ready+0x30>
		if (res) {
    f762:	b17d      	cbz	r5, f784 <wait_tx_ready+0x28>
	__asm__ volatile(
    f764:	f04f 0320 	mov.w	r3, #32
    f768:	f3ef 8411 	mrs	r4, BASEPRI
    f76c:	f383 8812 	msr	BASEPRI_MAX, r3
    f770:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    f774:	4630      	mov	r0, r6
    f776:	f7ff ffa2 	bl	f6be <is_tx_ready>
    f77a:	b9a0      	cbnz	r0, f7a6 <wait_tx_ready+0x4a>
	__asm__ volatile(
    f77c:	f384 8811 	msr	BASEPRI, r4
    f780:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
    f784:	2021      	movs	r0, #33	; 0x21
    f786:	2100      	movs	r1, #0
    f788:	f7fe f892 	bl	d8b0 <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    f78c:	2464      	movs	r4, #100	; 0x64
    f78e:	4630      	mov	r0, r6
    f790:	f7ff ff95 	bl	f6be <is_tx_ready>
    f794:	4605      	mov	r5, r0
    f796:	2800      	cmp	r0, #0
    f798:	d1e3      	bne.n	f762 <wait_tx_ready+0x6>
    f79a:	2001      	movs	r0, #1
    f79c:	f000 f9a3 	bl	fae6 <nrfx_busy_wait>
    f7a0:	3c01      	subs	r4, #1
    f7a2:	d1f4      	bne.n	f78e <wait_tx_ready+0x32>
    f7a4:	e7dd      	b.n	f762 <wait_tx_ready+0x6>
}
    f7a6:	4620      	mov	r0, r4
    f7a8:	bd70      	pop	{r4, r5, r6, pc}

0000f7aa <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    f7aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f7ae:	b083      	sub	sp, #12
    f7b0:	4605      	mov	r5, r0
	const struct uarte_nrfx_config *config = dev->config;
    f7b2:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
    f7b4:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    f7b6:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    f7ba:	2100      	movs	r1, #0
    f7bc:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
    f7c0:	f8c8 0000 	str.w	r0, [r8]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    f7c4:	f8d7 900c 	ldr.w	r9, [r7, #12]
	ret = pinctrl_lookup_state(config, id, &state);
    f7c8:	aa01      	add	r2, sp, #4
    f7ca:	4648      	mov	r0, r9
    f7cc:	f000 f8e6 	bl	f99c <pinctrl_lookup_state>
	if (ret < 0) {
    f7d0:	1e04      	subs	r4, r0, #0
    f7d2:	db07      	blt.n	f7e4 <uarte_instance_init+0x3a>
	return pinctrl_apply_state_direct(config, state);
    f7d4:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    f7d6:	f8d9 2000 	ldr.w	r2, [r9]
    f7da:	7919      	ldrb	r1, [r3, #4]
    f7dc:	6818      	ldr	r0, [r3, #0]
    f7de:	f7f7 fbb9 	bl	6f54 <pinctrl_configure_pins>
    f7e2:	4604      	mov	r4, r0
	if (err < 0) {
    f7e4:	2c00      	cmp	r4, #0
    f7e6:	db35      	blt.n	f854 <uarte_instance_init+0xaa>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    f7e8:	f108 0104 	add.w	r1, r8, #4
    f7ec:	4628      	mov	r0, r5
    f7ee:	f7ff ff03 	bl	f5f8 <uarte_nrfx_configure>
	if (err) {
    f7f2:	4604      	mov	r4, r0
    f7f4:	bb70      	cbnz	r0, f854 <uarte_instance_init+0xaa>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    f7f6:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    f7f8:	f013 0f02 	tst.w	r3, #2
    f7fc:	d12e      	bne.n	f85c <uarte_instance_init+0xb2>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    f7fe:	2308      	movs	r3, #8
    f800:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    f804:	7a3b      	ldrb	r3, [r7, #8]
    f806:	b95b      	cbnz	r3, f820 <uarte_instance_init+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f808:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
    f80c:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, data->rx_data, 1);
    f810:	f8d8 3014 	ldr.w	r3, [r8, #20]

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    f814:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    f818:	2301      	movs	r3, #1
    f81a:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f81e:	6033      	str	r3, [r6, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    f820:	687b      	ldr	r3, [r7, #4]
    f822:	f013 0f02 	tst.w	r3, #2
    f826:	d103      	bne.n	f830 <uarte_instance_init+0x86>
    p_reg->INTENSET = mask;
    f828:	f44f 7380 	mov.w	r3, #256	; 0x100
    f82c:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    f830:	687b      	ldr	r3, [r7, #4]
    f832:	f013 0f10 	tst.w	r3, #16
    f836:	d003      	beq.n	f840 <uarte_instance_init+0x96>
    f838:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    f83c:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, data->char_out, 0);
    f840:	f8d8 3010 	ldr.w	r3, [r8, #16]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    f844:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    f848:	2300      	movs	r3, #0
    f84a:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f84e:	2301      	movs	r3, #1
    f850:	60b3      	str	r3, [r6, #8]
    f852:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    f854:	4620      	mov	r0, r4
    f856:	b003      	add	sp, #12
    f858:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
    f85c:	4641      	mov	r1, r8
    f85e:	4630      	mov	r0, r6
    f860:	f7f7 f87c 	bl	695c <endtx_stoptx_ppi_init>
		if (err < 0) {
    f864:	2800      	cmp	r0, #0
    f866:	daca      	bge.n	f7fe <uarte_instance_init+0x54>
			return err;
    f868:	4604      	mov	r4, r0
    f86a:	e7f3      	b.n	f854 <uarte_instance_init+0xaa>

0000f86c <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    f86c:	b510      	push	{r4, lr}
    f86e:	4604      	mov	r4, r0
    f870:	2200      	movs	r2, #0
    f872:	2101      	movs	r1, #1
    f874:	2002      	movs	r0, #2
    f876:	f7f4 fd07 	bl	4288 <z_arm_irq_priority_set>
    f87a:	2002      	movs	r0, #2
    f87c:	f7f4 fce8 	bl	4250 <arch_irq_enable>
    f880:	2100      	movs	r1, #0
    f882:	4620      	mov	r0, r4
    f884:	f7ff ff91 	bl	f7aa <uarte_instance_init>
    f888:	bd10      	pop	{r4, pc}

0000f88a <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    f88a:	b510      	push	{r4, lr}
    f88c:	4604      	mov	r4, r0
    f88e:	2200      	movs	r2, #0
    f890:	2101      	movs	r1, #1
    f892:	2028      	movs	r0, #40	; 0x28
    f894:	f7f4 fcf8 	bl	4288 <z_arm_irq_priority_set>
    f898:	2028      	movs	r0, #40	; 0x28
    f89a:	f7f4 fcd9 	bl	4250 <arch_irq_enable>
    f89e:	2100      	movs	r1, #0
    f8a0:	4620      	mov	r0, r4
    f8a2:	f7ff ff82 	bl	f7aa <uarte_instance_init>
    f8a6:	bd10      	pop	{r4, pc}

0000f8a8 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    f8a8:	4770      	bx	lr

0000f8aa <counter_sub>:
	return (a - b) & COUNTER_MAX;
    f8aa:	1a40      	subs	r0, r0, r1
}
    f8ac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    f8b0:	4770      	bx	lr

0000f8b2 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    f8b2:	f100 0350 	add.w	r3, r0, #80	; 0x50
    f8b6:	009b      	lsls	r3, r3, #2
    f8b8:	b29b      	uxth	r3, r3
    f8ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    f8be:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    f8c2:	2200      	movs	r2, #0
    f8c4:	601a      	str	r2, [r3, #0]
    f8c6:	681b      	ldr	r3, [r3, #0]
}
    f8c8:	4770      	bx	lr

0000f8ca <absolute_time_to_cc>:
}
    f8ca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    f8ce:	4770      	bx	lr

0000f8d0 <full_int_lock>:
	__asm__ volatile(
    f8d0:	f04f 0320 	mov.w	r3, #32
    f8d4:	f3ef 8011 	mrs	r0, BASEPRI
    f8d8:	f383 8812 	msr	BASEPRI_MAX, r3
    f8dc:	f3bf 8f6f 	isb	sy
}
    f8e0:	4770      	bx	lr

0000f8e2 <full_int_unlock>:
	__asm__ volatile(
    f8e2:	f380 8811 	msr	BASEPRI, r0
    f8e6:	f3bf 8f6f 	isb	sy
}
    f8ea:	4770      	bx	lr

0000f8ec <set_absolute_alarm>:
{
    f8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f8ee:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
    f8f0:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
    f8f4:	f7f7 f88a 	bl	6a0c <get_comparator>
    f8f8:	4607      	mov	r7, r0
    f8fa:	e019      	b.n	f930 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
    f8fc:	2013      	movs	r0, #19
    f8fe:	f000 fa8d 	bl	fe1c <z_impl_k_busy_wait>
}
    f902:	e022      	b.n	f94a <set_absolute_alarm+0x5e>
		event_clear(chan);
    f904:	4630      	mov	r0, r6
    f906:	f7ff ffd4 	bl	f8b2 <event_clear>
		event_enable(chan);
    f90a:	4630      	mov	r0, r6
    f90c:	f7f7 f886 	bl	6a1c <event_enable>
		set_comparator(chan, cc_val);
    f910:	4629      	mov	r1, r5
    f912:	4630      	mov	r0, r6
    f914:	f7f7 f870 	bl	69f8 <set_comparator>
		now2 = counter();
    f918:	f7f7 f894 	bl	6a44 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    f91c:	4284      	cmp	r4, r0
    f91e:	d01e      	beq.n	f95e <set_absolute_alarm+0x72>
    f920:	1c81      	adds	r1, r0, #2
    f922:	4628      	mov	r0, r5
    f924:	f7ff ffc1 	bl	f8aa <counter_sub>
	} while ((now2 != now) &&
    f928:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    f92c:	d917      	bls.n	f95e <set_absolute_alarm+0x72>
		prev_cc = cc_val;
    f92e:	462f      	mov	r7, r5
		now = counter();
    f930:	f7f7 f888 	bl	6a44 <counter>
    f934:	4604      	mov	r4, r0
		set_comparator(chan, now);
    f936:	4601      	mov	r1, r0
    f938:	4630      	mov	r0, r6
    f93a:	f7f7 f85d 	bl	69f8 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
    f93e:	4621      	mov	r1, r4
    f940:	4638      	mov	r0, r7
    f942:	f7ff ffb2 	bl	f8aa <counter_sub>
    f946:	2801      	cmp	r0, #1
    f948:	d0d8      	beq.n	f8fc <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    f94a:	1ca7      	adds	r7, r4, #2
    f94c:	4639      	mov	r1, r7
    f94e:	4628      	mov	r0, r5
    f950:	f7ff ffab 	bl	f8aa <counter_sub>
    f954:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    f958:	d9d4      	bls.n	f904 <set_absolute_alarm+0x18>
			cc_val = now + 2;
    f95a:	463d      	mov	r5, r7
    f95c:	e7d2      	b.n	f904 <set_absolute_alarm+0x18>
}
    f95e:	4628      	mov	r0, r5
    f960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000f962 <compare_set>:
{
    f962:	b5f0      	push	{r4, r5, r6, r7, lr}
    f964:	b083      	sub	sp, #12
    f966:	4604      	mov	r4, r0
    f968:	4617      	mov	r7, r2
    f96a:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    f96c:	f7f7 f870 	bl	6a50 <compare_int_lock>
    f970:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    f972:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f974:	9301      	str	r3, [sp, #4]
    f976:	9b08      	ldr	r3, [sp, #32]
    f978:	9300      	str	r3, [sp, #0]
    f97a:	463a      	mov	r2, r7
    f97c:	462b      	mov	r3, r5
    f97e:	4620      	mov	r0, r4
    f980:	f7f7 f956 	bl	6c30 <compare_set_nolocks>
    f984:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    f986:	4631      	mov	r1, r6
    f988:	4620      	mov	r0, r4
    f98a:	f7f7 f8c5 	bl	6b18 <compare_int_unlock>
}
    f98e:	4628      	mov	r0, r5
    f990:	b003      	add	sp, #12
    f992:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000f994 <sys_clock_cycle_get_32>:
{
    f994:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    f996:	f7f7 f92b 	bl	6bf0 <z_nrf_rtc_timer_read>
}
    f99a:	bd08      	pop	{r3, pc}

0000f99c <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    f99c:	b410      	push	{r4}
	*state = &config->states[0];
    f99e:	6843      	ldr	r3, [r0, #4]
    f9a0:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    f9a2:	e001      	b.n	f9a8 <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
    f9a4:	3408      	adds	r4, #8
    f9a6:	6014      	str	r4, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    f9a8:	6814      	ldr	r4, [r2, #0]
    f9aa:	7a03      	ldrb	r3, [r0, #8]
    f9ac:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    f9b0:	3b01      	subs	r3, #1
    f9b2:	f8d0 c004 	ldr.w	ip, [r0, #4]
    f9b6:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
    f9ba:	429c      	cmp	r4, r3
    f9bc:	d804      	bhi.n	f9c8 <pinctrl_lookup_state+0x2c>
		if (id == (*state)->id) {
    f9be:	7963      	ldrb	r3, [r4, #5]
    f9c0:	428b      	cmp	r3, r1
    f9c2:	d1ef      	bne.n	f9a4 <pinctrl_lookup_state+0x8>
			return 0;
    f9c4:	2000      	movs	r0, #0
    f9c6:	e001      	b.n	f9cc <pinctrl_lookup_state+0x30>
	}

	return -ENOENT;
    f9c8:	f06f 0001 	mvn.w	r0, #1
}
    f9cc:	bc10      	pop	{r4}
    f9ce:	4770      	bx	lr

0000f9d0 <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
    f9d0:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    f9d2:	f7fe fe05 	bl	e5e0 <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
    f9d6:	bd08      	pop	{r3, pc}

0000f9d8 <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
    f9d8:	b510      	push	{r4, lr}
    f9da:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    f9dc:	f7f4 fa26 	bl	3e2c <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    f9e0:	f7f4 fae2 	bl	3fa8 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
    f9e4:	4620      	mov	r0, r4
    f9e6:	f7ff fff3 	bl	f9d0 <hw_cc3xx_init_internal>
	return res;
}
    f9ea:	bd10      	pop	{r4, pc}

0000f9ec <nrf52_errata_36>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    f9ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    f9f0:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    f9f4:	2b08      	cmp	r3, #8
    f9f6:	d001      	beq.n	f9fc <nrf52_errata_36+0x10>
        return false;
    f9f8:	2000      	movs	r0, #0
    f9fa:	4770      	bx	lr
                        return true;
    f9fc:	2001      	movs	r0, #1
}
    f9fe:	4770      	bx	lr

0000fa00 <nrf52_errata_66>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    fa00:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    fa04:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    fa08:	2b08      	cmp	r3, #8
    fa0a:	d001      	beq.n	fa10 <nrf52_errata_66+0x10>
        return false;
    fa0c:	2000      	movs	r0, #0
    fa0e:	4770      	bx	lr
                        return true;
    fa10:	2001      	movs	r0, #1
}
    fa12:	4770      	bx	lr

0000fa14 <nrf52_errata_98>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    fa14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    fa18:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    fa1c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    fa20:	2a08      	cmp	r2, #8
    fa22:	d001      	beq.n	fa28 <nrf52_errata_98+0x14>
        return false;
    fa24:	2000      	movs	r0, #0
    fa26:	4770      	bx	lr
                switch(var2)
    fa28:	2b00      	cmp	r3, #0
    fa2a:	d804      	bhi.n	fa36 <nrf52_errata_98+0x22>
    fa2c:	e8df f003 	tbb	[pc, r3]
    fa30:	01          	.byte	0x01
    fa31:	00          	.byte	0x00
    fa32:	2001      	movs	r0, #1
    fa34:	4770      	bx	lr
                        return false;
    fa36:	2000      	movs	r0, #0
}
    fa38:	4770      	bx	lr

0000fa3a <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    fa3a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    fa3e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    fa42:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    fa46:	2a08      	cmp	r2, #8
    fa48:	d001      	beq.n	fa4e <nrf52_errata_103+0x14>
        return false;
    fa4a:	2000      	movs	r0, #0
    fa4c:	4770      	bx	lr
                switch(var2)
    fa4e:	2b00      	cmp	r3, #0
    fa50:	d804      	bhi.n	fa5c <nrf52_errata_103+0x22>
    fa52:	e8df f003 	tbb	[pc, r3]
    fa56:	01          	.byte	0x01
    fa57:	00          	.byte	0x00
    fa58:	2001      	movs	r0, #1
    fa5a:	4770      	bx	lr
                        return false;
    fa5c:	2000      	movs	r0, #0
}
    fa5e:	4770      	bx	lr

0000fa60 <nrf52_errata_115>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    fa60:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    fa64:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    fa68:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    fa6c:	2a08      	cmp	r2, #8
    fa6e:	d001      	beq.n	fa74 <nrf52_errata_115+0x14>
        return false;
    fa70:	2000      	movs	r0, #0
    fa72:	4770      	bx	lr
                switch(var2)
    fa74:	2b00      	cmp	r3, #0
    fa76:	d804      	bhi.n	fa82 <nrf52_errata_115+0x22>
    fa78:	e8df f003 	tbb	[pc, r3]
    fa7c:	01          	.byte	0x01
    fa7d:	00          	.byte	0x00
    fa7e:	2001      	movs	r0, #1
    fa80:	4770      	bx	lr
                        return false;
    fa82:	2000      	movs	r0, #0
}
    fa84:	4770      	bx	lr

0000fa86 <nrf52_errata_120>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    fa86:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    fa8a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    fa8e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    fa92:	2a08      	cmp	r2, #8
    fa94:	d001      	beq.n	fa9a <nrf52_errata_120+0x14>
        return false;
    fa96:	2000      	movs	r0, #0
    fa98:	4770      	bx	lr
                switch(var2)
    fa9a:	2b00      	cmp	r3, #0
    fa9c:	d804      	bhi.n	faa8 <nrf52_errata_120+0x22>
    fa9e:	e8df f003 	tbb	[pc, r3]
    faa2:	01          	.byte	0x01
    faa3:	00          	.byte	0x00
    faa4:	2001      	movs	r0, #1
    faa6:	4770      	bx	lr
                        return false;
    faa8:	2000      	movs	r0, #0
}
    faaa:	4770      	bx	lr

0000faac <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    faac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    fab0:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    fab4:	2b08      	cmp	r3, #8
    fab6:	d001      	beq.n	fabc <nrf52_errata_136+0x10>
        return false;
    fab8:	2000      	movs	r0, #0
    faba:	4770      	bx	lr
                        return true;
    fabc:	2001      	movs	r0, #1
}
    fabe:	4770      	bx	lr

0000fac0 <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    fac0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    fac4:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    fac8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    facc:	2a08      	cmp	r2, #8
    face:	d001      	beq.n	fad4 <nrf52_configuration_249+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    fad0:	2000      	movs	r0, #0
    fad2:	4770      	bx	lr
                switch(var2)
    fad4:	2b04      	cmp	r3, #4
    fad6:	d801      	bhi.n	fadc <nrf52_configuration_249+0x1c>
    fad8:	2000      	movs	r0, #0
    fada:	4770      	bx	lr
                        return true;
    fadc:	2001      	movs	r0, #1
    #endif
}
    fade:	4770      	bx	lr

0000fae0 <nrfx_isr>:
#include <nrfx.h>
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
    fae0:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    fae2:	4780      	blx	r0
}
    fae4:	bd08      	pop	{r3, pc}

0000fae6 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    fae6:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    fae8:	f000 f998 	bl	fe1c <z_impl_k_busy_wait>
	if (IS_ENABLED(CONFIG_SYS_CLOCK_EXISTS)) {
		k_busy_wait(usec_to_wait);
	} else {
		nrfx_coredep_delay_us(usec_to_wait);
	}
}
    faec:	bd08      	pop	{r3, pc}

0000faee <clock_initial_lfclksrc_get>:
}
    faee:	2000      	movs	r0, #0
    faf0:	4770      	bx	lr

0000faf2 <clock_lfclksrc_tweak>:
{
    faf2:	b538      	push	{r3, r4, r5, lr}
    faf4:	4604      	mov	r4, r0
    bool is_correct_clk = (*p_lfclksrc == NRFX_CLOCK_CONFIG_LF_SRC);
    faf6:	6803      	ldr	r3, [r0, #0]
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    faf8:	2b01      	cmp	r3, #1
    fafa:	d002      	beq.n	fb02 <clock_lfclksrc_tweak+0x10>
    fafc:	b933      	cbnz	r3, fb0c <clock_lfclksrc_tweak+0x1a>
    fafe:	2301      	movs	r3, #1
    fb00:	e000      	b.n	fb04 <clock_lfclksrc_tweak+0x12>
    fb02:	2301      	movs	r3, #1
    if (!is_correct_clk)
    fb04:	461d      	mov	r5, r3
    fb06:	b11b      	cbz	r3, fb10 <clock_lfclksrc_tweak+0x1e>
}
    fb08:	4628      	mov	r0, r5
    fb0a:	bd38      	pop	{r3, r4, r5, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    fb0c:	2300      	movs	r3, #0
    fb0e:	e7f9      	b.n	fb04 <clock_lfclksrc_tweak+0x12>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    fb10:	2000      	movs	r0, #0
    fb12:	f7f8 fec1 	bl	8898 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    fb16:	f7ff ffea 	bl	faee <clock_initial_lfclksrc_get>
    fb1a:	6020      	str	r0, [r4, #0]
    fb1c:	e7f4      	b.n	fb08 <clock_lfclksrc_tweak+0x16>

0000fb1e <pin_is_task_output>:
{
    fb1e:	b510      	push	{r4, lr}
    fb20:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    fb22:	f7f9 f88b 	bl	8c3c <pin_is_output>
    fb26:	b128      	cbz	r0, fb34 <pin_is_task_output+0x16>
    fb28:	4620      	mov	r0, r4
    fb2a:	f7f9 f871 	bl	8c10 <pin_in_use_by_te>
    fb2e:	b118      	cbz	r0, fb38 <pin_is_task_output+0x1a>
    fb30:	2001      	movs	r0, #1
    fb32:	e000      	b.n	fb36 <pin_is_task_output+0x18>
    fb34:	2000      	movs	r0, #0
}
    fb36:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    fb38:	2000      	movs	r0, #0
    fb3a:	e7fc      	b.n	fb36 <pin_is_task_output+0x18>

0000fb3c <pin_is_input>:
{
    fb3c:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
    fb3e:	f7f9 f87d 	bl	8c3c <pin_is_output>
    fb42:	f080 0001 	eor.w	r0, r0, #1
}
    fb46:	b2c0      	uxtb	r0, r0
    fb48:	bd08      	pop	{r3, pc}

0000fb4a <gpiote_polarity_to_trigger>:
}
    fb4a:	4770      	bx	lr

0000fb4c <gpiote_trigger_to_polarity>:
}
    fb4c:	4770      	bx	lr

0000fb4e <is_level>:
}
    fb4e:	2803      	cmp	r0, #3
    fb50:	bf94      	ite	ls
    fb52:	2000      	movls	r0, #0
    fb54:	2001      	movhi	r0, #1
    fb56:	4770      	bx	lr

0000fb58 <start_playback>:
{
    fb58:	b410      	push	{r4}
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    fb5a:	2402      	movs	r4, #2
    fb5c:	720c      	strb	r4, [r1, #8]
    p_cb->flags = flags;
    fb5e:	724a      	strb	r2, [r1, #9]
    if (p_cb->handler)
    fb60:	6809      	ldr	r1, [r1, #0]
    fb62:	b181      	cbz	r1, fb86 <start_playback+0x2e>
        if (flags & NRFX_PWM_FLAG_SIGNAL_END_SEQ0)
    fb64:	f012 0f04 	tst.w	r2, #4
    fb68:	d11c      	bne.n	fba4 <start_playback+0x4c>
        uint32_t int_mask = NRF_PWM_INT_LOOPSDONE_MASK |
    fb6a:	2182      	movs	r1, #130	; 0x82
        if (flags & NRFX_PWM_FLAG_SIGNAL_END_SEQ1)
    fb6c:	f012 0f08 	tst.w	r2, #8
    fb70:	d001      	beq.n	fb76 <start_playback+0x1e>
            int_mask |= NRF_PWM_INT_SEQEND1_MASK;
    fb72:	f041 0120 	orr.w	r1, r1, #32
        if (flags & NRFX_PWM_FLAG_NO_EVT_FINISHED)
    fb76:	f012 0f10 	tst.w	r2, #16
    fb7a:	d001      	beq.n	fb80 <start_playback+0x28>
            int_mask &= ~NRF_PWM_INT_LOOPSDONE_MASK;
    fb7c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
        nrf_pwm_int_set(p_instance->p_registers, int_mask);
    fb80:	6804      	ldr	r4, [r0, #0]
    p_reg->INTEN = mask;
    fb82:	f8c4 1300 	str.w	r1, [r4, #768]	; 0x300
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_STOPPED);
    fb86:	6801      	ldr	r1, [r0, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fb88:	2400      	movs	r4, #0
    fb8a:	f8c1 4104 	str.w	r4, [r1, #260]	; 0x104
    fb8e:	f8d1 1104 	ldr.w	r1, [r1, #260]	; 0x104
    if (flags & NRFX_PWM_FLAG_START_VIA_TASK)
    fb92:	f012 0f80 	tst.w	r2, #128	; 0x80
    fb96:	d107      	bne.n	fba8 <start_playback+0x50>
    nrf_pwm_task_trigger(p_instance->p_registers, starting_task);
    fb98:	6802      	ldr	r2, [r0, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fb9a:	2101      	movs	r1, #1
    fb9c:	50d1      	str	r1, [r2, r3]
    return 0;
    fb9e:	2000      	movs	r0, #0
}
    fba0:	bc10      	pop	{r4}
    fba2:	4770      	bx	lr
            int_mask |= NRF_PWM_INT_SEQEND0_MASK;
    fba4:	2192      	movs	r1, #146	; 0x92
    fba6:	e7e1      	b.n	fb6c <start_playback+0x14>
            nrf_pwm_task_address_get(p_instance->p_registers, starting_task);
    fba8:	6800      	ldr	r0, [r0, #0]
    return ((uint32_t)p_reg + (uint32_t)task);
    fbaa:	4418      	add	r0, r3
        return starting_task_address;
    fbac:	e7f8      	b.n	fba0 <start_playback+0x48>

0000fbae <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
    fbae:	7b0b      	ldrb	r3, [r1, #12]
    fbb0:	2b03      	cmp	r3, #3
    fbb2:	d839      	bhi.n	fc28 <xfer_completeness_check+0x7a>
    fbb4:	e8df f003 	tbb	[pc, r3]
    fbb8:	0216312a 	.word	0x0216312a
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    fbbc:	688b      	ldr	r3, [r1, #8]
    fbbe:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    fbc2:	d004      	beq.n	fbce <xfer_completeness_check+0x20>
}

NRF_STATIC_INLINE size_t nrf_twim_txd_amount_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->TXD.AMOUNT;
    fbc4:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
    fbc8:	690a      	ldr	r2, [r1, #16]
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    fbca:	429a      	cmp	r2, r3
    fbcc:	d10f      	bne.n	fbee <xfer_completeness_check+0x40>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    fbce:	688b      	ldr	r3, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
    fbd0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    fbd4:	d12a      	bne.n	fc2c <xfer_completeness_check+0x7e>
    fbd6:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.secondary_length)))
    fbda:	694a      	ldr	r2, [r1, #20]
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    fbdc:	429a      	cmp	r2, r3
    fbde:	d106      	bne.n	fbee <xfer_completeness_check+0x40>
    bool transfer_complete = true;
    fbe0:	2001      	movs	r0, #1
    fbe2:	4770      	bx	lr
    fbe4:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
    fbe8:	690a      	ldr	r2, [r1, #16]
    fbea:	429a      	cmp	r2, r3
    fbec:	d007      	beq.n	fbfe <xfer_completeness_check+0x50>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    fbee:	2300      	movs	r3, #0
    fbf0:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    fbf4:	2206      	movs	r2, #6
    fbf6:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
}
    fbfa:	4618      	mov	r0, r3
    fbfc:	4770      	bx	lr
}

NRF_STATIC_INLINE size_t nrf_twim_rxd_amount_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
    fbfe:	f8d0 353c 	ldr.w	r3, [r0, #1340]	; 0x53c
                (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.secondary_length))
    fc02:	694a      	ldr	r2, [r1, #20]
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
    fc04:	429a      	cmp	r2, r3
    fc06:	d1f2      	bne.n	fbee <xfer_completeness_check+0x40>
    bool transfer_complete = true;
    fc08:	2001      	movs	r0, #1
    fc0a:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
    fc0c:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
            if (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
    fc10:	690a      	ldr	r2, [r1, #16]
    fc12:	429a      	cmp	r2, r3
    fc14:	d1eb      	bne.n	fbee <xfer_completeness_check+0x40>
    bool transfer_complete = true;
    fc16:	2001      	movs	r0, #1
    fc18:	4770      	bx	lr
    return p_reg->RXD.AMOUNT;
    fc1a:	f8d0 353c 	ldr.w	r3, [r0, #1340]	; 0x53c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
    fc1e:	690a      	ldr	r2, [r1, #16]
    fc20:	429a      	cmp	r2, r3
    fc22:	d1e4      	bne.n	fbee <xfer_completeness_check+0x40>
    bool transfer_complete = true;
    fc24:	2001      	movs	r0, #1
}
    fc26:	4770      	bx	lr
    switch (p_cb->xfer_desc.type)
    fc28:	2001      	movs	r0, #1
    fc2a:	4770      	bx	lr
    bool transfer_complete = true;
    fc2c:	2001      	movs	r0, #1
    fc2e:	4770      	bx	lr

0000fc30 <twim_list_enable_handle>:
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
    fc30:	f011 0f01 	tst.w	r1, #1
    fc34:	d009      	beq.n	fc4a <twim_list_enable_handle+0x1a>
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
    fc36:	2301      	movs	r3, #1
    fc38:	f8c0 3550 	str.w	r3, [r0, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
    fc3c:	f011 0f02 	tst.w	r1, #2
    fc40:	d007      	beq.n	fc52 <twim_list_enable_handle+0x22>
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
    fc42:	2301      	movs	r3, #1
    fc44:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
}
    fc48:	4770      	bx	lr
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
    fc4a:	2300      	movs	r3, #0
    fc4c:	f8c0 3550 	str.w	r3, [r0, #1360]	; 0x550
}
    fc50:	e7f4      	b.n	fc3c <twim_list_enable_handle+0xc>

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
    fc52:	2300      	movs	r3, #0
    fc54:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
}
    fc58:	4770      	bx	lr

0000fc5a <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    fc5a:	b148      	cbz	r0, fc70 <z_device_is_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    fc5c:	68c3      	ldr	r3, [r0, #12]
    fc5e:	8818      	ldrh	r0, [r3, #0]
    fc60:	f3c0 0008 	ubfx	r0, r0, #0, #9
    fc64:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    fc68:	bf14      	ite	ne
    fc6a:	2000      	movne	r0, #0
    fc6c:	2001      	moveq	r0, #1
    fc6e:	4770      	bx	lr
		return false;
    fc70:	2000      	movs	r0, #0
}
    fc72:	4770      	bx	lr

0000fc74 <z_early_memset>:
{
    fc74:	b508      	push	{r3, lr}
	(void) memset(dst, c, n);
    fc76:	f7ff faf2 	bl	f25e <memset>
}
    fc7a:	bd08      	pop	{r3, pc}

0000fc7c <z_early_memcpy>:
{
    fc7c:	b508      	push	{r3, lr}
	(void) memcpy(dst, src, n);
    fc7e:	f7ff fabf 	bl	f200 <memcpy>
}
    fc82:	bd08      	pop	{r3, pc}

0000fc84 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    fc84:	6902      	ldr	r2, [r0, #16]
    fc86:	6943      	ldr	r3, [r0, #20]
    fc88:	431a      	orrs	r2, r3
    fc8a:	f012 0203 	ands.w	r2, r2, #3
    fc8e:	d10d      	bne.n	fcac <create_free_list+0x28>
	slab->free_list = NULL;
    fc90:	2100      	movs	r1, #0
    fc92:	6181      	str	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    fc94:	e005      	b.n	fca2 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
    fc96:	6981      	ldr	r1, [r0, #24]
    fc98:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
    fc9a:	6183      	str	r3, [r0, #24]
		p += slab->block_size;
    fc9c:	6901      	ldr	r1, [r0, #16]
    fc9e:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    fca0:	3201      	adds	r2, #1
    fca2:	68c1      	ldr	r1, [r0, #12]
    fca4:	4291      	cmp	r1, r2
    fca6:	d8f6      	bhi.n	fc96 <create_free_list+0x12>
	return 0;
    fca8:	2000      	movs	r0, #0
    fcaa:	4770      	bx	lr
		return -EINVAL;
    fcac:	f06f 0015 	mvn.w	r0, #21
}
    fcb0:	4770      	bx	lr

0000fcb2 <k_mem_slab_init>:
{
    fcb2:	b510      	push	{r4, lr}
    fcb4:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
    fcb6:	60c3      	str	r3, [r0, #12]
	slab->block_size = block_size;
    fcb8:	6102      	str	r2, [r0, #16]
	slab->buffer = buffer;
    fcba:	6141      	str	r1, [r0, #20]
	slab->num_used = 0U;
    fcbc:	2300      	movs	r3, #0
    fcbe:	61c3      	str	r3, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    fcc0:	6083      	str	r3, [r0, #8]
	rc = create_free_list(slab);
    fcc2:	f7ff ffdf 	bl	fc84 <create_free_list>
	if (rc < 0) {
    fcc6:	2800      	cmp	r0, #0
    fcc8:	db01      	blt.n	fcce <k_mem_slab_init+0x1c>
	list->head = (sys_dnode_t *)list;
    fcca:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
    fccc:	6064      	str	r4, [r4, #4]
}
    fcce:	bd10      	pop	{r4, pc}

0000fcd0 <setup_thread_stack>:
{
    fcd0:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    fcd2:	3207      	adds	r2, #7
    fcd4:	f022 0207 	bic.w	r2, r2, #7
    fcd8:	f102 0340 	add.w	r3, r2, #64	; 0x40

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    fcdc:	f101 0440 	add.w	r4, r1, #64	; 0x40
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    fce0:	f8c0 4098 	str.w	r4, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
    fce4:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    fce8:	2200      	movs	r2, #0
    fcea:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
}
    fcee:	18c8      	adds	r0, r1, r3
    fcf0:	bc10      	pop	{r4}
    fcf2:	4770      	bx	lr

0000fcf4 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    fcf4:	f3ef 8005 	mrs	r0, IPSR
}
    fcf8:	3800      	subs	r0, #0
    fcfa:	bf18      	it	ne
    fcfc:	2001      	movne	r0, #1
    fcfe:	4770      	bx	lr

0000fd00 <k_thread_name_get>:
}
    fd00:	3074      	adds	r0, #116	; 0x74
    fd02:	4770      	bx	lr

0000fd04 <z_impl_k_thread_start>:
{
    fd04:	b508      	push	{r3, lr}
	z_sched_start(thread);
    fd06:	f7fc ffd5 	bl	ccb4 <z_sched_start>
}
    fd0a:	bd08      	pop	{r3, pc}

0000fd0c <z_init_thread_base>:
{
    fd0c:	b410      	push	{r4}
	thread_base->pended_on = NULL;
    fd0e:	2400      	movs	r4, #0
    fd10:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    fd12:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    fd14:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
    fd16:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
    fd18:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    fd1a:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    fd1c:	61c4      	str	r4, [r0, #28]
}
    fd1e:	bc10      	pop	{r4}
    fd20:	4770      	bx	lr

0000fd22 <z_pm_save_idle_exit>:
{
    fd22:	b508      	push	{r3, lr}
	pm_system_resume();
    fd24:	f7f3 fe78 	bl	3a18 <pm_system_resume>
	sys_clock_idle_exit();
    fd28:	f7ff fdbe 	bl	f8a8 <sys_clock_idle_exit>
}
    fd2c:	bd08      	pop	{r3, pc}

0000fd2e <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
    fd2e:	4288      	cmp	r0, r1
    fd30:	da00      	bge.n	fd34 <new_prio_for_inheritance+0x6>
    fd32:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    fd34:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
    fd38:	db01      	blt.n	fd3e <new_prio_for_inheritance+0x10>
    fd3a:	4608      	mov	r0, r1
    fd3c:	4770      	bx	lr
    fd3e:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
    fd42:	4770      	bx	lr

0000fd44 <adjust_owner_prio>:
{
    fd44:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
    fd46:	6880      	ldr	r0, [r0, #8]
    fd48:	f990 300e 	ldrsb.w	r3, [r0, #14]
    fd4c:	428b      	cmp	r3, r1
    fd4e:	d101      	bne.n	fd54 <adjust_owner_prio+0x10>
	return false;
    fd50:	2000      	movs	r0, #0
}
    fd52:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
    fd54:	f7fd f964 	bl	d020 <z_set_prio>
    fd58:	e7fb      	b.n	fd52 <adjust_owner_prio+0xe>

0000fd5a <z_impl_k_mutex_init>:
{
    fd5a:	4603      	mov	r3, r0
	mutex->owner = NULL;
    fd5c:	2000      	movs	r0, #0
    fd5e:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
    fd60:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
    fd62:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    fd64:	605b      	str	r3, [r3, #4]
}
    fd66:	4770      	bx	lr

0000fd68 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    fd68:	b13a      	cbz	r2, fd7a <z_impl_k_sem_init+0x12>
    fd6a:	428a      	cmp	r2, r1
    fd6c:	d308      	bcc.n	fd80 <z_impl_k_sem_init+0x18>
	sem->count = initial_count;
    fd6e:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
    fd70:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
    fd72:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
    fd74:	6040      	str	r0, [r0, #4]
	return 0;
    fd76:	2000      	movs	r0, #0
    fd78:	4770      	bx	lr
		return -EINVAL;
    fd7a:	f06f 0015 	mvn.w	r0, #21
    fd7e:	4770      	bx	lr
    fd80:	f06f 0015 	mvn.w	r0, #21
}
    fd84:	4770      	bx	lr

0000fd86 <thread_active_elsewhere>:
}
    fd86:	2000      	movs	r0, #0
    fd88:	4770      	bx	lr

0000fd8a <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    fd8a:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    fd8e:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    fd92:	4283      	cmp	r3, r0
    fd94:	d001      	beq.n	fd9a <z_sched_prio_cmp+0x10>
		return b2 - b1;
    fd96:	1ac0      	subs	r0, r0, r3
    fd98:	4770      	bx	lr
	return 0;
    fd9a:	2000      	movs	r0, #0
}
    fd9c:	4770      	bx	lr

0000fd9e <z_reschedule_irqlock>:
{
    fd9e:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    fda0:	4603      	mov	r3, r0
    fda2:	b920      	cbnz	r0, fdae <z_reschedule_irqlock+0x10>
    fda4:	f3ef 8205 	mrs	r2, IPSR
    fda8:	b942      	cbnz	r2, fdbc <z_reschedule_irqlock+0x1e>
    fdaa:	2201      	movs	r2, #1
    fdac:	e000      	b.n	fdb0 <z_reschedule_irqlock+0x12>
    fdae:	2200      	movs	r2, #0
	if (resched(key)) {
    fdb0:	b932      	cbnz	r2, fdc0 <z_reschedule_irqlock+0x22>
    fdb2:	f383 8811 	msr	BASEPRI, r3
    fdb6:	f3bf 8f6f 	isb	sy
}
    fdba:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    fdbc:	2200      	movs	r2, #0
    fdbe:	e7f7      	b.n	fdb0 <z_reschedule_irqlock+0x12>
    fdc0:	4618      	mov	r0, r3
    fdc2:	f7f4 fab7 	bl	4334 <arch_swap>
	return ret;
    fdc6:	e7f8      	b.n	fdba <z_reschedule_irqlock+0x1c>

0000fdc8 <z_priq_dumb_best>:
{
    fdc8:	4603      	mov	r3, r0
	return list->head == list;
    fdca:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    fdcc:	4283      	cmp	r3, r0
    fdce:	d000      	beq.n	fdd2 <z_priq_dumb_best+0xa>
}
    fdd0:	4770      	bx	lr
	struct k_thread *thread = NULL;
    fdd2:	2000      	movs	r0, #0
	return thread;
    fdd4:	e7fc      	b.n	fdd0 <z_priq_dumb_best+0x8>

0000fdd6 <init_ready_q>:
	sys_dlist_init(&rq->runq);
    fdd6:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
    fdd8:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
    fdda:	6083      	str	r3, [r0, #8]
}
    fddc:	4770      	bx	lr

0000fdde <remove_timeout>:
{
    fdde:	b510      	push	{r4, lr}
    fde0:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    fde2:	f7fd ff3b 	bl	dc5c <next>
    fde6:	b148      	cbz	r0, fdfc <remove_timeout+0x1e>
    fde8:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    fdea:	6920      	ldr	r0, [r4, #16]
    fdec:	6961      	ldr	r1, [r4, #20]
    fdee:	6913      	ldr	r3, [r2, #16]
    fdf0:	181b      	adds	r3, r3, r0
    fdf2:	6950      	ldr	r0, [r2, #20]
    fdf4:	eb41 0100 	adc.w	r1, r1, r0
    fdf8:	6113      	str	r3, [r2, #16]
    fdfa:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
    fdfc:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    fdfe:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
    fe00:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    fe02:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    fe04:	2300      	movs	r3, #0
    fe06:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    fe08:	6063      	str	r3, [r4, #4]
}
    fe0a:	bd10      	pop	{r4, pc}

0000fe0c <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    fe0c:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    fe0e:	f7fe fa23 	bl	e258 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    fe12:	bd08      	pop	{r3, pc}

0000fe14 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
    fe14:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
    fe16:	f7fe fa1f 	bl	e258 <sys_clock_tick_get>
}
    fe1a:	bd08      	pop	{r3, pc}

0000fe1c <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    fe1c:	b900      	cbnz	r0, fe20 <z_impl_k_busy_wait+0x4>
    fe1e:	4770      	bx	lr
{
    fe20:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    fe22:	f7f5 fd27 	bl	5874 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    fe26:	bd08      	pop	{r3, pc}

0000fe28 <k_timer_init>:
	timer->expiry_fn = expiry_fn;
    fe28:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
    fe2a:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
    fe2c:	2300      	movs	r3, #0
    fe2e:	6303      	str	r3, [r0, #48]	; 0x30
	sys_dlist_init(&w->waitq);
    fe30:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
    fe34:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
    fe36:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
    fe38:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
    fe3a:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
    fe3c:	6343      	str	r3, [r0, #52]	; 0x34
}
    fe3e:	4770      	bx	lr

0000fe40 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    fe40:	b510      	push	{r4, lr}
    fe42:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
    fe44:	f7fe f82c 	bl	dea0 <z_abort_timeout>

	if (inactive) {
    fe48:	b9a0      	cbnz	r0, fe74 <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
    fe4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fe4c:	b10b      	cbz	r3, fe52 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    fe4e:	4620      	mov	r0, r4
    fe50:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    fe52:	f104 0018 	add.w	r0, r4, #24
    fe56:	f7fd faef 	bl	d438 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    fe5a:	b158      	cbz	r0, fe74 <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
    fe5c:	f7fc fed4 	bl	cc08 <z_ready_thread>
	__asm__ volatile(
    fe60:	f04f 0320 	mov.w	r3, #32
    fe64:	f3ef 8011 	mrs	r0, BASEPRI
    fe68:	f383 8812 	msr	BASEPRI_MAX, r3
    fe6c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    fe70:	f7ff ff95 	bl	fd9e <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
    fe74:	bd10      	pop	{r4, pc}

0000fe76 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    fe76:	4770      	bx	lr
